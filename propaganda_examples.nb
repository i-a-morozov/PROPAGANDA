(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2686282,      53731]
NotebookOptionsPosition[   2603492,      52437]
NotebookOutlinePosition[   2603916,      52454]
CellTagsIndexPosition[   2603873,      52451]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"PROPAGANDA", " ", "EXAMPLES"}], ",", " ", 
    RowBox[{"2017", "-", "2020"}], ",", " ", 
    RowBox[{"I", ".", "A", ".", 
     RowBox[{"MOROZOV", "@", "INP"}], ".", "NSK", ".", "SU"}]}], " ", "*)"}], 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##"}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Collection", " ", "of", " ", "examples", " ", "for", " ", "PROPAGANDA", 
    " ", "code", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"nonlinear", " ", "single", " ", "particle", " ", "dynamics"}], 
      ",", " ", "tracking", ",", " ", 
      RowBox[{"FORTRAN", " ", "code", " ", "generation"}], ",", " ", 
      RowBox[{"explicit", " ", "dynamics", " ", "of", " ", "derivatives"}]}], 
     ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"WM", ",", " ", 
    RowBox[{
     RowBox[{"version", " ", "12"}], "+", " ", 
     RowBox[{"is", " ", "required"}]}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "PROPAGANDA", " ", "source", " ", "code", " ", "is", " ", "located", " ", 
    RowBox[{"in", " ", "'"}], 
    RowBox[{"SRC_PROPAGANDE", ".", 
     RowBox[{"WL", "'"}]}], " ", "file"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "In", " ", "examples", " ", "source", " ", "code", " ", "is", " ", 
     "loaded", " ", "using", " ", "environment", " ", "variable", " ", 
     "WM_PROPAGANDA"}], ",", " ", 
    RowBox[{"which", " ", "points", " ", 
     RowBox[{"to", " ", "'"}], 
     RowBox[{"SRC_PROPAGANDA", ".", 
      RowBox[{"WL", "'"}]}], " ", "file", " ", "location"}]}], " ", "*)"}], 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Alternatively", ",", " ", 
    RowBox[{"replace", " ", 
     RowBox[{"Get", "[", 
      RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
     "with", " ", 
     RowBox[{
     "Get", "[", "\"\<<PATH_TO_SRC_PROPAGANDA>/SRC_PROPAGANDA.WL\>\"", "]"}], 
     " ", "or", " ", 
     RowBox[{"copy", " ", "'"}], 
     RowBox[{"SRC_PROPAGANDA", ".", 
      RowBox[{"WL", "'"}]}], " ", "content", " ", "to", " ", "notebook", " ", 
     "and", " ", "evaluate", " ", "the", " ", "code"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "Compiled", " ", "functions", " ", "are", " ", "used", " ", "throughout",
       " ", "examples", " ", "with", " ", "CompilationTarget"}], " ", "->", 
     " ", "\"\<C\>\""}], ",", " ", 
    RowBox[{
     RowBox[{"replace", " ", "with", " ", "CompilationTarget"}], " ", 
     "\[Rule]", " ", 
     RowBox[{
     "\"\<WVM\>\"", " ", "if", " ", "no", " ", "C", " ", "compiler", " ", 
      "is", " ", "available"}]}]}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"EXAMPLE", "-", 
     RowBox[{
      RowBox[{"00", " ", "--"}], " ", "Initialization"}]}], ",", " ", 
    RowBox[{"global", " ", "variables"}], ",", " ", 
    RowBox[{"rules", " ", "and", " ", "functions"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"01", " ", "--"}], " ", "Dynamics", " ", "of", " ", 
     "derivatives", " ", "for", " ", "vector", " ", "fields", " ", "and", " ",
      "maps"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"EXAMPLE", "-", 
     RowBox[{
      RowBox[{"02", " ", "--"}], " ", "Generation", " ", "of", " ", "initial",
       " ", "conditions"}]}], ",", " ", 
    RowBox[{"components", " ", "and", " ", "state"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"03", " ", "--"}], " ", 
     RowBox[{"(", "I$NDSOLVE", ")"}], " ", "Basic", " ", "tutorial"}]}], " ", 
   "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"04", " ", "--"}], " ", 
     RowBox[{"(", "I$NDSOLVE", ")"}], " ", "Application", " ", "examples"}]}],
    " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"05", " ", "--"}], " ", 
     RowBox[{"(", "I$NDSOLVE", ")"}], " ", "FODO", " ", "cell"}]}], " ", 
   "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"EXAMPLE", "-", 
     RowBox[{
      RowBox[{"06", " ", "--"}], " ", "Maps"}]}], ",", " ", 
    RowBox[{"sequences", " ", "and", " ", "elements"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"07", " ", "--"}], " ", "Code", " ", "generation"}]}], " ", 
   "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"08", " ", "--"}], " ", 
     RowBox[{"(", "COMPILE", ")"}], " ", "Elements"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"EXAMPLE", "-", 
     RowBox[{
      RowBox[{"09", " ", "--"}], " ", 
      RowBox[{"(", "COMPILE", ")"}], " ", "FODO", " ", "ring", " ", 
      "tracking"}]}], ",", " ", "modulation"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"10", " ", "--"}], " ", 
     RowBox[{"(", "COMPILE", ")"}], " ", "FODO", " ", "ring", " ", "with", 
     " ", "chromatic", " ", "effects"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"11", " ", "--"}], " ", 
     RowBox[{"(", "COMPILE", ")"}], " ", "FODO", " ", "ring", " ", 
     "nonlinear", " ", "Taylor", " ", "map"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"12", " ", "--"}], " ", 
     RowBox[{"(", "FORTRAN", ")"}], " ", "Elements"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"13", " ", "--"}], " ", 
     RowBox[{"(", "FORTRAN", ")"}], " ", "Lattice", " ", "and", " ", 
     "library"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"14", " ", "--"}], " ", 
     RowBox[{"(", "FORTRAN", ")"}], " ", "Standalone", " ", "program"}]}], 
   " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"15", " ", "--"}], " ", 
     RowBox[{"(", "FORTRAN", ")"}], " ", "State", " ", "extension"}]}], " ", 
   "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"16", " ", "--"}], " ", 
     RowBox[{"(", "FORTRAN", ")"}], " ", "Adaptive", " ", "integration", " ", 
     "mode"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"17", " ", "--"}], " ", "Tracking", " ", "comparison"}]}], " ", 
   "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"18", " ", "--"}], " ", 
     RowBox[{"(", "FORTRAN", ")"}], " ", "FODO", " ", "ring", " ", 
     "chromatic", " ", "optics"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"19", " ", "--"}], " ", 
     RowBox[{"(", "FORTRAN", ")"}], " ", "FODO", " ", "ring", " ", "tune", 
     " ", "and", " ", "chromaticity", " ", "correction"}]}], " ", "*)"}], 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"20", " ", "--"}], " ", 
     RowBox[{"(", "FORTRAN", ")"}], " ", "FODO", " ", "ring", " ", 
     "nonlinear", " ", "Taylor", " ", "map"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"EXAMPLE", "-", 
    RowBox[{
     RowBox[{"21", " ", "--"}], " ", 
     RowBox[{"(", "FORTRAN", ")"}], " ", "FODO", " ", "ring", " ", "dynamic", 
     " ", "aperture"}]}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"04", "_", "10", "_", "2020"}], " ", "*)"}]}]], "Code",ExpressionUU\
ID->"ec363e5e-298f-4d6b-bc64-cc6a8c1844a5"],

Cell[CellGroupData[{

Cell["\<\
(+) EXAMPLE-00: Initialization, global variables, rules and functions\
\>", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"7682ddf9-3b64-4069-9afc-86e9d0568e70"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[1]:=",ExpressionUUID->"806f6468-5a8d-4f7c-ac92-e5f3911fc2a2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Session", " ", "initialization", " ", "is", " ", "performed", " ", "with",
     " ", 
    RowBox[{"I$INTEGRATOR", "[", "]"}], " ", "function"}], " ", "*)"}], "\n", 
  
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "This", " ", "function", " ", "sets", " ", "global", " ", "variables"}], 
    ",", " ", 
    RowBox[{
    "replacement", " ", "rules", " ", "and", " ", "some", " ", 
     "functions"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Returns", " ", "input", " ", "augument"}], ",", " ", 
    RowBox[{"intergator", " ", "signature"}]}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", "\n", "\t", 
   RowBox[{"\"\<PROJECT\>\"", ",", "           ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"--", " ", "create"}], "/", "set"}], " ", "working", " ", 
      "directory", " ", 
      RowBox[{"(", "string", ")"}]}], " ", "*)"}], "\n", "\t", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "           ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"--", " ", "configuration"}], " ", "space", " ", "dimension", 
       " ", 
       RowBox[{"(", "integer", ")"}]}], ",", " ", 
      RowBox[{
      "hafl", " ", "of", " ", "phase", " ", "space", " ", "dimension"}]}], 
     " ", "*)"}], "\n", "\t", "1", ",", "                   ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "canonical"}], " ", "computation", " ", "order", " ", 
      RowBox[{"(", 
       RowBox[{"total", " ", "canonical", " ", "monomial", " ", "degree"}], 
       ")"}], " ", "of", " ", "derivatives", " ", 
      RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "           ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "total"}], " ", "number", " ", "of", " ", 
      "parameter", " ", "variables", " ", 
      RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "           ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "parametric"}], " ", "computation", " ", "order", 
      " ", 
      RowBox[{"(", 
       RowBox[{"total", " ", "parametric", " ", "monomial", " ", "order"}], 
       ")"}], " ", "of", " ", "derivatives", " ", 
      RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", 
    RowBox[{"List", "[", 
     RowBox[{"1", ",", "1"}], "]"}]}], "            ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "list"}], " ", "of", " ", "individual", " ", "orders",
      " ", "for", " ", "each", " ", "parameter", " ", 
     RowBox[{"(", 
      RowBox[{
      "list", " ", "of", " ", "integers", " ", "for", " ", "each", " ", 
       "parameter", " ", "or", " ", "empty", " ", "list"}], ")"}]}], " ", 
    "*)"}], "\n", "]"}]}]], "Code",
 CellLabel->"In[2]:=",ExpressionUUID->"7a2f0248-1696-4a14-a53c-768747096ffe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "2", ",", "1", ",", "2", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"e81652bc-50c1-438b-bc26-ee5052c856b4"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Truncation", " ", "is", " ", "performed", " ", "for", " ", "deviation", 
    " ", "monomial", " ", 
    RowBox[{"(", 
     RowBox[{
     "canonical", " ", "variables", " ", "and", " ", "parameters", " ", 
      "with", " ", "nonzero", " ", "individual", " ", "orders"}], ")"}]}], 
   " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Deviation", " ", "monomial", " ", "has", " ", "the", " ", "following", 
     " ", 
     RowBox[{"form", ":", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           SuperscriptBox[
            SubscriptBox["q", "1"], 
            SubscriptBox["a", "1"]], " ", 
           SuperscriptBox[
            SubscriptBox["p", "1"], 
            SubscriptBox["b", "1"]]}], " ", "..."}], " ", 
         SuperscriptBox[
          SubscriptBox["q", "n"], 
          SubscriptBox["a", "n"]], " ", 
         SuperscriptBox[
          SubscriptBox["p", "n"], 
          SubscriptBox["b", "n"]], " ", 
         SuperscriptBox[
          SubscriptBox["k", "1"], 
          SubscriptBox["w", "1"]]}], " ", "..."}], " ", 
       SuperscriptBox[
        SubscriptBox["k", "m"], 
        SubscriptBox["w", "m"]]}]}]}], ",", " ", 
    RowBox[{"where", " ", 
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["q", "i"], ",", 
       SubscriptBox["p", "i"]}], ")"}], " ", "are", " ", "canonical", " ", 
     "variables", " ", "and", " ", 
     SubscriptBox["k", "i"], " ", "are", " ", "parameters"}]}], " ", "*)"}], 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
       "Truncation", " ", "of", " ", "canonical", " ", "space", " ", "is", 
        " ", "defined", " ", "by", " ", 
        SubscriptBox["a", "1"]}], " ", "+", " ", 
       SubscriptBox["b", "1"], " ", "+"}], " ", "..."}], " ", "+", " ", 
     SubscriptBox["a", "n"], " ", "+", " ", 
     SubscriptBox["b", "n"]}], " ", "\[LessEqual]", " ", 
    RowBox[{"N", " ", 
     RowBox[{"(", 
      RowBox[{"N", " ", "=", " ", "1"}], ")"}]}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
        "Truncation", " ", "of", " ", "parameters", " ", "is", " ", "defined",
          " ", "by", " ", 
         SubscriptBox["w", "1"]}], " ", "+"}], " ", "..."}], " ", "+", " ", 
      SubscriptBox["w", "m"]}], " ", "\[LessEqual]", " ", "M"}], ",", " ", 
    RowBox[{
     RowBox[{
      SubscriptBox["w", "i"], " ", "\[LessEqual]", " ", 
      RowBox[{
       SubscriptBox["W", "i"], " ", "and", " ", 
       SubscriptBox["W", "i"]}]}], " ", "=", " ", 
     RowBox[{
      RowBox[{"M", " ", "if", " ", 
       SubscriptBox["W", "i"]}], " ", ">", " ", 
      RowBox[{"M", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"M", " ", "=", " ", "2"}], ",", " ", 
         RowBox[{
          SubscriptBox["W", "1"], " ", "=", " ", 
          RowBox[{
           SubscriptBox["W", "2"], " ", "=", " ", 
           RowBox[{
           "1", " ", "in", " ", "above", " ", "initialization"}]}]}]}], 
        ")"}]}]}]}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "N", " ", "and", " ", "M", " ", "are", " ", "independent", " ", "by", " ", 
    "defaul"}], " ", "*)"}]}]], "Code",
 CellLabel->"In[3]:=",ExpressionUUID->"ac05aed7-4a07-4215-b4ba-87dbb3fc237d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"I$INTEGRATOR", "[", "]"}], " ", "options", " ", "with", " ", 
    "default", " ", "values"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Options", "[", "I$INTEGRATOR", "]"}], "//", 
   "TableForm"}]}]], "Code",
 CellLabel->"In[4]:=",ExpressionUUID->"e7550752-bcb3-4af3-b664-5c765d5e4eca"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"\<\"FLAG\"\>", "\[Rule]", "W"}]},
     {
      RowBox[{"\<\"PARAMETER\"\>", "\[Rule]", "S"}]},
     {
      RowBox[{"\<\"ORDERING\"\>", "\[Rule]", "\<\"PAIRS\"\>"}]},
     {
      RowBox[{"\<\"QHEAD\"\>", "\[Rule]", "\<\"Q\"\>"}]},
     {
      RowBox[{"\<\"PHEAD\"\>", "\[Rule]", "\<\"P\"\>"}]},
     {
      RowBox[{"\<\"KHEAD\"\>", "\[Rule]", "\<\"K\"\>"}]},
     {
      RowBox[{"\<\"DHEAD\"\>", "\[Rule]", "\<\"D\"\>"}]},
     {
      RowBox[{"\<\"FHEAD\"\>", "\[Rule]", "\<\"F\"\>"}]},
     {
      RowBox[{"\<\"FILTER\"\>", "\[Rule]", "Identity"}]},
     {
      RowBox[{"\<\"TRUNCATION\"\>", "\[Rule]", "\<\"SUM\"\>"}]},
     {
      RowBox[{"\<\"VERBOSE\"\>", "\[Rule]", "False"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[4]//TableForm=",ExpressionUUID->"63baa35a-f3ff-4799-a43c-4e4c46261c12"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"FLAG", "        ", "--"}], " ", "survival", " ", "aperture", " ",
     "flag", " ", 
    RowBox[{"(", "symbol", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"PARAMETER", "   ", "--"}], " ", "formal", " ", "integration", 
    " ", "parameters", " ", 
    RowBox[{"(", "symbol", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"ORDERING", "    ", "--"}], " ", "canonical", " ", "coordinates", 
    " ", "ordering", " ", 
    RowBox[{"(", 
     RowBox[{"\"\<PAIR\>\"", " ", "or", " ", "\"\<SECTORS\>\""}], ")"}]}], 
   " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"?", 
    RowBox[{
     RowBox[{"HEAD", "       ", "--"}], " ", "head", " ", "to", " ", "use", 
     " ", "for", " ", "X", " ", "variables", " ", 
     RowBox[{"(", "string", ")"}]}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"FILTER", "      ", "--"}], " ", "components", " ", "filter", 
     " ", "function", " ", 
     RowBox[{"(", "function", ")"}]}], ",", "  ", 
    RowBox[{"acts", " ", "on", " ", "I$COMPONENTS"}], ",", " ", 
    RowBox[{
    "can", " ", "be", " ", "used", " ", "to", " ", "filter", " ", "deviation",
      " ", "variables"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"TRUNCATION", "  ", "--"}], " ", "truncation", " ", "type", " ", 
     
     RowBox[{"(", 
      RowBox[{"\"\<SUM\>\"", " ", "or", " ", "\"\<MAX\>\""}], ")"}]}], ",", 
    " ", 
    RowBox[{
    "\"\<SUM\>\"", " ", "combines", " ", "canonical", " ", "and", " ", 
     "parametric", " ", "orders"}], ",", " ", 
    RowBox[{"\"\<MAX\>\"", " ", "uses", " ", "their", " ", "maximum"}]}], " ",
    "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"VERBOSE", "     ", "--"}], " ", "verbose", " ", "flag", " ", 
     RowBox[{"(", "logical", ")"}]}], ",", " ", 
    RowBox[{"print", " ", "info"}]}], " ", "*)"}]}]], "Code",
 CellLabel->"In[5]:=",ExpressionUUID->"f33cde8e-f0a7-4b17-bed4-2f540efc8bb4"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"Execution", " ", "of", " ", 
    RowBox[{"I$INTEGRATOR", "[", "]"}], " ", "defines", " ", "global", " ", 
    "variables"}], ",", " ", 
   RowBox[{"replacement", " ", "rules", " ", "and", " ", "fuctions"}]}], " ", 
  "*)"}]], "Code",
 CellLabel->
  "In[161]:=",ExpressionUUID->"95390b7c-d590-4090-a2f4-8e0855d66394"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$SIGNATURE", "                         ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "integrator"}], " ", "signature", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"list", " ", "of", " ", "input", " ", "for", " ", 
       RowBox[{"I$INTEGRATOR", "[", "]"}]}], ",", " ", 
      RowBox[{
       RowBox[{"I$INTEGRATOR", "[", "]"}], " ", "also", " ", "returns", " ", 
       RowBox[{"it", "'"}], "s", " ", "signature"}]}], ")"}]}], " ", 
   "*)"}]}]], "Code",
 CellLabel->"In[6]:=",ExpressionUUID->"7a3d21f8-d0dd-4186-a542-8634c3d9296b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "2", ",", "1", ",", "2", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[6]=",ExpressionUUID->"12030f60-e686-4e55-9221-866115f8299a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$FLAG", "                              ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "survival"}], " ", "flag", " ", 
    RowBox[{"(", "symbol", ")"}]}], " ", "*)"}]}]], "Code",
 CellLabel->"In[7]:=",ExpressionUUID->"aa8b6bae-fb8d-4ace-9ccf-dbf706919153"],

Cell[BoxData["W"], "Output",
 CellLabel->"Out[7]=",ExpressionUUID->"53d252a9-8eb1-4901-8055-c6732283ad56"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$PARAMETER", "                         ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "integration"}], " ", "parameter", " ", 
    RowBox[{"(", "symbol", ")"}]}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[164]:=",ExpressionUUID->"59c17f66-3826-4cb8-84af-675d6ab0110e"],

Cell[BoxData["S"], "Output",
 CellLabel->
  "Out[164]=",ExpressionUUID->"3e1b6402-d6b8-441f-a3bb-384ba17527de"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$ORDERING", "                          ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "canonical"}], " ", "coordinates", " ", "ordering", 
    " ", 
    RowBox[{"(", "string", ")"}]}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[165]:=",ExpressionUUID->"e8ff35aa-1adb-4d22-885e-80e1887eb5f4"],

Cell[BoxData["\<\"PAIRS\"\>"], "Output",
 CellLabel->
  "Out[165]=",ExpressionUUID->"39f88df8-70cc-4f49-b5a0-0904d3e04e4b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$Q$HEAD", "                            ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"--", " ", "head"}], " ", "of", " ", "canonical", " ", "Q"}], 
    "-", 
    RowBox[{"coordinates", " ", 
     RowBox[{"(", "string", ")"}]}]}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[166]:=",ExpressionUUID->"3151588a-0439-4275-abc2-2ab931caed71"],

Cell[BoxData["\<\"Q\"\>"], "Output",
 CellLabel->
  "Out[166]=",ExpressionUUID->"52ab56f3-9ee7-49c0-9914-de4adeb3bc1f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$P$HEAD", "                            ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"--", " ", "head"}], " ", "of", " ", "canonical", " ", "P"}], 
    "-", 
    RowBox[{"coordinates", " ", 
     RowBox[{"(", "string", ")"}]}]}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[167]:=",ExpressionUUID->"8bf30429-ca35-4afd-88ad-825c374d6340"],

Cell[BoxData["\<\"P\"\>"], "Output",
 CellLabel->
  "Out[167]=",ExpressionUUID->"6e0273ed-da3e-4c60-8eeb-5d07dc43ed5a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$K$HEAD", "                            ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "head"}], " ", "of", " ", "parameters", " ", 
    RowBox[{"(", "string", ")"}]}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[168]:=",ExpressionUUID->"bee7f8eb-d554-4ad5-98ee-be06079c2daa"],

Cell[BoxData["\<\"K\"\>"], "Output",
 CellLabel->
  "Out[168]=",ExpressionUUID->"859ac813-5d13-4f5c-a355-10286fd96215"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$D$HEAD", "                            ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "head"}], " ", "of", " ", "derivative", " ", 
    "variables", " ", 
    RowBox[{"(", "string", ")"}]}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[169]:=",ExpressionUUID->"ef1b25cc-c67a-4f13-9ffd-2e14c629546f"],

Cell[BoxData["\<\"D\"\>"], "Output",
 CellLabel->
  "Out[169]=",ExpressionUUID->"f8076d9f-4b76-435f-8288-a9fd1a6886b3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$F$HEAD", "                            ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"--", " ", "head"}], " ", "of", " ", "parameter", " ", "flags", 
     " ", 
     RowBox[{"(", "string", ")"}]}], ",", " ", 
    RowBox[{
    "parameter", " ", "flags", " ", "act", " ", "like", " ", "markers", " ", 
     "for", " ", "parameter", " ", 
     RowBox[{"(", "knob", ")"}], " ", "variables"}]}], " ", "*)"}]}]], "Code",\

 CellLabel->
  "In[170]:=",ExpressionUUID->"96426616-4817-4105-902f-9b42d36605d1"],

Cell[BoxData["\<\"F\"\>"], "Output",
 CellLabel->
  "Out[170]=",ExpressionUUID->"8d75bf10-47b7-41a4-8c29-44b187025b74"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$DIMENSION", "                         ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "configuration"}], " ", "space", " ", "dimension", " ", 
    RowBox[{"(", "integer", ")"}]}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[171]:=",ExpressionUUID->"14b1c00f-d886-4690-ad19-85011e6a14d4"],

Cell[BoxData["2"], "Output",
 CellLabel->
  "Out[171]=",ExpressionUUID->"91e34779-88d5-446c-909c-1bcacc8102ed"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$DIMENSION$CANONICAL", "               ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "canonical"}], " ", "space", " ", "dimension", " ", 
    RowBox[{"(", "integer", ")"}]}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[172]:=",ExpressionUUID->"1ec30025-16a1-42ca-9ed8-e36697aa376d"],

Cell[BoxData["4"], "Output",
 CellLabel->
  "Out[172]=",ExpressionUUID->"292803b5-0eb1-4aec-b107-f40caaa0c6a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$VARIABLES$CANONICAL", "               ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "list"}], " ", "of", " ", "canonical", " ", 
    "variables", " ", 
    RowBox[{"(", 
     RowBox[{"list", " ", "of", " ", "symbols"}], ")"}]}], " ", 
   "*)"}]}]], "Code",
 CellLabel->
  "In[173]:=",ExpressionUUID->"8af52f23-947a-45b2-b789-962ba76fbdae"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Q1", ",", "P1", ",", "Q2", ",", "P2"}], "}"}]], "Output",
 CellLabel->
  "Out[173]=",ExpressionUUID->"9537f0d8-5784-49c5-94b6-cc9ac7214599"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$VARIABLES$CANONICAL$Q", "             ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"--", " ", "canonical"}], " ", "Q"}], "-", 
    RowBox[{"coordinates", " ", 
     RowBox[{"(", 
      RowBox[{"list", " ", "of", " ", "symbols"}], ")"}]}]}], " ", 
   "*)"}]}]], "Code",
 CellLabel->
  "In[174]:=",ExpressionUUID->"5952704c-c50d-484f-a060-dc1b5b222009"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Q1", ",", "Q2"}], "}"}]], "Output",
 CellLabel->
  "Out[174]=",ExpressionUUID->"b9c09bbf-36d2-4781-90de-dfdc79f3c944"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$VARIABLES$CANONICAL$P", "             ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"--", " ", "canonical"}], " ", "P"}], "-", 
    RowBox[{"coordinates", " ", 
     RowBox[{"(", 
      RowBox[{"list", " ", "of", " ", "symbols"}], ")"}]}]}], " ", 
   "*)"}]}]], "Code",
 CellLabel->
  "In[175]:=",ExpressionUUID->"0520b80b-d280-46bb-8f79-f9e3b123b443"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"P1", ",", "P2"}], "}"}]], "Output",
 CellLabel->
  "Out[175]=",ExpressionUUID->"f9c1b769-5182-482e-8028-8ff0c26127b9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$SYMPLECTIC$MATRIX", "                 ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "symplectic"}], " ", "matrix", " ", "for", " ", 
    "given", " ", "canonical", " ", "coordinates", " ", "ordering", " ", 
    RowBox[{"(", "matrix", ")"}]}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[176]:=",ExpressionUUID->"aba54116-e1fa-488a-ab91-12f5f4a75695"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[176]=",ExpressionUUID->"b5a9c02f-2aea-43f7-8cc4-7da74ed1c317"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$DIMENSION$PARAMETRIC", "              ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "parametric"}], " ", "dimension", " ", 
    RowBox[{"(", "integer", ")"}]}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[177]:=",ExpressionUUID->"135528dd-52fa-4f59-8c72-7e0795192b62"],

Cell[BoxData["2"], "Output",
 CellLabel->
  "Out[177]=",ExpressionUUID->"b164258c-bc4b-41c8-8b93-9a556f88a752"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$VARIABLES$PARAMETRIC", "              ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "parametric"}], " ", "variables", " ", 
    RowBox[{"(", 
     RowBox[{"list", " ", "of", " ", "symbols"}], ")"}]}], " ", 
   "*)"}]}]], "Code",
 CellLabel->
  "In[178]:=",ExpressionUUID->"dba47ce5-9ca8-468f-9f26-eb97372fae6b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"K1", ",", "K2"}], "}"}]], "Output",
 CellLabel->
  "Out[178]=",ExpressionUUID->"773c20da-31ca-4d36-ab20-52ef05172e25"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$FLAG$PARAMETRIC", "                   ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "parametric"}], " ", "flags", " ", 
    RowBox[{"(", 
     RowBox[{"list", " ", "of", " ", "symbols"}], ")"}]}], " ", 
   "*)"}]}]], "Code",
 CellLabel->
  "In[179]:=",ExpressionUUID->"ffcdeb88-3ad5-4206-93fe-f258aacc2bbe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"F1", ",", "F2"}], "}"}]], "Output",
 CellLabel->
  "Out[179]=",ExpressionUUID->"ffa9adf1-9976-41af-81fe-4bc02dbe3f45"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$RULE$PARAMETRIC", "//", "Normal", "           ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "flag"}], " ", "rules", " ", 
    RowBox[{"(", 
     RowBox[{"add", " ", "flags", " ", "to", " ", "parameters"}], ")"}], " ", 
    
    RowBox[{"(", "rule", ")"}]}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[180]:=",ExpressionUUID->"e9de8679-0983-4285-93ca-2a5c49d25e10"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"K1", "\[Rule]", 
    RowBox[{"F1", " ", "K1"}]}], ",", 
   RowBox[{"K2", "\[Rule]", 
    RowBox[{"F2", " ", "K2"}]}]}], "}"}]], "Output",
 CellLabel->
  "Out[180]=",ExpressionUUID->"82feba51-d0d6-4f71-a1b2-1651ccc4f728"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$ORDER$LIST", "                        ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "list"}], " ", "of", " ", "orders", " ", "for", " ", 
    "each", " ", "canonical", " ", "coordinate", " ", "and", " ", "each", " ",
     "parameter", " ", 
    RowBox[{"(", 
     RowBox[{"list", " ", "of", " ", "integers"}], ")"}]}], " ", 
   "*)"}]}]], "Code",
 CellLabel->
  "In[181]:=",ExpressionUUID->"b176ce20-7218-445b-99ef-1dc740a36a58"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[181]=",ExpressionUUID->"910e4142-85ee-446b-862e-327b25632608"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$ORDER", "                             ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "maximum"}], " ", "computation", " ", "order", " ", 
    RowBox[{"(", "integer", ")"}]}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[182]:=",ExpressionUUID->"43fabd02-513b-4640-ac58-bcab7791e5b2"],

Cell[BoxData["3"], "Output",
 CellLabel->
  "Out[182]=",ExpressionUUID->"3c92bc92-db9a-4f81-bb26-81c36f49159f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$DIMENSION$DEVIATION", "               ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "number"}], " ", "of", " ", "canonical", " ", 
    "variables", " ", "and", " ", "parameters", " ", "with", " ", "nonzero", 
    " ", "orders", " ", 
    RowBox[{"(", "integer", ")"}]}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[183]:=",ExpressionUUID->"2e7dc2d8-dbee-439a-845b-cae715903b50"],

Cell[BoxData["6"], "Output",
 CellLabel->
  "Out[183]=",ExpressionUUID->"813b1860-d71e-4e58-a53c-6af8ad899391"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$VARIABLES$DEVIATION", "               ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "deviation"}], " ", "variables", " ", 
    RowBox[{"(", 
     RowBox[{
     "canonical", " ", "variables", " ", "and", " ", "parameters", " ", 
      "with", " ", "nonzero", " ", "orders"}], ")"}]}], " ", "*)"}]}]], "Code",\

 CellLabel->
  "In[184]:=",ExpressionUUID->"e96bd4a3-b8bb-4567-9475-29069da6dd5b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Q1", ",", "P1", ",", "Q2", ",", "P2", ",", "K1", ",", "K2"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[184]=",ExpressionUUID->"7c83a58c-3e27-4ee4-8599-5da334b89797"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"I$COMPONENTS", "//", "Short"}], "                 ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "list"}], " ", "of", " ", "derivative", " ", "indexes",
     " ", 
    RowBox[{"(", 
     RowBox[{
     "derivatives", " ", "of", " ", "canonical", " ", "variables", " ", 
      "with", " ", "respect", " ", "to", " ", "deviation", " ", "variables"}],
      ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
      "}"}], " ", "--"}], " ", "D", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"Q1", "[", 
       RowBox[{"Q1", ",", "P1", ",", "Q2", ",", "P2", ",", "K1", ",", "K2"}], 
       "]"}], ")"}], "/", "D"}], 
    RowBox[{"(", 
     RowBox[{"Q1", "^", "1"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "2", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
      "}"}], " ", "--"}], " ", "D", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"P1", "[", 
       RowBox[{"Q1", ",", "P1", ",", "Q2", ",", "P2", ",", "K1", ",", "K2"}], 
       "]"}], ")"}], "/", "D"}], 
    RowBox[{"(", 
     RowBox[{"Q1", "^", "1"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "3", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
      "}"}], " ", "--"}], " ", "D", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"Q2", "[", 
       RowBox[{"Q1", ",", "P1", ",", "Q2", ",", "P2", ",", "K1", ",", "K2"}], 
       "]"}], ")"}], "/", "D"}], 
    RowBox[{"(", 
     RowBox[{"Q1", "^", "1"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "3", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1"}], 
      "}"}], " ", "--"}], " ", "D", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"Q2", "[", 
       RowBox[{"Q1", ",", "P1", ",", "Q2", ",", "P2", ",", "K1", ",", "K2"}], 
       "]"}], ")"}], "/", "D"}], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"P2", "^", "1"}], " ", 
      RowBox[{"K1", "^", "1"}], " ", 
      RowBox[{"K2", "^", "1"}]}], ")"}]}], "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "4", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1"}], 
      "}"}], " ", "--"}], " ", "D", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"P2", "[", 
       RowBox[{"Q1", ",", "P1", ",", "Q2", ",", "P2", ",", "K1", ",", "K2"}], 
       "]"}], ")"}], "/", "D"}], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"P2", "^", "1"}], " ", 
      RowBox[{"K1", "^", "1"}], " ", 
      RowBox[{"K2", "^", "1"}]}], ")"}]}], "*)"}]}]}], "Code",
 CellLabel->
  "In[185]:=",ExpressionUUID->"f153b791-6020-450b-82e7-3ae7425c077a"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}],
     ",", 
    RowBox[{"{", 
     RowBox[{
     "2", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}],
     ",", 
    RowBox[{"{", 
     RowBox[{
     "3", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}],
     ",", 
    RowBox[{"\[LeftSkeleton]", "71", "\[RightSkeleton]"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "3", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1"}], "}"}],
     ",", 
    RowBox[{"{", 
     RowBox[{
     "4", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1"}], 
     "}"}]}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[185]//Short=",ExpressionUUID->"51a863e4-9dff-44d2-831f-1001b7c3a2ba"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"I$COMPONENTS$LENGTH", "                 ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "number"}], " ", "of", " ", "components", " ", "in", 
    " ", "each", " ", "order", " ", 
    RowBox[{"(", 
     RowBox[{"list", " ", "of", " ", "integers"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"24", " ", "--"}], " ", 
     RowBox[{"Q1", "^", "A"}], " ", 
     RowBox[{"P1", "^", "B"}], " ", 
     RowBox[{"Q2", "^", "C"}], " ", 
     RowBox[{"P2", "^", "D"}], " ", 
     RowBox[{"K1", "^", "E"}], " ", 
     RowBox[{"K2", "^", "F"}]}], ",", " ", 
    RowBox[{
     RowBox[{
     "A", " ", "+", " ", "B", " ", "+", " ", "C", " ", "+", " ", "D", " ", 
      "+", " ", "E", " ", "+", " ", "F"}], " ", "=", " ", "1"}]}], " ", 
   "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"36", " ", "--"}], " ", 
     RowBox[{"Q1", "^", "A"}], " ", 
     RowBox[{"P1", "^", "B"}], " ", 
     RowBox[{"Q2", "^", "C"}], " ", 
     RowBox[{"P2", "^", "D"}], " ", 
     RowBox[{"K1", "^", "E"}], " ", 
     RowBox[{"K2", "^", "F"}]}], ",", " ", 
    RowBox[{
     RowBox[{
     "A", " ", "+", " ", "B", " ", "+", " ", "C", " ", "+", " ", "D", " ", 
      "+", " ", "E", " ", "+", " ", "F"}], " ", "=", " ", "2"}]}], " ", 
   "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"16", " ", "--"}], " ", 
     RowBox[{"Q1", "^", "A"}], " ", 
     RowBox[{"P1", "^", "B"}], " ", 
     RowBox[{"Q2", "^", "C"}], " ", 
     RowBox[{"P2", "^", "D"}], " ", 
     RowBox[{"K1", "^", "E"}], " ", 
     RowBox[{"K2", "^", "F"}]}], ",", " ", 
    RowBox[{
     RowBox[{
     "A", " ", "+", " ", "B", " ", "+", " ", "C", " ", "+", " ", "D", " ", 
      "+", " ", "E", " ", "+", " ", "F"}], " ", "=", " ", "3"}]}], " ", 
   "*)"}]}]}], "Code",
 CellLabel->
  "In[186]:=",ExpressionUUID->"f113c635-1f6a-4d1a-9191-1cd0944a281f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"24", ",", "36", ",", "16"}], "}"}]], "Output",
 CellLabel->
  "Out[186]=",ExpressionUUID->"7b45e491-672a-475a-a5bf-bff05bb29008"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"I$VARIABLES$DERIVATIVE", "//", "Short"}], "       ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "list"}], " ", "of", " ", "derivative", " ", 
    "variables", " ", 
    RowBox[{"(", 
     RowBox[{"symbolic", " ", "form", " ", "of", " ", "I$COMPONENTS"}], 
     ")"}]}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"D$X$A$B$", "..."}], " ", "--"}], " ", "derivative", " ", "of", 
     " ", "X", " ", "component", " ", "with", " ", "respect", " ", "to", " ", 
     "1", "st", " ", "deviation", " ", 
     RowBox[{"variable", " ", "'"}], 
     RowBox[{"A", "'"}], " ", "times"}], ",", " ", 
    RowBox[{"2", "nd", " ", "deviation", " ", 
     RowBox[{"variable", " ", "'"}], 
     RowBox[{"B", "'"}], " ", "times"}], ",", " ", "..."}], "  ", 
   "*)"}]}]}], "Code",
 CellLabel->
  "In[187]:=",ExpressionUUID->"5c76c07d-0556-49e8-a81e-c07bf6f084bc"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
   "D$1$1$0$0$0$0$0", ",", "D$2$1$0$0$0$0$0", ",", "D$3$1$0$0$0$0$0", ",", 
    RowBox[{"\[LeftSkeleton]", "71", "\[RightSkeleton]"}], ",", 
    "D$3$0$0$0$1$1$1", ",", "D$4$0$0$0$1$1$1"}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[187]//Short=",ExpressionUUID->"8f4d8db0-ccab-4d35-b307-af09b7b9b66f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$DIMENSION$DERIVATIVE", "              ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "dimension"}], " ", "of", " ", "derivatives", " ", 
    RowBox[{"(", "integer", ")"}]}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[188]:=",ExpressionUUID->"674f3851-9554-40fb-b5b6-dcc4bfa7de27"],

Cell[BoxData["76"], "Output",
 CellLabel->
  "Out[188]=",ExpressionUUID->"a1ce36b5-9a39-41e1-b6ea-8758167fa7a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"I$RULE$COMPONENTS", "//", "Normal"}], "//", "Short"}], "    ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "rules"}], " ", "used", " ", "by", " ", 
    RowBox[{"I$DEVIVATIVE", "[", "]"}], " ", "function"}], " ", "*)"}], "\n", 
  
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"I$GV", " ", "--"}], " ", "generic", " ", "variable"}], " ", 
   "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"I$GP", " ", "--"}], " ", "gerenic", " ", "parameter"}], " ", 
   "*)"}]}]}], "Code",
 CellLabel->
  "In[189]:=",ExpressionUUID->"1eb3d878-bc8e-4784-8253-69324ddee0d7"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Q1", "\[Rule]", 
     RowBox[{
      RowBox[{"I$GV", "[", "1", "]"}], "[", 
      RowBox[{
       RowBox[{"I$GP", "[", "1", "]"}], ",", 
       RowBox[{"I$GP", "[", "2", "]"}], ",", 
       RowBox[{"I$GP", "[", "3", "]"}], ",", 
       RowBox[{"I$GP", "[", "4", "]"}], ",", 
       RowBox[{"I$GP", "[", "5", "]"}], ",", 
       RowBox[{"I$GP", "[", "6", "]"}]}], "]"}]}], ",", 
    RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], ",", 
    RowBox[{"K2", "\[Rule]", 
     RowBox[{"I$GP", "[", "6", "]"}]}]}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[189]//Short=",ExpressionUUID->"f3adc5d9-b781-4979-94ab-fd52c4ed7db5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"I$RULE$DERIVATIVE", "//", "Normal"}], "//", "Short", "    ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "rules"}], " ", "used", " ", "by", " ", 
    RowBox[{"I$DEVIVATIVE", "[", "]"}], " ", "function"}], " ", 
   "*)"}]}]], "Code",
 CellLabel->
  "In[190]:=",ExpressionUUID->"fa166182-dbc5-42b3-a3c7-20f331d1b819"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{
      SuperscriptBox[
       RowBox[{"I$GV", "[", "1", "]"}], 
       TagBox[
        RowBox[{"(", 
         RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
         ")"}],
        Derivative],
       MultilineFunction->None], "[", 
      RowBox[{
       RowBox[{"I$GP", "[", "1", "]"}], ",", 
       RowBox[{"I$GP", "[", "2", "]"}], ",", 
       RowBox[{"I$GP", "[", "3", "]"}], ",", 
       RowBox[{"I$GP", "[", "4", "]"}], ",", 
       RowBox[{"I$GP", "[", "5", "]"}], ",", 
       RowBox[{"I$GP", "[", "6", "]"}]}], "]"}], "\[Rule]", 
     "D$1$1$0$0$0$0$0"}], ",", 
    RowBox[{"\[LeftSkeleton]", "74", "\[RightSkeleton]"}], ",", 
    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[190]//Short=",ExpressionUUID->"fefb5998-e22a-4af8-864b-d2388c772d96"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$VARIABLES", "//", "Short", "                  ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "state"}], " ", 
    RowBox[{"(", 
     RowBox[{"flag", ",", " ", "parameters", ",", " ", 
      RowBox[{"canonical", " ", "coordinates"}], ",", " ", "derivatives"}], 
     ")"}]}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[191]:=",ExpressionUUID->"8db51cf9-6ff0-412d-8b30-c331d43cc47a"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"W", ",", "K1", ",", "K2", ",", "Q1", ",", "P1", ",", 
    RowBox[{"\[LeftSkeleton]", "74", "\[RightSkeleton]"}], ",", 
    "D$1$0$0$0$1$1$1", ",", "D$2$0$0$0$1$1$1", ",", "D$3$0$0$0$1$1$1", ",", 
    "D$4$0$0$0$1$1$1"}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[191]//Short=",ExpressionUUID->"d0d4099d-cd19-4b0d-b96b-1712a31f4c9a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$DIMENSION$VARIABLES", "               ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "total"}], " ", "number", " ", "of", " ", "state", " ",
     "variables", " ", 
    RowBox[{"(", "integer", ")"}]}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[192]:=",ExpressionUUID->"5ac6424a-1609-432c-83ab-2778aa43d521"],

Cell[BoxData["83"], "Output",
 CellLabel->
  "Out[192]=",ExpressionUUID->"4a645a29-7ce1-4242-a4df-09888a9d9686"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$DSOLVE$VARIABLES", "                  ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", 
     RowBox[{"DSolve", "[", "]"}]}], " ", "variables"}], " ", 
   "*)"}]}]], "Code",
 CellLabel->
  "In[193]:=",ExpressionUUID->"ebbd0254-533f-4352-8151-33eee2c24c72"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Q1", ",", "P1", ",", "Q2", ",", "P2"}], "}"}]], "Output",
 CellLabel->
  "Out[193]=",ExpressionUUID->"77e9c20b-ea73-4e54-9927-39d8031a0aa7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$DSOLVE$PARAMETERS", "                 ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", 
     RowBox[{"DSolve", "[", "]"}]}], " ", "parameters"}], " ", 
   "*)"}]}]], "Code",
 CellLabel->
  "In[194]:=",ExpressionUUID->"9f3c76c7-aebd-4d1d-8bc5-222ee02ed046"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Q1$", ",", "P1$", ",", "Q2$", ",", "P2$"}], "}"}]], "Output",
 CellLabel->
  "Out[194]=",ExpressionUUID->"d6036317-4f79-4a06-bedb-676bbca1981b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$DSOLVE$INITIALS", "                   ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", 
     RowBox[{"DSolve", "[", "]"}]}], " ", "initials"}], " ", "*)"}]}]], "Code",\

 CellLabel->
  "In[195]:=",ExpressionUUID->"4d0d7e48-1380-4a95-9a38-23bdaac27be5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"Q1", "[", "0", "]"}], "\[Equal]", "Q1$"}], ",", 
   RowBox[{
    RowBox[{"P1", "[", "0", "]"}], "\[Equal]", "P1$"}], ",", 
   RowBox[{
    RowBox[{"Q2", "[", "0", "]"}], "\[Equal]", "Q2$"}], ",", 
   RowBox[{
    RowBox[{"P2", "[", "0", "]"}], "\[Equal]", "P2$"}]}], "}"}]], "Output",
 CellLabel->
  "Out[195]=",ExpressionUUID->"8ef02c34-b7eb-435b-8f17-190885154186"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$DSOLVE$RULE", "//", "Normal", "               ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", 
     RowBox[{"DSolve", "[", "]"}]}], " ", "rules"}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[196]:=",ExpressionUUID->"8d1c850e-16f1-4042-ac4c-b586905d293a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Q1$", "\[Rule]", "Q1"}], ",", 
   RowBox[{"P1$", "\[Rule]", "P1"}], ",", 
   RowBox[{"Q2$", "\[Rule]", "Q2"}], ",", 
   RowBox[{"P2$", "\[Rule]", "P2"}]}], "}"}]], "Output",
 CellLabel->
  "Out[196]=",ExpressionUUID->"e46c0db0-f167-47f0-abf0-f857fe00477c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$NDSOLVE$VARIABLES", "//", "Short", "          ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", 
     RowBox[{"NDSolve", "[", "]"}]}], " ", "variables"}], " ", 
   "*)"}]}]], "Code",
 CellLabel->
  "In[197]:=",ExpressionUUID->"e3dde00e-1e7f-4708-a5ea-7129f326138e"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"Q1", ",", "P1", ",", "Q2", ",", "P2", ",", 
    RowBox[{"\[LeftSkeleton]", "72", "\[RightSkeleton]"}], ",", 
    "D$1$0$0$0$1$1$1", ",", "D$2$0$0$0$1$1$1", ",", "D$3$0$0$0$1$1$1", ",", 
    "D$4$0$0$0$1$1$1"}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[197]//Short=",ExpressionUUID->"97e4f4ff-ffc7-4410-8fff-b9880f26d577"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$NDSOLVE$PARAMETERS", "//", "Short", "         ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", 
     RowBox[{"NDSolve", "[", "]"}]}], " ", "parameters"}], " ", 
   "*)"}]}]], "Code",
 CellLabel->
  "In[198]:=",ExpressionUUID->"a70d004c-2b28-4609-8399-1efe459885ad"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"K1", ",", "K2", ",", "Q1$", ",", "P1$", ",", "Q2$", ",", 
    RowBox[{"\[LeftSkeleton]", "73", "\[RightSkeleton]"}], ",", 
    "D$1$0$0$0$1$1$1$", ",", "D$2$0$0$0$1$1$1$", ",", "D$3$0$0$0$1$1$1$", ",",
     "D$4$0$0$0$1$1$1$"}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[198]//Short=",ExpressionUUID->"c60d2701-d427-472d-adb4-17ea16ac0f40"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"I$NDSOLVE$INITIALS", "//", "Short", "           ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", 
     RowBox[{"NDSolve", "[", "]"}]}], " ", "initials"}], " ", 
   "*)"}]}]], "Code",
 CellLabel->
  "In[199]:=",ExpressionUUID->"c487c10f-50d0-492f-9900-19b132a40b88"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"Q1", "[", "0", "]"}], "\[Equal]", "Q1$"}], ",", 
    RowBox[{
     RowBox[{"P1", "[", "0", "]"}], "\[Equal]", "P1$"}], ",", 
    RowBox[{"\[LeftSkeleton]", "77", "\[RightSkeleton]"}], ",", 
    RowBox[{
     RowBox[{"D$4$0$0$0$1$1$1", "[", "0", "]"}], "\[Equal]", 
     "D$4$0$0$0$1$1$1$"}]}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[199]//Short=",ExpressionUUID->"ce255b93-d176-4ac2-a8db-2b7db53bd65d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"I$RULE$STATE", "//", "Normal"}], "//", "Short", "         ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "state"}], " ", "rules", " ", 
    RowBox[{"(", 
     RowBox[{"replace", " ", "variables", " ", "with", " ", "state"}], 
     ")"}]}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[200]:=",ExpressionUUID->"c60bff53-5e62-4e8d-9664-0d59302fae2e"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"W", "\[Rule]", 
     RowBox[{"I$STATE", "[", "1", "]"}]}], ",", 
    RowBox[{"K1", "\[Rule]", 
     RowBox[{"I$STATE", "[", "2", "]"}]}], ",", 
    RowBox[{"\[LeftSkeleton]", "79", "\[RightSkeleton]"}], ",", 
    RowBox[{"D$3$0$0$0$1$1$1", "\[Rule]", 
     RowBox[{"I$STATE", "[", "82", "]"}]}], ",", 
    RowBox[{"D$4$0$0$0$1$1$1", "\[Rule]", 
     RowBox[{"I$STATE", "[", "83", "]"}]}]}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[200]//Short=",ExpressionUUID->"054d4b2c-cf7e-4ea6-9a46-55dd698f4c64"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"I$INTEGRATOR", "[", "]"}], " ", "also", " ", "cleans", " ", 
    "and", " ", "sets", " ", "attributes", " ", "for", " ", "some", " ", 
    "functions", " ", "used", " ", "in", " ", "code", " ", "generation"}], 
   " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Only", " ", "one", " ", "global", " ", "function", " ", "is", " ", 
    "created", " ", "in", " ", 
    RowBox[{"I$INTEGRATOR", "[", "]"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"I$MAKE$FUNCTIONS", "[", "]"}], " ", "--"}], " ", "generates", 
    " ", "fuctions", " ", "from", " ", "list", " ", "of", " ", "derivatives", 
    " ", 
    RowBox[{"(", 
     RowBox[{
     "series", " ", "representation", " ", "of", " ", "each", " ", 
      "canonical", " ", "component", " ", "grouped", " ", "by", " ", 
      "order"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Representaion", " ", "of", " ", "1", "st", " ", "canonical", " ", 
    "component"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"I$MAKE$FUNCTIONS", "[", "I$VARIABLES$DERIVATIVE", "]"}], " ", "//",
      " ", "First"}], " ", "//", " ", "TableForm"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"Q1", "[", 
      RowBox[{"Q1", ",", "P1", ",", "Q2", ",", "P2", ",", "K1", ",", "K2"}], 
      "]"}], "  ", "=", " ", 
     RowBox[{
      RowBox[{"D$1$0$0$0$0$1$0", " ", "K1"}], "+", 
      RowBox[{"D$1$0$0$0$0$0$1", " ", "K2"}], "+", 
      RowBox[{"D$1$0$1$0$0$0$0", " ", "P1"}], "+", 
      RowBox[{"D$1$0$0$0$1$0$0", " ", "P2"}], "+", 
      RowBox[{"D$1$1$0$0$0$0$0", " ", "Q1"}], "+", 
      RowBox[{"D$1$0$0$1$0$0$0", " ", "Q2"}]}]}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"Q1", "[", 
      RowBox[{"Q1", ",", "P1", ",", "Q2", ",", "P2", ",", "K1", ",", "K2"}], 
      "]"}], " ", "+=", " ", 
     RowBox[{
      RowBox[{"D$1$0$0$0$0$1$1", " ", "K1", " ", "K2"}], "+", 
      RowBox[{"D$1$0$1$0$0$1$0", " ", "K1", " ", "P1"}], "+", 
      RowBox[{"D$1$0$1$0$0$0$1", " ", "K2", " ", "P1"}], "+", 
      RowBox[{"D$1$0$0$0$1$1$0", " ", "K1", " ", "P2"}], "+", 
      RowBox[{"D$1$0$0$0$1$0$1", " ", "K2", " ", "P2"}], "+", 
      RowBox[{"D$1$1$0$0$0$1$0", " ", "K1", " ", "Q1"}], "+", 
      RowBox[{"D$1$1$0$0$0$0$1", " ", "K2", " ", "Q1"}], "+", 
      RowBox[{"D$1$0$0$1$0$1$0", " ", "K1", " ", "Q2"}], "+", 
      RowBox[{"D$1$0$0$1$0$0$1", " ", "K2", " ", "Q2"}]}]}], " ", "*)"}], 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"Q1", "[", 
      RowBox[{"Q1", ",", "P1", ",", "Q2", ",", "P2", ",", "K1", ",", "K2"}], 
      "]"}], " ", "+=", " ", 
     RowBox[{
      RowBox[{"D$1$0$1$0$0$1$1", " ", "K1", " ", "K2", " ", "P1"}], "+", 
      RowBox[{"D$1$0$0$0$1$1$1", " ", "K1", " ", "K2", " ", "P2"}], "+", 
      RowBox[{"D$1$1$0$0$0$1$1", " ", "K1", " ", "K2", " ", "Q1"}], "+", 
      RowBox[{"D$1$0$0$1$0$1$1", " ", "K1", " ", "K2", " ", "Q2"}]}]}], " ", 
    "*)"}]}]}]], "Code",
 CellLabel->
  "In[201]:=",ExpressionUUID->"b2f3157b-5e28-4986-b13e-2985f8dcf852"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{
       RowBox[{"D$1$0$0$0$0$1$0", " ", "K1"}], "+", 
       RowBox[{"D$1$0$0$0$0$0$1", " ", "K2"}], "+", 
       RowBox[{"D$1$0$1$0$0$0$0", " ", "P1"}], "+", 
       RowBox[{"D$1$0$0$0$1$0$0", " ", "P2"}], "+", 
       RowBox[{"D$1$1$0$0$0$0$0", " ", "Q1"}], "+", 
       RowBox[{"D$1$0$0$1$0$0$0", " ", "Q2"}]}]},
     {
      RowBox[{
       RowBox[{"D$1$0$0$0$0$1$1", " ", "K1", " ", "K2"}], "+", 
       RowBox[{"D$1$0$1$0$0$1$0", " ", "K1", " ", "P1"}], "+", 
       RowBox[{"D$1$0$1$0$0$0$1", " ", "K2", " ", "P1"}], "+", 
       RowBox[{"D$1$0$0$0$1$1$0", " ", "K1", " ", "P2"}], "+", 
       RowBox[{"D$1$0$0$0$1$0$1", " ", "K2", " ", "P2"}], "+", 
       RowBox[{"D$1$1$0$0$0$1$0", " ", "K1", " ", "Q1"}], "+", 
       RowBox[{"D$1$1$0$0$0$0$1", " ", "K2", " ", "Q1"}], "+", 
       RowBox[{"D$1$0$0$1$0$1$0", " ", "K1", " ", "Q2"}], "+", 
       RowBox[{"D$1$0$0$1$0$0$1", " ", "K2", " ", "Q2"}]}]},
     {
      RowBox[{
       RowBox[{"D$1$0$1$0$0$1$1", " ", "K1", " ", "K2", " ", "P1"}], "+", 
       RowBox[{"D$1$0$0$0$1$1$1", " ", "K1", " ", "K2", " ", "P2"}], "+", 
       RowBox[{"D$1$1$0$0$0$1$1", " ", "K1", " ", "K2", " ", "Q1"}], "+", 
       RowBox[{"D$1$0$0$1$0$1$1", " ", "K1", " ", "K2", " ", "Q2"}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[201]//TableForm=",ExpressionUUID->"6248cc37-f42d-4aa7-891d-\
4f494b7a252e"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
(+) EXAMPLE-01: Dynamics of derivatives for vector fields and maps\
\>", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"c4a0d185-f66d-4b0b-8cd8-2ba7c6f9ed7f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",ExpressionUUID->"298dc53c-80e9-4c2d-be13-4c133d6e7e1c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Initialize", " ", "invegrator"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", "\n", "\t", 
   RowBox[{"\"\<PROJECT\>\"", ",", "           ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"--", " ", "create"}], "/", "set"}], " ", "working", " ", 
      "directory", " ", 
      RowBox[{"(", "string", ")"}]}], " ", "*)"}], "\n", "\t", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "           ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"--", " ", "configuration"}], " ", "space", " ", "dimension", 
       " ", 
       RowBox[{"(", "integer", ")"}]}], ",", " ", 
      RowBox[{
      "hafl", " ", "of", " ", "phase", " ", "space", " ", "dimension"}]}], 
     " ", "*)"}], "\n", "\t", "1", ",", "                   ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "canonical"}], " ", "computation", " ", "order", " ", 
      RowBox[{"(", 
       RowBox[{"total", " ", "canonical", " ", "monomial", " ", "degree"}], 
       ")"}], " ", "of", " ", "derivatives", " ", 
      RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", "0", ",", 
    "                   ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "total"}], " ", "number", " ", "of", " ", 
      "parameter", " ", "variables", " ", 
      RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", "0", ",", 
    "                   ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "parametric"}], " ", "computation", " ", "order", 
      " ", 
      RowBox[{"(", 
       RowBox[{"total", " ", "parametric", " ", "monomial", " ", "order"}], 
       ")"}], " ", "of", " ", "derivatives", " ", 
      RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", 
    RowBox[{"List", "[", "]"}]}], "               ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "list"}], " ", "of", " ", "individual", " ", "orders",
      " ", "for", " ", "each", " ", "parameter", " ", 
     RowBox[{"(", 
      RowBox[{
      "list", " ", "of", " ", "integers", " ", "for", " ", "each", " ", 
       "parameter", " ", "or", " ", "empty", " ", "list"}], ")"}]}], " ", 
    "*)"}], "\n", "]"}]}]], "Code",
 CellLabel->
  "In[270]:=",ExpressionUUID->"321fb970-c13d-4d26-8280-f9caece065b0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "2", ",", "1", ",", "0", ",", "0", ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[270]=",ExpressionUUID->"0cca7974-df9f-4b7d-b547-0eee6b28adea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Dynamics", " ", "of", " ", "derivatives", " ", "can", " ", "be", " ", 
    "generated", " ", "both", " ", "for", " ", "vector", " ", "fields", " ", 
    "and", " ", "maps"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"In", " ", "both", " ", "cases", " ", 
    RowBox[{"I$DERIVATIVE", "[", "]"}], " ", "fuction", " ", "is", " ", 
    "used"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"It", " ", "computes", " ", 
    RowBox[{"(", 
     RowBox[{"explicitly", " ", "using", " ", 
      RowBox[{"D", "[", "]"}], " ", "function"}], ")"}], " ", "derivatives", 
    " ", "of", " ", "vector", " ", "field", " ", "or", " ", "map", " ", "for",
     " ", "each", " ", "I$COMPONENT"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "I$DERIVATIVE", " ", "acts", " ", "on", " ", "lists", " ", "of", " ", 
    "length", " ", "I$DIMENSION$CANONICAL"}], " ", "*)"}], " ", "\n", 
  RowBox[{
   RowBox[{"I$DERIVATIVE", "//", "Options"}], "//", "TableForm"}]}]], "Code",
 CellLabel->
  "In[271]:=",ExpressionUUID->"99ab1653-ed3f-4d88-9799-4b64343ea93b"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"\<\"MAP\"\>", "\[Rule]", "Map"}]},
     {
      RowBox[{"\<\"PROLOG\"\>", "\[Rule]", "Identity"}]},
     {
      RowBox[{"\<\"EPILOG\"\>", "\[Rule]", "Identity"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[271]//TableForm=",ExpressionUUID->"5780d09b-194d-4eb2-a2f1-\
80bf4bb41cc2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"MAP", "     ", "--"}], " ", "map", " ", "function", " ", "to", 
     " ", "use", " ", 
     RowBox[{"(", "function", ")"}]}], ",", " ", 
    RowBox[{
     RowBox[{"Map", "[", "]"}], " ", "or", " ", 
     RowBox[{"ParallelMap", "[", "]"}]}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"PROLOG", "  ", "--"}], " ", 
    RowBox[{"(", "simplification", ")"}], " ", "function", " ", "to", " ", 
    "apply", " ", "on", " ", "entrance"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"EPILOG", "  ", "--"}], " ", 
    RowBox[{"(", "simplification", ")"}], " ", "function", " ", "to", " ", 
    "apply", " ", "on", " ", "exit"}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[272]:=",ExpressionUUID->"6ad99175-aac8-4774-9951-ac662b0142ff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Derivative", " ", "of", " ", "canonical", " ", "variables", " ", 
    RowBox[{"(", 
     RowBox[{"of", " ", "identity", " ", "map"}], ")"}], " ", "is", " ", 
    "just", " ", "derivative", " ", "variables"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$DERIVATIVE", "[", "I$VARIABLES$CANONICAL", "]"}], "//", 
    "Short"}], "\n", 
   RowBox[{"I$VARIABLES$DERIVATIVE", "//", "Short"}]}]}]], "Code",
 CellLabel->
  "In[275]:=",ExpressionUUID->"a4151ed8-d200-417d-b421-109ceb8e5cef"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
   "D$1$1$0$0$0", ",", "D$2$1$0$0$0", ",", "D$3$1$0$0$0", ",", "D$4$1$0$0$0", 
    ",", 
    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}], ",", "D$2$0$0$0$1", 
    ",", "D$3$0$0$0$1", ",", "D$4$0$0$0$1"}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[275]//Short=",ExpressionUUID->"77b00113-201c-4ac1-870a-364f97a04ab0"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
   "D$1$1$0$0$0", ",", "D$2$1$0$0$0", ",", "D$3$1$0$0$0", ",", "D$4$1$0$0$0", 
    ",", 
    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}], ",", "D$2$0$0$0$1", 
    ",", "D$3$0$0$0$1", ",", "D$4$0$0$0$1"}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[276]//Short=",ExpressionUUID->"579c9dc6-cfef-4cf8-9322-ef4478292be7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"For", " ", "vector", " ", "fields", " ", 
    RowBox[{"I$VECTOR$FIELD$DERIVATIVE", "[", "]"}], " ", "should", " ", "be",
     " ", "used"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "It", " ", "returns", " ", "original", " ", "vector", " ", "field", " ", 
     "joined", " ", "with", " ", "vector", " ", "field", " ", "for", " ", 
     "derivatives"}], ",", " ", 
    RowBox[{
    "parameters", " ", "are", " ", "multiplied", " ", "by", " ", "flags"}]}], 
   " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "Hamiltonian", " ", "function"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"H", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"P1", "^", "2"}], " ", "+", " ", 
         RowBox[{"P2", "^", "2"}]}], ")"}]}], " ", "+", " ", 
      RowBox[{"KS", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"1", "/", "3"}], " ", 
          RowBox[{"Q1", "^", "3"}]}], " ", "-", " ", 
         RowBox[{"Q1", " ", 
          RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "correcponding", " ", "vector", " ", "field"}], 
    " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"V", " ", "=", " ", 
     RowBox[{"I$VECTOR$FIELD", "[", "H", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compute", " ", "derivatives"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"V", " ", "=", " ", 
     RowBox[{"I$VECTOR$FIELD$DERIVATIVE", "[", "V", "]"}]}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->
  "In[277]:=",ExpressionUUID->"88299850-d96a-42e4-9345-28f8f9ac8bdb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "First", " ", "I$DIMENSION$CANONICAL", " ", "elements", " ", "correspond", 
    " ", "to", " ", "regular", " ", "dynamics"}], " ", "*)"}], "\n", 
  RowBox[{"Take", "[", 
   RowBox[{"V", ",", " ", 
    RowBox[{"+", "I$DIMENSION$CANONICAL"}]}], "]"}]}]], "Code",
 CellLabel->
  "In[283]:=",ExpressionUUID->"dcb0d4cb-22d1-4f79-8e88-4c42ea362c27"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"P1", ",", 
   RowBox[{
    RowBox[{"-", "KS"}], " ", 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["Q1", "2"], "-", 
      SuperscriptBox["Q2", "2"]}], ")"}]}], ",", "P2", ",", 
   RowBox[{"2", " ", "KS", " ", "Q1", " ", "Q2"}]}], "}"}]], "Output",
 CellLabel->
  "Out[283]=",ExpressionUUID->"b6055521-a9d6-410e-8ba6-a0bc51cb45a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Last", " ", "I$DIMENSION$DERIVATIVE", " ", "elements", " ", "correspond", 
    " ", "to", " ", "derivatives", " ", "dynamics"}], " ", "*)"}], "\n", 
  RowBox[{"Take", "[", 
   RowBox[{"V", ",", " ", 
    RowBox[{"-", "I$DIMENSION$DERIVATIVE"}]}], "]"}]}]], "Code",
 CellLabel->
  "In[284]:=",ExpressionUUID->"613d28c5-ea4d-4e18-a7ce-7083c08f1fbc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"D$2$1$0$0$0", ",", 
   RowBox[{
    RowBox[{"-", "KS"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", " ", "D$1$1$0$0$0", " ", "Q1"}], "-", 
      RowBox[{"2", " ", "D$3$1$0$0$0", " ", "Q2"}]}], ")"}]}], ",", 
   "D$4$1$0$0$0", ",", 
   RowBox[{
    RowBox[{"2", " ", "D$3$1$0$0$0", " ", "KS", " ", "Q1"}], "+", 
    RowBox[{"2", " ", "D$1$1$0$0$0", " ", "KS", " ", "Q2"}]}], ",", 
   "D$2$0$1$0$0", ",", 
   RowBox[{
    RowBox[{"-", "KS"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", " ", "D$1$0$1$0$0", " ", "Q1"}], "-", 
      RowBox[{"2", " ", "D$3$0$1$0$0", " ", "Q2"}]}], ")"}]}], ",", 
   "D$4$0$1$0$0", ",", 
   RowBox[{
    RowBox[{"2", " ", "D$3$0$1$0$0", " ", "KS", " ", "Q1"}], "+", 
    RowBox[{"2", " ", "D$1$0$1$0$0", " ", "KS", " ", "Q2"}]}], ",", 
   "D$2$0$0$1$0", ",", 
   RowBox[{
    RowBox[{"-", "KS"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", " ", "D$1$0$0$1$0", " ", "Q1"}], "-", 
      RowBox[{"2", " ", "D$3$0$0$1$0", " ", "Q2"}]}], ")"}]}], ",", 
   "D$4$0$0$1$0", ",", 
   RowBox[{
    RowBox[{"2", " ", "D$3$0$0$1$0", " ", "KS", " ", "Q1"}], "+", 
    RowBox[{"2", " ", "D$1$0$0$1$0", " ", "KS", " ", "Q2"}]}], ",", 
   "D$2$0$0$0$1", ",", 
   RowBox[{
    RowBox[{"-", "KS"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", " ", "D$1$0$0$0$1", " ", "Q1"}], "-", 
      RowBox[{"2", " ", "D$3$0$0$0$1", " ", "Q2"}]}], ")"}]}], ",", 
   "D$4$0$0$0$1", ",", 
   RowBox[{
    RowBox[{"2", " ", "D$3$0$0$0$1", " ", "KS", " ", "Q1"}], "+", 
    RowBox[{"2", " ", "D$1$0$0$0$1", " ", "KS", " ", "Q2"}]}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[284]=",ExpressionUUID->"d199bfd4-df1d-4f4f-af81-8e5dacb58aa4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Dynamics", " ", "of", " ", "derivatives", " ", "can", " ", "be", " ", 
    "described", " ", "by", " ", "coordinate", " ", "dependent", " ", 
    "matrix"}], " ", "*)"}], "\n", 
  RowBox[{"Row", "[", "\n", "\t", 
   RowBox[{"List", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"MatrixForm", "[", 
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"Take", "[", 
         RowBox[{"V", ",", " ", 
          RowBox[{"-", "I$DIMENSION$DERIVATIVE"}]}], "]"}], ",", 
        RowBox[{"List", "[", "I$VARIABLES$DERIVATIVE", "]"}]}], "]"}], "]"}], 
     ",", "\n", "\t\t", 
     RowBox[{"MatrixForm", "[", "I$VARIABLES$DERIVATIVE", "]"}]}], "\n", "\t",
     "]"}], "\n", "]"}]}]], "Code",
 CellLabel->
  "In[292]:=",ExpressionUUID->"f9ba95e4-e230-4623-89d2-c0bb2f6c5446"],

Cell[BoxData[
 TemplateBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", 
      GridBox[{{
        "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
         "0", "0"}, {
         RowBox[{
           RowBox[{"-", "2"}], " ", "KS", " ", "Q1"}], "0", 
         RowBox[{"2", " ", "KS", " ", "Q2"}], "0", "0", "0", "0", "0", "0", 
         "0", "0", "0", "0", "0", "0", "0"}, {
        "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
         "0", "0"}, {
         RowBox[{"2", " ", "KS", " ", "Q2"}], "0", 
         RowBox[{"2", " ", "KS", " ", "Q1"}], "0", "0", "0", "0", "0", "0", 
         "0", "0", "0", "0", "0", "0", "0"}, {
        "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", 
         "0", "0"}, {"0", "0", "0", "0", 
         RowBox[{
           RowBox[{"-", "2"}], " ", "KS", " ", "Q1"}], "0", 
         RowBox[{"2", " ", "KS", " ", "Q2"}], "0", "0", "0", "0", "0", "0", 
         "0", "0", "0"}, {
        "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", 
         "0", "0"}, {"0", "0", "0", "0", 
         RowBox[{"2", " ", "KS", " ", "Q2"}], "0", 
         RowBox[{"2", " ", "KS", " ", "Q1"}], "0", "0", "0", "0", "0", "0", 
         "0", "0", "0"}, {
        "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", 
         "0", "0"}, {"0", "0", "0", "0", "0", "0", "0", "0", 
         RowBox[{
           RowBox[{"-", "2"}], " ", "KS", " ", "Q1"}], "0", 
         RowBox[{"2", " ", "KS", " ", "Q2"}], "0", "0", "0", "0", "0"}, {
        "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", 
         "0", "0"}, {"0", "0", "0", "0", "0", "0", "0", "0", 
         RowBox[{"2", " ", "KS", " ", "Q2"}], "0", 
         RowBox[{"2", " ", "KS", " ", "Q1"}], "0", "0", "0", "0", "0"}, {
        "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", 
         "0", "0"}, {
        "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
         RowBox[{
           RowBox[{"-", "2"}], " ", "KS", " ", "Q1"}], "0", 
         RowBox[{"2", " ", "KS", " ", "Q2"}], "0"}, {
        "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
         "0", "1"}, {
        "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
         RowBox[{"2", " ", "KS", " ", "Q2"}], "0", 
         RowBox[{"2", " ", "KS", " ", "Q1"}], "0"}}, RowSpacings -> 1, 
       ColumnSpacings -> 1, RowAlignments -> Baseline, ColumnAlignments -> 
       Center], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], 
   TagBox[
    RowBox[{"(", "\[NoBreak]", 
      TagBox[
       GridBox[{{"D$1$1$0$0$0"}, {"D$2$1$0$0$0"}, {"D$3$1$0$0$0"}, {
         "D$4$1$0$0$0"}, {"D$1$0$1$0$0"}, {"D$2$0$1$0$0"}, {"D$3$0$1$0$0"}, {
         "D$4$0$1$0$0"}, {"D$1$0$0$1$0"}, {"D$2$0$0$1$0"}, {"D$3$0$0$1$0"}, {
         "D$4$0$0$1$0"}, {"D$1$0$0$0$1"}, {"D$2$0$0$0$1"}, {"D$3$0$0$0$1"}, {
         "D$4$0$0$0$1"}}, RowSpacings -> 1, ColumnAlignments -> Center, 
        ColumnAlignments -> Left], Column], "\[NoBreak]", ")"}], 
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]},
  "RowDefault"]], "Output",
 CellLabel->
  "Out[292]=",ExpressionUUID->"373f167e-8593-431b-9d3b-a619b6dbeb01"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"For", " ", "maps", " ", 
    RowBox[{"I$MAP$DERIVATIVE", "[", "]"}], " ", "should", " ", "be", " ", 
    "used"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "Hamiltonian", " ", "function"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Since", " ", "this", " ", "Hamiltonian", " ", "function", " ", "is", " ",
      "not", " ", "sovable"}], ",", " ", 
    RowBox[{
     RowBox[{"it", "'"}], "s", " ", "spllited", " ", "into", " ", 
     "integrable", " ", "parts"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"H", " ", "=", " ", 
     RowBox[{"List", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"P1", "^", "2"}], " ", "+", " ", 
          RowBox[{"P2", "^", "2"}]}], ")"}]}], ",", " ", 
       RowBox[{"KS", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"1", "/", "3"}], " ", 
           RowBox[{"Q1", "^", "3"}]}], " ", "-", " ", 
          RowBox[{"Q1", " ", 
           RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Now", " ", 
     RowBox[{"I$DSOLVE", "[", "]"}], " ", "function", " ", "can", " ", "be", 
     " ", "used", " ", "to", " ", "generate", " ", "maps", " ", "for", " ", 
     "each", " ", "part", " ", 
     RowBox[{"(", 
      RowBox[{
      "or", " ", "any", " ", "map", " ", "can", " ", "be", " ", "given", " ", 
       "as", " ", "input"}], ")"}]}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"I$DSOLVE", "[", "]"}], " ", "returns", " ", "canonical", " ", 
     "maps", " ", "for", " ", "each", " ", "Hamiltonian", " ", "function"}], 
    " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"M", " ", "=", " ", 
     RowBox[{"I$DSOLVE", "[", "H", "]"}]}], " ", ";"}], "\n", "M"}]}]], "Code",\

 CellLabel->
  "In[350]:=",ExpressionUUID->"89bbbc89-6695-45f9-acbe-bf1655fe9a40"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Q1", "+", 
      RowBox[{"P1", " ", "S"}]}], ",", "P1", ",", 
     RowBox[{"Q2", "+", 
      RowBox[{"P2", " ", "S"}]}], ",", "P2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"Q1", ",", 
     RowBox[{"P1", "+", 
      RowBox[{"KS", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", 
          SuperscriptBox["Q1", "2"]}], "+", 
         SuperscriptBox["Q2", "2"]}], ")"}], " ", "S"}]}], ",", "Q2", ",", 
     RowBox[{"P2", "+", 
      RowBox[{"2", " ", "KS", " ", "Q1", " ", "Q2", " ", "S"}]}]}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[352]=",ExpressionUUID->"06b89a35-e350-4310-9d26-c34c089f5da5"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compute", " ", "derivatives"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"This", " ", "function", " ", "retuns", " ", "state"}], ",", " ", 
    
    RowBox[{"i", ".", "e", ".", " ", 
     RowBox[{"{", 
      RowBox[{
      "flag", ",", " ", "parameters", ",", " ", "coordinates", ",", " ", 
       "derivatives"}], "}"}]}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"M", " ", "=", " ", 
    RowBox[{"Map", "[", 
     RowBox[{"I$MAP$DERIVATIVE", ",", "M"}], "]"}]}], " ", ";"}]}]], "Code",
 CellLabel->
  "In[353]:=",ExpressionUUID->"4d06a455-ceb0-476f-8b79-8bf5dbac2e08"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Show", " ", "result"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Note", ",", " ", 
    RowBox[{
    "maps", " ", "are", " ", "linear", " ", "with", " ", "respect", " ", "to",
      " ", "devivative", " ", "variables"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"M", " ", "//", " ", "Simplify"}], " ", "//", " ", "Transpose"}], 
   " ", "//", " ", "TableForm"}]}]], "Code",
 CellLabel->
  "In[354]:=",ExpressionUUID->"9dc9c3f9-6b80-4ad2-8da9-fc13e75c4ab6"],

Cell[BoxData[
 TagBox[GridBox[{
    {"W", "W"},
    {
     RowBox[{"Q1", "+", 
      RowBox[{"P1", " ", "S"}]}], "Q1"},
    {"P1", 
     RowBox[{"P1", "+", 
      RowBox[{"KS", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", 
          SuperscriptBox["Q1", "2"]}], "+", 
         SuperscriptBox["Q2", "2"]}], ")"}], " ", "S"}]}]},
    {
     RowBox[{"Q2", "+", 
      RowBox[{"P2", " ", "S"}]}], "Q2"},
    {"P2", 
     RowBox[{"P2", "+", 
      RowBox[{"2", " ", "KS", " ", "Q1", " ", "Q2", " ", "S"}]}]},
    {
     RowBox[{"D$1$1$0$0$0", "+", 
      RowBox[{"D$2$1$0$0$0", " ", "S"}]}], "D$1$1$0$0$0"},
    {"D$2$1$0$0$0", 
     RowBox[{"D$2$1$0$0$0", "+", 
      RowBox[{"2", " ", "KS", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "D$1$1$0$0$0"}], " ", "Q1"}], "+", 
         RowBox[{"D$3$1$0$0$0", " ", "Q2"}]}], ")"}], " ", "S"}]}]},
    {
     RowBox[{"D$3$1$0$0$0", "+", 
      RowBox[{"D$4$1$0$0$0", " ", "S"}]}], "D$3$1$0$0$0"},
    {"D$4$1$0$0$0", 
     RowBox[{"D$4$1$0$0$0", "+", 
      RowBox[{"2", " ", "KS", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"D$3$1$0$0$0", " ", "Q1"}], "+", 
         RowBox[{"D$1$1$0$0$0", " ", "Q2"}]}], ")"}], " ", "S"}]}]},
    {
     RowBox[{"D$1$0$1$0$0", "+", 
      RowBox[{"D$2$0$1$0$0", " ", "S"}]}], "D$1$0$1$0$0"},
    {"D$2$0$1$0$0", 
     RowBox[{"D$2$0$1$0$0", "+", 
      RowBox[{"2", " ", "KS", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "D$1$0$1$0$0"}], " ", "Q1"}], "+", 
         RowBox[{"D$3$0$1$0$0", " ", "Q2"}]}], ")"}], " ", "S"}]}]},
    {
     RowBox[{"D$3$0$1$0$0", "+", 
      RowBox[{"D$4$0$1$0$0", " ", "S"}]}], "D$3$0$1$0$0"},
    {"D$4$0$1$0$0", 
     RowBox[{"D$4$0$1$0$0", "+", 
      RowBox[{"2", " ", "KS", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"D$3$0$1$0$0", " ", "Q1"}], "+", 
         RowBox[{"D$1$0$1$0$0", " ", "Q2"}]}], ")"}], " ", "S"}]}]},
    {
     RowBox[{"D$1$0$0$1$0", "+", 
      RowBox[{"D$2$0$0$1$0", " ", "S"}]}], "D$1$0$0$1$0"},
    {"D$2$0$0$1$0", 
     RowBox[{"D$2$0$0$1$0", "+", 
      RowBox[{"2", " ", "KS", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "D$1$0$0$1$0"}], " ", "Q1"}], "+", 
         RowBox[{"D$3$0$0$1$0", " ", "Q2"}]}], ")"}], " ", "S"}]}]},
    {
     RowBox[{"D$3$0$0$1$0", "+", 
      RowBox[{"D$4$0$0$1$0", " ", "S"}]}], "D$3$0$0$1$0"},
    {"D$4$0$0$1$0", 
     RowBox[{"D$4$0$0$1$0", "+", 
      RowBox[{"2", " ", "KS", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"D$3$0$0$1$0", " ", "Q1"}], "+", 
         RowBox[{"D$1$0$0$1$0", " ", "Q2"}]}], ")"}], " ", "S"}]}]},
    {
     RowBox[{"D$1$0$0$0$1", "+", 
      RowBox[{"D$2$0$0$0$1", " ", "S"}]}], "D$1$0$0$0$1"},
    {"D$2$0$0$0$1", 
     RowBox[{"D$2$0$0$0$1", "+", 
      RowBox[{"2", " ", "KS", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "D$1$0$0$0$1"}], " ", "Q1"}], "+", 
         RowBox[{"D$3$0$0$0$1", " ", "Q2"}]}], ")"}], " ", "S"}]}]},
    {
     RowBox[{"D$3$0$0$0$1", "+", 
      RowBox[{"D$4$0$0$0$1", " ", "S"}]}], "D$3$0$0$0$1"},
    {"D$4$0$0$0$1", 
     RowBox[{"D$4$0$0$0$1", "+", 
      RowBox[{"2", " ", "KS", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"D$3$0$0$0$1", " ", "Q1"}], "+", 
         RowBox[{"D$1$0$0$0$1", " ", "Q2"}]}], ")"}], " ", "S"}]}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[354]//TableForm=",ExpressionUUID->"ed6701ad-899a-47d6-be38-\
f2f9caa6149a"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
(+) EXAMPLE-02: Generation of initial conditions, components and state\
\>", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"5ce14a55-168a-4833-99bd-0aa162bda330"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",ExpressionUUID->"cb11732a-d717-434a-bf20-355a991eaced"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Initialize", " ", "invegrator"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", "\n", "\t", 
   RowBox[{"\"\<PROJECT\>\"", ",", "           ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"--", " ", "create"}], "/", "set"}], " ", "working", " ", 
      "directory", " ", 
      RowBox[{"(", "string", ")"}]}], " ", "*)"}], "\n", "\t", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "           ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"--", " ", "configuration"}], " ", "space", " ", "dimension", 
       " ", 
       RowBox[{"(", "integer", ")"}]}], ",", " ", 
      RowBox[{
      "hafl", " ", "of", " ", "phase", " ", "space", " ", "dimension"}]}], 
     " ", "*)"}], "\n", "\t", "1", ",", "                   ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "canonical"}], " ", "computation", " ", "order", " ", 
      RowBox[{"(", 
       RowBox[{"total", " ", "canonical", " ", "monomial", " ", "degree"}], 
       ")"}], " ", "of", " ", "derivatives", " ", 
      RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "           ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "total"}], " ", "number", " ", "of", " ", 
      "parameter", " ", "variables", " ", 
      RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "           ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "parametric"}], " ", "computation", " ", "order", 
      " ", 
      RowBox[{"(", 
       RowBox[{"total", " ", "parametric", " ", "monomial", " ", "order"}], 
       ")"}], " ", "of", " ", "derivatives", " ", 
      RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", 
    RowBox[{"List", "[", 
     RowBox[{"1", ",", "1"}], "]"}]}], "            ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "list"}], " ", "of", " ", "individual", " ", "orders",
      " ", "for", " ", "each", " ", "parameter", " ", 
     RowBox[{"(", 
      RowBox[{
      "list", " ", "of", " ", "integers", " ", "for", " ", "each", " ", 
       "parameter", " ", "or", " ", "empty", " ", "list"}], ")"}]}], " ", 
    "*)"}], "\n", "]"}]}]], "Code",
 CellLabel->
  "In[355]:=",ExpressionUUID->"d19886a9-08e1-47d9-86d5-cbbb91e56a3e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "2", ",", "1", ",", "2", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[355]=",ExpressionUUID->"d5af3fbe-7a7e-4d46-aef8-b9619acc6bf3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "After", " ", "initiallization", " ", "integrator", " ", "state", " ", 
    "is", " ", "defined", " ", "by", " ", "I$VARIABLES", " ", 
    RowBox[{"(", 
     RowBox[{"flag", ",", " ", "parameters", ",", " ", 
      RowBox[{"canonical", " ", "coordinates"}], ",", " ", "derivatives"}], 
     ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"I$VARIABLES", " ", "//", " ", "Short"}]}]], "Code",
 CellLabel->
  "In[356]:=",ExpressionUUID->"9bee2e96-6fcd-4a60-9e6d-662baf1d242a"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"W", ",", "K1", ",", "K2", ",", "Q1", ",", "P1", ",", 
    RowBox[{"\[LeftSkeleton]", "74", "\[RightSkeleton]"}], ",", 
    "D$1$0$0$0$1$1$1", ",", "D$2$0$0$0$1$1$1", ",", "D$3$0$0$0$1$1$1", ",", 
    "D$4$0$0$0$1$1$1"}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[356]//Short=",ExpressionUUID->"3603352e-4776-4400-b6c6-7deb80706477"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "All", " ", "tracking", " ", "functions", " ", "are", " ", "assumed", " ", 
    "to", " ", "act", " ", "on", " ", "state"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Standart", " ", "initial", " ", "condition", " ", "can", " ", "be", " ", 
    "generated", " ", "using", " ", 
    RowBox[{"I$MAKE$INITIAL", "[", "]"}], " ", "function", " ", "or", " ", 
    "created", " ", "manualy", " ", 
    RowBox[{"(", 
     RowBox[{
     "should", " ", "match", " ", "state", " ", "form", " ", "and", " ", 
      "length"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "For", " ", "standart", " ", "initial", " ", "condition", " ", "only", " ",
     "initial", " ", "values", " ", "of", " ", "parameters", " ", "and", " ", 
    "canonical", " ", "variables", " ", "are", " ", "specified"}], " ", 
   "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "First", " ", "order", " ", "derivative", " ", "initials", " ", "are", " ",
     "given", " ", "by", " ", 
    RowBox[{"(", "flattend", ")"}], " ", "identity", " ", "matrix"}], " ", 
   "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Higher", " ", "order", " ", "derivatives", " ", "are", " ", "set", " ", 
    "to", " ", "zero"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"I$VARIABLES", "//", "Short"}], "\n", 
   RowBox[{
    RowBox[{"I$MAKE$INITIAL", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.001", ",", "1.0"}], "}"}], ",", "        ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", "list"}], " ", "of", " ", "numerical", " ", 
        "values", " ", "for", " ", "each", " ", "parameter", " ", 
        RowBox[{"(", 
         RowBox[{
         "use", " ", "empty", " ", "list", " ", "if", " ", "number", " ", 
          "of", " ", "parameters", " ", "is", " ", "zero"}], ")"}]}], " ", 
       "*)"}], "\n", "\t", 
      RowBox[{"{", 
       RowBox[{"0.1", ",", "0.0", ",", "0.1", ",", "0.0"}], "}"}]}], "   ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "list"}], " ", "of", " ", "numerical", " ", 
       "values", " ", "for", " ", "each", " ", "coordine"}], " ", "*)"}], 
     "\n", "]"}], " ", "//", " ", "Short"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Short", " ", "form", " ", "can", " ", "be", " ", "used", " ", "with", 
     " ", "zero", " ", "parameter", " ", "values"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$MAKE$INITIAL", "[", "\n", "\t", 
     RowBox[{"{", 
      RowBox[{"0.1", ",", "0.0", ",", "0.1", ",", "0.0"}], "}"}], "   ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "list"}], " ", "of", " ", "numerical", " ", 
       "values", " ", "for", " ", "each", " ", "coordine"}], " ", "*)"}], 
     "\n", "]"}], " ", "//", " ", "Short"}]}]}]], "Code",
 CellLabel->
  "In[366]:=",ExpressionUUID->"0a301ec7-1a81-4d65-88e5-a4f2f5aabc92"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"W", ",", "K1", ",", "K2", ",", "Q1", ",", "P1", ",", 
    RowBox[{"\[LeftSkeleton]", "74", "\[RightSkeleton]"}], ",", 
    "D$1$0$0$0$1$1$1", ",", "D$2$0$0$0$1$1$1", ",", "D$3$0$0$0$1$1$1", ",", 
    "D$4$0$0$0$1$1$1"}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[366]//Short=",ExpressionUUID->"09afcc86-f080-4cde-b6c3-72866746d068"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
   "1.`", ",", "0.001`", ",", "1.`", ",", "0.1`", ",", "0.`", ",", "0.1`", 
    ",", "0.`", ",", "1.`", ",", "0.`", ",", "0.`", ",", 
    RowBox[{"\[LeftSkeleton]", "63", "\[RightSkeleton]"}], ",", "0.`", ",", 
    "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
    "0.`", ",", "0.`", ",", "0.`"}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[367]//Short=",ExpressionUUID->"1b8d832f-5bdc-44d4-a48a-1f5bda3bd37e"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
   "1.`", ",", "0.`", ",", "0.`", ",", "0.1`", ",", "0.`", ",", "0.1`", ",", 
    "0.`", ",", "1.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
    RowBox[{"\[LeftSkeleton]", "61", "\[RightSkeleton]"}], ",", "0.`", ",", 
    "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
    "0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[368]//Short=",ExpressionUUID->"d3387e53-380e-4756-9fff-ffb9af91901b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Series", " ", "representation", " ", "can", " ", "be", " ", "build", " ", 
    "for", " ", "given", " ", "state"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"STATE", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.001", ",", "1.0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.1", ",", "0.0", ",", "0.1", ",", "0.0"}], "}"}]}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{"I$MAKE$COMPONENTS", "[", "STATE", "]"}], "\n", 
   RowBox[{
    RowBox[{"SeedRandom", "[", "1", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$MAKE$COMPONENTS", "[", 
     RowBox[{"Insert", "[", 
      RowBox[{
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"List", "[", 
          RowBox[{"0", ",", "1"}], "]"}], ",", 
         RowBox[{"Subtract", "[", 
          RowBox[{"I$DIMENSION$VARIABLES", ",", "1"}], "]"}]}], "]"}], ",", 
       "1.0", ",", "1"}], "]"}], "]"}], " ", "//", " ", 
    "TableForm"}]}]}]], "Code",
 CellLabel->
  "In[421]:=",ExpressionUUID->"630513f3-9da9-47ec-ad27-9e4122ea2e87"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"0.1`", "\[VeryThinSpace]", "+", 
    RowBox[{"1.`", " ", "Q1"}]}], ",", 
   RowBox[{"0.`", "\[VeryThinSpace]", "+", 
    RowBox[{"1.`", " ", "P1"}]}], ",", 
   RowBox[{"0.1`", "\[VeryThinSpace]", "+", 
    RowBox[{"1.`", " ", "Q2"}]}], ",", 
   RowBox[{"0.`", "\[VeryThinSpace]", "+", 
    RowBox[{"1.`", " ", "P2"}]}]}], "}"}]], "Output",
 CellLabel->
  "Out[422]=",ExpressionUUID->"de61aa32-b53e-440a-baa8-c0e04652b8b7"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"0.7895259946338515`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.3064273800346182`", " ", "K1"}], "+", 
       RowBox[{"0.32535149799529073`", " ", "K2"}], "+", 
       RowBox[{"0.8628936960676585`", " ", "K1", " ", "K2"}], "+", 
       RowBox[{"0.21182597905412748`", " ", "P1"}], "+", 
       RowBox[{"0.4588448829532328`", " ", "K1", " ", "P1"}], "+", 
       RowBox[{"0.29751430127232203`", " ", "K2", " ", "P1"}], "+", 
       RowBox[{"0.6760704166127403`", " ", "K1", " ", "K2", " ", "P1"}], "+", 
       
       RowBox[{"0.2928697367979225`", " ", "P2"}], "+", 
       RowBox[{"0.3265920956651698`", " ", "K1", " ", "P2"}], "+", 
       RowBox[{"0.2781966582552564`", " ", "K2", " ", "P2"}], "+", 
       RowBox[{"0.2014786814313918`", " ", "K1", " ", "K2", " ", "P2"}], "+", 
       
       RowBox[{"0.5422466205096241`", " ", "Q1"}], "+", 
       RowBox[{"0.47256514319643905`", " ", "K1", " ", "Q1"}], "+", 
       RowBox[{"0.7898040268806654`", " ", "K2", " ", "Q1"}], "+", 
       RowBox[{"0.7002571225370569`", " ", "K1", " ", "K2", " ", "Q1"}], "+", 
       
       RowBox[{"0.9771717617407765`", " ", "Q2"}], "+", 
       RowBox[{"0.7382966328098353`", " ", "K1", " ", "Q2"}], "+", 
       RowBox[{"0.7676968462315412`", " ", "K2", " ", "Q2"}], "+", 
       RowBox[{"0.3342148851260234`", " ", "K1", " ", "K2", " ", "Q2"}]}]},
     {
      RowBox[{"0.18780314670602638`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.712012070075779`", " ", "K1"}], "+", 
       RowBox[{"0.593260227507795`", " ", "K2"}], "+", 
       RowBox[{"0.6667338346182621`", " ", "K1", " ", "K2"}], "+", 
       RowBox[{"0.748656881482948`", " ", "P1"}], "+", 
       RowBox[{"0.7275167860288843`", " ", "K1", " ", "P1"}], "+", 
       RowBox[{"0.44388671771382526`", " ", "K2", " ", "P1"}], "+", 
       RowBox[{"0.41676173193649957`", " ", "K1", " ", "K2", " ", "P1"}], "+", 
       RowBox[{"0.20805106478059265`", " ", "P2"}], "+", 
       RowBox[{"0.1995242965426316`", " ", "K1", " ", "P2"}], "+", 
       RowBox[{"0.5484022814434903`", " ", "K2", " ", "P2"}], "+", 
       RowBox[{"0.8510403167854053`", " ", "K1", " ", "K2", " ", "P2"}], "+", 
       
       RowBox[{"0.23115450673602744`", " ", "Q1"}], "+", 
       RowBox[{"0.8071608019072496`", " ", "K1", " ", "Q1"}], "+", 
       RowBox[{"0.011978005829703653`", " ", "K2", " ", "Q1"}], "+", 
       RowBox[{"0.3310549411572381`", " ", "K1", " ", "K2", " ", "Q1"}], "+", 
       
       RowBox[{"0.8251629394885138`", " ", "Q2"}], "+", 
       RowBox[{"0.20301147381668283`", " ", "K1", " ", "Q2"}], "+", 
       RowBox[{"0.9733356164052991`", " ", "K2", " ", "Q2"}], "+", 
       RowBox[{"0.8333640977196406`", " ", "K1", " ", "K2", " ", "Q2"}]}]},
     {
      RowBox[{"0.24136096745765045`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.39058187138007416`", " ", "K1"}], "+", 
       RowBox[{"0.5187741670401635`", " ", "K2"}], "+", 
       RowBox[{"0.273549697867316`", " ", "K1", " ", "K2"}], "+", 
       RowBox[{"0.42285064933994887`", " ", "P1"}], "+", 
       RowBox[{"0.790566279505035`", " ", "K1", " ", "P1"}], "+", 
       RowBox[{"0.05531080252831733`", " ", "K2", " ", "P1"}], "+", 
       RowBox[{"0.9670749249025012`", " ", "K1", " ", "K2", " ", "P1"}], "+", 
       
       RowBox[{"0.5804744812941587`", " ", "P2"}], "+", 
       RowBox[{"0.5405761922234775`", " ", "K1", " ", "P2"}], "+", 
       RowBox[{"0.5695463075897615`", " ", "K2", " ", "P2"}], "+", 
       RowBox[{"0.6704741860277803`", " ", "K1", " ", "K2", " ", "P2"}], "+", 
       
       RowBox[{"0.3960060815485871`", " ", "Q1"}], "+", 
       RowBox[{"0.011835462798345686`", " ", "K1", " ", "Q1"}], "+", 
       RowBox[{"0.3912763899960767`", " ", "K2", " ", "Q1"}], "+", 
       RowBox[{"0.03811670082525809`", " ", "K1", " ", "K2", " ", "Q1"}], "+", 
       RowBox[{"0.9252752011788627`", " ", "Q2"}], "+", 
       RowBox[{"0.5447717859781245`", " ", "K1", " ", "Q2"}], "+", 
       RowBox[{"0.1858604648709481`", " ", "K2", " ", "Q2"}], "+", 
       RowBox[{"0.9092085914521395`", " ", "K1", " ", "K2", " ", "Q2"}]}]},
     {
      RowBox[{"0.06573875950878105`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.8199672367851796`", " ", "K1"}], "+", 
       RowBox[{"0.1690130168777495`", " ", "K2"}], "+", 
       RowBox[{"0.641200272704872`", " ", "K1", " ", "K2"}], "+", 
       RowBox[{"0.247494780864008`", " ", "P1"}], "+", 
       RowBox[{"0.2632690904403443`", " ", "K1", " ", "P1"}], "+", 
       RowBox[{"0.48157134788177713`", " ", "K2", " ", "P1"}], "+", 
       RowBox[{"0.7301638837758169`", " ", "K1", " ", "K2", " ", "P1"}], "+", 
       
       RowBox[{"0.1288208346384372`", " ", "P2"}], "+", 
       RowBox[{"0.4641800858645353`", " ", "K1", " ", "P2"}], "+", 
       RowBox[{"0.5420282089424453`", " ", "K2", " ", "P2"}], "+", 
       RowBox[{"0.2206027617922084`", " ", "K1", " ", "K2", " ", "P2"}], "+", 
       
       RowBox[{"0.7004737819422449`", " ", "Q1"}], "+", 
       RowBox[{"0.31687607664090467`", " ", "K1", " ", "Q1"}], "+", 
       RowBox[{"0.45890217635844865`", " ", "K2", " ", "Q1"}], "+", 
       RowBox[{"0.09249943623570478`", " ", "K1", " ", "K2", " ", "Q1"}], "+", 
       RowBox[{"0.5780561519943792`", " ", "Q2"}], "+", 
       RowBox[{"0.5626589286747572`", " ", "K1", " ", "Q2"}], "+", 
       RowBox[{"0.5142581736214982`", " ", "K2", " ", "Q2"}], "+", 
       RowBox[{"0.6947509599045325`", " ", "K1", " ", "K2", " ", "Q2"}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[424]//TableForm=",ExpressionUUID->"0fb0bc47-1f3d-4257-8207-\
9b664eb950b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "State", " ", "can", " ", "be", " ", "build", " ", "from", " ", 
    "components", " ", 
    RowBox[{"(", 
     RowBox[{
     "all", " ", "variables", " ", "in", " ", "components", " ", "are", " ", 
      "deviation", " ", "variables"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"I$MAKE$STATE", "[", "\n", "\t", 
    RowBox[{
     RowBox[{"List", "[", 
      RowBox[{"0.001", ",", "1.0"}], "]"}], ",", "\n", "\t", 
     RowBox[{"I$MAKE$COMPONENTS", "[", 
      RowBox[{"I$MAKE$INITIAL", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0.001", ",", "1.0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0.1", ",", "0.0", ",", "0.1", ",", "0.0"}], "}"}]}], "]"}], 
      "]"}]}], "\n", "]"}], "\n", "\n", 
   RowBox[{"I$MAKE$STATE", "[", 
    RowBox[{
     RowBox[{"List", "[", 
      RowBox[{"0.001", ",", "1.0"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{
       RowBox[{"0.1", " ", "+", " ", 
        RowBox[{"0.5", " ", "Q1"}]}], ",", " ", 
       RowBox[{"K1", " ", "+", " ", "K2"}], ",", " ", 
       RowBox[{"0.1", " ", "+", " ", 
        RowBox[{"3.", " ", "K1", " ", "K2", " ", "Q2"}]}], ",", " ", 
       RowBox[{
       "Q1", " ", "+", " ", "P1", " ", "+", " ", "Q2", " ", "+", " ", 
        "P2"}]}], "]"}]}], "]"}]}]}]], "Code",
 CellLabel->
  "In[442]:=",ExpressionUUID->"ccc4f5fa-2741-4ae2-8ca3-45678fbaa835"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "0.001`", ",", "1.`", ",", "0.1`", ",", "0.`", ",", "0.1`", ",",
    "0.`", ",", "1.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "1.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "1.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "1.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}]], "Output",
 CellLabel->
  "Out[442]=",ExpressionUUID->"bee868e8-f096-4d13-9239-1c7b7758e4e7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "0.001`", ",", "1.`", ",", "0.1`", ",", "0.`", ",", "0.1`", ",",
    "0.`", ",", "0.5`", ",", "0.`", ",", "0.`", ",", "1.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "1.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "1.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "1.`", ",", "0.`", ",", 
   "1.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "1.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "3.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}]], "Output",
 CellLabel->
  "Out[443]=",ExpressionUUID->"d881bd75-cf26-46e3-bbf6-ea5517b16429"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Symbolic", " ", "input"}], " ", "*)"}], "\n", 
  RowBox[{"I$MAKE$STATE", "[", "\n", "\t", 
   RowBox[{
    RowBox[{"List", "[", 
     RowBox[{"k1", ",", "k2"}], "]"}], ",", "\n", "\t", 
    RowBox[{"List", "[", "\n", "\t\t", 
     RowBox[{
      RowBox[{"q1", " ", "+", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dq1dQ1", " ", "+", " ", 
          RowBox[{"dq1dQ1dK1", " ", "K1"}], " ", "+", " ", 
          RowBox[{"dq1dQ1dK2", " ", "K2"}], " ", "+", " ", 
          RowBox[{"dq1dQ1dK1dK2", " ", "K1", " ", "K2"}]}], ")"}], " ", 
        "Q1"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dq1dP1", " ", "+", " ", 
          RowBox[{"dq1dP1dK1", " ", "K1"}], " ", "+", " ", 
          RowBox[{"dq1dP1dK2", " ", "K2"}], " ", "+", " ", 
          RowBox[{"dq1dP1dK1dK2", " ", "K1", " ", "K2"}]}], ")"}], " ", 
        "P1"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dq1dQ2", " ", "+", " ", 
          RowBox[{"dq1dQ2dK1", " ", "K1"}], " ", "+", " ", 
          RowBox[{"dq1dQ2dK2", " ", "K2"}], " ", "+", " ", 
          RowBox[{"dq1dQ2dK1dK2", " ", "K1", " ", "K2"}]}], ")"}], " ", 
        "Q2"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dq1dP2", " ", "+", " ", 
          RowBox[{"dq1dP2dK1", " ", "K1"}], " ", "+", " ", 
          RowBox[{"dq1dP2dK2", " ", "K2"}], " ", "+", " ", 
          RowBox[{"dq1dP2dK1dK2", " ", "K1", " ", "K2"}]}], ")"}], " ", 
        "P2"}], " ", "+", " ", 
       RowBox[{"dq1dK1", " ", "K1"}], "  ", "+", " ", 
       RowBox[{"dq1dK2", " ", "K2"}], " ", "+", " ", 
       RowBox[{"dq1dK1dK2", " ", "K1", " ", "K2"}]}], ",", "\n", "\t\t", 
      RowBox[{"p1", " ", "+", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dp1dQ1", " ", "+", " ", 
          RowBox[{"dp1dQ1dK1", " ", "K1"}], " ", "+", " ", 
          RowBox[{"dp1dQ1dK2", " ", "K2"}], " ", "+", " ", 
          RowBox[{"dp1dQ1dK1dK2", " ", "K1", " ", "K2"}]}], ")"}], " ", 
        "Q1"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dp1dP1", " ", "+", " ", 
          RowBox[{"dp1dP1dK1", " ", "K1"}], " ", "+", " ", 
          RowBox[{"dp1dP1dK2", " ", "K2"}], " ", "+", " ", 
          RowBox[{"dp1dP1dK1dK2", " ", "K1", " ", "K2"}]}], ")"}], " ", 
        "P1"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dp1dQ2", " ", "+", " ", 
          RowBox[{"dp1dQ2dK1", " ", "K1"}], " ", "+", " ", 
          RowBox[{"dp1dQ2dK2", " ", "K2"}], " ", "+", " ", 
          RowBox[{"dp1dQ2dK1dK2", " ", "K1", " ", "K2"}]}], ")"}], " ", 
        "Q2"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dp1dP2", " ", "+", " ", 
          RowBox[{"dp1dP2dK1", " ", "K1"}], " ", "+", " ", 
          RowBox[{"dp1dP2dK2", " ", "K2"}], " ", "+", " ", 
          RowBox[{"dp1dP2dK1dK2", " ", "K1", " ", "K2"}]}], ")"}], " ", 
        "P2"}], " ", "+", " ", 
       RowBox[{"dp1dK1", " ", "K1"}], "  ", "+", " ", 
       RowBox[{"dp1dK2", " ", "K2"}], " ", "+", " ", 
       RowBox[{"dp1dK1dK2", " ", "K1", " ", "K2"}]}], ",", "\n", "\t\t", 
      RowBox[{"q2", " ", "+", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dq2dQ1", " ", "+", " ", 
          RowBox[{"dq2dQ1dK1", " ", "K1"}], " ", "+", " ", 
          RowBox[{"dq2dQ1dK2", " ", "K2"}], " ", "+", " ", 
          RowBox[{"dq2dQ1dK1dK2", " ", "K1", " ", "K2"}]}], ")"}], " ", 
        "Q1"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dq2dP1", " ", "+", " ", 
          RowBox[{"dq2dP1dK1", " ", "K1"}], " ", "+", " ", 
          RowBox[{"dq2dP1dK2", " ", "K2"}], " ", "+", " ", 
          RowBox[{"dq2dP1dK1dK2", " ", "K1", " ", "K2"}]}], ")"}], " ", 
        "P1"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dq2dQ2", " ", "+", " ", 
          RowBox[{"dq2dQ2dK1", " ", "K1"}], " ", "+", " ", 
          RowBox[{"dq2dQ2dK2", " ", "K2"}], " ", "+", " ", 
          RowBox[{"dq2dQ2dK1dK2", " ", "K1", " ", "K2"}]}], ")"}], " ", 
        "Q2"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dq2dP2", " ", "+", " ", 
          RowBox[{"dq2dP2dK1", " ", "K1"}], " ", "+", " ", 
          RowBox[{"dq2dP2dK2", " ", "K2"}], " ", "+", " ", 
          RowBox[{"dq2dP2dK1dK2", " ", "K1", " ", "K2"}]}], ")"}], " ", 
        "P2"}], " ", "+", " ", 
       RowBox[{"dq2dK1", " ", "K1"}], "  ", "+", " ", 
       RowBox[{"dq2dK2", " ", "K2"}], " ", "+", " ", 
       RowBox[{"dq2dK1dK2", " ", "K1", " ", "K2"}]}], ",", "\n", "\t\t", 
      RowBox[{"p2", " ", "+", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dp2dQ1", " ", "+", " ", 
          RowBox[{"dp2dQ1dK1", " ", "K1"}], " ", "+", " ", 
          RowBox[{"dp2dQ1dK2", " ", "K2"}], " ", "+", " ", 
          RowBox[{"dp2dQ1dK1dK2", " ", "K1", " ", "K2"}]}], ")"}], " ", 
        "Q1"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dp2dP1", " ", "+", " ", 
          RowBox[{"dp2dP1dK1", " ", "K1"}], " ", "+", " ", 
          RowBox[{"dp2dP1dK2", " ", "K2"}], " ", "+", " ", 
          RowBox[{"dp2dP1dK1dK2", " ", "K1", " ", "K2"}]}], ")"}], " ", 
        "P1"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dp2dQ2", " ", "+", " ", 
          RowBox[{"dp2dQ2dK1", " ", "K1"}], " ", "+", " ", 
          RowBox[{"dp2dQ2dK2", " ", "K2"}], " ", "+", " ", 
          RowBox[{"dp2dQ2dK1dK2", " ", "K1", " ", "K2"}]}], ")"}], " ", 
        "Q2"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"dp2dP2", " ", "+", " ", 
          RowBox[{"dp2dP2dK1", " ", "K1"}], " ", "+", " ", 
          RowBox[{"dp2dP2dK2", " ", "K2"}], " ", "+", " ", 
          RowBox[{"dp2dP2dK1dK2", " ", "K1", " ", "K2"}]}], ")"}], " ", 
        "P2"}], " ", "+", " ", 
       RowBox[{"dp2dK1", " ", "K1"}], "  ", "+", " ", 
       RowBox[{"dp2dK2", " ", "K2"}], " ", "+", " ", 
       RowBox[{"dp2dK1dK2", " ", "K1", " ", "K2"}]}]}], "\n", "\t", "]"}]}], 
   "\n", "]"}]}]], "Code",
 CellLabel->
  "In[447]:=",ExpressionUUID->"6a7f4a4d-db09-440e-9ea3-58a3071a36ad"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "k1", ",", "k2", ",", "q1", ",", "p1", ",", "q2", ",", "p2", 
   ",", "dq1dQ1", ",", "dp1dQ1", ",", "dq2dQ1", ",", "dp2dQ1", ",", "dq1dP1", 
   ",", "dp1dP1", ",", "dq2dP1", ",", "dp2dP1", ",", "dq1dQ2", ",", "dp1dQ2", 
   ",", "dq2dQ2", ",", "dp2dQ2", ",", "dq1dP2", ",", "dp1dP2", ",", "dq2dP2", 
   ",", "dp2dP2", ",", "dq1dK1", ",", "dp1dK1", ",", "dq2dK1", ",", "dp2dK1", 
   ",", "dq1dK2", ",", "dp1dK2", ",", "dq2dK2", ",", "dp2dK2", ",", 
   "dq1dQ1dK1", ",", "dp1dQ1dK1", ",", "dq2dQ1dK1", ",", "dp2dQ1dK1", ",", 
   "dq1dQ1dK2", ",", "dp1dQ1dK2", ",", "dq2dQ1dK2", ",", "dp2dQ1dK2", ",", 
   "dq1dP1dK1", ",", "dp1dP1dK1", ",", "dq2dP1dK1", ",", "dp2dP1dK1", ",", 
   "dq1dP1dK2", ",", "dp1dP1dK2", ",", "dq2dP1dK2", ",", "dp2dP1dK2", ",", 
   "dq1dQ2dK1", ",", "dp1dQ2dK1", ",", "dq2dQ2dK1", ",", "dp2dQ2dK1", ",", 
   "dq1dQ2dK2", ",", "dp1dQ2dK2", ",", "dq2dQ2dK2", ",", "dp2dQ2dK2", ",", 
   "dq1dP2dK1", ",", "dp1dP2dK1", ",", "dq2dP2dK1", ",", "dp2dP2dK1", ",", 
   "dq1dP2dK2", ",", "dp1dP2dK2", ",", "dq2dP2dK2", ",", "dp2dP2dK2", ",", 
   "dq1dK1dK2", ",", "dp1dK1dK2", ",", "dq2dK1dK2", ",", "dp2dK1dK2", ",", 
   "dq1dQ1dK1dK2", ",", "dp1dQ1dK1dK2", ",", "dq2dQ1dK1dK2", ",", 
   "dp2dQ1dK1dK2", ",", "dq1dP1dK1dK2", ",", "dp1dP1dK1dK2", ",", 
   "dq2dP1dK1dK2", ",", "dp2dP1dK1dK2", ",", "dq1dQ2dK1dK2", ",", 
   "dp1dQ2dK1dK2", ",", "dq2dQ2dK1dK2", ",", "dp2dQ2dK1dK2", ",", 
   "dq1dP2dK1dK2", ",", "dp1dP2dK1dK2", ",", "dq2dP2dK1dK2", ",", 
   "dp2dP2dK1dK2"}], "}"}]], "Output",
 CellLabel->
  "Out[447]=",ExpressionUUID->"ed2a5094-7466-4df1-a5a5-fb7cd42e46f3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Derivatives", " ", "are", " ", "not", " ", "map", " ", "coefficients", 
    " ", 
    RowBox[{"(", 
     RowBox[{"but", " ", "connected", " ", "via", " ", "multinomial"}], 
     ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"I$INTEGRATOR", "[", 
    RowBox[{"\"\<PROJECT\>\"", ",", "1", ",", "2", ",", "0", ",", "0", ",", 
     RowBox[{"List", "[", "]"}]}], "]"}], "\n", 
   RowBox[{"I$MAKE$STATE", "[", "\n", "\t", 
    RowBox[{
     RowBox[{"List", "[", "]"}], ",", "\n", "\t", 
     RowBox[{"List", "[", "\n", "\t\t", 
      RowBox[{
       RowBox[{"q1", " ", "+", " ", 
        RowBox[{"dq1dQ1", " ", "Q1"}], " ", "+", " ", 
        RowBox[{"dq1dP1", " ", "P1"}], " ", "+", " ", 
        RowBox[{
         RowBox[{"1", "/", "2"}], " ", "dq1dQ1dQ1", " ", 
         RowBox[{"Q1", "^", "2"}]}], " ", "+", " ", 
        RowBox[{"dq1dQ1dP1", " ", "Q1", " ", "P1"}], " ", "+", " ", 
        RowBox[{
         RowBox[{"1", "/", "2"}], " ", "dq1dP1dP1", " ", 
         RowBox[{"P1", "^", "2"}]}]}], ",", "\n", "\t\t", 
       RowBox[{"p1", " ", "+", " ", 
        RowBox[{"dp1dQ1", " ", "Q1"}], " ", "+", " ", 
        RowBox[{"dp1dP1", " ", "P1"}], " ", "+", " ", 
        RowBox[{
         RowBox[{"1", "/", "2"}], " ", "dp1dQ1dQ1", " ", 
         RowBox[{"Q1", "^", "2"}]}], " ", "+", " ", 
        RowBox[{"dp1dQ1dP1", " ", "Q1", " ", "P1"}], " ", "+", " ", 
        RowBox[{
         RowBox[{"1", "/", "2"}], " ", "dp1dP1dP1", " ", 
         RowBox[{"P1", "^", "2"}]}]}]}], "\n", "\t", "]"}]}], "\n", 
    "]"}]}]}]], "Code",
 CellLabel->
  "In[452]:=",ExpressionUUID->"35d97557-bfad-4d74-a504-bf7bc69980d5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "1", ",", "2", ",", "0", ",", "0", ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[452]=",ExpressionUUID->"a1cf3ece-b0e5-4d0d-ab3f-e3caa06d43b8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "q1", ",", "p1", ",", "dq1dQ1", ",", "dp1dQ1", ",", "dq1dP1", 
   ",", "dp1dP1", ",", "dq1dQ1dQ1", ",", "dp1dQ1dQ1", ",", "dq1dQ1dP1", ",", 
   "dp1dQ1dP1", ",", "dq1dP1dP1", ",", "dp1dP1dP1"}], "}"}]], "Output",
 CellLabel->
  "Out[453]=",ExpressionUUID->"89bac10d-5c97-4a52-8b41-75badce2857a"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-03: (I$NDSOLVE) Basic tutorial", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"25913ce2-e942-42f2-b84a-b262f646b993"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[10]:=",ExpressionUUID->"9cbc0254-94e1-4e57-a326-b39ba4a41c13"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Initialize", " ", "invegrator"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", "\n", "\t", 
   RowBox[{"\"\<PROJECT\>\"", ",", "           ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"--", " ", "create"}], "/", "set"}], " ", "working", " ", 
      "directory", " ", 
      RowBox[{"(", "string", ")"}]}], " ", "*)"}], "\n", "\t", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "           ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"--", " ", "configuration"}], " ", "space", " ", "dimension", 
       " ", 
       RowBox[{"(", "integer", ")"}]}], ",", " ", 
      RowBox[{
      "hafl", " ", "of", " ", "phase", " ", "space", " ", "dimension"}]}], 
     " ", "*)"}], "\n", "\t", "1", ",", "                   ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "canonical"}], " ", "computation", " ", "order", " ", 
      RowBox[{"(", 
       RowBox[{"total", " ", "canonical", " ", "monomial", " ", "degree"}], 
       ")"}], " ", "of", " ", "derivatives", " ", 
      RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "           ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "total"}], " ", "number", " ", "of", " ", 
      "parameter", " ", "variables", " ", 
      RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "           ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "parametric"}], " ", "computation", " ", "order", 
      " ", 
      RowBox[{"(", 
       RowBox[{"total", " ", "parametric", " ", "monomial", " ", "order"}], 
       ")"}], " ", "of", " ", "derivatives", " ", 
      RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", 
    RowBox[{"List", "[", 
     RowBox[{"1", ",", "1"}], "]"}]}], "            ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "list"}], " ", "of", " ", "individual", " ", "orders",
      " ", "for", " ", "each", " ", "parameter", " ", 
     RowBox[{"(", 
      RowBox[{
      "list", " ", "of", " ", "integers", " ", "for", " ", "each", " ", 
       "parameter", " ", "or", " ", "empty", " ", "list"}], ")"}]}], " ", 
    "*)"}], "\n", "]"}]}]], "Code",
 CellLabel->"In[11]:=",ExpressionUUID->"b55cbec0-b179-40d8-a2a9-cb6c60ddcfb0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "2", ",", "1", ",", "2", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[11]=",ExpressionUUID->"97c3dac8-6f05-4d47-8887-837c082fd5c7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "For", " ", "fast", " ", "prototyping", " ", "one", " ", "can", " ", "use",
     " ", 
    RowBox[{"NDSolve", "[", "]"}], " ", "based", " ", "integration"}], " ", 
   "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "It", " ", "is", " ", "also", " ", "suitable", " ", "to", " ", "use", " ", 
     RowBox[{"NDSolve", "[", "]"}], " ", "with", " ", "complicated", " ", 
     "vector", " ", "fields"}], ",", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"e", ".", "g", ".", " ", "unseparateble"}], " ", "or", " ", 
      "non"}], "-", "autonomous"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "State", " ", "advance", " ", "function", " ", "can", " ", "be", " ", 
     "defined", " ", "for", " ", "given", " ", "Hamiltonian", " ", 
     "function"}], ",", " ", 
    RowBox[{
    "vector", " ", "field", " ", "or", " ", "total", " ", "vector", " ", 
     "field", " ", 
     RowBox[{"(", 
      RowBox[{"vector", " ", "field", " ", "with", " ", "derivaties"}], 
      ")"}]}]}], " ", "*)"}]}]], "Code",
 CellLabel->"In[12]:=",ExpressionUUID->"e52b8f51-2d25-444b-97fa-dfcc3d9d4441"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "initial", " ", "condition"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"INITIAL", " ", "=", " ", 
    RowBox[{"I$MAKE$INITIAL", "[", 
     RowBox[{
      RowBox[{"List", "[", 
       RowBox[{"0.001", ",", "0.1"}], "]"}], ",", 
      RowBox[{"List", "[", 
       RowBox[{
        RowBox[{"-", "0.1"}], ",", "0.0", ",", "0.1", ",", "0.0"}], "]"}]}], 
     "]"}]}], " ", ";"}]}]], "Code",
 CellLabel->"In[13]:=",ExpressionUUID->"6a0bf811-4ffc-44f5-bace-aaf93a91f65e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Generate", " ", "map", " ", "for", " ", "given", " ", "Hamiltonian", " ", 
    "function"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"P1", "^", "2"}], "+", 
          RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", "K1"}], ")"}]}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"10.0", " ", "+", " ", "K2"}], ")"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"1", "/", "3"}], " ", 
          RowBox[{"Q1", "^", "3"}]}], " ", "-", " ", 
         RowBox[{"Q1", " ", 
          RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Generate", " ", "map"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"MAP", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", " ", "\n", "\t", 
      RowBox[{"HAMILTONIAN", ",", "    ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "Hamiltonian"}], " ", "function", " ", 
         RowBox[{"(", 
          RowBox[{
          "expression", " ", "depending", " ", "of", " ", "parametric", " ", 
           "and", " ", "canonical", " ", "variables"}], ")"}]}], " ", "*)"}], 
       "\n", "\t", "100", ",", "            ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "number"}], " ", "of", " ", "integration", " ", 
         "steps", " ", 
         RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", "0.1", ",",
        "            ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "integration"}], " ", "length", " ", 
         RowBox[{"(", "real", ")"}]}], " ", "*)"}], "\n", "\t", "1"}], 
      "               ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"--", " ", "integration"}], " ", "method"}], ",", " ", 
        RowBox[{"see", " ", 
         RowBox[{"I$NDSOLVE$SET$METHOD", "[", "]"}], " ", "for", " ", 
         "predefined", " ", "symplectic", " ", "integration", " ", 
         "methods"}]}], " ", "*)"}], "\n", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Apply", " ", "map"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"MAP", "[", "INITIAL", "]"}], " ", "//", " ", 
    "Short"}]}]}]], "Code",
 CellLabel->"In[14]:=",ExpressionUUID->"0e47d33d-e711-4d89-beb6-9664a9dd9724"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"1.`", ",", "0.001`", ",", "0.1`", ",", 
    RowBox[{"\[LeftSkeleton]", "77", "\[RightSkeleton]"}], ",", 
    RowBox[{"-", "0.0009780053174726962`"}], ",", "0.00006606852776111486`", 
    ",", "0.000984778635326531`"}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[16]//Short=",ExpressionUUID->"1e9ea67b-d459-4d9b-8aff-50bc7696b472"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Generate", " ", "map", " ", "for", " ", "given", " ", "vector", " ", 
    "field"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"P1", "^", "2"}], "+", 
          RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", "K1"}], ")"}]}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"10.0", " ", "+", " ", "K2"}], ")"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"1", "/", "3"}], " ", 
          RowBox[{"Q1", "^", "3"}]}], " ", "-", " ", 
         RowBox[{"Q1", " ", 
          RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"FLOW", " ", "=", " ", 
     RowBox[{"I$VECTOR$FIELD", "[", "HAMILTONIAN", "]"}]}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"MAP", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", " ", "\n", "\t", 
      RowBox[{"FLOW", ",", "           ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "vector"}], " ", "field"}], " ", "*)"}], "\n", 
       "\t", "100", ",", "            ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "number"}], " ", "of", " ", "integration", " ", 
         "steps", " ", 
         RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", "0.1", ",",
        "            ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "integration"}], " ", "length", " ", 
         RowBox[{"(", "real", ")"}]}], " ", "*)"}], "\n", "\t", "1"}], 
      "               ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"--", " ", "integration"}], " ", "method"}], ",", " ", 
        RowBox[{"see", " ", 
         RowBox[{"I$NDSOLVE$SET$METHOD", "[", "]"}], " ", "for", " ", 
         "predefined", " ", "symplectic", " ", "integration", " ", 
         "methods"}]}], " ", "*)"}], "\n", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Apply", " ", "map"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"MAP", "[", "INITIAL", "]"}], " ", "//", " ", 
    "Short"}]}]}]], "Code",
 CellLabel->"In[17]:=",ExpressionUUID->"020e17cd-9634-4ebe-9a2d-dc8160150ce5"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"1.`", ",", "0.001`", ",", "0.1`", ",", 
    RowBox[{"\[LeftSkeleton]", "77", "\[RightSkeleton]"}], ",", 
    RowBox[{"-", "0.0009780053174726962`"}], ",", "0.00006606852776111486`", 
    ",", "0.000984778635326531`"}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[20]//Short=",ExpressionUUID->"01a61152-9fc2-47ca-945b-c70141180880"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Generate", " ", "map", " ", "for", " ", "given", " ", "vector", " ", 
    "total", " ", "field"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"P1", "^", "2"}], "+", 
          RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", "K1"}], ")"}]}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"10.0", " ", "+", " ", "K2"}], ")"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"1", "/", "3"}], " ", 
          RowBox[{"Q1", "^", "3"}]}], " ", "-", " ", 
         RowBox[{"Q1", " ", 
          RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"FLOW", " ", "=", " ", 
     RowBox[{"I$VECTOR$FIELD", "[", "HAMILTONIAN", "]"}]}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"FLOW", " ", "=", " ", 
     RowBox[{"I$VECTOR$FIELD$DERIVATIVE", "[", "FLOW", "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"MAP", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", " ", "\n", "\t", 
      RowBox[{"FLOW", ",", "           ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "vector"}], " ", "field"}], " ", "*)"}], "\n", 
       "\t", "100", ",", "            ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "number"}], " ", "of", " ", "integration", " ", 
         "steps", " ", 
         RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", "0.1", ",",
        "            ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "integration"}], " ", "length", " ", 
         RowBox[{"(", "real", ")"}]}], " ", "*)"}], "\n", "\t", "1"}], 
      "               ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"--", " ", "integration"}], " ", "method"}], ",", " ", 
        RowBox[{"see", " ", 
         RowBox[{"I$NDSOLVE$SET$METHOD", "[", "]"}], " ", "for", " ", 
         "predefined", " ", "symplectic", " ", "integration", " ", 
         "methods"}]}], " ", "*)"}], "\n", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Apply", " ", "map"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"MAP", "[", "INITIAL", "]"}], " ", "//", " ", 
    "Short"}]}]}]], "Code",
 CellLabel->"In[21]:=",ExpressionUUID->"f125162b-67a5-4a19-a335-a4490e643b9d"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"1.`", ",", "0.001`", ",", "0.1`", ",", 
    RowBox[{"\[LeftSkeleton]", "77", "\[RightSkeleton]"}], ",", 
    RowBox[{"-", "0.0009780053174726962`"}], ",", "0.00006606852776111486`", 
    ",", "0.000984778635326531`"}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[25]//Short=",ExpressionUUID->"e3a2ae80-32df-4bec-95f0-4ec632230fbc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Note", ",", " ", 
    RowBox[{
    "action", " ", "on", " ", "zero", " ", "flag", " ", "is", " ", 
     "identity"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{"0.001", ",", "0.1"}], "]"}], ",", 
       RowBox[{"List", "[", 
        RowBox[{
         RowBox[{"-", "0.1"}], ",", "0.0", ",", "0.1", ",", "0.0"}], "]"}]}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MAP", "[", "INITIAL", "]"}], " ", "===", " ", "INITIAL"}], "\n", 
   
   RowBox[{
    RowBox[{
     RowBox[{"INITIAL", "[", 
      RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", "0.0"}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"MAP", "[", "INITIAL", "]"}], " ", "===", " ", 
    "INITIAL"}]}]}]], "Code",
 CellLabel->"In[26]:=",ExpressionUUID->"7cfde12d-fc8b-489b-aaa7-489e28af9334"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[27]=",ExpressionUUID->"eaff07f3-7719-4eb2-8a2e-eaae62599ac1"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[29]=",ExpressionUUID->"a287faf0-5b79-4233-8027-312b05037c2f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Solve", " ", "non"}], "-", 
    RowBox[{"autonomous", " ", "systems"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "2", "d", " ", "phase", " ", "space", " ", "and", " ", "1", "st", " ", 
    "order", " ", "derivatives"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$INTEGRATOR", "[", 
     RowBox[{"\"\<PROJECT\>\"", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
      RowBox[{"List", "[", "]"}]}], "]"}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "hamiltonian", " ", "function"}], " ", "*)"}], 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Note", ",", " ", 
     RowBox[{"I$PARAMETER", " ", 
      RowBox[{"(", 
       RowBox[{"or", " ", "its", " ", "value"}], ")"}], " ", "should", " ", 
      "be", " ", "used", " ", "as", " ", "time", " ", "variable"}]}], " ", 
    "*)"}], " ", "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", 
       RowBox[{"P1", "^", "2"}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", 
       RowBox[{"(", 
        RowBox[{"1.0", " ", "+", " ", 
         RowBox[{"Sin", "[", 
          RowBox[{"0.25", "*", "2", "*", "Pi", "*", "I$PARAMETER"}], "]"}]}], 
        ")"}], " ", 
       RowBox[{"Q1", "^", "2"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "map"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"MAP", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"HAMILTONIAN", ",", "100", ",", "0.1", ",", "1"}], "]"}]}], " ",
     ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Define", " ", "initial", " ", "condition", " ", "and", " ", "apply", " ",
      "map"}], " ", "*)"}], "\n", 
   RowBox[{"INITIAL", " ", "=", " ", 
    RowBox[{"I$MAKE$INITIAL", "[", 
     RowBox[{"List", "[", 
      RowBox[{"0.1", ",", "0.0"}], "]"}], "]"}]}], "\n", 
   RowBox[{"MAP", "[", "INITIAL", "]"}]}]}]], "Code",
 CellLabel->"In[30]:=",ExpressionUUID->"c8c2229e-c2d5-4615-9c73-8bf4872369bc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "0.1`", ",", "0.`", ",", "1.`", ",", "0.`", ",", "0.`", ",", 
   "1.`"}], "}"}]], "Output",
 CellLabel->"Out[33]=",ExpressionUUID->"64f3a6cd-02e5-4b4e-a5ff-9432e274319f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", "0.0994743224807313`", ",", 
   RowBox[{"-", "0.01076443433214656`"}], ",", "0.9947432248073129`", ",", 
   RowBox[{"-", "0.1076443433214656`"}], ",", "0.0998203617451604`", ",", 
   "0.9944826745630311`"}], "}"}]], "Output",
 CellLabel->"Out[34]=",ExpressionUUID->"a98e2ac2-517c-4705-9508-93b4a6d24824"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Output", " ", "can", " ", "be", " ", "generated", " ", "at", " ", "each", 
    " ", "integration", " ", "step"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "This", " ", "is", " ", "controlled", " ", "by", " ", "last", " ", 
    RowBox[{"I$NDSOLVE", "[", "]"}], " ", "argument", " ", "which", " ", 
    "has", " ", "default", " ", "value", " ", "I$NDSOLVE$ITERATE"}], " ", 
   "*)"}], " ", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "I$NDSOLVE$ITERATE$LIST", " ", "should", " ", "be", " ", "used", " ", "if",
     " ", "output", " ", "at", " ", "each", " ", "intergation", " ", "step", 
    " ", "is", " ", "desired"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$INTEGRATOR", "[", 
     RowBox[{"\"\<PROJECT\>\"", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
      RowBox[{"List", "[", "]"}]}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], " ", 
       RowBox[{"P1", "^", "2"}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"1", "/", "2"}], " ", 
       RowBox[{"Q1", "^", "2"}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"1", "/", "3"}], " ", 
       RowBox[{"Q1", "^", "3"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MAP", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{
      "HAMILTONIAN", ",", "100", ",", "10.0", ",", "1", ",", 
       "I$NDSOLVE$ITERATE$LIST"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{"List", "[", 
       RowBox[{"0.25", ",", "0.0"}], "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"MAP", "[", "INITIAL", "]"}]}], "  ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Normal", " ", "output", " ", 
     RowBox[{"(", 
      RowBox[{"after", " ", "last", " ", "integration", " ", "step"}], 
      ")"}]}], " ", "*)"}], "\n", 
   RowBox[{"DATA", " ", "//", " ", "First"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "Output", " ", "at", " ", "each", " ", "integration", " ", "step"}], ",",
      " ", 
     RowBox[{"time", " ", "and", " ", "state"}]}], "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Last", "[", "DATA", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"DATA", " ", "//", " ", "Short"}], "\n", 
   RowBox[{"(*", " ", "Plot", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Grid", "[", "\n", "\t", 
     RowBox[{"List", "[", "\n", "\t\t", 
      RowBox[{"List", "[", "\n", "\t\t\t", 
       RowBox[{
        RowBox[{"ListPlot", "[", 
         RowBox[{
          RowBox[{"Part", "[", 
           RowBox[{"DATA", ",", "All", ",", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "3"}], "]"}]}], "]"}], ",", 
          RowBox[{"Rule", "[", 
           RowBox[{"PlotTheme", ",", "\"\<Detailed\>\""}], "]"}], ",", 
          RowBox[{"Rule", "[", 
           RowBox[{"AspectRatio", ",", "1"}], "]"}], ",", 
          RowBox[{"Rule", "[", 
           RowBox[{"ImageSize", ",", "Medium"}], "]"}], ",", 
          RowBox[{"Rule", "[", 
           RowBox[{"PlotStyle", ",", "Black"}], "]"}], ",", 
          RowBox[{"Rule", "[", 
           RowBox[{"ImagePadding", ",", "30"}], "]"}]}], "]"}], ",", "\n", 
        "\t\t\t", 
        RowBox[{"ListPlot", "[", 
         RowBox[{
          RowBox[{"Part", "[", 
           RowBox[{"DATA", ",", "All", ",", 
            RowBox[{"List", "[", 
             RowBox[{"3", ",", "4"}], "]"}]}], "]"}], ",", 
          RowBox[{"Rule", "[", 
           RowBox[{"PlotTheme", ",", "\"\<Detailed\>\""}], "]"}], ",", 
          RowBox[{"Rule", "[", 
           RowBox[{"AspectRatio", ",", "1"}], "]"}], ",", 
          RowBox[{"Rule", "[", 
           RowBox[{"ImageSize", ",", "Medium"}], "]"}], ",", 
          RowBox[{"Rule", "[", 
           RowBox[{"PlotStyle", ",", "Black"}], "]"}], ",", 
          RowBox[{"Rule", "[", 
           RowBox[{"ImagePadding", ",", "30"}], "]"}]}], "]"}]}], "\n", 
       "\t\t", "]"}], "\n", "\t", "]"}], "\n", "]"}], " ", "//", " ", 
    "Rasterize"}]}]}]], "Code",
 CellLabel->"In[35]:=",ExpressionUUID->"6e58fbbb-61fd-4482-8d57-3a69c5fb55c6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"-", "0.2956346717193851`"}], ",", "0.052368183572954544`", ",", 
   RowBox[{"-", "1.6309244889928105`"}], ",", 
   RowBox[{"-", "0.5177810929245621`"}], ",", 
   RowBox[{"-", "0.16757818743345482`"}], ",", 
   RowBox[{"-", "0.6663514003096209`"}]}], "}"}]], "Output",
 CellLabel->"Out[40]=",ExpressionUUID->"588f6c01-5bd1-49ff-bbfa-b2e95fd7a6d4"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "0.`", ",", "1.`", ",", "0.25`", ",", "0.`", ",", "1.`", ",", "0.`", ",",
       "0.`", ",", "1.`"}], "}"}], ",", 
    RowBox[{"\[LeftSkeleton]", "99", "\[RightSkeleton]"}], ",", 
    RowBox[{"{", 
     RowBox[{"10.`", ",", "1.`", ",", 
      RowBox[{"\[LeftSkeleton]", "5", "\[RightSkeleton]"}], ",", 
      RowBox[{"-", "0.6663514003096209`"}]}], "}"}]}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[42]//Short=",ExpressionUUID->"4e59cecf-deed-4f3f-9d1a-58d715502cd2"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
ipzl9KJFi/zP0y4uLnbfuThfTDrRMen0ElbaMBErbYEMrehcY1oyceutt/66
h5U2tHX27Nm/8DjrN9XDyT6ZfZWj1L/4xS+2JezatSsXt58Vyg+jRMPKmG+/
/fYmz5EjR+LqYl68ePFVTwR/lcDKRzNDMis6LTnTMpazR/RkWZy4dYmij9Pd
3e3/6Ob73/9+1m9f+QMkp6+CZKYGYBzKKhTTAlgj1ytt5WT2lczUAIxDWYVi
WgBrnDp16vc8d999t+rhZJ/MvpKZ2qX8MEo0iGkTITFDSS6rFORMC2eP6M+y
RJbFiWuQSE5fBclMDcA4lFUopgWAKWT2lczUAIxja1l1dnY++OCDeXl5RUVF
ra2tw3fYvn17YWFhfn5+cXFxW1tb0v/aOi0A7COzr2Smdik/jBINYtpESMxQ
VpbV4OBgLBarqakZGBhoaGiYMWNG0l8w3L9//6xZs44cOeLsWVtbW1BQkPQh
dVZOS6iks0d+/vOf/1+en/zkJwoHNmr2fTtblsiyOHENEsnpqyCZqQEYx8qy
6ujocFbXQ0ND7sWSkpKdO3cGd6ivr9+6dat/cebMmQcPHgzuYOW0ZOLll1/2
P6Vh+fLlqocDID2ZfRXBX6J/4IEH5iUY+mMHaOL8+fMPeXbs2KF6OCH27t07
x7N//37Vw7FHBDWlSl1dXfAPHlVWVlZVVV1pZ2dZnpeXd/HixeAXrZyWTLDS
Bowjs68iSD1+/Hi3DG+44YZc39eIKD+MEg1rYh49etR/YZ01a1bS/+oQc/Xq
1f4IN27cmIu70CGmKlZW9LZt28rKyvyLa9euXbVqVeiex48fv/POO4e/x0z6
K8DxwJPEso3S0lJ32/331VdfnThx4v+TMHfuXB1GONKNYBw7NoJn+FiwYVmc
eOKbKOI7nTpMXB7JK22YJfVKWwcRrLQls7Kia2trFy5c6F+srKxcs2bN8N2a
m5tnz55dV1c3/L/8adHkpZwNNthg40obVtZ4Wqy0YQpW2sJZWdHt7e0zZ870
z9MuLS0d/lPrnTt3zpkzx9kz9BasnBYAVpLZVxGk3r9//y8TDh8+nOv7GhH/
fZbdrInZ19dX5xn+XNIh5oULFw57kk6mzRYdYqpiZUU7a+zCwsLq6uqBgYHd
u3cXFBT09PQ4Xz927Jj7gX5Of+bn5zvbpz39/f3BW7ByWkJtSlA9imyyLE7c
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
Twy7EdMmQmKGsrKsamtrFy5c6F+srKxcs2ZNcIeKiooNGzb4F2Ox2N69e4M7
WDktoTYlqB5FNlkWJ25dIsvixCNJxM+0h5OZGoBxrCyr9vb2mTNn+udpl5aW
7tixI7hDTU3NsmXL3G33PO0TJ04Ed7ByWgAYqqWlpTahrq5u+P/K7CuZqQEY
x8qyctbYhYWF1dXVAwMDu3fvLigo6Onpcb5+7NixtrY2Z6Orqys/P7+5udnZ
Ye3atfPnz0+6BSunBYCVZPaVzNQu+w4MhSKmTYTEDGVrWXV2dpaWljpr7KKi
opaWFveL69atc77objc1NTn/5ay3Fy1aJPnztDl7RH+WJbIsTlyDRHL6Kkhm
agDGoaxCDZ+WefPmfTPhW9/6lpIhAUAomTUuMzUA41BWoYZPy4c//OEUv5EE
AKrIrHGZqV3KD6NEg5g2ERIzlOSySkHOSpuzR/RnWSLL4sQ1SCSzxmWmBmAc
yiqUnJU2ANPJrHHJnyUOwAjUVArDp2X9+vVlCQ899JCSIQFAKJk1LjO1S/lh
lGgQ0yZCYoaSXFYpyJkWzh7Rn2WJLIsT1yCRnL4Ksib1hQsXjnouX76sejiy
9PX1XfKoHosIhw4dakpobW1VPZboWFNW2cW0ADCFzL6yJvWKFSv8UxO3bNmi
ejiyTJkyxZ35cePGqR6LCJMmTXInfOLEiarHEh1ryiq7mBYAppDZV9akHsVK
W/lhlGhEEFOHlbaoR5OVNnxyTmLn7BH9WZbIsjhxdYmmBigZgFrWpOZn2grp
sNIWhZU2fEwLAFPI7CtrUtfX18/ytLW1qR6OLEuXLv12wi233KJ6LCJUVFT8
KMGZedVjiY41ZZVdTAsAU8jsK5mpXfYdGApFTJsIiRlKclmlIGdaOHtEf5Yl
sixOXINEcvoqSGZqAMahrEIxLQBMIbOvZKYGYBzKKhTTAsAUMvtKZmqX8sMo
0SCmTYTEDCW5rFIInZbW1tbvejZu3Bj9qHKBs0f0Z1kiy+LEc5/o2muv/UDC
H/zBH4TuILPGZaYGYBzKKlTotAQ/i+krX/lK9KMCIND48ePd2vmVX/mV0B1k
1rjM1ACMQ1mFYqUNQBOstENJ/ixx+w4MhSKmTYTETCK5ptKSs9Lm7BH9WZbI
sjjx3Cf60Ic+NC7h13/910N3kFnjMlMDMA5lFSp0Wo4cOXK/Z+fOndGPCgCG
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
PVf6dbwoUVahmBbAGkNDQ/fee+89CU888YTq4WSfzL6SmXosrr32Wvd3cJwN
1WNJw3kv4P/G0JIlS1QPB4bR7flDWYViWgBrDAwM+K37e7/3e6qHk30y+0pm
atfoDqOw0taT8oNi0Ygypm7PH8lllYKcaeHsEf1Zlij6OLleaSt/gOT0VZDM
1GPBShtC6Pb8oaxCMS2ZcJ7Mj3jOnDmjejhAOH6mbSWZqcfi2WeffTzB2VA9
ljSOHz/uv7g0NjaqHg4M093dXeU5ePCg6uFQVuGYlkx84Qtf8BcwW7duVT0c
INzQ0FBeXt5tCc4Lt+rhZJ/MvpKZ2qX8MEo0iGkTITFDSS6rFORMy1jOHtFz
pW3ft7NliSyLE9cgkZy+CpKZGoBxKKtQTEsm9FxpA9LI7CuZqQEYh7IKxYeN
Z2LFihVf97z55puqhwPIEvwrt6rHooDM1C7lh1GiQUybCIkZSnJZpSBnWvjs
Ef1ZlsiyOHENEsnpqyCZqQGMyODgYL9naGhIyRgoq1BMCwBTyOwrmamz5X3v
e9+vJHzjG99QPZb/cvr06d/yzJgxQ/VwYIkVK1b4p7lu2bJFyRgoq1BMCwBT
yOwrmaldYz+MMm7cOHftMWXKlKwMaexOnTrlr4imTZsW1+BoUTSImVOstLUl
Z1o4e0R/liXKSpyTJ0/u91y8eHHsNzgWyh8gOX0VJPkc9bEzYqUNjJ3alTY1
lQLTkgtz5879fsL8+fNVjwVm+/rXv+6Xp5UfkT0iMvtKZups+drXvvZPCSUl
JarH8l96enr+l4dvamTL9u3b/9Wzb98+JWOgrEIxLbnw3ve+110a/dZv/Zbq
scBsrLSDZPaVzNQu5YdRokFMmwiJGUpyWaUgZ1qiPHskmpW2fd/OliXKShyt
VtrKHyA5fRUkMzUA41BWoZiWXOBn2siWhx9++NOe7du3qx6OYjL7SmZqAMah
rEIxLbmwYMGCwoTy8nLVYwHsIbOvZKZ2KT+MEg1i2kRIzFCSyyoFOdPCZ4/o
z7JElsWJa5BITl8FyUyddYcOHbrGU1xcHP0APvWpT3044atf/Wr09w5R5s6d
++ueY8eORXa/lFUopgWAKWT2lczUWXfgwAH/Vx5isVj0A5gwYYJ775MnT47+
3iHKrFmz/Gf70aNHI7tfyioU0wLAFDL7SmZqVxYPo+i80lZ+tCgaxIwMK22t
yPmwcZ3PHvnxj3/8p54XX3wxw2tpG2fULEtkWZy4ukRTA5QMQC2ZqbPOWW9c
73niiSeiH8BXvvKVv0woKCiI/t4hyuOPP/4Pnu7u7sjul7IKxbTo4Oabb/bf
fi5YsED1cJBD73//+69O+MQnPqF6LOaR2VcyUwMwDmUVimnRASttOd7znve4
D/QHP/hB1WMxj8y+kpnaZd+BoVDEtImQmKEkl1UKcqZF57NHRrfS1jbOqFmW
KDSO0Stt5Q+QnL4Kkpk6p86dO7fPc/bs2dzd0ZtvvtmW0N7enrt7AVI4dOjQ
awl79uzJ9X1RVqGYFh2cPHlyj8d5CVA9HOTQb/7mb74v4Y/+6I9Uj8U8MvtK
Zuqc2rhxo//DjdWrV+fujiZPnuzey4QJE3J3L0AKN9xwg/skHD9+fK7vi7IK
xbQAMIXMvpL826A5Ooyi20pb+dGiaBBTiWhW2pJrKi0506Lz2SOjY1mcuHWJ
LIsT1yCRnL4Kkpk6p3RbaQO5w8+0lWNaDPXSSy/5rxR/8Rd/oXo4QBRk9pXM
1Dl14MCB+z379u3L3R2tXLnyBwn8qjtUWbdu3QMJZWVlub4vyioU02Ko4Er7
C1/4gurhSLR58+bPenL6YzH4ZPaVzNQu5YdRokFMmwiJGUpyWaUgZ1osO3vE
ypW2WQ9QLBbzH4Jbb711+A5mxcmE8kRy+ipIZurI/OQnP/lbz6FDh8Z+g0uX
Lr3B09PTM/YbBLLlpptu+quE0NessaOsQjEthmpsbPx9T15enurhSJR2pY2s
k9lXMlNHZsGCBf43clY+Bm3atGn+DZ46dWrsNwhky8SJE91n5qRJk3Jx+5RV
KKYFGB1W2tGT2VcyU7siOIyiw0pb+dGiaBBTOVbaSsiZFsvOHomP6tu5oqLi
/Z577703F6MaC7MeoJMnT9Z6urq6hu9gVpxMKE8kp6+CZKaOzOLFi3/b09TU
NPYbnD59+njP6dOnx36DQLZ85jOf+W8J119/fS5un7IKxUcgilJcXOz/sOWW
W25RPRxdHDhwYImntbVV9XCQbGqA6rEoIDO1Ej/+8Y+/7env78/8ilu3bv13
T1ZO9gZyynl6f8uzfPnyEV33vvvuc9vY2Uj6L8oqFNMiCivtULNnz/anZcaM
GaqHgysytK8aGxtjsVheXl5ZWdnJkyeH71BdXT1nzpzbb7+9tLT06NGjSf9r
aOqsiPgwys033+xXQW9vb+ZXdN6k+1esra0d6f0qP1oUDWLqw3l6+89Y52k/
outee+217hWdjaT/klxWKciZFs4ecTz00EPv9Tgv65lf8aznwoULI73TzKl6
gHK00rbs+RbXIJGJfdXd3Z2fn9/S0tLX11dVVTX8I23r6+vvueceZ7fBwcHn
n3++qKgoaQcTUxtK1UobiBgr7SgxLciE/y35O7/zO6rHkn38TNsUJvZVTU1N
eXm5u93f35+Xl5d0Vv8777xz8eJFZ2NgYGD9+vUlJSVJt2BiakMFV9pf/vKX
/3vCn//5n4fuvHPnzomeW265hZU2DBJcad94441/4Fm6dGno/k5xfTzhD//w
D1lpjxTTgkyYstL+7d/+7XEJv/Ebv5H5tbZv3/7Pnpdffjl3w8MYmdhXFRUV
zvrZvxiLxUI/4KKhocF5LcvPz+/o6Ej6Lz+1f0xBzkZpaWmUd9rX13fp0qVn
nnnG+XfSpElu6TkL6X/7t38rSrj99tvdjW9+85vBDy1Zvnz5mjVrehI2btw4
0nsPHnK1eMMPq8l4crQR8ZN21BvOs/3ZZ591/n3ttdf8Z/I//MM/3Jtw0003
PfHEE/fdd5/zVHf+dVbj7g7Oy2tVVdWZBGcj6ZZNrOgIyJkWzh4Zi9GttJ1X
onGe2bNnp93fT1RSUvJXntdffz3ze3QW2O44f/VXfzXza+WIZc+3uAaJTOwr
Zw22efNm/+K8efPq6+uH7zY4ODg0NLRt27bp06cn/bmTqe8W1+Nl2vqN4Er7
6quvdrc//elP+2X4ta99zd9esWKFDmNmg41RbDjv/f1n8he/+EV/+xvf+Ia/
/aUvfclfaSddfXhBIQnTgkx88pOf/FjCl7/85cyvNepPnP785z/vX3FEP2TW
aqWNrNO5r5ylcv4w3d3dFRUVGzZs8Hdzvin27t2b4nbmzp376quvBr+ic2qL
fec73/lcwle/+tXx48e7xXLdddf51fTNb35zksf/OTZgnLa2ti94brvtttCV
9ve+973/NyH1B3FTVqGYFuRO9CvtP/7jP3Y/F3fixIkjHy90p3lfnRzGWX7X
1NQsW7bM3cE9T/vEiRPBaz333HNr1qxxt4eGhmbPnr1v377gDpqnzinlh1Fc
oSvtWbNmZev2NYmZa8TU3+rVq0NX2gcOHMjk6pLLKgU507IpQfUoskn/OMuX
L/+Ap7i4OO3+fqJRr7S1ov8DNFLKE5nYV11dXfn5+c3NzQMDA2vXrp0/f777
9dbW1uPHj8cTH+deUFBw+PBhZx2+YcOGwsLCvr6+4C2YmNoyzmPUkvD666+3
eJLeMQEWOHfuXKvHKaVmT1IpXQllFYppgYac7+vnPTn9XEGYxdC+ampqKioq
ctbbixYt8j9P23nv6b9z2bVr1z333DN9+vQlS5YM/3ujhqYGIA1lFYppAWAK
mX0lM7VL+WGUaBDTJkJihpJcVinImRbOHtGfZYksixPXIJGcvgqSmRqAcSir
UEwLAFPI7CuZqQEYh7IKxbQAMIXMvpKZ2qX8MEo0iGkTITFDSS6rFOR82Dhn
j+jPskSWxYmrSyT8zyLITA3AOJRVKKYFgClk9pXM1ACMQ1mFYloAmEJmX8lM
7bLvwFAoYtpESMxQkssqBTnTwtkj+rMskWVx4hokktNXQTJTAzAOZRWKaQFg
Cpl9JfkcdQBGoKZSYFoAmEJmX8lM7VJ+GCUaxLSJkJihJJdVCnKmhbNH9GdZ
IsvixDVIJKevgmSmBmAcyioU0wLAFDL76kqpJcyGhIxxYtpFQkzJpTQKKabF
vhmzLJFlceLWJbIsTlyDRMoHoITkFzUJGePEtIuEmNJKqbOz88EHH8zLyysq
KmptbR2+Q3V19Zw5c26//fbS0tKjR48m/a+clfamTZssS2RZnLh1iSyLE9cg
kfIBKJH1FzWuqNudGnRFJXdq0BWV3Kk+V7SyogcHB2OxWE1NzcDAQENDw4wZ
M3p7e4M71NfX33PPPd3d3c6ezz//vLMaT7qFrKy0LdvTiEGyZ3b3NGKQ7Gll
jafFSjvKKyq5U4OuqORODbqikjvV54pWVnRHR4ezuh4aGnIvlpSU7Ny5M7jD
O++8c/HiRWfDWYqvX7/e2SHpFlhpa3XX7KlqTyMGyZ5W1nharLSjvKKSOzXo
ikru1KArKrlTfa5oZUXX1dUtWLDAv1hZWVlVVTV8t4aGhry8vPz8fGdlnvRf
clbamZ89YkQc9szunkYMkj2trPG0pgKAIVT3ZfZt27atrKzMv7h27dpVq1YN
321wcHBoaMjZefr06T09PcH/Uv2YAMAI5LxVAQAiLV68OP/ddu3aVVtbu3Dh
Qn+fysrKNWvWpLiRuXPnvvrqq7kfLAAAAGCMc+fOnXy3y5cvt7e3z5w50z9P
u7S0dMeOHcFrPffcc/7a29lt9uzZ+/bti3roAAAAgGmcxXNhYWF1dfXAwMDu
3bsLCgrck0OOHTvW1tbmbBw4cMD54uHDh/v7+zds2ODs3NfXp3rUAAAAgAE6
OztLS0ud5XRRUVFLS4v7xXXr1jlfdLd37dp1zz33TJ8+fcmSJV1dXepGCgAA
AAAAAAAAAECKy5cvr1ixoqCg4I477ti6davq4eRKW1tbcXFxfn5+YWHh9u3b
VQ8nt44cOXLbbbedPn1a9UBy5dChQz/60Y/y8vLuu+8+/+C7ZYaGhp555hnn
u3L69Onl5eVnz55VPaLsq66uDn7AXWNjYywWcx7WsrKykydPKhyYWdL+bfe9
e/c6/+XusHv37uhHOFKpnwkDAwNPP/20860xY8aMpUuX6v9UyfBF1nmRclJH
ObARSfs0S7uDbpz+mT17tvO4OC3kPKlC9xkcHFyyZEl9fX3EYxuFtE8zUasg
3TjPMed1vLe3980333QeoIMHD6oeUfadP3/eefo53yzOd83hw4edft6/f7/q
QeVKf3+/s/6cOnWqrSvtM2fOOIvPhoYG59H8xS9+4fSG0zCqB5V9dXV1Tiv2
9PT09fU5/fnYY4+pHlE2OYWzZs0a51nqr7S7u7udh9J53+TkraqqCn7iNFJI
+7fdnYWos/hxVj7Oezfn32nTpjnfQapGm4m0z4Rnn332gQcecN57Ot/4Tz75
ZPAjE/WU9kXWeWheeeUV50XqnnvuUTLCtNI+zdLuoBtnPeDMtvNkczrWeTpt
3rx5+D7O/y5evNipKSNW2qmfZqJWQbpx5vz22293Hhf34qZNmx5//HG1Q8oF
J+BTTz3lX1y2bFnot5UdfvKTnzzzzDMWr7RfeOEF5xH0Lx46dMjKT2ZwlhPu
Stt56+R8V1ZUVKgeUTaVlJSsXLnS+a70V9rOa7TzMuFuO5GdxSG/CZiJtH/b
3fkv50XW3WhsbHR2vnDhgoKBZiztM2H9+vX+j0yPHTvmvHfw42sokxfZjRs3
zp8/f8uWLdqutNM+zdLuoJuHHnropZdecrcPHDgwZ86cpB2c93EzZ86srq52
elj/lXbap5moVZBunLdszpLMaTP3ovNW9P7771c7pFy7dOnS7NmzbX0319zc
7NSC867W4pX2Y489tmHDhieeeKKwsNBpy6NHj6oeUU6cOHFi7ty5zuN46623
xmIxzVdHI+X+WNVZMvkrbeethHPR38GJvGfPHjWDM0qGf9vdaYP8/Hzn6bRt
27YIRzcaI3omOMtyzX+mncmLrHtumPOqpO1KO+3TLMPnoT7uuusufxlw7tw5
5zG6ePFicAdn7ep+/KaTS/+V9ojWcnavgjT01ltvOa/j/sXGxkZtv9OzwlmC
Ou+1rfy5vcNZjDmLz+PHjzvfbhavtMvKygoKCpxi7+rqct65O41h2SrUdezY
MWcV6jyITv8vX7586dKlqkeUfcGVtpMx+DOWefPm6f/qpoMM/7b7UEJHR4ez
3tb8FTbzZ8Lu3btnzJhx5MiRqIY2Gpm/yOq80k77NMvweaiPmTNn+udXpP7Z
lBEr7cyfZnavgvTkvg/yfxfA7p9pO2Hvu+++p59+2nmvqnosOeG8Qrm/B2H3
Svvhhx9esWKFf9HpEyt/+OnUu9OW7vaZM2ecB9S+X4pM+pn2hg0b/P+KxWJ7
9+5VNC5NZeVvuzuvsMGDyAq1tbUlxXF/HzDDZ8JPf/rTuXPnvvHGG9GNOB3n
DUJSIufpnfmLrM4r7bRPs5E+D5VznjzNzc3udujPtH1GrLQzfJpZvwrSk3tu
j3/8fdOmTcE1jE0OHz585513Wvz7tpcuXXK+0QoKCqYnuNuvvvqq6nFl39q1
ax999FH/ovNC/NprrykcT444T1c/V09Pj/OAumfb2iS40q6pqfFPv3fPzj1x
4oS6oelodH/bfd++fcHD+s778WeeeSbScV+B8ygnxXF/OJD2meCEdZ42xcXF
uv1qp7NUS0rkfM9m/iKr80o77dMs7Q66cd63vvzyy+6286bP6dsr7WnESjuT
p5n1qyCd/ed//ufSpUt7e3vfeuutO+64w6ll1SPKvrNnz86aNWvr1q2nPc66
VPWgssypOL/enRcmZ2HW0dFh5YdyOGXiVMrevXvfeecdp8yder/SzyKM9uST
T953333OU7evr++JJ56w8rM4givtrq6u/Pz85ubmgYEB583U/Pnz1Y7NFGn/
truz2HO+R1555RXn+8X5rgm+HOvpSs+E1tbW48ePOxsbNmy49957nZbz+1zn
34iMX+FF1nnflPSJizqvtNM+za60g7bq6uqc2X777bcvXLhQUlLi/mqAs151
Bp80ciNW2vF0TzMJqyCdObNdUVHhVLHzZsfWz9N+/vnnp76b5ge2xsjus0cc
LS0tP/rRj5yX43nz5rW3t6seTk4475IqKyudwnTq8cc//rHmL1ujE1xpO5qa
moqKipyHddGiRfp/SLI+0v5t99dff91Zr7rfL0Z8/nzoM6G4uHjTpk3OQu77
3/9+Up9r/l479EXWyeiMPLibzivteAZPs9AdtOW8NXDeF8ydO3fGjBn+52k7
res8KO57B58pK+3UTzNpqyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJT7/wFnzJ/Y

    "], {{0, 362.25}, {730.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{730.5, 362.25},
  PlotRange->{{0, 730.5}, {0, 362.25}}]], "Output",
 CellLabel->"Out[43]=",ExpressionUUID->"543c596f-5676-424c-b66d-ff18e001fb9a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"I$NDSOLVE", "[", "]"}], " ", "uses", " ", "several", " ", "low", 
    " ", "level", " ", "functions"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$INTEGRATOR", "[", 
     RowBox[{"\"\<PROJECT\>\"", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
      RowBox[{"List", "[", "]"}]}], "]"}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Set", " ", "hamiltonian"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], " ", 
       RowBox[{"P1", "^", "2"}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"1", "/", "2"}], " ", 
       RowBox[{"Q1", "^", "2"}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"1", "/", "3"}], " ", 
       RowBox[{"Q1", "^", "3"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Set", " ", "vector", " ", "field"}], " ", "*)"}], "\n", 
   RowBox[{"FIELD", " ", "=", " ", 
    RowBox[{"I$VECTOR$FIELD", "[", "HAMILTONIAN", "]"}]}], " ", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Set", " ", "total", " ", "vector", " ", "field"}], " ", "*)"}], 
   "\n", 
   RowBox[{"FIELD", " ", "=", " ", 
    RowBox[{"I$VECTOR$FIELD$DERIVATIVE", "[", "FIELD", "]"}], 
    " "}]}]}]], "Code",
 CellLabel->"In[44]:=",ExpressionUUID->"e883c33c-cdae-4d3b-8ba5-a3ffee26cde3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"P1", ",", 
   RowBox[{
    RowBox[{"-", "Q1"}], "-", 
    SuperscriptBox["Q1", "2"]}]}], "}"}]], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"91280883-aff3-4f38-94f1-82728b62dc06"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"P1", ",", 
   RowBox[{
    RowBox[{"-", "Q1"}], "-", 
    SuperscriptBox["Q1", "2"]}], ",", "D$2$1$0", ",", 
   RowBox[{
    RowBox[{"-", "D$1$1$0"}], "-", 
    RowBox[{"2", " ", "D$1$1$0", " ", "Q1"}]}], ",", "D$2$0$1", ",", 
   RowBox[{
    RowBox[{"-", "D$1$0$1"}], "-", 
    RowBox[{"2", " ", "D$1$0$1", " ", "Q1"}]}]}], "}"}]], "Output",
 CellLabel->"Out[47]=",ExpressionUUID->"fc84e5d1-afd3-4a07-8e17-f45a91abea03"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Equations", " ", 
    RowBox[{"(", 
     RowBox[{"canonical", " ", "variables", " ", "and", " ", "derivatives"}], 
     ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"I$NDSOLVE$FLOW", "[", "FIELD", "]"}], "//", 
   "TableForm"}]}]], "Code",
 CellLabel->"In[48]:=",ExpressionUUID->"7488ada1-1edd-40c8-9110-6dedded02b50"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["Q1", "\[Prime]",
         MultilineFunction->None], "[", "S", "]"}], "\[Equal]", 
       RowBox[{"P1", "[", "S", "]"}]}]},
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["P1", "\[Prime]",
         MultilineFunction->None], "[", "S", "]"}], "\[Equal]", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Q1", "[", "S", "]"}]}], "-", 
        SuperscriptBox[
         RowBox[{"Q1", "[", "S", "]"}], "2"]}]}]},
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["D$1$1$0", "\[Prime]",
         MultilineFunction->None], "[", "S", "]"}], "\[Equal]", 
       RowBox[{"D$2$1$0", "[", "S", "]"}]}]},
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["D$2$1$0", "\[Prime]",
         MultilineFunction->None], "[", "S", "]"}], "\[Equal]", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"D$1$1$0", "[", "S", "]"}]}], "-", 
        RowBox[{"2", " ", 
         RowBox[{"D$1$1$0", "[", "S", "]"}], " ", 
         RowBox[{"Q1", "[", "S", "]"}]}]}]}]},
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["D$1$0$1", "\[Prime]",
         MultilineFunction->None], "[", "S", "]"}], "\[Equal]", 
       RowBox[{"D$2$0$1", "[", "S", "]"}]}]},
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["D$2$0$1", "\[Prime]",
         MultilineFunction->None], "[", "S", "]"}], "\[Equal]", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"D$1$0$1", "[", "S", "]"}]}], "-", 
        RowBox[{"2", " ", 
         RowBox[{"D$1$0$1", "[", "S", "]"}], " ", 
         RowBox[{"Q1", "[", "S", "]"}]}]}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[48]//TableForm=",ExpressionUUID->"64a51f2c-5647-4020-ba3d-\
e3005c156114"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Equations", " ", "with", " ", "dummy", " ", "initials"}], " ", 
   "*)"}], "\n", 
  RowBox[{
   RowBox[{"I$NDSOLVE$SYSTEM", "[", "FIELD", "]"}], " ", "//", " ", 
   "TableForm"}]}]], "Code",
 CellLabel->"In[49]:=",ExpressionUUID->"d06b840c-17f9-4b9f-bc3d-d6279a3068bd"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["Q1", "\[Prime]",
         MultilineFunction->None], "[", "S", "]"}], "\[Equal]", 
       RowBox[{"P1", "[", "S", "]"}]}]},
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["P1", "\[Prime]",
         MultilineFunction->None], "[", "S", "]"}], "\[Equal]", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"Q1", "[", "S", "]"}]}], "-", 
        SuperscriptBox[
         RowBox[{"Q1", "[", "S", "]"}], "2"]}]}]},
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["D$1$1$0", "\[Prime]",
         MultilineFunction->None], "[", "S", "]"}], "\[Equal]", 
       RowBox[{"D$2$1$0", "[", "S", "]"}]}]},
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["D$2$1$0", "\[Prime]",
         MultilineFunction->None], "[", "S", "]"}], "\[Equal]", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"D$1$1$0", "[", "S", "]"}]}], "-", 
        RowBox[{"2", " ", 
         RowBox[{"D$1$1$0", "[", "S", "]"}], " ", 
         RowBox[{"Q1", "[", "S", "]"}]}]}]}]},
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["D$1$0$1", "\[Prime]",
         MultilineFunction->None], "[", "S", "]"}], "\[Equal]", 
       RowBox[{"D$2$0$1", "[", "S", "]"}]}]},
     {
      RowBox[{
       RowBox[{
        SuperscriptBox["D$2$0$1", "\[Prime]",
         MultilineFunction->None], "[", "S", "]"}], "\[Equal]", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"D$1$0$1", "[", "S", "]"}]}], "-", 
        RowBox[{"2", " ", 
         RowBox[{"D$1$0$1", "[", "S", "]"}], " ", 
         RowBox[{"Q1", "[", "S", "]"}]}]}]}]},
     {
      RowBox[{
       RowBox[{"Q1", "[", "0", "]"}], "\[Equal]", "Q1$"}]},
     {
      RowBox[{
       RowBox[{"P1", "[", "0", "]"}], "\[Equal]", "P1$"}]},
     {
      RowBox[{
       RowBox[{"D$1$1$0", "[", "0", "]"}], "\[Equal]", "D$1$1$0$"}]},
     {
      RowBox[{
       RowBox[{"D$2$1$0", "[", "0", "]"}], "\[Equal]", "D$2$1$0$"}]},
     {
      RowBox[{
       RowBox[{"D$1$0$1", "[", "0", "]"}], "\[Equal]", "D$1$0$1$"}]},
     {
      RowBox[{
       RowBox[{"D$2$0$1", "[", "0", "]"}], "\[Equal]", "D$2$0$1$"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[49]//TableForm=",ExpressionUUID->"1af3b0d6-2d7b-4b23-b2c2-\
68c8b747ed47"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compute", " ", "map", " ", "function"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"MAP", " ", "=", " ", 
     RowBox[{"I$NDSOLVE$STATE", "[", 
      RowBox[{"FIELD", ",", "100", ",", "0.5", ",", "1"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Iterate", " ", "state"}], " ", "*)"}], "\n", 
   RowBox[{"I$NDSOLVE$ITERATE", "[", 
    RowBox[{"MAP", ",", "0.5", ",", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{"{", 
       RowBox[{"0.1", ",", "0.0"}], "}"}], "]"}]}], "]"}]}]}]], "Code",
 CellLabel->"In[50]:=",ExpressionUUID->"89409caa-875c-4552-a644-d25d51535462"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", "0.08658880510683394`", ",", 
   RowBox[{"-", "0.05230906987650024`"}], ",", "0.8542410418524755`", ",", 
   RowBox[{"-", "0.5663934239931346`"}], ",", "0.4755369988772749`", ",", 
   "0.8553311479696655`"}], "}"}]], "Output",
 CellLabel->"Out[51]=",ExpressionUUID->"e19bdec8-9bb0-40fe-83ff-eca887bc2029"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"I$NDSOLVE", "[", 
   RowBox[{"HAMILTONIAN", ",", "100", ",", "0.5", ",", "1"}], "]"}], "[", 
  RowBox[{"I$MAKE$INITIAL", "[", 
   RowBox[{"{", 
    RowBox[{"0.1", ",", "0.0"}], "}"}], "]"}], "]"}]], "Code",
 CellLabel->"In[52]:=",ExpressionUUID->"668fab9d-09c4-4a67-b125-0456d3f0dabf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", "0.08658880510683394`", ",", 
   RowBox[{"-", "0.05230906987650024`"}], ",", "0.8542410418524755`", ",", 
   RowBox[{"-", "0.5663934239931346`"}], ",", "0.4755369988772749`", ",", 
   "0.8553311479696655`"}], "}"}]], "Output",
 CellLabel->"Out[52]=",ExpressionUUID->"0c5f9074-b2d4-424e-b7ba-24c06b79a513"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-04: (I$NDSOLVE) Application examples", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"95ac934a-a59f-400c-9e63-59973c2bebb0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[53]:=",ExpressionUUID->"611bf549-b91e-4ea9-b29a-9a77240e810b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Taylor", " ", "map", " ", "generation", " ", "for", " ", "4", "D", " ", 
    "linear", " ", "system", " ", "with", " ", "two", " ", "parameters"}], 
   " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator", " ", "parameters"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$INTEGRATOR", "[", "\n", "\t", 
     RowBox[{"\"\<PROJECT\>\"", ",", "           ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"--", " ", "create"}], "/", "set"}], " ", "working", " ", 
        "directory", " ", 
        RowBox[{"(", "string", ")"}]}], " ", "*)"}], "\n", "\t", 
      RowBox[{"Plus", "[", 
       RowBox[{"1", ",", "1"}], "]"}], ",", "           ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"--", " ", "configuration"}], " ", "space", " ", "dimension",
          " ", 
         RowBox[{"(", "integer", ")"}]}], ",", " ", 
        RowBox[{
        "hafl", " ", "of", " ", "phase", " ", "space", " ", "dimension"}]}], 
       " ", "*)"}], "\n", "\t", "1", ",", "                   ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", "canonical"}], " ", "computation", " ", "order", 
        " ", 
        RowBox[{"(", 
         RowBox[{"total", " ", "canonical", " ", "monomial", " ", "degree"}], 
         ")"}], " ", "of", " ", "derivatives", " ", 
        RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", 
      RowBox[{"Plus", "[", 
       RowBox[{"1", ",", "1"}], "]"}], ",", "           ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", "total"}], " ", "number", " ", "of", " ", 
        "parameter", " ", "variables", " ", 
        RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", 
      RowBox[{"Plus", "[", 
       RowBox[{"1", ",", "1"}], "]"}], ",", "           ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", "parametric"}], " ", "computation", " ", "order", 
        " ", 
        RowBox[{"(", 
         RowBox[{"total", " ", "parametric", " ", "monomial", " ", "order"}], 
         ")"}], " ", "of", " ", "derivatives", " ", 
        RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", 
      RowBox[{"List", "[", "]"}]}], "               ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "list"}], " ", "of", " ", "individual", " ", 
       "orders", " ", "for", " ", "each", " ", "parameter", " ", 
       RowBox[{"(", 
        RowBox[{
        "list", " ", "of", " ", "integers", " ", "for", " ", "each", " ", 
         "parameter", " ", "or", " ", "empty", " ", "list"}], ")"}]}], " ", 
      "*)"}], "\n", "]"}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "Hamiltonian", " ", "function", " ", 
     RowBox[{"(", 
      RowBox[{
      "generates", " ", "linear", " ", "map", " ", "with", " ", "two", " ", 
       "parameters"}], ")"}]}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Q1", ",", "P1", ",", "Q2", ",", "P2"}], "}"}], " ", "--"}], 
     " ", "canonical", " ", "coordinates"}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"K1", ",", "K2"}], "}"}], "       ", "--"}], " ", 
     "parameters"}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"S", "             ", "--"}], " ", "formal", " ", "integration", 
     " ", "parameter"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"P1", "^", "2"}], " ", "+", " ", 
         RowBox[{"P2", "^", "2"}]}], ")"}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"1", "/", "2"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"K1", " ", 
          RowBox[{"Q1", "^", "2"}]}], " ", "+", " ", 
         RowBox[{"K2", " ", 
          RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compute", " ", "analytical", " ", "solution", " ", "with", " ", 
     RowBox[{"DSolve", "[", "]"}], " ", 
     RowBox[{"(", 
      RowBox[{
      "I$DSOLVE", " ", "acts", " ", "on", " ", "list", " ", "of", " ", 
       "Hamiltonian", " ", "functions"}], ")"}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"SOLUTION", " ", "=", " ", 
     RowBox[{"First", "[", 
      RowBox[{"I$DSOLVE", "[", 
       RowBox[{"List", "[", "HAMILTONIAN", "]"}], "]"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Substitute", " ", "numerical", " ", "values", " ", "into", " ", 
     "analytical", " ", "solution", " ", 
     RowBox[{"(", 
      RowBox[{
      "canonical", " ", "variables", " ", "and", " ", "parameters", " ", 
       "are", " ", "replaced", " ", "by", " ", "actual", " ", "values", " ", 
       "plus", " ", "deviation", " ", "variables"}], ")"}]}], " ", "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"SOLUTION", " ", "=", " ", 
     RowBox[{"SOLUTION", " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"S", " ", "\[Rule]", "  ", "1.0"}], ",", " ", 
        RowBox[{"Q1", " ", "\[Rule]", " ", 
         RowBox[{"1.0", " ", "+", " ", "Q1"}]}], ",", " ", 
        RowBox[{"P1", " ", "\[Rule]", " ", 
         RowBox[{"0.0", " ", "+", " ", "P1"}]}], ",", " ", 
        RowBox[{"Q2", " ", "\[Rule]", " ", 
         RowBox[{"0.0", " ", "+", " ", "Q2"}]}], ",", " ", 
        RowBox[{"P2", " ", "\[Rule]", " ", 
         RowBox[{"1.0", " ", "+", " ", "P2"}]}], ",", " ", 
        RowBox[{"K1", " ", "\[Rule]", " ", 
         RowBox[{"1.0", " ", "+", " ", "K1"}]}], ",", " ", 
        RowBox[{"K2", " ", "\[Rule]", " ", 
         RowBox[{"2.0", " ", "+", " ", "K2"}]}]}], "}"}]}]}], " ", ";"}], 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Expand", " ", "analytical", " ", "solution", " ", "with", " ", "respect",
      " ", "to", " ", "deviation", " ", "variables"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"SOLUTION", " ", "=", " ", 
     RowBox[{"I$EXPAND", "[", 
      RowBox[{"I$ORDER", ",", "I$VARIABLES$DEVIATION", ",", "SOLUTION"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SOLUTION", " ", "=", " ", 
     RowBox[{
      RowBox[{"Collect", "[", 
       RowBox[{"SOLUTION", ",", "I$VARIABLES$CANONICAL"}], "]"}], " ", "/.", 
      " ", 
      RowBox[{
       RowBox[{
        RowBox[{"X_", "^", "Y_"}], " ", "/;", " ", 
        RowBox[{"Y", " ", ">", " ", "2"}]}], " ", "\[RuleDelayed]", " ", 
       "0"}]}]}], ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Trim", " ", "power", " ", "according", " ", "with", " ", "integrator", 
     " ", "signature"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"SOLUTION", " ", "=", " ", 
     RowBox[{"SOLUTION", " ", "/.", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"X_", "^", "Y_"}], " ", "/;", " ", 
        RowBox[{"Y", " ", ">", " ", "2"}]}], " ", "\[RuleDelayed]", " ", 
       "0"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"SOLUTION", " ", "//", " ", "TableForm"}], " ", "//", " ", 
    "Print"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Define", " ", "initial", " ", "condition", " ", "for", " ", "numerical", 
     " ", "solution"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1.0", ",", "2.0"}], "}"}], ",", "             ", 
       RowBox[{"(*", " ", 
        RowBox[{"--", " ", "parameters"}], " ", "*)"}], "\n", "\t", 
       RowBox[{"{", 
        RowBox[{"1.0", ",", "0.0", ",", "0.0", ",", "1.0"}], "}"}]}], 
      "      ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", "canonical"}], " ", "coordinates"}], " ", "*)"}], 
      "\n", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Define", " ", "numerical", " ", "map", " ", "for", " ", "given", " ", 
     "hamiltonian"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"MAP", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", "\n", "\t", 
      RowBox[{"HAMILTONIAN", ",", "           ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "Hamiltonian"}], " ", "function"}], " ", "*)"}], 
       "\n", "\t", "100", ",", "                   ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "number"}], " ", "of", " ", "integration", " ", 
         "steps"}], " ", "*)"}], "\n", "\t", "1.0", ",", 
       "                   ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "integration"}], " ", "length"}], " ", "*)"}], 
       "\n", "\t", "1", ",", "                     ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "integration"}], " ", "method"}], " ", "*)"}], 
       "\n", "\t", "I$NDSOLVE$ITERATE"}], "      ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"--", " ", "iterator"}], " ", "type"}], ",", " ", 
        RowBox[{"I$NDSOLVE$ITERATE", " ", 
         RowBox[{"(", "default", ")"}], " ", "or", " ", 
         "I$NDSOLVE$ITERATE$FULL"}]}], " ", "*)"}], " ", "\n", "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Apply", " ", "initial", " ", "condition"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"STATE", " ", "=", " ", 
     RowBox[{"MAP", "[", "INITIAL", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Build", " ", "components", " ", "from", " ", "state"}], " ", 
    "*)"}], " ", "\n", 
   RowBox[{
    RowBox[{"SERIES", " ", "=", " ", 
     RowBox[{"I$MAKE$COMPONENTS", "[", "STATE", "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SERIES", " ", "=", " ", 
     RowBox[{"Collect", "[", 
      RowBox[{"SERIES", ",", "I$VARIABLES$CANONICAL"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SERIES", " ", "//", " ", "TableForm"}], " ", "//", " ", 
    "Print"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Check", " ", "result"}], " ", "*)"}], "\n", 
   RowBox[{"Chop", "[", 
    RowBox[{"Expand", "[", 
     RowBox[{"Subtract", "[", 
      RowBox[{"SOLUTION", ",", "SERIES"}], "]"}], "]"}], "]"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
     "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
     "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
     "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
     "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
     "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
     "##", "##", "##", "##", "##", "##", "##", "##"}], " ", 
    "*)"}]}]}]], "Code",
 CellLabel->
  "In[301]:=",ExpressionUUID->"b3899be7-1dac-4f53-9a46-300017fe01b1"],

Cell[CellGroupData[{

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"0.5403023058681398`", "\[VeryThinSpace]", "-", 
       RowBox[{"0.42073549240394825`", " ", "K1"}], "+", 
       RowBox[{"0.03764608486746959`", " ", 
        SuperscriptBox["K1", "2"]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"0.8414709848078965`", "\[VeryThinSpace]", "-", 
          RowBox[{"0.15058433946987837`", " ", "K1"}], "+", 
          RowBox[{"0.007754381501421714`", " ", 
           SuperscriptBox["K1", "2"]}]}], ")"}], " ", "P1"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"0.5403023058681398`", "\[VeryThinSpace]", "-", 
          RowBox[{"0.42073549240394825`", " ", "K1"}], "+", 
          RowBox[{"0.03764608486746959`", " ", 
           SuperscriptBox["K1", "2"]}]}], ")"}], " ", "Q1"}]}]},
     {
      RowBox[{
       RowBox[{"-", "0.8414709848078965`"}], "-", 
       RowBox[{"0.6908866453380181`", " ", "K1"}], "+", 
       RowBox[{"0.14282995796845666`", " ", 
        SuperscriptBox["K1", "2"]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"0.5403023058681398`", "\[VeryThinSpace]", "-", 
          RowBox[{"0.4207354924039482`", " ", "K1"}], "+", 
          RowBox[{"0.03764608486746959`", " ", 
           SuperscriptBox["K1", "2"]}]}], ")"}], " ", "P1"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "0.8414709848078965`"}], "-", 
          RowBox[{"0.6908866453380181`", " ", "K1"}], "+", 
          RowBox[{"0.14282995796845666`", " ", 
           SuperscriptBox["K1", "2"]}]}], ")"}], " ", "Q1"}]}]},
     {
      RowBox[{"0.6984559986366083`", "\[VeryThinSpace]", "-", 
       RowBox[{"0.1356280759678085`", " ", "K2"}], "+", 
       RowBox[{"0.007207028573140158`", " ", 
        SuperscriptBox["K2", "2"]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"0.6984559986366083`", "\[VeryThinSpace]", "-", 
          RowBox[{"0.1356280759678085`", " ", "K2"}], "+", 
          RowBox[{"0.007207028573140158`", " ", 
           SuperscriptBox["K2", "2"]}]}], ")"}], " ", "P2"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"0.15594369476537437`", "\[VeryThinSpace]", "-", 
          RowBox[{"0.3492279993183042`", " ", "K2"}], "+", 
          RowBox[{"0.03390701899195213`", " ", 
           SuperscriptBox["K2", "2"]}]}], ")"}], " ", "Q2"}]}]},
     {
      RowBox[{"0.15594369476537437`", "\[VeryThinSpace]", "-", 
       RowBox[{"0.3492279993183042`", " ", "K2"}], "+", 
       RowBox[{"0.03390701899195213`", " ", 
        SuperscriptBox["K2", "2"]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"0.15594369476537437`", "\[VeryThinSpace]", "-", 
          RowBox[{"0.3492279993183042`", " ", "K2"}], "+", 
          RowBox[{"0.03390701899195213`", " ", 
           SuperscriptBox["K2", "2"]}]}], ")"}], " ", "P2"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1.396911997273217`"}], "-", 
          RowBox[{"0.4271998467009914`", " ", "K2"}], "+", 
          RowBox[{"0.12121401882152821`", " ", 
           SuperscriptBox["K2", "2"]}]}], ")"}], " ", "Q2"}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Print",
 CellLabel->
  "During evaluation of \
In[301]:=",ExpressionUUID->"bcef0744-c7ad-4c7e-8b1a-6732edbd1547"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"0.5403023058681395`", "\[VeryThinSpace]", "-", 
       RowBox[{"0.42073549240394836`", " ", "K1"}], "+", 
       RowBox[{"0.03764608486746962`", " ", 
        SuperscriptBox["K1", "2"]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"0.8414709848078966`", "\[VeryThinSpace]", "-", 
          RowBox[{"0.15058433946987848`", " ", "K1"}], "+", 
          RowBox[{"0.0077543815014217395`", " ", 
           SuperscriptBox["K1", "2"]}]}], ")"}], " ", "P1"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"0.5403023058681395`", "\[VeryThinSpace]", "-", 
          RowBox[{"0.42073549240394836`", " ", "K1"}], "+", 
          RowBox[{"0.03764608486746962`", " ", 
           SuperscriptBox["K1", "2"]}]}], ")"}], " ", "Q1"}]}]},
     {
      RowBox[{
       RowBox[{"-", "0.8414709848078966`"}], "-", 
       RowBox[{"0.6908866453380181`", " ", "K1"}], "+", 
       RowBox[{"0.14282995796845674`", " ", 
        SuperscriptBox["K1", "2"]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"0.5403023058681395`", "\[VeryThinSpace]", "-", 
          RowBox[{"0.42073549240394836`", " ", "K1"}], "+", 
          RowBox[{"0.03764608486746963`", " ", 
           SuperscriptBox["K1", "2"]}]}], ")"}], " ", "P1"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "0.8414709848078966`"}], "-", 
          RowBox[{"0.6908866453380181`", " ", "K1"}], "+", 
          RowBox[{"0.14282995796845674`", " ", 
           SuperscriptBox["K1", "2"]}]}], ")"}], " ", "Q1"}]}]},
     {
      RowBox[{"0.6984559986366083`", "\[VeryThinSpace]", "-", 
       RowBox[{"0.13562807596780854`", " ", "K2"}], "+", 
       RowBox[{"0.007207028573140161`", " ", 
        SuperscriptBox["K2", "2"]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"0.6984559986366083`", "\[VeryThinSpace]", "-", 
          RowBox[{"0.13562807596780854`", " ", "K2"}], "+", 
          RowBox[{"0.007207028573140161`", " ", 
           SuperscriptBox["K2", "2"]}]}], ")"}], " ", "P2"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"0.1559436947653742`", "\[VeryThinSpace]", "-", 
          RowBox[{"0.3492279993183042`", " ", "K2"}], "+", 
          RowBox[{"0.03390701899195214`", " ", 
           SuperscriptBox["K2", "2"]}]}], ")"}], " ", "Q2"}]}]},
     {
      RowBox[{"0.1559436947653742`", "\[VeryThinSpace]", "-", 
       RowBox[{"0.3492279993183043`", " ", "K2"}], "+", 
       RowBox[{"0.03390701899195214`", " ", 
        SuperscriptBox["K2", "2"]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"0.1559436947653742`", "\[VeryThinSpace]", "-", 
          RowBox[{"0.3492279993183043`", " ", "K2"}], "+", 
          RowBox[{"0.03390701899195214`", " ", 
           SuperscriptBox["K2", "2"]}]}], ")"}], " ", "P2"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1.3969119972732167`"}], "-", 
          RowBox[{"0.4271998467009913`", " ", "K2"}], "+", 
          RowBox[{"0.12121401882152821`", " ", 
           SuperscriptBox["K2", "2"]}]}], ")"}], " ", "Q2"}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Print",
 CellLabel->
  "During evaluation of \
In[301]:=",ExpressionUUID->"ea003ff6-1988-45eb-8936-911c2e520d0f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]], "Output",
 CellLabel->
  "Out[315]=",ExpressionUUID->"ea7b88cf-25df-47ae-abf6-95a06bd3fa33"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Taylor", " ", "map", " ", "generation", " ", "for", " ", "2", "D", " ", 
    "nonlinear", " ", "system", " ", "with", " ", "one", " ", "parameter"}], 
   " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator", " ", "parameters"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"DIMENSION", " ", "=", " ", "1"}], " ", ";", "     ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "configuration"}], " ", "space", " ", "dimension"}], 
     " ", "*)"}], "\n", 
    RowBox[{"ORDER", "     ", "=", " ", "2"}], " ", ";", "     ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "maximum"}], " ", "canonical", " ", "monomial", " ", 
      "order"}], " ", "*)"}], "\n", 
    RowBox[{"KNOB", "      ", "=", " ", "1"}], " ", ";", "     ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "number"}], " ", "of", " ", "parameters"}], " ", 
     "*)"}], "\n", 
    RowBox[{"DEGREE", "    ", "=", " ", "2"}], " ", ";"}], "     ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "maximum"}], " ", "parametric", " ", "monomial", " ", 
     "order"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$INTEGRATOR", "[", "\n", "\t", 
     RowBox[{"\"\<PROJECT\>\"", ",", "      ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"--", " ", "create"}], "/", "set"}], " ", "working", " ", 
        "directory", " ", 
        RowBox[{"(", "string", ")"}]}], " ", "*)"}], "\n", "\t", "DIMENSION", 
      ",", "      ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"--", " ", "configuration"}], " ", "space", " ", "dimension",
          " ", 
         RowBox[{"(", "integer", ")"}]}], ",", " ", 
        RowBox[{
        "hafl", " ", "of", " ", "phase", " ", "space", " ", "dimension"}]}], 
       " ", "*)"}], "\n", "\t", "ORDER", ",", "          ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", "canonical"}], " ", "computation", " ", "order", 
        " ", 
        RowBox[{"(", 
         RowBox[{"total", " ", "canonical", " ", "monomial", " ", "degree"}], 
         ")"}], " ", "of", " ", "derivatives", " ", 
        RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", "KNOB", ",",
       "           ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", "total"}], " ", "number", " ", "of", " ", 
        "parameter", " ", "variables", " ", 
        RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", "DEGREE", 
      ",", "         ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", "parametric"}], " ", "computation", " ", "order", 
        " ", 
        RowBox[{"(", 
         RowBox[{"total", " ", "parametric", " ", "monomial", " ", "order"}], 
         ")"}], " ", "of", " ", "derivatives", " ", 
        RowBox[{"(", "integer", ")"}]}], " ", "*)"}], "\n", "\t", 
      RowBox[{"List", "[", "]"}]}], "          ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "list"}], " ", "of", " ", "individual", " ", 
       "orders", " ", "for", " ", "each", " ", "parameter", " ", 
       RowBox[{"(", 
        RowBox[{
        "list", " ", "of", " ", "integers", " ", "for", " ", "each", " ", 
         "parameter", " ", "or", " ", "empty", " ", "list"}], ")"}]}], " ", 
      "*)"}], "\n", "]"}], "  ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "hamiltonan"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"P1", "^", "2"}], " ", "+", " ", 
         RowBox[{"Q1", "^", "2"}]}], ")"}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"1", "/", "4"}], " ", "K1", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"P1", "^", "2"}], " ", "+", " ", 
          RowBox[{"Q1", "^", "2"}]}], ")"}], "^", "2"}]}]}]}], " ", ";"}], 
   " ", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Analytical", " ", "solution"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"SOLUTION", " ", "=", " ", 
     RowBox[{"{", "\n", "\t", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Cos", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "+", 
             RowBox[{"K1", "*", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Q1", "^", "2"}], "+", 
                RowBox[{"P1", "^", "2"}]}], ")"}]}]}], ")"}], "*", "S"}], 
          "]"}], "*", "Q1"}], "+", 
        RowBox[{
         RowBox[{"Sin", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "+", 
             RowBox[{"K1", "*", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Q1", "^", "2"}], "+", 
                RowBox[{"P1", "^", "2"}]}], ")"}]}]}], ")"}], "*", "S"}], 
          "]"}], "*", "P1"}]}], ",", "\n", "\t", 
       RowBox[{
        RowBox[{
         RowBox[{"Cos", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "+", 
             RowBox[{"K1", "*", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Q1", "^", "2"}], "+", 
                RowBox[{"P1", "^", "2"}]}], ")"}]}]}], ")"}], "*", "S"}], 
          "]"}], "*", "P1"}], "-", 
        RowBox[{
         RowBox[{"Sin", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "+", 
             RowBox[{"K1", "*", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Q1", "^", "2"}], "+", 
                RowBox[{"P1", "^", "2"}]}], ")"}]}]}], ")"}], "*", "S"}], 
          "]"}], "*", "Q1"}]}]}], "\n", "}"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Substitute", " ", "numerical", " ", "values"}], " ", "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"SOLUTION", " ", "=", " ", 
     RowBox[{"SOLUTION", " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"S", " ", "\[Rule]", " ", "1.0"}], ",", " ", 
        RowBox[{"Q1", " ", "\[Rule]", " ", 
         RowBox[{"1.0", " ", "+", " ", "Q1"}]}], ",", " ", 
        RowBox[{"P1", " ", "\[Rule]", " ", 
         RowBox[{"0.0", " ", "+", " ", "P1"}]}], ",", " ", 
        RowBox[{"K1", " ", "\[Rule]", " ", 
         RowBox[{"0.1", " ", "+", " ", "K1"}]}]}], "}"}]}]}], " ", ";"}], 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Expand", " ", "analytical", " ", "solution", " ", "according", " ", "to",
      " ", "signature"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"SOLUTION", " ", "=", " ", 
     RowBox[{"I$EXPAND", "[", 
      RowBox[{"ORDER", ",", "I$VARIABLES$CANONICAL", ",", "SOLUTION"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SOLUTION", " ", "=", " ", 
     RowBox[{"I$EXPAND", "[", 
      RowBox[{"DEGREE", ",", "I$VARIABLES$PARAMETRIC", ",", "SOLUTION"}], 
      "]"}]}], "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SOLUTION", " ", "=", " ", 
     RowBox[{"Collect", "[", 
      RowBox[{"SOLUTION", ",", "I$VARIABLES$CANONICAL"}], "]"}]}], " ", ";"}],
    "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "initial", " ", "condition"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{
       RowBox[{"{", "0.1", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1.0", ",", "0.0"}], "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "map"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"MAP", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{
      "HAMILTONIAN", ",", "1000", ",", "1.0", ",", "1", ",", 
       "I$NDSOLVE$ITERATE"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", "Advance", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"STATE", " ", "=", " ", 
     RowBox[{"MAP", "[", "INITIAL", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Series", " ", "representation"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"SERIES", " ", "=", " ", 
     RowBox[{"I$MAKE$COMPONENTS", "[", "STATE", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compare", " ", "solutions"}], " ", "*)"}], "\n", 
   RowBox[{"Chop", "[", 
    RowBox[{"Expand", "[", 
     RowBox[{"Subtract", "[", 
      RowBox[{"SOLUTION", ",", "SERIES"}], "]"}], "]"}], "]"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Use", " ", "approximate", " ", "map", " ", "to", " ", "estimate", " ", 
     "solution", " ", "and", " ", "compare", " ", "with", " ", "numerical", 
     " ", "one", " ", 
     RowBox[{"(", 
      RowBox[{
      "change", " ", "orders", " ", "to", " ", "observe", "  ", 
       "convergence"}], ")"}]}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Set", " ", "integrator", " ", 
     RowBox[{"(", 
      RowBox[{"no", " ", "derivatives"}], ")"}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$INTEGRATOR", "[", 
     RowBox[{"\"\<PROJECT\>\"", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
      RowBox[{"List", "[", "]"}]}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"NUMERIC", " ", "=", " ", 
     RowBox[{
      RowBox[{"I$NDSOLVE", "[", 
       RowBox[{"HAMILTONIAN", ",", "1000", ",", "1.0", ",", "1"}], "]"}], "[", 
      RowBox[{"I$MAKE$INITIAL", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0.1", "+", "0.0001"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1.0", "+", "0.005"}], ",", 
          RowBox[{"0.0", "+", "0.005"}]}], "}"}]}], "]"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{"NUMERIC", " ", "=", " ", 
    RowBox[{"Take", "[", 
     RowBox[{"NUMERIC", ",", 
      RowBox[{"-", "I$DIMENSION$CANONICAL"}]}], "]"}]}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Substitute", " ", "values", " ", "into", " ", "series"}], " ", 
    "*)"}], "\n", 
   RowBox[{"RESULT", " ", "=", " ", 
    RowBox[{"SERIES", " ", "/.", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Q1", " ", "\[Rule]", " ", "0.005"}], ",", " ", 
       RowBox[{"P1", " ", "\[Rule]", " ", "0.005"}], ",", " ", 
       RowBox[{"K1", " ", "\[Rule]", " ", "0.0001"}]}], "}"}]}]}], "\n", 
   RowBox[{"(*", " ", "Compare", " ", "*)"}], "\n", 
   RowBox[{"Chop", "[", 
    RowBox[{"Expand", "[", 
     RowBox[{"Subtract", "[", 
      RowBox[{"NUMERIC", ",", "RESULT"}], "]"}], "]"}], "]"}]}]}]], "Code",
 CellLabel->
  "In[713]:=",ExpressionUUID->"b737ce43-e107-4d68-846b-3ef8da9bd35b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0"}], "}"}]], "Output",
 CellLabel->
  "Out[725]=",ExpressionUUID->"980fa46a-bc30-4e53-9997-65d1b4cba03f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.45933175769450646`", ",", 
   RowBox[{"-", "0.8939039861043663`"}]}], "}"}]], "Output",
 CellLabel->
  "Out[728]=",ExpressionUUID->"bfdf76c0-319a-468c-987c-1542ebcce5ea"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.45933177417746374`", ",", 
   RowBox[{"-", "0.8939039581137812`"}]}], "}"}]], "Output",
 CellLabel->
  "Out[729]=",ExpressionUUID->"a734f630-5c22-43e0-9d0c-5e7859e3e7ee"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "1.6482957276853227`*^-8"}], ",", 
   RowBox[{"-", "2.799058507196861`*^-8"}]}], "}"}]], "Output",
 CellLabel->
  "Out[730]=",ExpressionUUID->"1bae0722-825d-48bf-8db4-f8e92e42e0e4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"2", "D", " ", "cubic", " ", "Hamiltonian", " ", "tracking"}], " ",
    "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$INTEGRATOR", "[", 
     RowBox[{"\"\<PROJECT\>\"", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
      RowBox[{"List", "[", "]"}]}], "]"}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "hamiltonian", " ", "function"}], " ", "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], " ", 
       RowBox[{"P1", "^", "2"}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"1", "/", "2"}], " ", 
       RowBox[{"Q1", "^", "2"}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"1", "/", "3"}], " ", 
       RowBox[{"Q1", "^", "3"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Make", " ", "map"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"MAP", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"HAMILTONIAN", ",", "100", ",", "0.1", ",", "1"}], "]"}]}], " ",
     ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "set", " ", "of", " ", "initial", " ", "points"}], 
    " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"I$MAKE$INITIAL", "[", 
        RowBox[{"{", 
         RowBox[{"INI", ",", "0.0"}], "}"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"INI", ",", "0.1", ",", "1.0", ",", "0.1"}], "}"}]}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Plot", " ", "some", " ", "level", " ", "sets"}], " ", "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"LEVEL", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"Equal", "[", 
         RowBox[{"HAMILTONIAN", ",", 
          RowBox[{"ReplaceAll", "[", 
           RowBox[{"HAMILTONIAN", ",", 
            RowBox[{"Thread", "[", 
             RowBox[{"Rule", "[", 
              RowBox[{"I$VARIABLES$CANONICAL", ",", 
               RowBox[{"Rest", "[", 
                RowBox[{"Slot", "[", "1", "]"}], "]"}]}], "]"}], "]"}]}], 
           "]"}]}], "]"}], "]"}], ",", "INITIAL"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"LEVEL", " ", "=", " ", 
     RowBox[{"ContourPlot", "[", 
      RowBox[{
       RowBox[{"Evaluate", "[", "LEVEL", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"Q1", ",", 
         RowBox[{"-", "1.25"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"P1", ",", 
         RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
       RowBox[{"ContourStyle", " ", "\[Rule]", " ", "Black"}], ",", 
       RowBox[{"ImageSize", " ", "\[Rule]", " ", "500"}], ",", 
       RowBox[{"AspectRatio", " ", "\[Rule]", " ", "1"}], ",", 
       RowBox[{"PlotPoints", " ", "\[Rule]", " ", "100"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{"(*", " ", "Tracking", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"NestWhileList", "[", 
         RowBox[{"MAP", ",", 
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"Function", "[", 
           RowBox[{"LessEqual", "[", 
            RowBox[{
             RowBox[{"Norm", "[", 
              RowBox[{"Rest", "[", 
               RowBox[{"Slot", "[", "1", "]"}], "]"}], "]"}], ",", "10.0"}], 
            "]"}], "]"}], ",", "1", ",", 
          RowBox[{
           RowBox[{"2", "^", "8"}], "-", "1"}]}], "]"}], "]"}], ",", 
       "INITIAL"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Plot", " ", "result"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Show", "[", "\n", "\t", 
     RowBox[{"LEVEL", ",", "\n", "\t", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{"Map", "[", "Rest", "]"}], ",", "DATA"}], "]"}], ",", 
        RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
         RowBox[{"Directive", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"PointSize", "[", "Medium", "]"}], ",", "Red"}], "}"}], 
          "]"}]}]}], "]"}], ",", "\n", "\t", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{"Rest", ",", "INITIAL"}], "]"}], ",", 
        RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
         RowBox[{"Directive", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"PointSize", "[", "Large", "]"}], ",", "Gray"}], "}"}], 
          "]"}]}]}], "]"}]}], "\n", "]"}], " ", "//", " ", 
    "Rasterize"}]}]}]], "Code",
 CellLabel->
  "In[774]:=",ExpressionUUID->"e6ccfd57-17b0-46dd-91b7-97e920ed8918"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQlcTVv7x4+ZMs/z7Mo8XKLM86yQKclU/5QhUkiSZGgiRaFMGcuUqIjM
tyiSOZIyNZBKA01y/r/Ouu9+z1tkOns4p/X9dO8nyXqes/fa6/c8a6/1rBZz
jSf+X2mRSLSsIv43cc6KQSYmc8wnVccfJi9eZmiwWF9v1GJTfQN9k95zy+CH
zvhdD/xX8L2YHf6PQqFQKBQKV7Ck5kTQBdsaS23SBktCg2y0SRsUYINstEkb
LAkNstHmzzRIBZ02SBsUQpu0QQE2yEabtMGS0CAbbVJB575N2mBJaJCNNmmD
AmyQjTZpgyWhQTbaVDBBlwtK4EcWPvSmCBN6X4QJvS/ChAo695TAjyx86E0R
JvS+CBN6X4QJFXQKhUKhUEoIVNApFAqFQlEAqKBTKBQKhaIA/Izm5ufnOzs7
37p1q+hfZWdne3h4LF682NTUNCgo6Dcap1AoFAqF8uf8UHOTkpKcnJzwa98U
dE9PT1dX16ysrNevX0PTo6KifqlxCoVCoVAoMqF4zUUCvnTpUn9//w0bNhQV
dGTuCxcuhJSTP545c2bPnj0/3ziFQqFQKBRZUbzmQrLT09PxzaZNm4oKOpJ3
/PPc3Fzyx7CwsHXr1v18438IzEVHR3/9+pU9EwrMx48fr1+/Tm4uhUIpmdy4
caPQtKoAwTDl5eXFtxfywU9q7jcFPS4uzsDAgPnjvXv3LCwsCjXOXt347t27
i0Si+vXra2lpOTk5hYaG5uTkyLB9RQJB1+PHj729vVevXj1+/PjmzZuLJFy8
eJFv1ygUCj+8evWqdu3a1apVO3v2LN++fJeUlJR27dphsDpz5gzfvgiU3xDZ
YjL0vLw88kcuM3QoVOfOnUX/S4UKFdTU1BYtWrR///5Hjx4xjpU0Pn/+/ODB
gxMnTtjY2EyePLljx47lypUTFaFGjRpHjx7l21kKhcIPMTExXbp0IaOBtbV1
fn4+3x59g69fv86cORMeVq9e/cWLF3y7I3T+RNDJO/Q3b96QPyKC8vDw+I3G
f5vk5GQ/P7+VK1f26dOnYsWKhQQLP+nRo8fcuXORv58/fx5+Kt78fE5OztOn
T/39/bdu3Yp7MWLEiBYtWpQqVaqofJcpU0ZFRUVLSwtBF+7Uy5cvFe9qUIQD
eld2djZi/tevX0dGRt67dy80NPTatWuXLl3Cw4iU0NfX10fC6dOn8X1AQMCF
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
k15Xv359fouzFQ9cbdWqFfz8+++/eXnldOjQIVhH4hwdHc2BuXv37pH7IhfH
tVBBp5RwXr58uWHDhjZt2jA6Dk2HsgcHB8vLizOKYnDx4sVmzZqRTjhr1izB
vtl58uQJKbkwY8YM7p8RWOzduzesT5w4kRuLgwcPFslJJVgq6JSSSWZm5oED
B8jJSszuYA0NjZMnT9IT5yl8kZ6ezqTqzZs3F2xlOVIcFbi4uHBvPSQkhFi/
du0aB+Z8fX1hq1KlSkJ+G0Kggk4pUZBd5HPmzFFSUmKkvHv37s7OzpwVoaJQ
isff35+8VS9duvTatWuFeWSbpaUlCYN5iTqmTp3K2RY2XH9S1mbTpk1s2/pD
qKBTSgixsbHW1tYtW7ZkdLx+/frLly9/9OgR365RKIVBeEm2XYP+/fu/efOG
b48KAyUlS/TxHL17945j6y9fviTLVg8fPsyBOScnJ9hq0qSJMIMrBiroFMXm
06dPBw8eHDhwIKPjGAemTJmCJIhWdaMIma9fv27bto3IVu3atQMDA/n2qDBJ
SUmkQs6QIUO4VzpyaHvz5s05eEf28eNHUivv1KlTbNv6E6igUxQSDIY3b97U
19cnjyGhR48e27dvF/6LMAqFISIigqzYLFWq1Jo1a4SWIYaFhZGQY+3atRyb
TklJqVGjBkwjfebA3MKFC2Fr0KBBHNj6baigUxSMxMREe3v7du3aMTqO7AbB
/IMHD/h2jUL5HdLT06dMmUI68/Dhw4UWkbq4uJB44/LlyxybdnR0hOlatWpx
sCMgMjKS3AIhv6Sjgk5RDHJzc0+fPj1+/PgyZcowq9Y1NTXxQ1ponSLvfP36
dfv27aSaeosWLe7du8e3R/8Fvk2aNImXl+lZWVnkbAVLS0sOzA0dOhS2jIyM
OLD1e1BBp8g7jx8/NjU1rVOnDpOSd+jQwcHBgfuFOhQKqwQHB5OTTJWUlI4f
P863O/8lNTW1SZMmcGzkyJEcnx+3d+9e2FVWVuagkOPJkydFkiOZBFt4nwo6
RU5JS0tzd3fv2bMno+N40AwMDMLCwmhBGIqiEh8fr6qqSjr8+vXrhdPVEWyQ
CQRnZ2cu7ebl5f3111+wu3jxYg5skcKzrq6ubNv6PaigU+QLjGDXr1/X1dWV
3kg+aNCggwcPfvr0iW/vKBTWycrK0tHRIT1fW1tbOHWQEGCIJGcR3r9/n0u7
JHEuX778q1ev2LZlY2MDWx07dhROKCUNFXSKvPDmzZt169aROtIERMuWlpbc
lHSmUIQD1MTW1pY8Bf369UtKSuLbowK+fPkCZ8g7L0QdnNnNz8/v0qUL7Orp
6bFtKy4ujqzSCQkJYdvWb0AFnSJwcnJyjh07Nnr0aDKhR1a7TZ06NTAwUGhb
eCgULjlx4kSlSpXwRLRt2zYmJoZvdwpAjlytWjW4tGTJEi7t+vv7wyikloPw
nqwAnDlzJtuGfgMq6BTBEhERgWGhdu3aTEqOONzZ2Vkg+QiFwjthYWF169YV
SY4Iv3v3Lt/uFHDkyBHytHK5i+3r16+9evWC0dmzZ7Nt6/z58zBUsWLFlJQU
tm39KlTQKUIDj8n27du7devG6HjNmjUNDQ3Dw8P5do3yU3z69On169ePHj36
559//Pz8Dh8+7O7uvnXr1o0bN1pZWZmbm5uZmS1dutT4PyxbtmzFihWrV69e
t26dg4ODm5vbgQMHTp06dfXqVQR1sbGxmZmZfH8m4fL8+XNS0LhKlSpBQUF8
u1PA9OnT4U/Tpk0/fvzImdELFy6QJB0XhFVD+fn5zZs35375389ABZ0iEL58
+YLQd+rUqRUqVCA6XqpUqWHDhnl7ewtn2Q+FkJOTEx0dDfnYu3evjY3N/Pnz
NTQ0kCJhoFNWVhaxgJKSEhpXV1efMmXKkiVLnJycfHx87t27J9gNRFzy/v17
st2jfPnyuCx8u1MQkzds2BD+zJkzhzOjSNL79OkDo7q6umzbIsv/OnToILSl
cVTQKbwTFRW1atUqMgIQkHFAJjhYs0r5IYimHjx4cOLEiU2bNs2ePbt///6N
GzdGrPVDCUZgVr9+/TZt2vTo0WPQoEFjx47V1NTU0dHBII8AwNDQcMGCBYsW
LcL/jYyMMFag8WnTpiEwGD58eO/evTFaNmjQgJy7XTz4NXhlYGDg4uJy+fLl
kvlGJiMjgxzbXbp06f379/Ptzr8vtYGfnx9nRi9duiTi5E3627dvydK40NBQ
Vg39KlTQKXzx8eNHd3d3ElQTKlWqhOj6ypUrQot7Sw5fvnyJjIw8duyYpaUl
tLV169bMWsRC4OdQUlVVVS0trcWLF9vZ2R04cCAwMDA8PPz169cy3EKYm5sb
Hx+PZPzcuXN79uxZt27dvHnzRo0a1bZt23Llyn3TNwSH48aNs7KygpqUHH3P
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
Fer8999/q6qqIusfOnQoes6UKVPmzp27ZMkSKysrZ2fngwcPBgQE3Llz59Wr
V9zv/aT8BklJSWvXrq1Xrx4ZhMuWLautrS3kmiEUgQMJ27hxI9lI1bRpU+FM
v3/58mXgwIEiyeJhLrdm+Pv7kycrOjqaVUMYeEWSqrPsFbjGIC/iqcIMFXQK
pRiePn2Kbsxs7a9VqxbCOVqWhyITbty4Qda7IiPmfsvY90D+UqNGDXilp6fH
mdGvX7+SwrmzZs1i2xYSLhhCiM5S+2/evCHDBdvBSVGooFMoRSHnATEnbogk
x8ju2rXr8+fPfLtGUSjevXtHMmJgZGQkkNc3p06dIi5xuckuKChIJDk4OCoq
ilVDZF1948aN2Vsap6qqChMODg4stf89qKBTKNLgGT927FiPHj0YKR80aJCv
r6+gFi9RFIm8vLxly5aRzgZx//DhA98eFWBoaEimpBISErixiChaXV0dRnV1
dVk1lJaWRorjnT9/niUTtra2aF9NTY2l9r8HFXQKhZCVlbVz587WrVuTobV0
6dKTJ0++c+cO335RSgSenp6k/HurVq2ePn3KtzsFtblIVa4xY8Zwtr/m0qVL
JEl//vw5q4ZmzZoFQ1paWiy1HxkZKZJU8ud48wvbgs7AnhUK5Q9JSUlZv359
7dq1iZQrKysbGxvTo8kpHHPz5k1yKFj16tWvXr3Ktzvi0NBQsmyP1UPKpEHk
QOrbzJkzh1VD169fF0l2DrI3H6KiogITyBFYar8QHEgt1XGKwImPjzczM6tc
uTKRcgynNjY2gtpGRClRvHr1qlOnTmSZnJeXF9/uiFevXi2SVOFgb014IQID
A0mS/uLFC/asIHIgc3HOzs4smVi5ciXaHzVqFEvtfxMq6JSSCYYLAwMDMskp
klS8dHNzo2veKLzz8ePHIUOGkG65efNmfp3Jycnp3LkzPBk8eDA3y0ggtT17
9uRgT/qGDRtgpWvXriy1HxISIpJUy+GyCjQVdEpJ4/79+9OmTWPqvGG8Onz4
sBwd00NReCCjM2fOJP3TzMyM3xKRERERZOKds9ljX19fMkfx9u1b9qygcTII
3Lt3j432Ef+QyhUnT55ko/1vQgWdUnIIDQ2V3ommpqbm7+9PC+pSBAi65YoV
K0hH1dfX5/fgBlI+rnLlyq9fv+bAHKSQvHcwNTVl1RCZCWGvhvy8efO42VnP
QAWdovCQTeXDhg1jpHzEiBH4CZVyisBxcHAgPXbatGk8blHPycnp2LEjlyve
Dx8+DHNKSkopKSnsWTl48KBIcmoGSxN0ZKqhZs2anMVjVNApCgwGn4CAALJu
ljBhwgS6E41fMLhlZmampaWlSvj48WN6enp2djaNr76Jh4cHmRnW0NDgsVJ0
aGgoOembm6V6UNgWLVrA3IYNG9iz8unTJ8QMItbOakE/J0Umg4OD2Wi/KFTQ
KQoJ1OHs2bOkxiPZVD5jxoyHDx/y7ZfCApl++/btzZs3T5065ebmZmlpaWho
OGXKlCFDhnTr1q1Vq1Z16tTB4ElE4ZtAtipVqlSrVq3mzZt37ty5X79+EydO
xBiyatUqV1dXHx8faMr79+9LoO6TdBWMGzeOR003NjYm+SyrWTMDOeq0bt26
WVlZ7FkhG9KnTZvGUvujRo1C++jDLLVfCCroFAUjPz8fmgIRIWNg2bJl586d
y3adihIFNOXx48dQWHt7ez09vYEDB0KCcZ2/p9SyRVlZuVOnTpqamsuXL9+3
b9/t27eRZ/F9SVjn2LFj5AqPHTs2JyeHFx8yMjLI6ZMcnIkmlqTP5EjrXbt2
sWfl4sWLIjbXopPj0bt06cJG40Whgk5RGJAkenl5dejQgYz85cuXx8jD2f5Z
RQUZMa6hr6+vtbW1lpZWu3btitHu6tWrq6ioICufPn360qVL169fj2z96NGj
/v7+169fj4iIePr06cuXLxMSEpKSklIkfPjwITExEdl9dHT0o0ePkOMHBQUh
JHN3d7ezszM1NZ0xY8bw4cPbt29PynUWBVk/jGprazs5OQUHB7Oa0PHI8ePH
yfzGhAkT+HqffubMGZFkLuXWrVscmLOxsYG5tm3bsrdjDi03btwYVg4cOMBG
++jtpJeyfdQ7gQo6RQGAlB8+fJiUZgIVK1Y0NjaOi4vj2y95BQoLBbe0tISS
kiypEND01q1bjxkzBtd5+/btfn5+kZGRHJy2iQDgzp073t7eCBV0dHS6d+/O
HITHUK5cud69eyMSQBSBpJJtl7jkxIkTRNOnTZvG17r38ePHwwFceQ4cQLBH
ojgEEuxZIYX0R4wYwVL7iIFFXFXbo4JOkWswqhw6dAgxPBnMlZSU8HhydpyE
woA0HLnz7t27Z82aRSp4F6JFixYaGhqQeOSJ0G6BHAomlnSAZ8+eeXl5mZmZ
DR48uFAWj8Cjb9++SPTCw8MV43idI0eOkDVy8+bN42U5QWxsLLnICOQ4MGdg
YCCSlLVhzwQ5Ib1MmTLv3r1jo330TLSvqanJRuOFoIJOkVPy8vI8PT3/+usv
MnQrKyvjwWHpkVRUYmJi3N3dp06dSipgSNOoUSMtLS17e/ugoCBuFkHJBOh7
RESEi4vLpEmTmOL8hPr160Mdzp07x9c7aFmBuIt8Ir5qzpAaa9WrV3///j3b
tsgpJwC3lSUTuIZt2rSBCVdXVzbav3z5skiyi5+DjkcFnSJ3ECknzyCR8uXL
lyclJfHtl3yQnp7u4+NjaGhYNBPv3LnzokWLkO0qxtsKpOT37t2zs7MbMmQI
qXVGgBLNmjXrwoUL/FZr+RO2bNlCPgsiLu6tZ2dnk6dPT0+PA3MjR44UsVye
hVTO6du3LxuN5+bmVqlSBe1fuXKFjfaloYJOkSOIlDMnnFIp/3mio6OdnJyG
Dh1arlw5aRHv1KnTkiVLfH19P378yLePLJKWlnbs2LGpU6dWrVqV+ez16tXD
Z79//z7f3v0OTB05llZzFc+5c+dEktVx4eHhbNsiC9HLli3L3vzbs2fPyMVk
aQ2tpqYmGl+2bBkbjUtDBZ0iF0DKDx48yEg5It5Vq1ZRKS+er1+/3r5929zc
nCzLYahbt66uru6RI0dK4BsKZJdnz57V1tZGNMhckB49euzevVu+tr/h5s6e
PZsoHSSPewfGjh1Lslq2p/3RPlnvum7dOvasdO3aFSYcHBzYaJxsXuvcuTMb
jUtDBZ0icCDlyEGYd+WVK1e2sLBg7xRjBQADYHBwMHLPJk2aSOv433//bWVl
defOnRJYm6UomZmZ6FeDBw9mrk+1atVMTExYPbVTtuDRIHVLEN9yXzQJWS2Z
7Tl27BjbtkiRmQYNGrD3Gnrjxo0w0bNnTzYaj4mJIX2M7ZdZVNApguXLly/I
ypl35ZByJJs0K/8ekOm7d++ampo2bdqUEakyZcoMHz58165divFanA1evnxp
aWlZp04dcsVKlSqlqakZEhLCt18/RUZGBjneFDed+80dCBqJabb3/uNjktfQ
7BWeff78OekAEF822idLVvbu3ctG4wxU0CkChOwrZzajUSkvntjYWBsbG2Yb
PpmGHTNmjKenpxwtUOcXpH5Hjhzp3bs3cw379et37tw54c9mvH37tlGjRiS7
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
llZxms6CKPwqOTk5PXv2RO/t0qVLdnY2BxbJoa7t27dn730fyUnbtm3LxsZh
Mq1Rt25dmftPzkZHNifbZjMzM8kK7T9fAEkFnaKoQLuZsykbNmzIRv0o/in2
pNGvFSvSZPwHQFACAwuE+5vXsHVrvv0rIDo6GumbSEavWX9IYmIiSdKhXyyZ
eP/+PVnajdxH5o2np6ezVHodV4aMJzI/nI5UnD527NgftsO2oDOwZ4VCKUp4
eDjif/L06ejopMq2GCmPIOk4fLigOPnGjQWFYrp0+a6gt2tXcKgK5WeArG/b
VnDS+v/WogmtVu0pFMfWtiBwcncX87fN5PDhw6QzcxOXLliwQCSpQMte6a2R
I0fCxLJly9hofPDgwWh806ZNMm+5ZcuWMlHeQpB6cStXrvztFjiQWqrjFO75
8uULHmQSoteoUcPLy4tvj2QEhlak21LvyvMbNXr4n9po//M1fLiMq6mXHPbu
ZS5jtkgEVYiSlngNDR7fWUyZMkUkqWfIQXT66tWrMmXKwNzVq1dZMuHp6Yn2
GzduzMbEvp2dHRofOHCgzFvW1dVlY6qEODxixIg/bIcKOkWRePv2LTmGUiQ5
PQp/5NsjGZGS8s0TyV1EohTmj5AeCwvx48f0Rfkf8c8/YgzX5uYvz5//f/au
AjyKpGlPEiIQIMFC0OAW9CAQ3OFwd7cf98PdNbi72+EQ9EI43N0tEFwSAklI
iOz8NduX/XZ7ZiU7NTObzb7PPN9z393m7drZma6u7qq3/HLnpu95gwbsmTOK
2BUSEpIlSxaJ0r34IDGjFO1ICH78+EE6pEsh63Tz5k1GXbyGXjS0atUqYPbx
8cGlPXHiBNBmzpxZJI/NodtgNThw4ADRCEqRIoWfn5+VlPB//MhtsHt6Cu6r
73d3P7J6tWrePHbiRFaC48hkDtXw4cLHGVIKnhuAv78/WazKIAl7+/ZtMpYU
MqoEzZo1A/6+8HhjA979DBkyADl6d4Y7d+4w6jpl3ARFzem8yM5QNodugxUg
MjKyd+/e5I0oWLDgrVu3lLYICeHhbJ48BtLe4tesUdpEq4a+zjXu7uycOawS
khGkyW+2bNlkqHitVasWjNWzZ0+J+Hfu3EnS0aWoA2rTpo0Ue+NgKklQRJel
Ip1zT548KYbE5tBtSOq4f/++t7c38ebg1q1KmWf7dkNFVW3aWGa/MOuBSsVt
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
dIxaDWQEv35xCdv8FcX16/LZoI27d7kuovzzEX2XgwObKxc7cKBM+y383MVq
1ThfLB7wQEr2GPzzzz8wFXh4eGARsgmSHbgFXKTz41SUhEA1iLCqk5MT4hxY
tmxZBrXT9KJFi3DPBTR9243WICRDh86qUzpJC+CCBQv++PFDaXOMY/Xq1eQH
7d+/f3L35iwna0VPlS1bKm1TAj58EHBecu5180v57O1ZE0QjkREdzU6bJiB7
a/oFf1umDIvX11IvTp9mnZx0hsbayqbU13Pm5G4LBkJv3BjHMNMYJgRvm/Hm
zZukcg1xhiHpu33wBHA+f/5MZkLEebtBgwZAuGDBAixCUtRfCa8/lOZbh4eH
G/5k8nToLFeK+iRt2rQk6T0GZUEuGTZu3Eh+zZ49eyJWiSZVxMUJFBHjKUeJ
BV9MBrWRohE8fizgGWVuBAORdfHi5vtx/lWxItdqXDrwEwjt7HD2BwID6co4
lLIUMDhB4kAFyx6keuewsDAyz3zC60BHCqibNGmCRRgbG0uMfIGXDdixY0cg
nIhXhLJ//34gLA5vARJ+/fpFvvUHYxrFUjt0DaQbxWwEBASQ/MYBAwYobYte
7Nu3jxjZuXNnmzfnsHkzPf2akCsiE+AH4neKkbMzaadOAg4RUajcMODr16xJ
uzCsy9dXqhwAuD/84VA8L79fLUrsX6uWDifegbKbmxtMNZcuXcIiJLFq2bJl
sQgB6dKlA86rsKpBAsmqQvQCJ0+eBMKcOXNiEapUsHCzB85nz57p+4wMrtYy
/bg2NmzYQFY+ltmk7NixY46OjmBe48aNEXUPkjb4nS/wWlSIxdKltG0pU7J4
RbjGwa/NR5X1MISvXwVy+3EvWCw9eSKJ8XzRAJTcsLdv6eVN9+4ItF5etLVI
3SQhqITZZufOnShsbIJr8wKD8VCgQAHgPHr0KBbh+PHjgbBLly5YhFeuXGGw
1efSpEkDnLdv3zb8sWTu0AEDBw4kPh1RehcFp0+fdnZ2Jrms1t3+NREICeGS
pqjZ7MEDpc1KQKlStG1t28o3OgSV/OgYL9oyhNq1TXXKLi6cX65bl0t769iR
UyOvWpU7K0+b1tTQHq8P+P8waRI9ClaZYa9eOrRubqz4De1WrXQ48UrtyGny
PCT1OZbLiLyLfi7v6+sLnFu2bMEihO8LhE2bNsUifPDgARBCLIb4rT09PU2p
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
58+f5Ft/MbZPlTwd+r1798gyr2PHjlL1XkFBZCTnvPga5j4+SlumKB4+FJiE
9W9GyY2OHWnb8F5t44Dnma/EUq0azh6yedi1i7sn/MeYfzk5caG9dPqxfHh7
0zbA3UOZE27fphcz/foh0PbsSRvs749Am7BR7O7ujsJGQILfIVh7LDt2xBQr
9pphVjJMFF63izp16qBlDqixbt06zOo/rp3je+LQfxlL1EyGDv3jx4/kFAZW
UFEKznKmIyKCmqJVMOnBO3LunNKWKYdSpehpDVyGheD6dQFXJWeQLhh1urlh
qqSajfh4Tqe0fXt2/HhODsXXl2unfvYsV5CoSMUolbQGV4MGOMz87M2FCxFo
IZCkaJGafpKG0YjVWywnwN8YOOfOnYvAdfiwJD8Ty5YtWxaM3LZtGxahn58f
EMJ3xyI0XZw2uTl0WOH4+PjAzfH09AyWujkUIlq1Eo5oLOfsWGasX0/fihQp
cOqMxANeOm0VTXJJ19JUEJMnC9SCWU7DWQvBrVt0hI5SJ05QoAB9/zdtQqCF
eNzJ6X+cnTsjcKoxefJkmBjbtGmDRQiAoAktSalJE/p+IgXpuXPnBiOPHz+O
wsYmlPN3xvtpiDht2rRpjX4yWTl0TVq7k5PT3bt3lTYnMQgJYVu3hhdZRc3S
Hh7JNEHu929tbY3/rnnzlDYrAdu307aBp3j9WlYbdA9b/7vwemQkeaxcSW+J
OzoiJK1pwNf2F5+o//atdgpfLCxi37zBsJVD+/btYW4cN24cFiHLFdhlBE6c
1hhU9T1cSN/d3d0djLx69SoKG8u1+R0IhPC/WIQBAQFAmM0EWYlk5dAXLFhA
TiL27t2rtC1mAbwYX3Mm2XZk42cMZsmitE0JiI0VqN7CSw0yCa9eCTj0smVl
tcFi8fkz5c3DU6dmEZUoLlygd0jq1kWg5StJwr9BAtm63IgnFxwVFUXm21fw
KIoHdZDk64sSy8TFxREjEdtrduzYEXdpdODAASD09vY2+snk49CPHj1K1NrH
jx+vtC0i0Lmz9lP9m0waOXKwe/YobZnsCAkRyCc/cEBpsxLAD9IhADRWdYIM
/vIPHpjateXr62qxKFqUvjNOTpj8DRrQt/39ewTa1atps9esQaBV716mTZvW
FOkS0/Hs2TNy8vsbpQwQ3PesWREuLjEMcx9mPKQs98+fP6Pn9jdq1AgIIX7E
IoRVFhD6whrGGJKJQ3/w4AHpZ9eyZUuLTms3ik+f2BIlyLscT+3o4hVmJhk0
bkzPb8WLK21TAuAxy5yZNg8vk8ckRETonLdqLldXtFLrpAi4LfxiOvARiOAv
GFCEcQIDdYSD0qXDqln79OkT8WshsE5Gwj///MOgdjEDdGjf3pFhJuKJNT18
+BCMdHR0RPQLlStXBs7169djES5duhQI//zzT6OfTA4OHR7RfPnywQ0pUqRI
JF5bQMUAU/G5c1ySMDVjTJigtGWy4/FjAW+Fl9wiFnv2CATIN2/KagMEMuXL
C/gvPHmxpIdnzwQeG8RjuCtX6MpBlHXmz5+c3loCpwr+d/t2BFo1yCltetS0
SVK9VR5Pap5N8JUrsQ4aoqJuL15cjWG8PDxwCNUoWrQoGLl//34swhkzZjCm
lfNbvUOPjY0lreEzZcr0WuasJElx9Cg1I8WDi79/34Jaj8mDSpUsN0gHZMtG
mwdRlfz1WXwzGAk6kCYJjBun3QXsv6tYMcwhqlfXJldBTA0vpngcO0abjacX
tGzZMpgkq1atikUIgDgaODt06IDIWbBgQeA8cuQIAtfLl5pKhGAnJ66HHRKy
ZMkCRv6L1IwGMGLECMa0FvBW79AHDx5MdlRwMi0tB5GRbN68mlf7N8PEkSjM
3R0zU9fyceuWgKtCEaNGAVgiaTBoIvr2FTDjjz+wVEOTDHRTUP67ypRBVt3x
9NThhxcTpevWyZO05WPHItDeucPWqfPd1fUow0xu1w6BMAHgytHT5lOnTg2c
N1DaSTdsqHMzkbqtqVSwgksBRt5HWcWpAZ4UCMGtm/JJrEFlJjcFa9euJQdD
iMcZFoTXr7nE6Vy5vuXOrfNkpkyJma9r+ShZkp7oChe2oGo+/km6hwe3fSon
4uL09hmHaS2Z4NQp/teP37AB+VEJCKD748DziYLLl3X2FiCoFC8p8+EDt2WU
wBnp5sZpFyOhQoUKMPeuW7cOizAsLIzM5x9RMgeolhAwbWI8CRqZ1k94Wnat
W7c2UZzWih36pUuXIDCH+9AXwhPrBr8Nt2W2m5EIFy4I+KnNm5U2KwGLFwuY
hxq2mITv39lMmYR9eu/echujCLy8BL779evIo+jeZJWjI3ekLh4REdoH6NyF
oju3bBl9Q/DO5TNnzgzTb2BgIBYhxLxkuzUe5dCKCgSQpJ+CgoKIQ0dshk5O
jVesWGH0k9bq0D98+JA1a1a4CTVr1oyNjVXKDJkwbx4dd0Awgvc4WTpgXV2m
DD0vwexnOXegVi3aPJjn8XbkTAXE6QcPCiTIwb/BiyYsFD9+CBQ5pkmD3HiX
vyuOleP9zz8084ABCLR+fjQt0mZmeHg4eheV48ePA2GuXLlw6Pz9NY+ECl4B
pIpXouqWBh4tPBCJAFPEaa3Sof/69at06dLkp/+WHHRXvnzhdnETXskHDBOU
IQM3S+fPz6Jkj1g+bt8WCL5QFKRR8Pq1gDepXFkZY/jF6XAVKsSJhFvOOQUi
YD1fu7Zw07ezZ5HHGjeOHgKrL8/FizSzCSeqxvH8uc42ftq0OPXyXG7LLZiB
nZ2dcaJpNdasWQOcFStWxCIE77szS5aFDOM/aRIWJVl15MmTB4uQ5V5Zrkrr
mAkZL9bn0FUqFdEwTJkyJVpjX8tHcDDX6qJWrXu1a3+hIkGk3g2Wjpo16Rkv
fXpun9lCMGuWgEMZOVIBS/hdwLTnc7wyZIsABOCwuOV/U7gD8+cjjxUdLaDh
jyT8wrUm0T6aRzlAJzh+/Jv6Fr2BoBIvMXv37t0wCRdDLR8YP348cML0jsiZ
M2dO4Dx58iQW4ZYtW4CwLKokY/r06U0Up7U+h75o0SKy1XPw4EH5R1cef/9N
TymW3PAdEe/eCczbJhR6yAQIfqkzUOJWnj1TwBh/f4HWLeRKndpSetygoFw5
/neM6dqVlaKVA0R51FilSrEo532fPtE5jUuWINAmoFmzZo4MM3nyZETOqVOn
wiTcvHlzRE7SiWPMmDFYhJqM9Ht4zZdXTJqUkmEa4ElIxcfHE4/21ITCOitz
6EQegcF+OJMSeHVS8TNnKm2TXOAXZ0FQ8/Ch0mYl4Px5gY336tWRj3FNxLdv
7PDhXE9Vvk8fPdqC0g/EQFDNHi68RG4d+PjQA2HJg+/dK8l+ewKyZcuGVtyd
gHbt2gHnWJTCugRUqVIFU1VGrTmGqY8HDle9RRPHMKcKF8Z6rxNlpDU59GfP
nqVLlw6+eKNGjRAPbpIYIiJYrSq2CFjQ1q4d5+fHxekya5TJD3iD+C3YSpdW
2iwt8LPj4Jo1SzF7BOvTydZB+fLI1dlyAkLaZs24hDT+V0Pt9/0/XLtGt+OB
xSTWDTxzhv4WeKt0jZg5YpkVoEyZMsC5ZcsWRE4vLy/c7fEHDx6g6b4CQ4Io
93/X0qUYNrIvXrwgkvimODWrcegRERHe3t7wxQsXLowos58k8fIlN5tlz/6x
SJFW9vZfNQ+Yvb0FFXNJhEWLBOZw1FlFFOCnoURBGXUB7OPHytgDHkcwSNe4
JPlT8cXj4EG9Bwpwq6U4UIDJXEvlCT+I3rpVR5MfT8Kd5fTnjjGmteY0HeB6
nJ2dTTz2NRExMTEODg4m7jybCPLdYZ2AwBUURD8Adeog0HJCwlfASIhVTfmw
dTh0WF+1aNECvrW7uzusZ+QZNEngta+vzjOmiO6onICptWBBgWncchRx+Y01
4cqVi1Wqy0BsLJsnj16fDg9M0orTIZjVl/KXM6dUbeb4e/sFCqC9aBD7az0w
4NVYFJ20BEyYMAH9sPv169ck6oc4C4vz5cuXhDMK74EkavM4afMhIfQz0KoV
Ai3LHjlyBIzMly+fKR+2DodOtOvt7OyOHj0qz4hJBtQuEFxWX3EcGCgwpTdp
orRZWoD3gu9uWrZUsmrs4kV2yBBhPwghPIQwq1crZpuJgLv34QNXqsn7ClFV
q7IQKkp0e8Fxw29HDdq2LRr/6NE0OaqycZ06dWDynDNnDiKnv78/cOaEFRQe
SH4U7k7ClClTgLNNmzY4dJSwMFJRJOmdWq5cOVM+bAUOHR4e0uh8loJnkRaL
nj21n7GvLi6ReGtmywVMp3zHhKdYJRbh4Vw3EL6FMCEoCPB3Qt7wf1fmzDg9
QKXA5MncPow+y/FOXQXAL0h0dMTsZcxPnsf7OvHx8aQNOmInEfbVq33duuUy
rd2n6Vi9ejXYWaVKFUTOHj16AOfQoUNx6KKjVVOnXrW3P8owr/AEb+fNmwdG
NjRNojmpO/Tnz5+7urqSVVbSbnQuESAeL1SIzAPhDFObYfqWKhXbvj3bogWn
8Witd+zjR4HsuAwZLMgfwYTPz3i3s1M4J//7d+Gqbc2VNy+XIm5RpzawQBWU
ytFckorVwxtESYLDNXs2Gj98u4oVdcgLFEBMAyBiqg4ODmh74xMnkv0xFcOc
qFQJh1ON4cOHg6ndu3dH5Kxbty5wLlq0CItQk5H+9etXLM7Ro0cDYdeuXU35
cJJ26D9//ixSpAh8WW9vb8TDGmsDvP6HDrFbtgRs2VLb0TFee3IwQe0/qWLz
ZoG5HXEjVDx27BCw0MODffNGYcOGDOGWQ/z1huayt+fOoxUvmoiL4zKRWrXS
ayd4lsGDpbXhyROBcVHE2wnGjNFmjnVxYVF7QK9atQrmz9JYlSD8rgp4UvnN
mjUzsUGJ6ShcuDCD2rhckzaPWGYFaxjgHGmaCFXSdeiaRDg3N7eXL19KN5A1
4Ru8udqvW8qUOMIXFggInerWFZhs8XpPIKB4cQELIa6xhBD40yeBhHzqGj1a
GdtgzVOokN7kN4aJLlmSXbECS8VUL37+FPgFvbwwN77Kl6f5g4PRyFm2Y8eO
MIUOgSUcCmbPpq1dvBiHmXtXioOpu3btwiIED5ImTRrgvI636jh9+jQQ5siR
A4uQffVqZtmysOyYN2+eKR9Pug595syZcOvs7e0RyxKtH/z5RyKRDUsAfDVt
nWpypU/PWk5V44cPwlVjzZtbxGnIgQMGnOZ/V9GibLZsbJUq8h0W7Nxp3Krb
t+WwZMoUetwUKTBPz1meoDFibbvao2XPnh1m0b179+IwgrelbghS/p6mDu4m
3r6QZnv8C95J3NatW4HQx8cHh27OHE2Bw+PatU2ZE5KoQz9+/DhJhJuNeFyV
HDBsmPbr9sDFBbEXkiVCcOO9alWLCIEJQkIEjvsZizkNCQvjlFgMbL9rXxUr
cuc7UixFAgO5eg13d04+l+o2Tl0wAcqzCRMdzXp706PjKh5s20ZXOE6YgEj/
6tUrZI8WE6OzpQDLPCS1tODgYGJqeHg4CiHgzp07QOji4oKYfAX+6P/ZOwuw
qJouAF86VUBUsANQsAu7u7sL61cxsbGxCwuwsLu7RUX9sAA7MUAERREEpVl2
/nN3ZN29LD2zdxfu+9zne/x098zsvXPnnDNz5hyQ2Y3ImZqXL7mGqwoUZ5FC
UOzHjx8LFSoE9613795CIFz2+P0bdeiAh0eAlpYdw5QrU+a7mxtbUR10X55c
fgfLNu207+7Od7dkOHVKcSKUrIXBKAN4y2Dk2NpmrtPNzdlZCH4O/GHNmlwZ
Tp8+oTt32JX/xo0zbTe5QAH2yHz79ojchJ8RcEM6d1bgnhOMuoRbJx+gKLK3
J2ss4fNQdnZ2BGWi+PjTLVp4Msw+8FLJJX/AS9mWlpakBCI2SfZZnIiMoMxJ
kyaBzPHjxxOQtWMHd4DNm5fBx2mo2rRNEJcZGxtbtWpVHAhH0FrLR8CcEBiI
Xrx49eyZpYXFKdkB07w5P3nFqRIczC6zp/XjHj3iu2cybN6sWFVdv853z2SI
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
gQVOr5UswrNC37iRo9DPd+2qvGTCAlkkJka2clxoaOj69esbNGggneJAxcMs
sW3btsjIyH9f2bsXrV6NHj/mp895DnCp7t27N23aNJyNipFkEvjOCXJo2pTv
bqo/ycnIwED2rt5KHectW7Y8e/asOiatev/+PQ7eq169Ol9HU6WxcCtWrFBO
izjvbuvWram2AvMeI8kgxMuiBweeFXpgYIrMuyM2NqaUlE+ABkFBQcuXL69S
pYrsmnD37t3P7toltrKSpqRDPBUeyquIxeKXL18uW7asSd26HHs4zNDQ3d09
ICBAyLCUY/58/cq5qy80NceNG8fL8a5ccf48Gj8eLVz4zc+vdOnSWOl8+/aN
r+707dsX+mBnZ5eYxTrUuQP8Dry/cCV104QSTZo0gVbmzp1LtZUswn9Q3K1b
UaVKsYu61aqhO3fodUaAHi9evIDxLC0pxa0fqqeH1GqrUY1IqlVL9lbvSbWs
YAIfNWrUoUOHVDaFuKoRFxd3/PjxPn36GBgY3JYfwIkzZvDdu+zj4iLtf5SW
VjmGKVGixEf+DtOBVsUj09vbWzkt4rxt1atXp2rcfvjwAf+ud+/e0Wsl6/Cv
0DFquIolwAFeHB8fn/Hjx1/T1eX4OIGqVwA6j/DqFUpN6vunYsUVTk516tSR
DXIAKlWq5OjoeOzYMTnl/vo1e7rE2JitwXfrFm/9VwIpKSj92OOoqKiDBw/2
7t1btlhhfQuLYAuLv6N3wACkbtvlbK03+eone/X1eTycEhsbW6ZMGbixDg4O
ymkxMjISL+8fPnyYakPz58+HVho0aEC1layjKgpdIA+R4uwsO5nEMgy8WnXr
1t20aZNceLYAEUDd3L6NHj6UVoQMDw8/evQovH0VKlRg5IG/gUl1r5tbkmz1
PX199OYNvz+CCqDKFy5EhQqx2q19e+l2Hlier169WrNmTcuWLXGmPoy5ufmY
MWNu3LjBboaCW/flC4qI4PcX5JCXLzkW9W9e89DOmjWLkRzxU1qo8+LFixlJ
eXeqR91hnJQqVQoa2rZtG71WsoWg0AXIExXFbqDgTPuamsttbKRzpo6OTo8e
Pc6cOaOcfTSBwMDA3bt3Dxs2rGzZstKn0I2zJ8IwMTNn8t1TCmzdKvsbE+rX
37t379ChQ0umno3FwP9OmDDh+vXreadEUWKiWD6xPFqwgK+++Pn5aWpqMkos
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
oVYN3MCnT58eP3589uzZ3OtjxcTEJk2a5LBlS+GUKey5qvHjvycTBbMpePEi
j3tgZ9AgRF9+V8yJEyfwYHt0dDSV9To7O7Oqd+oJaeoADgwV9JgYNGcO6t0b
aWighAT8u9TUVGtr6x9//JF7Brljx44LFy48c+ZMKteINKGW4GDUqRNusKWd
O9uuXz9nzhwZGRm+AQ15eXlNTc2TJ09CO6q/24dfpqcjYZ80bMFAW/vcM3/q
0EF90iTOMmwOHTp0mDp1qqGhoYuLCzzoeiIgFxd2r962LZo/H718ScdlNB8g
5cuW1cwRz56NuMZRKyoq4PJtbW3hnce5yrlvkYaGhr29fUZGBo22U0Bubu7E
iRMVWSwfcfG8fv2Qjg7ti2YTExNxnmRzc3Mq64XwHGeX/euvv6isVxAwUdDf
vkUyMpzeqaJbN9v9+3GGAQ4KCgqbN2++c+dOWVlZc1vd4oD76eTEXjT1ee4P
ohKI1xwdHVevXj106FC+br9z587q6uo2NjaRkZE1y34uX0bdurEfB/gG587R
eS2ELwFhtYcHWrcOHTiAHzR0U1FRUXZ2dvCUR44ciTNucSMlJQW/19bWtrCw
uHr1aqarK0+YP3q0cK+sMzbmvpyimTN9fX137typpqbGnYMXj1aBtEFnfv/+
fRHpT968eYOTGrVr1472/eYYeF1xejr4l+KngNfggS+XnZ1NZb2CgImCfuoU
3/jhH5+bnpKS0v79++Pi4prbUpHmw4cP/v7+27ZtU1FRkZSU5O7rOnXqtGbm
zHLuxKQQ8kRF0W0yodEUFBSEhIScOHFixYoV9a6iPFdnIv7ZhQtf3ADyFd6/
R8ePIzMzFB7+/eZCfO3pif7+m73psvHAxRb37ct9LeUsViteZwbedmNj4ytX
rnzPNQozEAjjgBRc90ePHtFtTg179rD3EECEnvB5SJYaSkpKcCpmMIDKegUE
0wSdnfilTuKsvX37WlpakkF1CigsLASPfffu3dOmTZOQkID3fFWdfj532za6
zSQ0ldLS0tjYWDc3N3Dk5s6d269fP6c6D3pUtfbJyMiMHz9eU1MTPnn69OnL
ly9HR0dnZWXVv+4iORnJydWUICYGwc/3GJeZWZtpp1UrdOnSVz778ePHmJgY
Pz8/GxubDRs2zJw5s2/fvmJiYo95r+UTizWwf/9ff/3V2to6ODhYmLa6NCth
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
    
    "], {{0, 492.75}, {500.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->500,
  ImageSizeRaw->{500.25, 492.75},
  PlotRange->{{0, 500.25}, {0, 492.75}}]], "Output",
 CellLabel->
  "Out[781]=",ExpressionUUID->"dd5385c5-a330-47c8-aa18-98ce2d865cfb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Region", " ", "of", " ", "stability", " ", "for", " ", "linear", " ", "4",
     "D", " ", "FODO", " ", "cell"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"4", "D", " ", "phase", " ", "space"}], ",", " ", 
    RowBox[{
    "1", "st", " ", "order", " ", "derivatives", " ", "for", " ", "canonical",
      " ", "variables"}], ",", " ", 
    RowBox[{"two", " ", "knobs"}], ",", " ", 
    RowBox[{
    "6", "th", " ", "order", " ", "derivatives", " ", "for", " ", "knobs"}]}],
    " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$INTEGRATOR", "[", 
     RowBox[{"\"\<PROJECT\>\"", ",", 
      RowBox[{"Plus", "[", 
       RowBox[{"1", ",", "1"}], "]"}], ",", "1", ",", 
      RowBox[{"Plus", "[", 
       RowBox[{"1", ",", "1"}], "]"}], ",", 
      RowBox[{"Plus", "[", 
       RowBox[{"1", ",", "1"}], "]"}], ",", 
      RowBox[{"List", "[", "]"}]}], "]"}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "elements"}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Focusing", " ", "quadrupole"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"P1", "^", "2"}], " ", "+", " ", 
         RowBox[{"P2", "^", "2"}]}], ")"}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"1", "/", "2"}], 
       RowBox[{"(", 
        RowBox[{"K1", "+", "0.21"}], ")"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Q1", "^", "2"}], " ", "-", " ", 
         RowBox[{"Q2", "^", "2"}]}], ")"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QF", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"HAMILTONIAN", ",", "10", ",", "0.5", ",", "1"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Defocusing", " ", "quadrupole"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"P1", "^", "2"}], " ", "+", " ", 
         RowBox[{"P2", "^", "2"}]}], ")"}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"1", "/", "2"}], 
       RowBox[{"(", 
        RowBox[{"K2", "-", "0.19"}], ")"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Q1", "^", "2"}], " ", "-", " ", 
         RowBox[{"Q2", "^", "2"}]}], ")"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QD", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"HAMILTONIAN", ",", "10", ",", "0.5", ",", "1"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{"(*", " ", "Drift", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "2"}], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"P1", "^", "2"}], " ", "+", " ", 
        RowBox[{"P2", "^", "2"}]}], ")"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DR", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"HAMILTONIAN", ",", "10", ",", "5.0", ",", "1"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "FODO", " ", "map"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"FODO", " ", "=", " ", 
     RowBox[{"Composition", "[", 
      RowBox[{"QF", ",", "DR", ",", "QD", ",", "QD", ",", "DR", ",", "QF"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Parametric", " ", "closed", " ", "orbit", " ", "can", " ", "be", " ", 
     "computed", " ", "with", " ", 
     RowBox[{"I$ORBIT", "[", "]"}], " ", "function"}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"This", " ", "function", " ", "is", " ", "slow", " ", "with", " ", 
     RowBox[{"NDSolve", "[", "]"}]}], " ", "*)"}], "\n", 
   RowBox[{"ORBIT", " ", "=", " ", 
    RowBox[{"I$ORBIT", "[", 
     RowBox[{"I$ORDER", ",", "FODO"}], "]"}]}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Compute", " ", "parameter", " ", "dependent", " ", "trasfer", " ", 
     "matrix", " ", "around", " ", "closed", " ", "orbit"}], " ", "*)"}], 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Note", ",", " ", 
     RowBox[{
     "initial", " ", "conditions", " ", "for", " ", "canonical", " ", 
      "derivatives", " ", "are", " ", "added", " ", "inside", " ", "of", " ", 
      
      RowBox[{"I$MATRIX", "[", "]"}]}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"I$MATRIX", "[", 
      RowBox[{"ORBIT", ",", "FODO"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Zero", " ", "deviations"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"ReplaceAll", "[", 
     RowBox[{"MATRIX", ",", 
      RowBox[{"Thread", "[", 
       RowBox[{"Rule", "[", 
        RowBox[{"I$VARIABLES$PARAMETRIC", ",", "0"}], "]"}], "]"}]}], "]"}], 
    " ", "//", " ", "TableForm"}], "\n", 
   RowBox[{
    RowBox[{"ReplaceAll", "[", 
     RowBox[{"MATRIX", ",", 
      RowBox[{"Thread", "[", 
       RowBox[{"Rule", "[", 
        RowBox[{"I$VARIABLES$PARAMETRIC", ",", "0"}], "]"}], "]"}]}], "]"}], 
    " ", "//", "Det"}], "\n", 
   RowBox[{"(*", " ", "Tunes", " ", "*)"}], "\n", 
   RowBox[{"DeleteDuplicates", "[", 
    RowBox[{"Abs", "[", 
     RowBox[{"Chop", "[", 
      RowBox[{"Divide", "[", 
       RowBox[{
        RowBox[{"Eigenvalues", "[", 
         RowBox[{"MatrixLog", "[", 
          RowBox[{"ReplaceAll", "[", 
           RowBox[{"MATRIX", ",", 
            RowBox[{"Thread", "[", 
             RowBox[{"Rule", "[", 
              RowBox[{"I$VARIABLES$PARAMETRIC", ",", "0"}], "]"}], "]"}]}], 
           "]"}], "]"}], "]"}], ",", 
        RowBox[{"Times", "[", 
         RowBox[{"2", ",", "Pi"}], "]"}]}], "]"}], "]"}], "]"}], "]"}], "\n", 
   
   RowBox[{"(*", " ", 
    RowBox[{"Parametric", " ", "tunes"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"TUNE", " ", "=", " ", 
     RowBox[{"I$EXPAND", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"I$ORDER", "-", "1"}], ",", "\n", "\t", 
       "I$VARIABLES$PARAMETRIC", ",", "\n", "\t", 
       RowBox[{"List", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"ArcCos", "[", 
          RowBox[{"0.5", "*", 
           RowBox[{"Tr", "[", 
            RowBox[{"Take", "[", 
             RowBox[{"MATRIX", ",", 
              RowBox[{"List", "[", 
               RowBox[{"1", ",", "2"}], "]"}], ",", 
              RowBox[{"List", "[", 
               RowBox[{"1", ",", "2"}], "]"}]}], "]"}], "]"}]}], "]"}], ",", 
         "\n", "\t\t", 
         RowBox[{"ArcCos", "[", 
          RowBox[{"0.5", "*", 
           RowBox[{"Tr", "[", 
            RowBox[{"Take", "[", 
             RowBox[{"MATRIX", ",", 
              RowBox[{"List", "[", 
               RowBox[{"3", ",", "4"}], "]"}], ",", 
              RowBox[{"List", "[", 
               RowBox[{"3", ",", "4"}], "]"}]}], "]"}], "]"}]}], "]"}]}], 
        "\n", "\t", "]"}]}], "\n", "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"TUNE", " ", "=", " ", 
     RowBox[{"Expand", "[", 
      RowBox[{"TUNE", "/", 
       RowBox[{"(", 
        RowBox[{"4", "*", 
         RowBox[{"ArcCos", "[", "0.0", "]"}]}], ")"}]}], "]"}]}], " ", ";"}], 
   "\n", "TUNE", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Stability", " ", "diagram", " ", "for", " ", "small", " ", "parameter", 
     " ", "deviations"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Show", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"RegionPlot", "[", "\n", "\t\t", 
       RowBox[{
        RowBox[{"ImplicitRegion", "[", "\n", "\t\t\t", 
         RowBox[{
          RowBox[{"And", "[", "\n", "\t\t\t\t", 
           RowBox[{
            RowBox[{"LessEqual", "[", 
             RowBox[{
              RowBox[{"-", "2.0"}], ",", 
              RowBox[{"Tr", "[", 
               RowBox[{"Take", "[", 
                RowBox[{"MATRIX", ",", 
                 RowBox[{"List", "[", 
                  RowBox[{"1", ",", "2"}], "]"}], ",", 
                 RowBox[{"List", "[", 
                  RowBox[{"1", ",", "2"}], "]"}]}], "]"}], "]"}], ",", 
              RowBox[{"+", "2.0"}]}], "]"}], ",", "\n", "\t\t\t\t", 
            RowBox[{"LessEqual", "[", 
             RowBox[{
              RowBox[{"-", "2.0"}], ",", 
              RowBox[{"Tr", "[", 
               RowBox[{"Take", "[", 
                RowBox[{"MATRIX", ",", 
                 RowBox[{"List", "[", 
                  RowBox[{"3", ",", "4"}], "]"}], ",", 
                 RowBox[{"List", "[", 
                  RowBox[{"3", ",", "4"}], "]"}]}], "]"}], "]"}], ",", 
              RowBox[{"+", "2.0"}]}], "]"}]}], "\n", "\t\t\t", "]"}], ",", 
          "\n", "\t\t\t", 
          RowBox[{"{", 
           RowBox[{"K1", ",", "K2"}], "}"}]}], "\n", "\t\t", "]"}], ",", "\n",
         "\t\t", 
        RowBox[{"BoundaryStyle", " ", "\[Rule]", " ", "None"}], ",", "\n", 
        "\t\t", 
        RowBox[{"PlotStyle", " ", "\[Rule]", " ", "LightBlue"}], ",", "\n", 
        "\t\t", 
        RowBox[{"PlotPoints", " ", "\[Rule]", " ", "100"}], ",", "\n", "\t\t", 
        RowBox[{"FrameLabel", " ", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{"K1", ",", " ", "K2"}], "}"}]}], ",", "\n", "\t\t", 
        RowBox[{"PlotRange", " ", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "0.1"}], ",", "0.1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "0.1"}], ",", "0.1"}], "}"}]}], "}"}]}]}], "\n", 
       "\t", "]"}], ",", "\n", "\t", 
      RowBox[{"Graphics", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"PointSize", "[", "Medium", "]"}], ",", "Blue", ",", 
         RowBox[{"Point", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "0.075"}], ",", "0.055"}], "}"}], "]"}], ",", "Red", 
         ",", 
         RowBox[{"Point", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "0.08"}], ",", 
            RowBox[{"-", "0.04"}]}], "}"}], "]"}]}], "}"}], "]"}]}], "\n", 
     "]"}], " ", "//", " ", "Rasterize"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Stability", " ", "of", " ", "sample", " ", "points"}], " ", 
    "*)"}], "\n", 
   RowBox[{"(*", " ", "Stable", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.075"}], ",", "0.055"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.", ",", "0.", ",", "0.", ",", "0."}], "}"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"RESULT", " ", "=", " ", 
     RowBox[{"Chop", "[", 
      RowBox[{"Collect", "[", 
       RowBox[{
        RowBox[{"I$MAKE$COMPONENTS", "[", 
         RowBox[{"FODO", "[", "INITIAL", "]"}], "]"}], ",", 
        "I$VARIABLES$CANONICAL"}], "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"D", "[", 
      RowBox[{"RESULT", ",", 
       RowBox[{"List", "[", "I$VARIABLES$CANONICAL", "]"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"ReplaceAll", "[", 
      RowBox[{"MATRIX", ",", 
       RowBox[{"Thread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"I$VARIABLES$PARAMETRIC", ",", "0"}], "]"}], "]"}]}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{"Chop", "[", 
    RowBox[{"Divide", "[", 
     RowBox[{
      RowBox[{"Eigenvalues", "[", 
       RowBox[{"MatrixLog", "[", "MATRIX", "]"}], "]"}], ",", 
      RowBox[{"Times", "[", 
       RowBox[{"2", ",", "Pi"}], "]"}]}], "]"}], "]"}], "\n", 
   RowBox[{"(*", " ", "Unstable", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.08"}], ",", 
         RowBox[{"-", "0.04"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.", ",", "0.", ",", "0.", ",", "0."}], "}"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"RESULT", " ", "=", " ", 
     RowBox[{"Chop", "[", 
      RowBox[{"Collect", "[", 
       RowBox[{
        RowBox[{"I$MAKE$COMPONENTS", "[", 
         RowBox[{"FODO", "[", "INITIAL", "]"}], "]"}], ",", 
        "I$VARIABLES$CANONICAL"}], "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"D", "[", 
      RowBox[{"RESULT", ",", 
       RowBox[{"List", "[", "I$VARIABLES$CANONICAL", "]"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"ReplaceAll", "[", 
      RowBox[{"MATRIX", ",", 
       RowBox[{"Thread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"I$VARIABLES$PARAMETRIC", ",", "0"}], "]"}], "]"}]}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{"Chop", "[", 
    RowBox[{"Divide", "[", 
     RowBox[{
      RowBox[{"Eigenvalues", "[", 
       RowBox[{"MatrixLog", "[", "MATRIX", "]"}], "]"}], ",", 
      RowBox[{"Times", "[", 
       RowBox[{"2", ",", "Pi"}], "]"}]}], "]"}], "]"}]}]}]], "Code",
 CellLabel->
  "In[830]:=",ExpressionUUID->"5c445b08-a1a7-4ebd-b9f2-ee4336b3cb0a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}]], "Output",
 CellLabel->
  "Out[838]=",ExpressionUUID->"ccb8d7a3-7e33-4553-8508-56eeeee8bded"],

Cell[BoxData[
 TagBox[GridBox[{
    {"0.24430678682616372`", "18.08029989220939`", "0.`", "0.`"},
    {
     RowBox[{"-", "0.05200766577526996`"}], "0.24430678682616364`", "0.`", 
     "0.`"},
    {"0.`", "0.`", "0.48014977738146175`", "5.661797877680861`"},
    {"0.`", "0.`", 
     RowBox[{"-", "0.13590315442269219`"}], "0.48014977738146175`"}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[840]//TableForm=",ExpressionUUID->"66d29cbb-7418-42ba-ac4a-\
d4d6d5ce4a7f"],

Cell[BoxData["1.`"], "Output",
 CellLabel->
  "Out[841]=",ExpressionUUID->"a1337f2b-89fd-45b9-bf29-faf9ac62845e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.21071980362095796`", ",", "0.17029115370393985`"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[842]=",ExpressionUUID->"37ed74fb-27f3-4f4e-83b1-9ac48a6ce312"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"0.2107198036209579`", "\[VeryThinSpace]", "+", 
    RowBox[{"1.4584026939381582`", " ", "K1"}], "-", 
    RowBox[{"1.921428118124722`", " ", 
     SuperscriptBox["K1", "2"]}], "+", 
    RowBox[{"0.4122106341768691`", " ", "K2"}], "-", 
    RowBox[{"3.868527807810466`", " ", "K1", " ", "K2"}], "-", 
    RowBox[{"0.20199476880247946`", " ", 
     SuperscriptBox["K2", "2"]}]}], ",", 
   RowBox[{"0.17029115370393982`", "\[VeryThinSpace]", "-", 
    RowBox[{"0.5237542431617971`", " ", "K1"}], "-", 
    RowBox[{"0.5562318949579677`", " ", 
     SuperscriptBox["K1", "2"]}], "-", 
    RowBox[{"1.6878431406342524`", " ", "K2"}], "-", 
    RowBox[{"6.304713612468788`", " ", "K1", " ", "K2"}], "-", 
    RowBox[{"5.173043536278733`", " ", 
     SuperscriptBox["K2", "2"]}]}]}], "}"}]], "Output",
 CellLabel->
  "Out[845]=",ExpressionUUID->"2c0a6faa-e60e-40ff-a825-738130c61e19"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnd9PXOeZgN3NTa+qvezdaivt37CV9mb3YqXuTS+6qrQXe9Oqtb2xQ8D8
GJKx47Ujx8ak4Da20pTaiKRK46ioEWEipZg0v5AoKYmzQIxJ47oQpzE4sGAw
mDHMfvHZnh4Pw8yZmXPO+33veR49jYbhHDjffK8fjykwf//9R7+z92/27NnT
/FXzn+98L/Mvhw5977F//1vzxncbmv9rX8MPf/BvDS0/3PfDQ9/8/kPmzrGv
7Nlz3fzvy9sFAAAAAAAAAAAoSy6Xa25ubmho6Ovry+fzJY9ZXl5ua2tbXFys
6iwAAKiZ0dHRbDa7sLCwsrLS0dExODi485jp6enDhw/v3bvX73OYswAAoB7O
nDkzNDTk3TYdNk+Siw64cuWKuXNsbCzY54pnAQBAnbS3t09OTnq3l5eXTYTX
1taCB6yurubz+c3NzWCfK54FAAB10tTUNDMz491eX18PRjhIUZ/Ln7UXAMB9
Yq5vZTKZzNTUlHe7zDPhoj6XP8u8ee1/C7XpnV7zcqTOTeen5rJT8qm5bCm6
u7uHh4e921evXm1tbS15WFGfy59VT5+NKdxNRz81l52ST81lSzEyMpLNZufn
51dXVzs7O/v7+82dW1tb4+PjKysr/mFFfS55lk/9ffaeSNeAo7vp6KfmslPy
qblsKba3t3O5XCaTaWxs9L+TeWNjw1ybeWLsH1bU55Jn+dTZ56Ivd6QBGybB
LXjEqoVHrFq0PmIR9jklldY6CfHBI1YtPGLVovURi7zPaUg0AFgFfabSAGAn
9JlKA4Cd0GcqDQB2Qp9JNADYCX2m0gBgJ/SZSgOAndBnKg0AdkKfqTQA2Al9
ptIAYCf0mUQDgJ3QZyoNAHZCn6k0ANgJfabSAGAnivvsIx5kKg0A4bHq9Qfj
wNosU2kACAl9FhcAoCT02RIBAIqgz1YJAOBDny0UAKBAny0WAFIOfbZcAEgt
9NkJASCF0GeHBIBUQZ+dEwBSAn12VABQD312VwDQDX12XQDQCn3WIQDogz5r
EgA0QZ/1CQA6oM9aBQDXoc+6BQB3oc9pEABchD6nRwBwC8V9tvz1Yak0AJSE
14dNuQBgP/Q5zQKAzdBnBAA7oc9IpQHshD4jlQawE/qMVBrATugzUmkAO6HP
SKgB7IQ+I5UGsBP6jFQawE7oM1JpADuhz0ilAeyEPiOVBrAT+oxUGsBO6DNS
aQA7oc9IpQHshD4jlQawE/qMcQsAtUGfMRkBoFoU95nXH7RQAKgIrz+IggJA
GOgzSgkA5aHPKCsA7AZ9RksEgCLoM1olAPjQZ7RQACjQZ7RYgJRDn9FyAVIL
fUZXBEgb9BndEiA90Gd0UYA0QJ/RXQF0Q59RgQAqoc+oRgBl0GdUJoAa6DNq
FcB16DPqFsBd6DOmQQAXoc+YKgEcgj5jCgVwAsV95vVhsbwAdsLrwyL6AtgJ
fUb0BLAN+owYFMAe6DNiSQHEoc+IZQQQhD4jhhEgeehzYs4sFNqOFv7xnwrf
+nahf0j+erAGAZKEPifmd/6jsGfP//vQQ4VX3pC/JKxNgGSgz8n43sd/jbPn
t78rf1VYpwCxQp+T8dJ7xX3+53+VvyqMRICYoM/J+PEXhb/7xgN9/u/T8leF
0QoQLfQ5MXPvFr7xD1+W+StfKfznD74stvglYRwCRAV9TtJPlgpv/09h4lP5
K8EEBKgT+owYqwA1Q58RkxGgWizpcy6Xa25ubmho6Ovry+fzRe/d2Njo6ekx
721pabl06ZJ35/b2trnH/y2pJ0+eDJ5Cn9FOAcJjQ59HR0ez2ezCwsLKykpH
R8fg4GDRASba586dW19fn52dNYmemZkxd87NzTU2Nn7xxReL9zHnBk+hz2i5
ABWxoc9nzpwZGhrybk9PT7e1tQXfu7W1dfDgQVNm782BgYHz58+bG2+++ebR
o0e7urqOHDny4osvmufYwbPoMzohQBls6HN7e/vk5KR3e3l52VzS2tqa/17z
vNrcs7m56b05NjZ2/Phxc6O3t/fYsWPXr1836T516tRzzz0X/Jj0Gd0SYCc2
9Lmpqcn7koVhfX3dXNLi4qL/3hs3buzbt89/8/Lly9lstnD/68/+V6rNMeas
1dVV/7C9OxD/A4hYUUg5O8MlfUWFTCYzNTXl3d7t+bOfYv/5c5B79+6ZYz79
9FP/HoKMTgtQsOP5c3d39/DwsHf76tWrra2twfd6X3+em5vz3hwYGOjp6fHO
Mq327jTPn/fv32+ee/tn0WdUIKQcG/o8MjKSzWbn5+dXV1c7Ozv7+/sL97M8
Pj7ufVdGb2/v2bNnTX5Nh1taWiYmJsydr7zyyrFjx5aWlsxZXV1dzz//fPBj
0mfUJKQTG/q8vb2dy+UymUxjY6P//c8bGxvm2szTaXP7zp07Fy5caGpqMk+t
/e9/NoddvHjR5PrRRx81Z929ezf4MekzqhRShQ19jgP6jIqFlECfEd0VdEOf
EV0XtEKfEdUIyqDPiPoEHdBnRK2C69BnRPWCo9BnxPQIbkGfEdMmuAJ9Rkyt
YDn0GRHBTugzIvqCVdBnRCwSLIE+I+Jugiz0GRErCiIo7jOvPIgYuZAAVr3+
YByQZcT4hGSgz4hYsxAr9BkR6xfigD4jYoRChNBnRIxDqB/6jIjxCfVAnxEx
AaEG6DMiJimEhz4joohQEfqMiLLCbtBnRLREKII+I6JtgofiPpv/io8ZItZj
yqHPiGi/6UR3nwskGlGXqYI+I6KLpgH1fS6QaETVKoY+I6IO9ZGGPhdINGKa
VAN9RkStuo7iPhe9wKL4qCCilG6RhteHLbpHfEIQUVy3SE+fCyQaEf+iE9Bn
REyzNkOfERGvWRnqVPW5QKIRsZL2QJ8REUsqTtr6XCDRiFilUtBnRMTwJkkK
+1wg0YhYt+Idcxf6jIjJKNUxd6m4LvE9RURlJt8xR6HPiChlYh1zlDDrEt9E
RFRv3B1zEfqMiFYZU8dcJOS6xLcMEdNm5B1zDvqMiJYbVcecI/y6xPcIEbHO
jrkFfUZEF62tY25R1brEdwQRschqO+YQVb2Al/hGICL6pvD1B8sjviOIiEXS
Zw/xjUBELJI++4jvBSJiUPrsI74XiIhB6bOP+F4gIgalz0HEtwMR0Zc+BxHf
DkREX/pchPiOICJ60ucixHcEEdGTPu9EfFMQEa/R51KIbwoi4jX6vAvi+4KI
SJ9LIr4viIj0eTfEtwYRUy593g3xrUHElEufyyC+O4iYZulzGcR3BxHTLH0u
g/juIGKapc/lEd8gREytivscyQt4iW8QIqZNXn8wPOKbhYjplD5XRHyPEDGd
0ucwiG8TIqZQ+hwG8W1CxBRKn0MivlOImDbpc0jEdwoR0yZ9Do/4ZiFiqqTP
4RHfLERMlfQ5POKbhYipkj5Xhfh+IWJ6pM9VIb5fiJge6XO1iG8ZIqZE+lwt
4luGiCmx2o5tbW2Njo6+/vrrN27c8O+cnZ397W9/G3EH6yPWv3fEdw0R02C1
Hevp6XnssceeeeaZAwcOvPXWW96dY2NjHR0dMYSwdugzIrpuVR1bWlo6dOjQ
+vq6uT03N9fW1vbee+8V0tfnAolGxPitqmN/+tOfTp065b9pEt3c3Hz9+vX6
+5zL5cyHamho6Ovry+fzRe/d2Ngwz9vNe1taWi5duhTmLPqMiK5bVcfW1tYa
Gxs///xz/57Lly9nMplXX321nj6Pjo5ms9mFhYWVlRXzcQYHB4sOMPk9d+6c
ed4+OztrEj0zM1PxLPqMiK5bbcdef/31AwcOvPvuu/49b7311v79++vp85kz
Z4aGhrzb09PTbW1twfdubW0dPHjQlNl7c2Bg4Pz58xXPSuD7UsT3DhF1W1XH
bt++fe/ePfP8eX5+Pnj/H//4x5deeqnm0LW3t09OTnq3l5eXzSWZJ+r+e80z
ZHPP5uam9+bY2Njx48crnkWfEdF1q+rYxx9//LOf/Wx7ezt45507d5599tnT
p0/XHLqmpibvSxaG9fV1c0mLi4v+e2/cuLFv3z7/zcuXL2ez2Ypn7d1BzZdX
BvHtQ0RN1hOu1dXVI0eOvPDCC/49s7Ozjz/++OHDh69fv15z5TKZzNTUlHd7
t+fP/v/95z9/Ln9WMj93I76biKjYaju2tLRknr7+6le/Ktz/yvPDDz984cKF
jY2NeirX3d09PDzs3b569Wpra2vwvd7Xn+fm5rw3BwYGenp6Kp6V2M9Fiu8g
Imq1ho7dunWrvb39xIkTDQ0Nv/vd7+pP3MjIiGn+/Py8eX7e2dnZ399fuJ/l
8fHxlZUVc7u3t/fs2bPr6+s3btxoaWmZmJjY7Swf+oyIrltbx0wV29raXn31
1UgSt729ncvlMplMY2Oj/53M5jm5uTbzxLhw/0vc5ll6U1OTeZLsf/9zybN8
kvy9IuKbiIgqrapjppmzf2FsbMz7EW/vzZs3b8YXwBqgz4joutV+/8bO/3vR
I20/3x1EfBMRUaVVdWx7e3tjF/zvT7aEhH9vqvg+IqI++f3PkSC+j4ioT/oc
FeJbiYjKpM9RIb6ViKhM+hwh4ruJiJqkzxEivpuIqEn6HCHiu4mImqTP0SK+
oYioRvocLeIbiohqpM+RI76niKhD+hw54nuKiDqkz3Egvq2IqED6HAfi24qI
ClTc51hfebA84tuKiO4qm68EEF+X+BYjouuKdywmxNclvrOI6LriHYsJG9Yl
vrmI6LQ2dCwObFiX+OYiotPa0LE4sGFd4puLiE5rQ8fiwJJ1ie8vIrqrJR2L
HEvWJb6/iOiulnQscuxZl/gWI6Kj2tOxaLFnXeJbjIiOak/HosWqdYnvMiK6
qFUdixCr1iW+y4joolZ1LEKsWpf4LiOii1rVsQixbV3iG42Izmlbx6LCtnWJ
bzQiOqdtHYsKC9clvteI6JYWdiwSLFyX+F4jolta2LFIsHBd4nuNiG5pYcci
wc51iW83IjqknR2rHzvXJb7diOiQdnasfqxdl/iOI6IrWtuxOrH2BRbFdxwR
LdfafEWFzesS331EdEKbO1YPNq9LfNMR0Qlt7lg92Lwu8U1HRCe0uWP1YPm6
xPcdEe3X8o7VjOXrEt93RLRfyztWM/avS3zrEdFy7e9Ybdi/LvGtR0TLtb9j
tWH/usS3HhEt1/6O1YYT6xLffUS0WSc6VgNOrEt89xHRZp3oWA24si7xAUBE
a3WlY9XiyrrEBwARrdWVjlWLK+sSHwBEtFZXOlYtDq1LfAYQ0U4d6lhVOLQu
8RlARDt1qGNV4da6xMcAES3UrY6Fx611iY8BIlqoWx0Lj1vrEh8DRLRQtzoW
HufWJT4JiGibznUsJM69gJf4JCCiJTqXr2pxcV3iU4GIVulix8Lg4rrEhwER
rdLFjoXBxXWJDwMiWqWLHQuDo+sSnwdEtEdHO1YRR9clPg+IaI+Odqwi7q5L
fCQQ0RLd7Vh53F2X+EggoiW627HyuLsu8ZFAREt0t2PlcXpd4lOBiDbodMfK
4PS6xKcCEW3Q6Y6Vwel1iU8FItqg0x0rg+vrEh8MRBTX9Y7thuvrEh8MRBTX
9Y7thoJ1ic8GIsqqoGMlUbAu8dlARFkVdKwkCtYlPhuIKKuCjpVEbF137hQ+
+KCwtBTJBxMfD0QUlD5HycsvF772tcKePYWHHiqcOFH/xxMfD0QUlD5Hxtxc
4atf/TLOvsPD9X9U8QlBRCkV9znpF/D65S8fiLMxk6n/o4pPCCImLK8/GD2X
LhX3+emn6/+o4qOCiFLS58jI5wvf/OZf4/z1rxdu3YrkA4sPCSKKSJ+j5Pbt
whNPFL71rcLBg4VPP43qo4oPCSKKSJ/tR3xIEFFETR0Lomxd4nOCiMmrrGM+
ytYlPieImLzKOuajb13io4KICauvYx761iU+KoiYsPo65qFvXeKjgogJq69j
HirXJT4tiJikKjtWoM+I6L4qO1agz4jovio7VlDa5wKJRkyTWjumdV3iA4OI
iam1Y1rXVSDRiKlRa8e0rqtAnxFToyUdy+Vyzc3NDQ0NfX19+Xy+6L0bGxs9
PT3mvS0tLZcuXfLu3N7eNvf4v8X65MmTwVMsWVcciM8MIiajDR0bHR3NZrML
CwsrKysdHR2Dg4NFB5honzt3bn19fXZ21iR6Zmam8OXLSc01NjZ+8cUXi/cx
5wZPsWFd8SE+NoiYgDZ07MyZM0NDQ97t6enptra24Hu3trYOHjxoyuy9OTAw
cP78eXPjzTffPHr0aFdX15EjR1588UXzHDt4lg3rig/xsUHEBLShY+3t7ZOT
k97t5eVlc0lra2v+e83zanPP5uam9+bY2Njx48fNjd7e3mPHjl2/ft2k+9Sp
U88991zwY9qwrvgQHxtETEAbOtbU1OR9ycKwvr5uLmlxcdF/740bN/bt2+e/
efny5Ww2W7j/9Wf/K9XmGHPW6uqqf9jeHSSxkgQRnxxEjFzBcA0ODj7yIH19
feb+TCYzNTXlHbPb82c/xf7z5yD37t0zx3waeEkpfUEuQnyQEDFuk+yYqe6t
B7l9+7a5v7u7e3h42Dvm6tWrra2twbO8rz/Pzc15bw4MDPT09HhnmVZ7d5rn
z/v37zfPvf2z1Pe5QKIRtWtDx0ZGRrLZ7Pz8/OrqamdnZ39/f+F+lsfHx73v
yujt7T179qzJr+lwS0vLxMSEufOVV145duzY0tKSOaurq+v5558Pfkwb1hU3
4sODiLFqQ8e2t7dzuVwmk2lsbPS//3ljY8Ncm3k6bW7fuXPnwoULTU1N5qm1
//3P5rCLFy+aXD/66KPmrLt37wY/pg3rihvx4UHEWNXaMa3rKkJ8fhAxPrV2
TOu6ihCfH0SMT60d07quIsTnBxHjU2vHtK5rJ+IjhIgxqbVjWte1E/ERQsSY
1NoxrevaifgIIWJMau2Y1nWVRHyKEDEOtXZM67pKIj5FiBiHWjumdV27IT5I
iBi5WjumdV27IT5IiBi5WjumdV27IT5IiBi5WjumdV1lEJ8lRIxWrR3Tuq4y
iM8SIkar1o5pXVcZxGcJEaNVa8e0rqs84uOEiBGqtWOKX3mwDOLjhIj1qz5f
WtdVHvG5QsQI1doxreuqiPhEIWJUau2Y1nVVRHyiEDEqtXZM67rCID5UiBiJ
WjumdV1hEB8qRIxErR3Tuq4wiA8VIkai1o5pXVdIxOcKEetXa8e0risk4nOF
iPWrtWNa1xUS8blCxPrV2jGt6wqP+GghYp1q7ZjWdYVHfLQQsU61dkzrusIj
PlqIWKdaO6Z1XVUhPl2IWI9aO6Z1XVUhPl2IWI9aO6Z1XVUhPl2IWI9aO6Z1
XdUiPmCIWLNaO6Z1XdUiPmCIWLNaO6Z1XdUiPmCIWLNaO6Z1XTUgPmOIWJta
O6b+BbzCIz5jiFiV6vOldV21IT5viFiDWjumdV21IT5miFiDWjumdV21IT5m
iFiDWjumdV01Iz5piFitWjumdV01Iz5piFitWjumdV01Iz5piFitWjumdV31
ID5siFiVWjumdV31ID5siFiVWjumdV31ID5siFiVWjumdV11Ij5viBherR3T
uq46EZ83RAyv1o5pXVediM8bIoZXa8e0rqt+xEcOEUOqtWNa11U/4iOHiCHV
2jGt66of8ZFDxJBq7ZjWdUWC+NQhYhi1dkzruiJBfOoQMYxaO6Z1XZEgPnWI
GEatHdO6rqgQHzxErKjWjmldV1SIDx4iVlRrx9S/wGKdiA8eIu6m+nxpXVeE
iA8hIpZXa8e0ritCxGcPEcurtWNa1xUh4rOHiOXV2jGt64oW8fFDxDJq7ZjW
dUWL+PghYhm1dkzruqJFfPwQsYxaO6Z1XZEjPoGIuJtaO6Z1XZEjPoGIuJta
O6Z1XZEjPoGIuJtaO6Z1XXEgPoSIWFKtHdO6rjgQH0JELKnWjmldVxyIDyEi
llRrx7SuKybE5xARd6q1Y1rXFRPic4iIO9XaMa3rignxOUTEnWrtmNZ1xYf4
KCJikVo7pnVd8SE+iohYpNaOaV1XfIiPIiIWqbVjWtcVK+LTiIhBtXZM/Qt4
xYH4NCLiNV5/EEohPpaIGFRrx7SuK27EBxIRfbV2TOu64kZ8IBHRV2vHtK4r
bsQHEhF9tXZM67oSQHwmEdFTa8e0risBxGcSET21dkzruhJAfCYR0VNrx7Su
KxnExxIRr9FnKIX4WCLiNfoMpRAfS0S8Rp9hF8QnExG1dkzruhJDfDIRUWvH
tK4rMcQnExG1dkzruhJDfDIRUWvHtK4rScSHEzHlau2Y1nXFx85HTHw4Ldc8
YuLX4JY8YjU8YiI1KCKXyzU3Nzc0NPT19eXz+ZLHLC8vt7W1LS4uhjnLknU5
BH2u4c+O+DW4JY9YDY+YSA2CjI6OZrPZhYWFlZWVjo6OwcHBncdMT08fPnzY
XK3f5/Jn1bmuek6XOjeOT53MHz2pc7lshz51ai+7jh5Ew5kzZ4aGhrzbpsPm
SXLRAVeuXDF3jo2NBftc/izbQpfAuXF8avtnOLV/bNP2qVN72XX0IBra29sn
Jye928vLy+aS1tbWggesrq7m8/nNzc1gn8ufZVvoEjg3jk9t/wyn9o9t2j51
ai+7jh5EQ1NT08zMjHd7fX09GOEgRX0uf9ZeAAD3ibm+f2VwcPCRB+nr6zP3
ZzKZqakp75iSz589ivoc8iwAAKiI6eetB7l9+7a5v7u7e3h42Dvm6tWrra2t
JU8v6nPIswAAoGZGRkay2ez8/Pzq6mpnZ2d/f7+5c2tra3x8fGVlxT+sqM8l
zwIAgAjZ3t7O5XKZTKaxsdH/TuaNjQ1TY/PE2D+sqM8lzwIAAAAAAAAAcJHL
ly8fOXLkwIEDXV1dt27d2u2wXC7nfbuIx5///OfTp0+bs44ePXrlypVErtQW
Kj5iJX9w/ic/+Unw2342NzeTveqkqfgolTyAuWKuwhPm91psbW39+Mc/Hh0d
9e8JWTwbWFhYeOSRRz766KO7d+++9NJL5oJ3HrO+vn7x4kWz9X6fzZLNAl97
7TXzmIyNjTU2Nppjkr1wMSo+YiV/cH57e7upqWlqamrxL0hce3JUfJRKHsBc
MVfhCfN7Lcx7u7u7Tbv8Pocpnj2YPwvnzp3zbpu/ec3fKTdv3iw6prOz8+c/
//kLL7zg9/mTTz4xf3bMbPgHvPPOO4ldsywVH7GSPzj/2WefmSN7enrMRJnT
zZAkfNkJU/FRKnkAc+XdZq7CUPH3WmxsbJi/vMxz7BMnTvh9DlM8e7hw4ULw
O+vMs5f333+/6JilpSXzX3OY3+eRkZGTJ0/6B/ziF78wfxPFf7FWUPERK/mD
8+YRM/8K+/DDDz///HPzcD322GO6/x1a8VEqeQBz5b/JXFWk4u+1MP8c877B
2AyV3+cwxbOHn/70p8F/Fzz55JPBL9QECfb5jTfeCP674OWXXw5+aVo3FR+x
3X5w3v+DY8amtbV1fHw8qUsWoOKjVPIA5sp/k7mqSMjfa1F4sM/hi5ckZu8e
2YH515D52+TXv/61f5j52+SDDz4o+RGCfX733XdPnTrlv8v8xX3x4sVYrz95
an7EwvzgfEdHh2lR3EsQpOKjVPKANMzVbjBX1RL+N1QUPX8OWbyEubUDk6DX
Xnvt2Wef9Q7wvhpj/qFU8vRgn//whz+Yv7z8rxM+/fTTb7/9dgJLSJjaHrGS
Pzg/MDDg/1PdfJCWlpaJiYkEl5I0FR+lkgekZK5KwlxVS/jfUBHsc/ji2cDN
mzfN00Lz11A+nzf/nHzqqae8+69cufLZZ58Fjwz22fwJevzxx3O5nDnL/Huq
oaEh+IPkuqn4iJX8wfmPPvrInHXt2jVzlrnniSeeMH+aJJcRMxUfpZIHMFfM
VXhC/l6LwoN93u1xtpYPP/zw6NGj5pp/9KMf+d8NeOLECfNXc/CwYJ8L979P
1Ty9MX+CzLlmSBK9YmnKP2K7/eD8O++8Y+Jz8ODBrq4uM1RiV58UFeeq5AHM
FXMVkpC/16LwYJ8LuzzOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAFCG/v7+Z555xn9zZmamoaHhN7/5jX/P8vJyW1tbql5+GgDA
BoJ9vnLliolz8IW5p6enDx8+XOb14wAAICb8Pk9MTJg4//73v/ffZXJtnjmP
jY3RZwCA5PH6/P777z/88MNFL5e8urqaz+c3NzfpMwBA8pg+t7S0NDc3P/XU
U93d3f4rwPrQZwAAEUyfDx06NDc3t7y8bCpd9NKWBfoMACBE8P8fnJiY2L9/
f9Frv9JnAAARir6/7uLFi+ZZ9NLSkn8PfQYAEKGoz/l8/sknn+zs7Nza2vLu
oc8AAAAAAAAAAAAAAKCM/wM/3Lcy
    "], {{0, 343.5}, {360., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{360., 343.5},
  PlotRange->{{0, 360.}, {0, 343.5}}]], "Output",
 CellLabel->
  "Out[846]=",ExpressionUUID->"c5413fa4-2530-4c2c-a293-3c6c76e5107a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"0.`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.12469703542885317`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.`", "\[VeryThinSpace]", "-", 
    RowBox[{"0.12469703542885317`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.12469703542885313`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.`", "\[VeryThinSpace]", "-", 
    RowBox[{"0.12469703542885313`", " ", "\[ImaginaryI]"}]}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[851]=",ExpressionUUID->"51d7711b-cd59-4b66-a57b-8e2f367850f1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"0.`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.25971032262543087`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.`", "\[VeryThinSpace]", "-", 
    RowBox[{"0.25971032262543087`", " ", "\[ImaginaryI]"}]}], ",", 
   "0.07831910559174159`", ",", 
   RowBox[{"-", "0.07831910559174146`"}]}], "}"}]], "Output",
 CellLabel->
  "Out[856]=",ExpressionUUID->"6503cd08-1d5a-4ac5-811f-23ebfcd58e40"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Linear", " ", "4", "D", " ", "FODO", " ", "with", " ", "chromatic", " ", 
    "effects"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", "##", 
    "##", "##", "##", "##", "##", "##", "##", "##"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$INTEGRATOR", "[", 
     RowBox[{"\"\<PROJECT\>\"", ",", 
      RowBox[{"Plus", "[", 
       RowBox[{"1", ",", "1"}], "]"}], ",", "1", ",", "1", ",", 
      RowBox[{"Plus", "[", 
       RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], ",", 
      RowBox[{"List", "[", "]"}]}], "]"}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "elements"}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Focusing", " ", "quadrupole"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"P1", "^", "2"}], "+", 
          RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", "K1"}], ")"}]}]}], "+", 
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", "0.21", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Q1", "^", "2"}], "-", 
         RowBox[{"Q2", "^", "2"}]}], ")"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QF", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"HAMILTONIAN", ",", "10", ",", "0.5", ",", "1"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Defocusing", " ", "quadrupole"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"P1", "^", "2"}], "+", 
          RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", "K1"}], ")"}]}]}], "-", 
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", "0.19", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Q1", "^", "2"}], "-", 
         RowBox[{"Q2", "^", "2"}]}], ")"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QD", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"HAMILTONIAN", ",", "10", ",", "0.5", ",", "1"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{"(*", " ", "Drift", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "2"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"P1", "^", "2"}], " ", "+", " ", 
         RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"1", "+", "K1"}], ")"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DR", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"HAMILTONIAN", ",", "10", ",", "5.0", ",", "1"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "FODO", " ", "map"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"FODO", " ", "=", " ", 
     RowBox[{"Composition", "[", 
      RowBox[{"QF", ",", "DR", ",", "QD", ",", "QD", ",", "DR", ",", "QF"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "initial", " ", "condition"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{
       RowBox[{"{", "0.", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.", ",", "0.", ",", "0.", ",", "0."}], "}"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compute", " ", "closed", " ", "orbit", " ", 
     RowBox[{"(", 
      RowBox[{
      "should", " ", "be", " ", "zero", " ", "since", " ", "no", " ", 
       "bending"}], ")"}]}], " ", "*)"}], "\n", 
   RowBox[{"ORBIT", " ", "=", " ", 
    RowBox[{"I$ORBIT", "[", 
     RowBox[{"I$ORDER", ",", "FODO"}], "]"}]}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Parameter", " ", "dependent", " ", "trasfer", " ", "matrix", " ", 
     "around", " ", "closed", " ", "orbit"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"I$MATRIX", "[", 
      RowBox[{"ORBIT", ",", "FODO"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Parametric", " ", 
     RowBox[{"(", "chromatic", ")"}], " ", "tunes"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"TUNE", " ", "=", " ", 
     RowBox[{"I$EXPAND", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"I$ORDER", "-", "1"}], ",", "\n", "\t", 
       "I$VARIABLES$PARAMETRIC", ",", "\n", "\t", 
       RowBox[{"List", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"ArcCos", "[", 
          RowBox[{"0.5", "*", 
           RowBox[{"Tr", "[", 
            RowBox[{"Take", "[", 
             RowBox[{"MATRIX", ",", 
              RowBox[{"List", "[", 
               RowBox[{"1", ",", "2"}], "]"}], ",", 
              RowBox[{"List", "[", 
               RowBox[{"1", ",", "2"}], "]"}]}], "]"}], "]"}]}], "]"}], ",", 
         "\n", "\t\t", 
         RowBox[{"ArcCos", "[", 
          RowBox[{"0.5", "*", 
           RowBox[{"Tr", "[", 
            RowBox[{"Take", "[", 
             RowBox[{"MATRIX", ",", 
              RowBox[{"List", "[", 
               RowBox[{"3", ",", "4"}], "]"}], ",", 
              RowBox[{"List", "[", 
               RowBox[{"3", ",", "4"}], "]"}]}], "]"}], "]"}]}], "]"}]}], 
        "\n", "\t", "]"}]}], "\n", "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"TUNE", " ", "=", " ", 
     RowBox[{"Expand", "[", 
      RowBox[{"TUNE", "/", 
       RowBox[{"(", 
        RowBox[{"4", "*", 
         RowBox[{"ArcCos", "[", "0.0", "]"}]}], ")"}]}], "]"}]}], " ", ";"}], 
   "\n", "TUNE", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Compare", " ", "parametric", " ", "result", " ", "with", " ", 
     "numerical", " ", "integration", " ", 
     RowBox[{"(", 
      RowBox[{"horizontal", " ", "plane"}], ")"}]}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Change", " ", "parametric", " ", "order", " ", "to", " ", "observe", " ",
      "convergence"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$INTEGRATOR", "[", 
     RowBox[{"\"\<PROJECT\>\"", ",", 
      RowBox[{"Plus", "[", 
       RowBox[{"1", ",", "1"}], "]"}], ",", "1", ",", "1", ",", "0", ",", 
      RowBox[{"List", "[", "]"}]}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"P1", "^", "2"}], "+", 
          RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", "K1"}], ")"}]}]}], "+", 
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", "0.21", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Q1", "^", "2"}], "-", 
         RowBox[{"Q2", "^", "2"}]}], ")"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QF", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"HAMILTONIAN", ",", "10", ",", "0.5", ",", "1"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"P1", "^", "2"}], "+", 
          RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", "K1"}], ")"}]}]}], "-", 
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", "0.19", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Q1", "^", "2"}], "-", 
         RowBox[{"Q2", "^", "2"}]}], ")"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QD", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"HAMILTONIAN", ",", "10", ",", "0.5", ",", "1"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "2"}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"P1", "^", "2"}], " ", "+", " ", 
         RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"1", "+", "K1"}], ")"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DR", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"HAMILTONIAN", ",", "10", ",", "5.0", ",", "1"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"FODO", " ", "=", " ", 
     RowBox[{"Composition", "[", 
      RowBox[{"QF", ",", "DR", ",", "QD", ",", "QD", ",", "DR", ",", "QF"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"Function", "[", "\n", "\t\t", 
        RowBox[{"Block", "[", "\n", "\t\t\t", 
         RowBox[{
          RowBox[{"{", "}"}], ",", "\n", "\t\t\t", 
          RowBox[{
           RowBox[{"INITIAL", " ", "=", " ", 
            RowBox[{"I$MAKE$INITIAL", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"Slot", "[", "1", "]"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.", ",", "0.", ",", "0.", ",", "0."}], "}"}]}], 
             "]"}]}], " ", ";", "\n", "\t\t\t", 
           RowBox[{"INITIAL", " ", "=", " ", 
            RowBox[{"I$MAKE$COMPONENTS", "[", 
             RowBox[{"FODO", "[", "INITIAL", "]"}], "]"}]}], " ", ";", "\n", 
           "\t\t\t", 
           RowBox[{"INITIAL", " ", "=", " ", 
            RowBox[{"Take", "[", 
             RowBox[{
              RowBox[{"D", "[", 
               RowBox[{"INITIAL", ",", 
                RowBox[{"List", "[", "I$VARIABLES$CANONICAL", "]"}]}], "]"}], 
              ",", 
              RowBox[{"List", "[", 
               RowBox[{"1", ",", "2"}], "]"}], ",", 
              RowBox[{"List", "[", 
               RowBox[{"1", ",", "2"}], "]"}]}], "]"}]}], " ", ";", "\n", 
           "\t\t\t", 
           RowBox[{"INITIAL", " ", "=", " ", 
            RowBox[{"N", "[", 
             RowBox[{"Divide", "[", 
              RowBox[{
               RowBox[{"N", "[", 
                RowBox[{"Normal", "[", 
                 RowBox[{"ArcCos", "[", 
                  RowBox[{"0.5", "*", 
                   RowBox[{"Tr", "[", "INITIAL", "]"}]}], "]"}], "]"}], "]"}],
                ",", 
               RowBox[{"Times", "[", 
                RowBox[{"2", ",", "Pi"}], "]"}]}], "]"}], "]"}]}], " ", ";", 
           "\n", "\t\t\t", 
           RowBox[{"List", "[", 
            RowBox[{
             RowBox[{"Slot", "[", "1", "]"}], ",", "INITIAL"}], "]"}]}]}], 
         "\n", "\t\t", "]"}], "\n", "\t", "]"}], ",", "\n", "\t", 
       RowBox[{"Range", "[", 
        RowBox[{
         RowBox[{"-", "0.2"}], ",", "0.2", ",", "0.01"}], "]"}]}], "\n", 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Show", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"Evaluate", "[", 
         RowBox[{"First", "[", "TUNE", "]"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"K1", ",", 
          RowBox[{"-", "0.25"}], ",", "0.25"}], "}"}], ",", 
        RowBox[{"AspectRatio", " ", "\[Rule]", " ", "1"}], ",", " ", 
        RowBox[{"PlotTheme", " ", "\[Rule]", " ", "\"\<Detailed\>\""}], ",", 
        " ", 
        RowBox[{"ImageSize", " ", "\[Rule]", " ", "Medium"}], ",", " ", 
        RowBox[{"PlotLegends", " ", "\[Rule]", " ", "None"}], ",", " ", 
        RowBox[{"PlotStyle", " ", "\[Rule]", " ", "Black"}]}], "]"}], ",", 
      "\n", "\t", 
      RowBox[{"ListPlot", "[", 
       RowBox[{"DATA", ",", 
        RowBox[{"PlotStyle", "\[Rule]", 
         RowBox[{"Directive", "[", 
          RowBox[{"{", 
           RowBox[{"Red", ",", 
            RowBox[{"PointSize", "[", "Medium", "]"}]}], "}"}], "]"}]}]}], 
       "]"}]}], "\n", "]"}], " ", "//", " ", "Rasterize"}]}]}]], "Code",
 CellLabel->
  "In[1116]:=",ExpressionUUID->"b183068e-ac5d-45f7-9aed-4ac8febeed3d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}]], "Output",
 CellLabel->
  "Out[1125]=",ExpressionUUID->"f6f405a6-9039-4561-9aef-5ccec1087dea"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"0.2107198036209579`", "\[VeryThinSpace]", "-", 
    RowBox[{"0.22794454523340815`", " ", "K1"}], "+", 
    RowBox[{"0.2902718136019759`", " ", 
     SuperscriptBox["K1", "2"]}], "-", 
    RowBox[{"0.4075362949106933`", " ", 
     SuperscriptBox["K1", "3"]}], "+", 
    RowBox[{"0.6277542886008162`", " ", 
     SuperscriptBox["K1", "4"]}]}], ",", 
   RowBox[{"0.17029115370393982`", "\[VeryThinSpace]", "-", 
    RowBox[{"0.2107018056565306`", " ", "K1"}], "+", 
    RowBox[{"0.2509831805667266`", " ", 
     SuperscriptBox["K1", "2"]}], "-", 
    RowBox[{"0.3238210459295623`", " ", 
     SuperscriptBox["K1", "3"]}], "+", 
    RowBox[{"0.4492380489597909`", " ", 
     SuperscriptBox["K1", "4"]}]}]}], "}"}]], "Output",
 CellLabel->
  "Out[1129]=",ExpressionUUID->"9edc5071-dd8a-4ea4-b9c6-b6f3500902ee"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
oi1z586dU6dOra2tdVygsrKSNl3aMmnJoqIiWiA7O5vXaA1CP92sWbPKysoq
KipiY2O/+OKLlsvk5eXNnj37xRdf9KR8pkR6++236TdeXFxMEV1QUOD43XNu
Gx6gLb96+u6iRYvoV++R+XzO3zLN99DQ0IMHD9KS6enplAaUCbxGK5vCwkL6
jdjtdu1Lk8mUlpbmuADN3OXLl+tfLlu2rNVt2K3Fx8d//fXX2m3KYdpJdlqA
diroTtp6PSmfabpNnjyZfr/al+vXr//ggw8cFzjntuEBzvmrpxYjJCSE9rFp
19Ej8/mcv2X6qR17K6qG099xMM727dvnzZunf5mYmPjxxx+fbeGamhrqBD1v
/3nmzJn6D3Xq1CkK4erqascFqqqqaO/CYrF4Uj7TbiH9OPRDaV/SX59XX33V
cYF2bRtu6py/evorRrvWdINK4ZH53K7fMoV5YGCgU4nAOFu3bl24cKH+5erV
q6nnbXVJ6nrob6vTLpZncNwloB/zbCHsYfl85MiRiRMn6l/u3r2bOn3HBdq+
bbivNv7qVc/N57b/ls1m8/Tp07dt28ZqaHJZtGhRUHM7duxIT0+fP3++vgz9
9Vy1alXLx9K+VnR09MqVK2l3guGQXSw/P9+pAnPmzKH7Z8yYkZOToy3T6k6U
xsPyWdt/1l8Ra7n/3MZtw6218Vevem4+t/G3TFWi3pl2thkOTS60+R1vrq6u
7sCBA7QLoR99WrBgQcu/j0VFRfR30wPO3KCAdaqAFrb0l2vLli3aMpTh9MOe
7eGelM/a8edDhw5pX65fv/69995zXKAt24a7a+OvXvXcfG7LbzktLS08PJyW
ZD462dHvJTIycuPGjbQftWvXruDgYO1o2+HDh7UTacrLy0NDQ1NSUk6cUVNT
w3vULkZ7BdTaHzt2rKqqymQyffrpp2pTfFFBtGpoPCyfyUcffbR06VLq648c
OTJt2rS9e/eqDr/6s20bnqSNv3rVc/P5nAmQnZ1NnSbd1hNAf80CGCgpKaE/
mvR7iYqK2rdvn3bnmjVr6E66sWHDBqfL+nlek0ubKG2f1OpOnTpVPwmWmgv6
YR3P9vS8fKY/tR9++CHtPtF+o/4avf6rV8+ybXiSNv7qVc/NZ/VcCRAXF+eU
AFlZWVzHCwAAAAAAAAAAAABgoP8HIO0kAQ==
    "], {{0, 354.}, {360., 0}}, {0, 255},
    
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{360., 354.},
  PlotRange->{{0, 360.}, {0, 354.}}]], "Output",
 CellLabel->
  "Out[1139]=",ExpressionUUID->"e297b696-753d-4f72-870f-851586237e40"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-05: (I$NDSOLVE) FODO cell", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"55055d8a-a175-43d3-9eb9-125f18e7fa77"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->
  "In[189]:=",ExpressionUUID->"594d74bb-9add-4fc1-b932-319e65b7bdfb"],

Cell[BoxData[
 RowBox[{"(*", " ", "\n", "\t", 
  RowBox[{
   RowBox[{"HAMILTONIAN", " ", 
    RowBox[{"FUNCTIONS", ":", "\n", "\t", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"4", "D"}], ")"}], "\n", "\t", 
      RowBox[{"DRIF", ":", " ", "H"}]}]}]}], " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"1", "/", "2"}], " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"P1", "^", "2"}], " ", "+", " ", 
        RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
      RowBox[{"(", 
       RowBox[{"1", " ", "+", " ", "K1"}], ")"}]}], "\n", "\t", 
     RowBox[{"QUAD", ":", " ", "H"}]}], " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"P1", "^", "2"}], " ", "+", " ", 
          RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", " ", "+", " ", "K1"}], ")"}]}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"1", "/", "2"}], " ", "KQ", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Q1", "^", "2"}], " ", "-", " ", 
         RowBox[{"Q2", "^", "2"}]}], ")"}], "\n", "\t", 
       RowBox[{"SEXT", ":", " ", "H"}]}]}], " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"P1", "^", "2"}], " ", "+", " ", 
           RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"1", " ", "+", " ", "K1"}], ")"}]}]}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "6"}], " ", "KS", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Q1", "^", "3"}], " ", "-", " ", 
          RowBox[{"3", " ", "Q1", " ", 
           RowBox[{"Q2", "^", "2"}]}]}], ")"}], "\n", "\t", 
        RowBox[{"BEND", ":", " ", "H"}]}]}], " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"1", "/", "2"}], " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"P1", "^", "2"}], " ", "+", " ", 
            RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
          RowBox[{"(", 
           RowBox[{"1", " ", "+", " ", "K1"}], ")"}]}]}], " ", "+", " ", 
        RowBox[{
         RowBox[{"1", "/", "2"}], " ", 
         RowBox[{"1", "/", 
          RowBox[{"R", "^", "2"}]}], " ", 
         RowBox[{"Q1", "^", "2"}]}], " ", "-", " ", 
        RowBox[{
         RowBox[{"1", "/", "R"}], " ", "Q1", " ", "K1"}], " ", "+", " ", 
        RowBox[{
         RowBox[{"1", "/", "2"}], " ", "KQ", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Q1", "^", "2"}], " ", "-", " ", 
           RowBox[{"Q2", "^", "2"}]}], ")"}]}], " ", "+", " ", 
        RowBox[{
         RowBox[{"1", "/", "6"}], " ", "KS", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Q1", "^", "3"}], " ", "-", " ", 
           RowBox[{"3", " ", "Q1", " ", 
            RowBox[{"Q2", "^", "2"}]}]}], ")"}], "\n", "\t", 
         RowBox[{"(", 
          RowBox[{"6", "D"}], ")"}], "\n", "\t", 
         RowBox[{"DRIF", ":", " ", "H"}]}]}], " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "Q3"}], " ", "+", " ", 
         RowBox[{
          RowBox[{"1", "/", "2"}], " ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"P1", "^", "2"}], " ", "+", " ", 
             RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
           RowBox[{"(", 
            RowBox[{"1", " ", "+", " ", "Q3"}], ")"}]}], "\n", "\t", 
          RowBox[{"QUAD", ":", " ", "H"}]}]}], " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "Q3"}], " ", "+", " ", 
          RowBox[{
           RowBox[{"1", "/", "2"}], " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"P1", "^", "2"}], " ", "+", " ", 
              RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
            RowBox[{"(", 
             RowBox[{"1", " ", "+", " ", "Q3"}], ")"}]}]}], " ", "+", " ", 
          RowBox[{
           RowBox[{"1", "/", "2"}], " ", "KQ", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Q1", "^", "2"}], " ", "-", " ", 
             RowBox[{"Q2", "^", "2"}]}], ")"}], "\n", "\t", 
           RowBox[{"SEXT", ":", " ", "H"}]}]}], " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "Q3"}], " ", "+", " ", 
           RowBox[{
            RowBox[{"1", "/", "2"}], " ", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"P1", "^", "2"}], " ", "+", " ", 
               RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
             RowBox[{"(", 
              RowBox[{"1", " ", "+", " ", "Q3"}], ")"}]}]}], " ", "+", " ", 
           RowBox[{
            RowBox[{"1", "/", "6"}], " ", "KS", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Q1", "^", "3"}], " ", "-", " ", 
              RowBox[{"3", " ", "Q1", " ", 
               RowBox[{"Q2", "^", "2"}]}]}], ")"}], "\n", "\t", 
            RowBox[{"BEND", ":", " ", "H"}]}]}], " ", "=", " ", 
          RowBox[{
           RowBox[{"-", "Q3"}], " ", "+", " ", 
           RowBox[{
            RowBox[{"1", "/", "2"}], " ", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"P1", "^", "2"}], " ", "+", " ", 
               RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
             RowBox[{"(", 
              RowBox[{"1", " ", "+", " ", "Q3"}], ")"}]}]}], " ", "+", " ", 
           RowBox[{
            RowBox[{"1", "/", "2"}], " ", 
            RowBox[{"1", "/", 
             RowBox[{"R", "^", "2"}]}], " ", 
            RowBox[{"Q1", "^", "2"}]}], " ", "-", " ", 
           RowBox[{
            RowBox[{"1", "/", "R"}], " ", "Q1", " ", "Q3"}], " ", "+", " ", 
           RowBox[{
            RowBox[{"1", "/", "2"}], " ", "KQ", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Q1", "^", "2"}], " ", "-", " ", 
              RowBox[{"Q2", "^", "2"}]}], ")"}]}], " ", "+", " ", 
           RowBox[{
            RowBox[{"1", "/", "6"}], " ", "KS", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Q1", "^", "3"}], " ", "-", " ", 
              RowBox[{"3", " ", "Q1", " ", 
               RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}]}]}]}]}]}]}]}]}], "\n", 
  "*)"}]], "Code",
 CellLabel->"In[2]:=",ExpressionUUID->"82d6c537-9879-42df-9169-a6073f5b9dab"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"4", "D", " ", "case"}], " ", "*)"}]], "Code",
 CellLabel->"In[6]:=",ExpressionUUID->"48f6c254-42d2-4499-bddc-5ec73270c630"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"I$INTEGRATOR", "[", 
    RowBox[{"\"\<PROJECT\>\"", ",", 
     RowBox[{"Plus", "[", 
      RowBox[{"1", ",", "1"}], "]"}], ",", "1", ",", 
     RowBox[{"Plus", "[", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], ",", 
     RowBox[{"Plus", "[", 
      RowBox[{"1", ",", "1", ",", "1"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{
       RowBox[{"Plus", "[", 
        RowBox[{"1", ",", "1"}], "]"}], ",", "1", ",", "1", ",", "1"}], 
      "]"}]}], "]"}], " ", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"K1", " ", "--"}], " ", "energy", " ", "deviation"}], " ", 
    "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"K2", " ", "--"}], " ", "SF", " ", "sextupole", " ", 
     "strength"}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"K3", " ", "--"}], " ", "SD", " ", "sextupole", " ", 
     "strength"}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"K4", " ", "--"}], " ", "BM", " ", "sextupole", " ", 
     "strength"}], " ", "*)"}]}]}]], "Code",
 CellLabel->
  "In[236]:=",ExpressionUUID->"2bf75bac-36b4-46ea-b7b4-7e139f57f9e2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "2", ",", "1", ",", "4", ",", "3", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[236]=",ExpressionUUID->"f23bd20e-ed3f-4ce1-9ded-88a43c6bd5a7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "Hamiltonian", " ", "functions"}], " ", "*)"}], 
  "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"DR", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "2"}], " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"P1", "^", "2"}], " ", "+", " ", 
         RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"1", " ", "+", " ", "K1"}], ")"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QF", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"P1", "^", "2"}], " ", "+", " ", 
           RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"1", " ", "+", " ", "K1"}], ")"}]}]}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", "KQ", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Q1", "^", "2"}], " ", "-", " ", 
          RowBox[{"Q2", "^", "2"}]}], ")"}]}]}], 
      "                                                            ", "/.", 
      " ", 
      RowBox[{"{", 
       RowBox[{"KQ", " ", "\[Rule]", " ", 
        RowBox[{"+", "0.19"}]}], "}"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QD", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"P1", "^", "2"}], " ", "+", " ", 
           RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"1", " ", "+", " ", "K1"}], ")"}]}]}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", "KQ", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Q1", "^", "2"}], " ", "-", " ", 
          RowBox[{"Q2", "^", "2"}]}], ")"}]}]}], 
      "                                                            ", "/.", 
      " ", 
      RowBox[{"{", 
       RowBox[{"KQ", " ", "\[Rule]", " ", 
        RowBox[{"-", "0.21"}]}], "}"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SF", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"P1", "^", "2"}], " ", "+", " ", 
           RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"1", " ", "+", " ", "K1"}], ")"}]}]}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "6"}], " ", "KS", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Q1", "^", "3"}], " ", "-", " ", 
          RowBox[{"3", " ", "Q1", " ", 
           RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], 
      "                                                       ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{"KS", " ", "\[Rule]", " ", "K2"}], "}"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SD", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"P1", "^", "2"}], " ", "+", " ", 
           RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"1", " ", "+", " ", "K1"}], ")"}]}]}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "6"}], " ", "KS", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Q1", "^", "3"}], " ", "-", " ", 
          RowBox[{"3", " ", "Q1", " ", 
           RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], 
      "                                                       ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{"KS", " ", "\[Rule]", " ", "K3"}], "}"}]}]}], " ", ";"}], " ", 
   "\n", 
   RowBox[{
    RowBox[{"BM", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"P1", "^", "2"}], " ", "+", " ", 
           RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"1", " ", "+", " ", "K1"}], ")"}]}]}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", 
        RowBox[{
         RowBox[{"Q1", "^", "2"}], "/", 
         RowBox[{"R", "^", "2"}]}]}], " ", "-", " ", 
       RowBox[{
        RowBox[{"1", "/", "R"}], " ", "Q1", " ", "K1"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", "KQ", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Q1", "^", "2"}], " ", "-", " ", 
          RowBox[{"Q2", "^", "2"}]}], ")"}]}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "6"}], " ", "KS", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Q1", "^", "3"}], " ", "-", " ", 
          RowBox[{"3", " ", "Q1", " ", 
           RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], "     ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"R", " ", "\[Rule]", " ", "23.0"}], ",", " ", 
        RowBox[{"KQ", " ", "\[Rule]", " ", "0.015"}], ",", " ", 
        RowBox[{"KS", " ", "\[Rule]", " ", "K4"}]}], "}"}]}]}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "maps", " ", "for", " ", "each", " ", "element"}], 
    " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DR", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"DR", ",", "5", ",", "0.45", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QF", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"QF", ",", "5", ",", "0.50", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QD", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"QD", ",", "5", ",", "0.50", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SF", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"SF", ",", "1", ",", "0.10", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SD", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"SD", ",", "1", ",", "0.10", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"BM", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"BM", ",", "10", ",", "3.00", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "FODO"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"FODO", " ", "=", " ", 
     RowBox[{"Composition", "[", 
      RowBox[{
      "QF", ",", "DR", ",", "SF", ",", "DR", ",", "BM", ",", "DR", ",", "SD", 
       ",", "DR", ",", "QD", ",", "QD", ",", "DR", ",", "SD", ",", "DR", ",", 
       "BM", ",", "DR", ",", "SF", ",", "DR", ",", "QF"}], "]"}]}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->
  "In[237]:=",ExpressionUUID->"d7e421ef-2206-4727-8eec-27c169ab5419"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compute", " ", "closed", " ", "orbit"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"ORBIT", " ", "=", " ", 
      RowBox[{"I$ORBIT", "[", 
       RowBox[{"I$ORDER", ",", "FODO"}], "]"}]}], " ", ";"}], " ", "//", " ", 
    "AbsoluteTiming"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Collect", "[", 
      RowBox[{"ORBIT", ",", "K1"}], "]"}], " ", "//", " ", "Chop"}], " ", "//",
     " ", "N"}]}]}]], "Code",
 CellLabel->
  "In[250]:=",ExpressionUUID->"e7079a0d-f457-4f5d-9b5e-e2195d8743ec"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"255.309869`", ",", "Null"}], "}"}]], "Output",
 CellLabel->
  "Out[250]=",ExpressionUUID->"4b6ccce4-2f17-43eb-ae52-bddf21843259"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"1.8105756017861363`", " ", "K1"}], "+", 
    RowBox[{
     SuperscriptBox["K1", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"0.5672829806474466`", "\[VeryThinSpace]", "-", 
       RowBox[{"2.1475354126522075`", " ", "K2"}], "-", 
       RowBox[{"0.7408283258240075`", " ", "K3"}], "-", 
       RowBox[{"39.69594258694631`", " ", "K4"}]}], ")"}]}]}], ",", "0.`", 
   ",", "0.`", ",", "0.`"}], "}"}]], "Output",
 CellLabel->
  "Out[251]=",ExpressionUUID->"044853f2-02cb-485d-86c1-fa739f824577"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Test", " ", "closed", " ", "orbit"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"Collect", "[", 
     RowBox[{
      RowBox[{"I$MAKE$COMPONENTS", "[", 
       RowBox[{"FODO", "[", 
        RowBox[{"I$MAKE$STATE", "[", "ORBIT", "]"}], "]"}], "]"}], ",", 
      "K1"}], "]"}], " ", "//", " ", "Chop"}], " ", "//", " ", 
   "N"}]}]], "Code",
 CellLabel->
  "In[255]:=",ExpressionUUID->"796479a5-7677-40bd-af0b-f8a2d773b3f0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"1.8105756017861343`", " ", "K1"}], "+", 
    RowBox[{
     SuperscriptBox["K1", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"0.5672829806474465`", "\[VeryThinSpace]", "-", 
       RowBox[{"2.147535412652208`", " ", "K2"}], "-", 
       RowBox[{"0.7408283258240076`", " ", "K3"}], "-", 
       RowBox[{"39.69594258694631`", " ", "K4"}]}], ")"}]}]}], ",", "0.`", 
   ",", "0.`", ",", "0.`"}], "}"}]], "Output",
 CellLabel->
  "Out[255]=",ExpressionUUID->"51b9545e-5b04-4592-9492-f1b6b8a53123"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compute", " ", "matrix", " ", "on", " ", "closed", " ", "orbit"}],
    " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"I$MATRIX", "[", 
      RowBox[{"ORBIT", ",", "FODO"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"MATRIX", " ", "/.", " ", 
       RowBox[{"Thread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"I$VARIABLES", ",", "0"}], "]"}], "]"}]}], " ", "//", " ", 
      "Chop"}], " ", "//", " ", "N"}], " ", "//", " ", 
    "TableForm"}]}]}]], "Code",
 CellLabel->
  "In[256]:=",ExpressionUUID->"5351247a-2fe8-4601-bf4e-0e89cff210b0"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"-", "0.01710780533694964`"}], "15.531696509861758`", "0.`", 
     "0.`"},
    {
     RowBox[{"-", "0.06436562305745509`"}], 
     RowBox[{"-", "0.01710780533694961`"}], "0.`", "0.`"},
    {"0.`", "0.`", "0.7293707114043598`", "6.558056973769344`"},
    {"0.`", "0.`", 
     RowBox[{"-", "0.07136540094382526`"}], "0.7293707114043592`"}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[257]//TableForm=",ExpressionUUID->"224ef08c-ac83-453a-87db-\
25037cc5ccf1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compute", " ", "tunes"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"TUNE", " ", "=", " ", 
     RowBox[{"I$EXPAND", "[", 
      RowBox[{"List", "[", 
       RowBox[{
        RowBox[{"ArcCos", "[", 
         RowBox[{"0.5", "*", 
          RowBox[{"Tr", "[", 
           RowBox[{"Take", "[", 
            RowBox[{"MATRIX", ",", 
             RowBox[{"List", "[", 
              RowBox[{"1", ",", "2"}], "]"}], ",", 
             RowBox[{"List", "[", 
              RowBox[{"1", ",", "2"}], "]"}]}], "]"}], "]"}]}], "]"}], ",", 
        RowBox[{"ArcCos", "[", 
         RowBox[{"0.5", "*", 
          RowBox[{"Tr", "[", 
           RowBox[{"Take", "[", 
            RowBox[{"MATRIX", ",", 
             RowBox[{"List", "[", 
              RowBox[{"3", ",", "4"}], "]"}], ",", 
             RowBox[{"List", "[", 
              RowBox[{"3", ",", "4"}], "]"}]}], "]"}], "]"}]}], "]"}]}], 
       "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"TUNE", " ", "=", " ", 
     RowBox[{"I$EXPAND", "[", 
      RowBox[{
       RowBox[{"Plus", "[", 
        RowBox[{"1", ",", "1"}], "]"}], ",", "I$VARIABLES$PARAMETRIC", ",", 
       "TUNE"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"TUNE", " ", "=", " ", 
     RowBox[{"Expand", "[", 
      RowBox[{"TUNE", "/", 
       RowBox[{"(", 
        RowBox[{"4", "*", 
         RowBox[{"ArcCos", "[", "0.0", "]"}]}], ")"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"Collect", "[", 
     RowBox[{"TUNE", ",", "K1"}], "]"}], "//", "TableForm"}]}]}]], "Code",
 CellLabel->
  "In[264]:=",ExpressionUUID->"fd65728a-38b6-46e3-8829-647f761084b5"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"0.25272292461874846`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.29829361864704035`", " ", 
        SuperscriptBox["K1", "2"]}], "+", 
       RowBox[{"K1", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "0.23427836114685038`"}], "+", 
          RowBox[{"0.3608281584747666`", " ", "K2"}], "+", 
          RowBox[{"0.08680864745293373`", " ", "K3"}], "+", 
          RowBox[{"5.856161708168858`", " ", "K4"}]}], ")"}]}]}]},
     {
      RowBox[{"0.11990648754086938`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.24335545788720744`", " ", 
        SuperscriptBox["K1", "2"]}], "+", 
       RowBox[{"K1", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "0.2416149722377531`"}], "-", 
          RowBox[{"0.2977057444713313`", " ", "K2"}], "-", 
          RowBox[{"0.4713009752079962`", " ", "K3"}], "-", 
          RowBox[{"11.032355990668835`", " ", "K4"}]}], ")"}]}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[267]//TableForm=",ExpressionUUID->"7e674fff-118a-41c9-8369-\
4b05d54e23d0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"6", "D", " ", "case"}], " ", "*)"}]], "Code",
 CellLabel->
  "In[107]:=",ExpressionUUID->"31a00a96-8154-462e-86af-100eb656c827"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Since", " ", "energy", " ", "deviation", " ", "is", " ", "treated", " ", 
     "like", " ", "canonical", " ", "variable"}], ",", " ", 
    RowBox[{
    "canonical", " ", "computation", " ", "order", " ", "should", " ", "be", 
     " ", "increased"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Second", " ", "order", " ", "is", " ", "required", " ", "to", " ", 
    "generate", " ", "transverse", " ", "matrix", " ", "that", " ", "depends",
     " ", "on", " ", "energy", " ", "deviation"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Only", " ", "first", " ", "order", " ", "can", " ", "be", " ", "used", 
    " ", "for", " ", "parameters"}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[326]:=",ExpressionUUID->"1b6288f8-286e-410a-bcbb-c186993fced2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"I$INTEGRATOR", "[", 
    RowBox[{"\"\<PROJECT\>\"", ",", 
     RowBox[{"Plus", "[", 
      RowBox[{"1", ",", "1", ",", "1"}], "]"}], ",", 
     RowBox[{"Plus", "[", 
      RowBox[{"1", ",", "1"}], "]"}], ",", 
     RowBox[{"Plus", "[", 
      RowBox[{"1", ",", "1", ",", "1"}], "]"}], ",", "1", ",", 
     RowBox[{"List", "[", 
      RowBox[{"1", ",", "1", ",", "1"}], "]"}], ",", " ", 
     RowBox[{"\"\<TRUNCATION\>\"", " ", "\[Rule]", " ", "\"\<SUM\>\""}]}], 
    "]"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"K1", " ", "--"}], " ", "SF", " ", "sextupole", " ", 
     "strength"}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"K2", " ", "--"}], " ", "SD", " ", "sextupole", " ", 
     "strength"}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"K3", " ", "--"}], " ", "BM", " ", "sextupole", " ", 
     "strength"}], " ", "*)"}]}]}]], "Code",
 CellLabel->
  "In[268]:=",ExpressionUUID->"9d53fae5-a639-459c-8341-b39b0f4bb38f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "3", ",", "2", ",", "3", ",", "1", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[268]=",ExpressionUUID->"8bcd9804-529a-444f-82fd-72726ae3eda1"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "Hamiltonian", " ", "functions"}], " ", "*)"}], 
  "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"DR", " ", "=", 
     RowBox[{
      RowBox[{"-", "Q3"}], " ", "+", " ", 
      RowBox[{
       RowBox[{"1", "/", "2"}], " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"P1", "^", "2"}], " ", "+", " ", 
          RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", " ", "+", " ", "Q3"}], ")"}]}]}]}]}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"QF", " ", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "Q3"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"P1", "^", "2"}], " ", "+", " ", 
           RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"1", " ", "+", " ", "Q3"}], ")"}]}]}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", "KQ", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Q1", "^", "2"}], " ", "-", " ", 
          RowBox[{"Q2", "^", "2"}]}], ")"}]}]}], 
      "                                                            ", "/.", 
      " ", 
      RowBox[{"{", 
       RowBox[{"KQ", " ", "\[Rule]", " ", 
        RowBox[{"+", "0.19"}]}], "}"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QD", " ", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "Q3"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"P1", "^", "2"}], " ", "+", " ", 
           RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"1", " ", "+", " ", "Q3"}], ")"}]}]}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", "KQ", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Q1", "^", "2"}], " ", "-", " ", 
          RowBox[{"Q2", "^", "2"}]}], ")"}]}]}], 
      "                                                            ", "/.", 
      " ", 
      RowBox[{"{", 
       RowBox[{"KQ", " ", "\[Rule]", " ", 
        RowBox[{"-", "0.21"}]}], "}"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SF", " ", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "Q3"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"P1", "^", "2"}], " ", "+", " ", 
           RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"1", " ", "+", " ", "Q3"}], ")"}]}]}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "6"}], " ", "KS", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Q1", "^", "3"}], " ", "-", " ", 
          RowBox[{"3", " ", "Q1", " ", 
           RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], 
      "                                                       ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{"KS", " ", "\[Rule]", " ", "K1"}], "}"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SD", " ", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "Q3"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"P1", "^", "2"}], " ", "+", " ", 
           RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"1", " ", "+", " ", "Q3"}], ")"}]}]}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "6"}], " ", "KS", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Q1", "^", "3"}], " ", "-", " ", 
          RowBox[{"3", " ", "Q1", " ", 
           RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], 
      "                                                       ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{"KS", " ", "\[Rule]", " ", "K2"}], "}"}]}]}], " ", ";"}], " ", 
   "\n", 
   RowBox[{
    RowBox[{"BM", " ", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "Q3"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"P1", "^", "2"}], " ", "+", " ", 
           RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
         RowBox[{"(", 
          RowBox[{"1", " ", "+", " ", "Q3"}], ")"}]}]}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", 
        RowBox[{
         RowBox[{"Q1", "^", "2"}], "/", 
         RowBox[{"R", "^", "2"}]}]}], " ", "-", " ", 
       RowBox[{
        RowBox[{"1", "/", "R"}], " ", "Q1", " ", "Q3"}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "2"}], " ", "KQ", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Q1", "^", "2"}], " ", "-", " ", 
          RowBox[{"Q2", "^", "2"}]}], ")"}]}], " ", "+", " ", 
       RowBox[{
        RowBox[{"1", "/", "6"}], " ", "KS", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Q1", "^", "3"}], " ", "-", " ", 
          RowBox[{"3", " ", "Q1", " ", 
           RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], "     ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"R", " ", "\[Rule]", " ", "23.0"}], ",", " ", 
        RowBox[{"KQ", " ", "\[Rule]", " ", "0.015"}], ",", " ", 
        RowBox[{"KS", " ", "\[Rule]", " ", "K3"}]}], "}"}]}]}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "maps", " ", "for", " ", "each", " ", "element"}], 
    " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DR", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"DR", ",", "5", ",", "0.45", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QF", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"QF", ",", "5", ",", "0.50", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QD", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"QD", ",", "5", ",", "0.50", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SF", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"SF", ",", "1", ",", "0.10", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SD", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"SD", ",", "1", ",", "0.10", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"BM", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"BM", ",", "10", ",", "3.00", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "FODO"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"FODO", " ", "=", " ", 
     RowBox[{"Composition", "[", 
      RowBox[{
      "QF", ",", "DR", ",", "SF", ",", "DR", ",", "BM", ",", "DR", ",", "SD", 
       ",", "DR", ",", "QD", ",", "QD", ",", "DR", ",", "SD", ",", "DR", ",", 
       "BM", ",", "DR", ",", "SF", ",", "DR", ",", "QF"}], "]"}]}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->
  "In[269]:=",ExpressionUUID->"531b2ce8-b029-4da9-b79a-65df7b37596f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compute", " ", "closed", " ", "orbit", " ", 
    RowBox[{"(", 
     RowBox[{"1", "st", " ", "order", " ", "in", " ", "parameters"}], ")"}]}],
    " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Here", " ", "the", " ", "last", " ", "argument", " ", "of", " ", 
    RowBox[{"I$ORBIT", "[", "]"}], " ", "indicates", " ", "oscillating", " ", 
    "and", " ", "drifting", " ", "planes"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"ORBIT", " ", "=", " ", 
      RowBox[{"I$ORBIT", "[", 
       RowBox[{"I$ORDER", ",", "FODO", ",", 
        RowBox[{"List", "[", 
         RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "]"}]}], " ", ";"}], " ",
     "//", " ", "AbsoluteTiming"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Collect", "[", 
      RowBox[{"ORBIT", ",", "Q3"}], "]"}], " ", "//", " ", "Chop"}], " ", "//",
     " ", "N"}]}]}]], "Code",
 CellLabel->
  "In[282]:=",ExpressionUUID->"f0b8bf7d-8301-49b2-a8e6-68b83dd4b666"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"801.670978`", ",", "Null"}], "}"}]], "Output",
 CellLabel->
  "Out[282]=",ExpressionUUID->"91b81004-ae85-422f-9b67-0c30cfb538af"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"1.8105756017861363`", " ", "Q3"}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"0.5672829806474466`", "\[VeryThinSpace]", "-", 
       RowBox[{"2.1475354126522075`", " ", "K1"}], "-", 
       RowBox[{"0.7408283258240075`", " ", "K2"}], "-", 
       RowBox[{"39.69594258694631`", " ", "K3"}]}], ")"}], " ", 
     SuperscriptBox["Q3", "2"]}]}], ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "Q3", ",", "0.`"}], "}"}]], "Output",
 CellLabel->
  "Out[283]=",ExpressionUUID->"ec9bcc90-9e58-44c9-99e6-d11e5757a428"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Test", " ", "closed", " ", "orbit"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"Collect", "[", 
     RowBox[{
      RowBox[{"I$MAKE$COMPONENTS", "[", 
       RowBox[{"FODO", "[", 
        RowBox[{"I$MAKE$STATE", "[", "ORBIT", "]"}], "]"}], "]"}], ",", 
      "Q3"}], "]"}], " ", "//", " ", "Chop"}], " ", "//", " ", 
   "N"}]}]], "Code",
 CellLabel->
  "In[284]:=",ExpressionUUID->"bb1c6aed-d6da-461c-a638-a8f69a62b0af"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"1.8105756017861343`", " ", "Q3"}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"0.5672829806474465`", "\[VeryThinSpace]", "-", 
       RowBox[{"2.147535412652208`", " ", "K1"}], "-", 
       RowBox[{"0.7408283258240076`", " ", "K2"}], "-", 
       RowBox[{"39.69594258694631`", " ", "K3"}]}], ")"}], " ", 
     SuperscriptBox["Q3", "2"]}]}], ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   RowBox[{"1.`", " ", "Q3"}], ",", 
   RowBox[{"11.999999999999998`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.35710998480832307`", " ", "Q3"}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"0.32806805571739484`", "\[VeryThinSpace]", "-", 
       RowBox[{"0.47622854240207396`", " ", "K1"}], "-", 
       RowBox[{"0.1392091880820372`", " ", "K2"}], "-", 
       RowBox[{"7.884311860457482`", " ", "K3"}]}], ")"}], " ", 
     SuperscriptBox["Q3", "2"]}]}]}], "}"}]], "Output",
 CellLabel->
  "Out[284]=",ExpressionUUID->"83b5be75-3430-47a9-bbc4-848fe8ad7657"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compute", " ", "matrix"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"I$MATRIX", "[", 
      RowBox[{"ORBIT", ",", "FODO", ",", 
       RowBox[{"List", "[", 
        RowBox[{"1", ",", "1", ",", "0"}], "]"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"MATRIX", " ", "/.", " ", 
       RowBox[{"Thread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"I$VARIABLES", ",", "0"}], "]"}], "]"}]}], " ", "//", " ", 
      "Chop"}], " ", "//", " ", "N"}], " ", "//", " ", 
    "TableForm"}]}]}]], "Code",
 CellLabel->
  "In[285]:=",ExpressionUUID->"c6a434c0-bef2-4f6a-8987-8f7989058675"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"-", "0.01710780533694964`"}], "15.531696509861758`", "0.`", 
     "0.`", "1.8105756017861343`", "0.`"},
    {
     RowBox[{"-", "0.06436562305745509`"}], 
     RowBox[{"-", "0.01710780533694961`"}], "0.`", "0.`", "0.`", "0.`"},
    {"0.`", "0.`", "0.7293707114043598`", "6.558056973769344`", "0.`", 
     "0.`"},
    {"0.`", "0.`", 
     RowBox[{"-", "0.07136540094382526`"}], "0.7293707114043592`", "0.`", 
     "0.`"},
    {"0.`", "0.`", "0.`", "0.`", "1.`", "0.`"},
    {"0.11653882670159138`", "1.8415505767293237`", "0.`", "0.`", 
     "0.35710998480832307`", "1.`"}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[286]//TableForm=",ExpressionUUID->"fee1203f-d9ba-4cb1-8d15-\
b6fd0e9254a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compute", " ", "tunes"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Since", " ", "canonical", " ", "order", " ", "is", " ", "equal", " ", 
     "to", " ", "two"}], ",", " ", 
    RowBox[{
    "tunes", " ", "are", " ", "first", " ", "order", " ", "in", " ", 
     "canonical", " ", "variables"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"TUNE", " ", "=", " ", 
     RowBox[{"I$EXPAND", "[", 
      RowBox[{"List", "[", 
       RowBox[{
        RowBox[{"ArcCos", "[", 
         RowBox[{"0.5", "*", 
          RowBox[{"Tr", "[", 
           RowBox[{"Take", "[", 
            RowBox[{"MATRIX", ",", 
             RowBox[{"List", "[", 
              RowBox[{"1", ",", "2"}], "]"}], ",", 
             RowBox[{"List", "[", 
              RowBox[{"1", ",", "2"}], "]"}]}], "]"}], "]"}]}], "]"}], ",", 
        RowBox[{"ArcCos", "[", 
         RowBox[{"0.5", "*", 
          RowBox[{"Tr", "[", 
           RowBox[{"Take", "[", 
            RowBox[{"MATRIX", ",", 
             RowBox[{"List", "[", 
              RowBox[{"3", ",", "4"}], "]"}], ",", 
             RowBox[{"List", "[", 
              RowBox[{"3", ",", "4"}], "]"}]}], "]"}], "]"}]}], "]"}]}], 
       "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"TUNE", " ", "=", " ", 
     RowBox[{"I$EXPAND", "[", 
      RowBox[{"1", ",", "I$VARIABLES$CANONICAL", ",", "TUNE"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"TUNE", " ", "=", " ", 
     RowBox[{"Expand", "[", 
      RowBox[{"TUNE", "/", 
       RowBox[{"(", 
        RowBox[{"4", "*", 
         RowBox[{"ArcCos", "[", "0.0", "]"}]}], ")"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"Collect", "[", 
     RowBox[{"TUNE", ",", "Q3"}], "]"}], "//", "TableForm"}]}]}]], "Code",
 CellLabel->
  "In[290]:=",ExpressionUUID->"77fdd613-d045-4d16-b66a-c522e6b7d1ac"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"0.25272292461874846`", "\[VeryThinSpace]", "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "0.2342783611468504`"}], "+", 
          RowBox[{"0.3608281584747667`", " ", "K1"}], "+", 
          RowBox[{"0.08680864745293373`", " ", "K2"}], "+", 
          RowBox[{"5.856161708168858`", " ", "K3"}]}], ")"}], " ", "Q3"}]}]},
     {
      RowBox[{"0.11990648754086938`", "\[VeryThinSpace]", "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "0.2416149722377531`"}], "-", 
          RowBox[{"0.2977057444713313`", " ", "K1"}], "-", 
          RowBox[{"0.4713009752079962`", " ", "K2"}], "-", 
          RowBox[{"11.032355990668835`", " ", "K3"}]}], ")"}], " ", "Q3"}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[293]//TableForm=",ExpressionUUID->"2ce9cf34-6375-442a-b4c0-\
19c29e59733f"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-06:  Maps, sequences and elements", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"c04f6c95-e550-4858-8c29-40f1f9caa4ef"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[1]:=",ExpressionUUID->"2f9cb5cf-7208-412a-9cbf-d295914917cd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", 
   RowBox[{"\"\<PROJECT\>\"", ",", "1", ",", "1", ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", 
    RowBox[{"List", "[", 
     RowBox[{"1", ",", "1"}], "]"}]}], "]"}]}]], "Code",
 CellLabel->"In[2]:=",ExpressionUUID->"7285ef1b-1c88-4327-9b6c-6ad0ebfa5b81"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "1", ",", "1", ",", "2", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"523dfd4b-6ef7-4e73-b892-7d4253c28124"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"I$MAKE$MAP", "[", "]"}], " ", "function", " ", "can", " ", "be", 
   " ", "used", " ", "to", " ", "generate", " ", "maps", " ", "from", " ", 
   "hamiltonian", " ", "or", " ", "canonical", " ", "maps"}], " ", 
  "*)"}]], "Code",
 CellLabel->"In[5]:=",ExpressionUUID->"4b0ad9ee-892b-48f1-98b8-4f41435e023c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "All", " ", "generated", " ", "maps", " ", "are", " ", "stored", " ", "in",
     " ", 
    RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}], " ", "association"}], " ", 
   "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Once", " ", "all", " ", "maps", " ", "are", " ", "defined", " ", "and", 
     " ", "added", " ", "to", " ", 
     RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}]}], ",", " ", 
    RowBox[{
    "association", " ", "can", " ", "be", " ", "saved", " ", "and", " ", 
     "loaded", " ", "to", " ", "be", " ", "used", " ", "with", " ", 
     "matching", " ", "integrator", " ", "signature"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Note", ",", " ", 
    RowBox[{
    "all", " ", "maps", " ", "are", " ", "assumed", " ", "to", " ", "have", 
     " ", "identical", " ", "integrator", " ", "signature"}]}], " ", 
   "*)"}]}]], "Code",
 CellLabel->"In[3]:=",ExpressionUUID->"90dfdade-34f4-46c8-bf3a-06bb69c890c4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Clean", " ", "map", " ", "table"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}]}]], "Code",
 CellLabel->"In[4]:=",ExpressionUUID->"2a123cfe-950f-4b0c-ac56-db389518364c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Direct", " ", "generation", " ", "from", " ", "canonical", " ", "or", " ",
     "state", " ", "map", 
    RowBox[{"(", "s", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Consider", " ", "a", " ", "drift"}], "-", "kick", "-", 
    RowBox[{
    "drift", " ", "integration", " ", "step", " ", "for", " ", "one", " ", 
     "dimensional", " ", "sextupole"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"1", "/", "2"}], "*", 
        RowBox[{"1", "/", "2"}], "*", 
        RowBox[{
         RowBox[{"P1", "^", "2"}], "/", 
         RowBox[{"(", 
          RowBox[{"1", "+", "K1"}], ")"}]}]}], ",", " ", 
       RowBox[{
        RowBox[{"1", "/", "1"}], "*", 
        RowBox[{"1", "/", "3"}], "*", 
        RowBox[{"(", 
         RowBox[{"1", "+", "K2"}], ")"}], "*", "KS", "*", 
        RowBox[{"Q1", "^", "3"}]}], ",", " ", 
       RowBox[{
        RowBox[{"1", "/", "2"}], "*", 
        RowBox[{"1", "/", "2"}], "*", 
        RowBox[{
         RowBox[{"P1", "^", "2"}], "/", 
         RowBox[{"(", 
          RowBox[{"1", "+", "K1"}], ")"}]}]}]}], "}"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SOLUTION", " ", "=", " ", 
     RowBox[{"I$DSOLVE", "[", "HAMILTONIAN", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Make", " ", "map"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"M1", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", "\n", "\t", 
      RowBox[{"\"\<M1\>\"", ",", "                     ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "map"}], " ", "name", " ", 
         RowBox[{"(", "string", ")"}]}], " ", "*)"}], "\n", "\t", 
       RowBox[{"{", "KS", "}"}], ",", "                     ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "list"}], " ", "of", " ", "local", " ", "map", 
         " ", 
         RowBox[{"constants", "/", "parameters"}], " ", "or", " ", "empty", 
         " ", "list"}], " ", "*)"}], "\n", "\t", "SOLUTION"}], 
      "                  ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"--", " ", "list"}], " ", "of", " ", "canonical", " ", 
         "transformations"}], ",", " ", 
        RowBox[{
        "this", " ", "argument", " ", "should", " ", "be", " ", "a", " ", 
         "list", " ", "even", " ", "in", " ", "the", " ", "case", " ", "when",
          " ", "only", " ", "one", " ", "map", " ", "or", " ", "hamiltonian", 
         " ", "is", " ", "processed"}]}], " ", "*)"}], "\n", "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{"M1", " ", "//", " ", "Short"}]}]}]], "Code",
 CellLabel->"In[9]:=",ExpressionUUID->"4e707491-9f6e-4bac-86b2-3d951eb3e963"],

Cell[BoxData[
 TagBox[
  RowBox[{"\<\"M1\"\>", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"SIGNATURE\"\>", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\<\"PROJECT\"\>", ",", "1", ",", "1", ",", "2", ",", "2", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"\<\"TYPE\"\>", "\[Rule]", "\<\"MAP\"\>"}], ",", 
     RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], ",", 
     RowBox[{"\<\"LENGTH_MAP\"\>", "\[Rule]", "3"}], ",", 
     RowBox[{"\<\"CODE\"\>", "\[Rule]", "Null"}]}], "\[RightAssociation]"}]}],
  
  Short]], "Output",
 CellLabel->
  "Out[12]//Short=",ExpressionUUID->"75ee2f77-8346-40f4-86b0-f4bc2a07ee98"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"I$MAKE$MAP", "[", "]"}], " ", "returns", " ", "a", " ", 
      "rule"}], " ", "<", "NAME", ">"}], " ", "->", " ", 
    RowBox[{"<", "DATA", ">", " ", "where", " ", "<", "DATA", ">", " ", 
     RowBox[{"is", " ", "an", " ", "association"}]}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"M1", " ", "//", " ", "Last"}], " ", "//", " ", "Keys"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "M1", "]"}], "[", "\"\<SIGNATURE\>\"", "]"}], 
   "         ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "matching"}], " ", "signature"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "M1", "]"}], "[", "\"\<TYPE\>\"", "]"}], 
   "              ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", " ", "object"}], " ", "type"}], ",", " ", 
     RowBox[{
     "always", " ", "equal", " ", "to", " ", "\"\<MAP\>\"", " ", "for", " ", 
      RowBox[{"I$MAKE$MAP", "[", "]"}]}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "M1", "]"}], "[", "\"\<METHOD\>\"", "]"}], 
   "            ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", " ", "generation"}], " ", "method"}], ",", " ", 
     RowBox[{
     "\"\<DIRECT\>\"", " ", "if", " ", "input", " ", "is", " ", "a", " ", 
      "map"}], ",", " ", 
     RowBox[{
     "\"\<DSOLVE\>\"", " ", "or", " ", "\"\<TAYLOR\>\"", " ", "if", " ", 
      "input", " ", "is", " ", "a", " ", "hamiltonian"}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "M1", "]"}], "[", "\"\<LOCAL\>\"", "]"}], 
   "             ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "list"}], " ", "of", " ", "local", " ", "parameters", 
     " ", "or", " ", "empty", " ", "list"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "M1", "]"}], "[", "\"\<LENGTH_LOCAL\>\"", "]"}], 
   "      ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "number"}], " ", "of", " ", "local", " ", 
     "parameters"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Last", "[", "M1", "]"}], "[", "\"\<MAP\>\"", "]"}], " ", "//", 
    " ", "Short"}], "      ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", " ", "map"}], " ", "data"}], ",", " ", 
     RowBox[{"list", " ", "of", " ", "functions"}], ",", " ", 
     RowBox[{
     "each", " ", "function", " ", "acts", " ", "on", " ", "state"}]}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "M1", "]"}], "[", "\"\<LENGTH_MAP\>\"", "]"}], 
   "        ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "number"}], " ", "of", " ", "state", " ", "maps"}], 
    " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "M1", "]"}], "[", "\"\<CODE\>\"", "]"}], 
   "              ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", " ", "code"}], " ", "placeholder"}], ",", " ", 
     RowBox[{"code", " ", "is", " ", "generated", " ", "separatly"}]}], " ", 
    "*)"}]}]}]], "Code",
 CellLabel->"In[31]:=",ExpressionUUID->"059e7601-6ecf-4072-a9fa-abbf6493c4fe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"SIGNATURE\"\>", ",", "\<\"TYPE\"\>", ",", "\<\"METHOD\"\>", 
   ",", "\<\"LOCAL\"\>", ",", "\<\"LENGTH_LOCAL\"\>", ",", "\<\"MAP\"\>", 
   ",", "\<\"LENGTH_MAP\"\>", ",", "\<\"CODE\"\>"}], "}"}]], "Output",
 CellLabel->"Out[31]=",ExpressionUUID->"5909708e-602f-4223-b261-b1c03c7d0970"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "1", ",", "1", ",", "2", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[32]=",ExpressionUUID->"ce11f8db-ff8d-4bf7-a3ca-27cbbe6f633a"],

Cell[BoxData["\<\"MAP\"\>"], "Output",
 CellLabel->"Out[33]=",ExpressionUUID->"0b577a60-07b9-4871-b282-5fa89c852ced"],

Cell[BoxData["\<\"DIRECT\"\>"], "Output",
 CellLabel->"Out[34]=",ExpressionUUID->"ecae9530-b544-431f-be8b-5173287dd14c"],

Cell[BoxData[
 RowBox[{"{", "KS", "}"}]], "Output",
 CellLabel->"Out[35]=",ExpressionUUID->"3c14c8d1-d445-4aa7-ab17-81b866d13f54"],

Cell[BoxData["1"], "Output",
 CellLabel->"Out[36]=",ExpressionUUID->"866c15c1-8874-4828-8367-e8d00dff022e"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"S", ",", "KS"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"W", ",", "K1", ",", 
        RowBox[{"\[LeftSkeleton]", "24", "\[RightSkeleton]"}], ",", 
        "D$2$0$1$1$1"}], "}"}]}], "]"}], ",", 
    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], ",", 
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"S", ",", "KS"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"W", ",", 
        RowBox[{"\[LeftSkeleton]", "25", "\[RightSkeleton]"}], ",", 
        "D$2$0$1$1$1"}], "}"}]}], "]"}]}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[37]//Short=",ExpressionUUID->"2ab5427b-65d6-461b-ad42-735fca888a3f"],

Cell[BoxData["3"], "Output",
 CellLabel->"Out[38]=",ExpressionUUID->"662d87de-3e43-45d1-9cd3-08881f0416e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Maps", " ", "can", " ", "be", " ", "truncated", " ", "by", " ", 
    RowBox[{"I$EXPAND", "[", "]"}], " ", "function"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"M2", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", "\n", "\t", 
      RowBox[{"\"\<M2\>\"", ",", "                     ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "map"}], " ", "name", " ", 
         RowBox[{"(", "string", ")"}]}], " ", "*)"}], "\n", "    ", 
       RowBox[{"{", "KS", "}"}], ",", "                     ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "list"}], " ", "of", " ", "local", " ", 
         RowBox[{"constants", "/", "paramters"}], " ", "or", " ", "empty", 
         " ", "list"}], " ", "*)"}], "\n", "\t", "SOLUTION", ",", 
       "                 ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"--", " ", "list"}], " ", "of", " ", "canonical", " ", 
          "transformations"}], ",", " ", 
         RowBox[{
         "this", " ", "argument", " ", "should", " ", "be", " ", "a", " ", 
          "list", " ", "even", " ", "in", " ", "the", " ", "case", " ", 
          "when", " ", "only", " ", "one", " ", "map", " ", "or", " ", 
          "hamiltonian", " ", "is", " ", "processed"}]}], " ", "*)"}], "\n", 
       "\t", "All"}], "                       ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", "flag"}], " ", "to", " ", "expand", " ", "maps", 
        " ", "according", " ", "with", " ", "current", " ", "signature"}], 
       " ", "*)"}], "\n", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"M2", " ", "//", " ", "Short"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "M2", "]"}], "[", "\"\<METHOD\>\"", 
    "]"}]}]}]], "Code",
 CellLabel->"In[40]:=",ExpressionUUID->"70a23a34-300e-4335-bdf7-ecb926ca9a03"],

Cell[BoxData[
 TagBox[
  RowBox[{"\<\"M2\"\>", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"SIGNATURE\"\>", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\<\"PROJECT\"\>", ",", "1", ",", "1", ",", "2", ",", "2", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"\<\"TYPE\"\>", "\[Rule]", "\<\"MAP\"\>"}], ",", 
     RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], ",", 
     RowBox[{"\<\"LENGTH_MAP\"\>", "\[Rule]", "3"}], ",", 
     RowBox[{"\<\"CODE\"\>", "\[Rule]", "Null"}]}], "\[RightAssociation]"}]}],
  
  Short]], "Output",
 CellLabel->
  "Out[41]//Short=",ExpressionUUID->"6ff5dd23-7f5d-431f-9bcc-3a42ad950e39"],

Cell[BoxData["\<\"DIRECT\"\>"], "Output",
 CellLabel->"Out[42]=",ExpressionUUID->"d629b8ec-1b1d-48ab-b69d-3a28246283cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Here", " ", "sextupole", " ", "kick", " ", "is", " ", "truncated"}], " ", 
   "*)"}], "\n", 
  RowBox[{
   RowBox[{"Drop", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"Rest", "[", 
        RowBox[{
         RowBox[{"Last", "[", "M1", "]"}], "[", "\"\<MAP\>\"", "]"}], "]"}], 
       "]"}], "[", 
      RowBox[{"I$PARAMETER", ",", "KS"}], "]"}], ",", 
     RowBox[{"-", "I$DIMENSION$DERIVATIVE"}]}], "]"}], "\n", 
   RowBox[{"Drop", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"Rest", "[", 
        RowBox[{
         RowBox[{"Last", "[", "M2", "]"}], "[", "\"\<MAP\>\"", "]"}], "]"}], 
       "]"}], "[", 
      RowBox[{"I$PARAMETER", ",", "KS"}], "]"}], ",", 
     RowBox[{"-", "I$DIMENSION$DERIVATIVE"}]}], "]"}]}]}]], "Code",
 CellLabel->"In[43]:=",ExpressionUUID->"1341062f-2cc1-4489-9c06-675827956289"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"W", ",", "K1", ",", "K2", ",", "Q1", ",", 
   RowBox[{"P1", "-", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"F2", " ", "K2"}]}], ")"}], " ", "KS", " ", 
     SuperscriptBox["Q1", "2"], " ", "S"}]}]}], "}"}]], "Output",
 CellLabel->"Out[43]=",ExpressionUUID->"db1b8600-e3ab-4ffc-a864-4a644d39b893"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"W", ",", "K1", ",", "K2", ",", "Q1", ",", "P1"}], "}"}]], "Output",\

 CellLabel->"Out[44]=",ExpressionUUID->"ca7c6d40-2cb7-4bf1-abf0-40b53633106d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Make", " ", "map", " ", "from", " ", "list", " ", "of", " ", "sovable", 
    " ", "hamiltonians"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"M3", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", "\n", "\t", 
      RowBox[{"\"\<M3\>\"", ",", "                     ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "map"}], " ", "name", " ", 
         RowBox[{"(", "string", ")"}]}], " ", "*)"}], "\n", "\t", 
       RowBox[{"{", "KS", "}"}], ",", "                     ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "list"}], " ", "of", " ", "local", " ", "map", 
         " ", 
         RowBox[{"constants", "/", "parameters"}], " ", "or", " ", "empty", 
         " ", "list"}], " ", "*)"}], "\n", "\t", "HAMILTONIAN"}], 
      "               ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"--", " ", "list"}], " ", "of", " ", "canonical", " ", 
         "transformations"}], ",", " ", 
        RowBox[{
        "this", " ", "argument", " ", "should", " ", "be", " ", "a", " ", 
         "list", " ", "even", " ", "in", " ", "the", " ", "case", " ", "when",
          " ", "only", " ", "one", " ", "map", " ", "or", " ", "hamiltonian", 
         " ", "is", " ", "processed"}]}], " ", "*)"}], "\n", "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{"M3", " ", "//", " ", "Short"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "M3", "]"}], "[", "\"\<METHOD\>\"", 
    "]"}]}]}]], "Code",
 CellLabel->"In[45]:=",ExpressionUUID->"7f93908e-fd05-45f5-b90c-f1dace1897e7"],

Cell[BoxData[
 TagBox[
  RowBox[{"\<\"M3\"\>", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"SIGNATURE\"\>", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\<\"PROJECT\"\>", ",", "1", ",", "1", ",", "2", ",", "2", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"\<\"TYPE\"\>", "\[Rule]", "\<\"MAP\"\>"}], ",", 
     RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], ",", 
     RowBox[{"\<\"LENGTH_MAP\"\>", "\[Rule]", "3"}], ",", 
     RowBox[{"\<\"CODE\"\>", "\[Rule]", "Null"}]}], "\[RightAssociation]"}]}],
  
  Short]], "Output",
 CellLabel->
  "Out[46]//Short=",ExpressionUUID->"450e84a5-4cd4-4ba4-b3d4-8e5b52daabb9"],

Cell[BoxData["\<\"DSOLVE\"\>"], "Output",
 CellLabel->"Out[47]=",ExpressionUUID->"f0b95434-d5a7-47af-967a-c92e643d562b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Make", " ", "map", " ", "from", " ", "autonomous", " ", "hamiltonian"}], 
   " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Generated", " ", "map", " ", "is", " ", "not", " ", "symplectic"}], " ", 
   "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"M4", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", "\n", "\t", 
      RowBox[{"\"\<M4\>\"", ",", "                     ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "map"}], " ", "name", " ", 
         RowBox[{"(", "string", ")"}]}], " ", "*)"}], "\n", "\t", 
       RowBox[{"{", "KS", "}"}], ",", "                     ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "list"}], " ", "of", " ", "local", " ", "map", 
         " ", 
         RowBox[{"constants", "/", "parameters"}], " ", "or", " ", "empty", 
         " ", "list"}], " ", "*)"}], "\n", "\t", 
       RowBox[{"List", "[", 
        RowBox[{"Total", "[", "HAMILTONIAN", "]"}], "]"}], ",", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"--", " ", "list"}], " ", "of", " ", "canonical", " ", 
          "transformations"}], ",", " ", 
         RowBox[{
         "this", " ", "argument", " ", "should", " ", "be", " ", "a", " ", 
          "list", " ", "even", " ", "in", " ", "the", " ", "case", " ", 
          "when", " ", "only", " ", "one", " ", "map", " ", "or", " ", 
          "hamiltonian", " ", "is", " ", "processed"}]}], " ", "*)"}], "\n", 
       "\t", "5"}], "\n", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"M4", " ", "//", " ", "Short"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "M4", "]"}], "[", "\"\<METHOD\>\"", 
    "]"}]}]}]], "Code",
 CellLabel->"In[48]:=",ExpressionUUID->"ebd6a1d8-1548-4313-a874-38dc8064434d"],

Cell[BoxData[
 TagBox[
  RowBox[{"\<\"M4\"\>", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"SIGNATURE\"\>", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\<\"PROJECT\"\>", ",", "1", ",", "1", ",", "2", ",", "2", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"\<\"TYPE\"\>", "\[Rule]", "\<\"MAP\"\>"}], ",", 
     RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}], ",", 
     RowBox[{"\<\"LENGTH_MAP\"\>", "\[Rule]", "1"}], ",", 
     RowBox[{"\<\"CODE\"\>", "\[Rule]", "Null"}]}], "\[RightAssociation]"}]}],
  
  Short]], "Output",
 CellLabel->
  "Out[49]//Short=",ExpressionUUID->"ba78b169-b323-4c7d-8ea9-cda359cfb523"],

Cell[BoxData["\<\"TAYLOR\"\>"], "Output",
 CellLabel->"Out[50]=",ExpressionUUID->"813216d2-4b61-4f6c-a974-206fdfde1fd1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Append", " ", "generates", " ", "maps", " ", "to", " ", "table"}],
    " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "M1"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "M2"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "M3"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "M4"}], "]"}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"List", " ", "of", " ", "elements"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}], " ", "//", " ", 
    "Keys"}]}]}]], "Code",
 CellLabel->"In[51]:=",ExpressionUUID->"67b67dfc-00f4-4c2a-9803-7acec4058e2d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"M1\"\>", ",", "\<\"M2\"\>", ",", "\<\"M3\"\>", 
   ",", "\<\"M4\"\>"}], "}"}]], "Output",
 CellLabel->"Out[55]=",ExpressionUUID->"a141835b-4372-448a-8e6e-88a6aea21f97"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Other", " ", "table", " ", "related", " ", "functions"}], " ", 
   "*)"}], "\n", 
  RowBox[{"I$TABLE$CLEAN", "                 ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "clean"}], " ", "table"}], " ", "*)"}], "\n", 
   "I$TABLE$APPEND", "                ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", " ", "append"}], " ", "to", " ", "table"}], ",", " ", 
     RowBox[{
     "will", " ", "replace", " ", "entry", " ", "with", " ", "the", " ", 
      "same", " ", "name"}]}], " ", "*)"}], "\n", "I$TABLE$RENAME", 
   "                ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "rename"}], " ", "element"}], " ", "*)"}], "\n", 
   "I$TABLE$DELETE", "                ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "delete"}], " ", "element"}], " ", "*)"}], "\n", 
   "I$TABLE$SAVE", "                  ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "save"}], " ", "table"}], " ", "*)"}], "\n", 
   "I$TABLE$LOAD", "                  ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "load"}], " ", "table"}], " ", "*)"}]}]}]], "Code",
 CellLabel->"In[34]:=",ExpressionUUID->"5247ba99-26c5-4688-99d5-1a2e653cbf20"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"I$EVALUATE$MAP", "[", "]"}], " ", "function", " ", "can", " ", 
    "be", " ", "used", " ", "to", " ", "test", " ", "evaluation", " ", "of", 
    " ", "state", " ", "maps"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Compare", " ", "with", " ", 
    RowBox[{"I$NDSOLVE", "[", "]"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{"0.001", ",", "0.1"}], "]"}], ",", 
       RowBox[{"List", "[", 
        RowBox[{"0.1", ",", "0.0"}], "]"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MAP", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{
       RowBox[{"ReplaceAll", "[", 
        RowBox[{
         RowBox[{"Total", "[", "HAMILTONIAN", "]"}], ",", 
         RowBox[{"Rule", "[", 
          RowBox[{"KS", ",", "0.0"}], "]"}]}], "]"}], ",", "1", ",", "0.1", 
       ",", "1"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"MAP", "[", "INITIAL", "]"}], "\n", 
   RowBox[{"I$EVALUATE$MAP", "[", "\n", "\t", 
    RowBox[{"\"\<M1\>\"", ",", "                     ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"--", " ", "name"}], " ", "of", " ", "map", " ", "to", " ", 
        "evaluate"}], ",", " ", 
       RowBox[{"should", " ", "be", " ", "present", " ", "in", " ", 
        RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}]}]}], " ", "*)"}], "\n", 
     "\t", "0.1", ",", "                      ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "integration"}], " ", "step", " ", "length"}], " ", 
      "*)"}], "\n", "\t", 
     RowBox[{"{", "0.0", "}"}], ",", "                    ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "list"}], " ", "of", " ", "values", " ", "for", " ",
        "local", " ", "parameters"}], " ", "*)"}], "\n", "\t", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", "                    ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "values"}], " ", "for", " ", "parametric", " ", 
       "flags"}], " ", "*)"}], "\n", "\t", "INITIAL"}], "                   ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "initial"}], " ", "state"}], " ", "*)"}], "\n", 
    "]"}]}]}]], "Code",
 CellLabel->"In[56]:=",ExpressionUUID->"1ba99c1d-d37c-413c-9de1-a15972fc558f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "0.001`", ",", "0.1`", ",", "0.1`", ",", "0.`", ",", "1.`", ",",
    "0.`", ",", "0.09990009990009995`", ",", "1.`", ",", "0.`", ",", "0.`", 
   ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", 
   ",", 
   RowBox[{"-", "0.09980029960049944`"}], ",", "0.`", ",", "0.`", ",", "0.`", 
   ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], 
  "}"}]], "Output",
 CellLabel->"Out[58]=",ExpressionUUID->"daf95630-4ed0-4076-a7ff-55288480b8f8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "0.001`", ",", "0.1`", ",", "0.1`", ",", "0.`", ",", "1.`", ",",
    "0.`", ",", "0.09990009990009992`", ",", "1.`", ",", "0.`", ",", "0.`", 
   ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", 
   ",", 
   RowBox[{"-", "0.09980029960049944`"}], ",", "0.`", ",", "0.`", ",", "0.`", 
   ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], 
  "}"}]], "Output",
 CellLabel->"Out[59]=",ExpressionUUID->"2e5332ba-21dc-463d-b620-49d7d6ae3da6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Clean", " ", "table"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}]}]}]], "Code",
 CellLabel->"In[60]:=",ExpressionUUID->"e54deb7c-fb94-4843-9b4d-59c1e73a789c"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[61]=",ExpressionUUID->"8b090833-d813-4650-bf96-6222d2c7498d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"I$MAKE$SEQUENCE", "[", "]"}], " ", "function", " ", "can", " ", 
    "be", " ", "used", " ", "to", " ", "generate", " ", "sequencies"}], " ", 
   "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Sequence", " ", "is", " ", "an", " ", "ordered", " ", "and", " ", 
    "weighted", " ", "collection", " ", "of", " ", "maps", " ", 
    RowBox[{"(", 
     RowBox[{"akin", " ", "to", " ", "an", " ", "integration", " ", "step"}], 
     ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Sequence", " ", "can", " ", "be", " ", "genereted", " ", "with", " ", 
    "explicit", " ", "weights", " ", "or", " ", "Yoshida", " ", "weights"}], 
   " ", "*)"}]}]], "Code",
 CellLabel->"In[62]:=",ExpressionUUID->"7da80bf3-b198-4614-b6f5-37f7ad76992e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "maps"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], "*", 
         RowBox[{
          RowBox[{"P1", "^", "2"}], "/", 
          RowBox[{"(", 
           RowBox[{"1", "+", "K1"}], ")"}]}]}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"KICK", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<KICK\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "3"}], "*", 
         RowBox[{"(", 
          RowBox[{"1", "+", "K2"}], ")"}], "*", "KS", "*", 
         RowBox[{"Q1", "^", "3"}]}], "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "KICK"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}], " ", "//", " ", 
    "Keys"}]}]}]], "Code",
 CellLabel->"In[63]:=",ExpressionUUID->"0ec52517-a6d3-4650-8632-d6cd2933482c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"DRIF\"\>", ",", "\<\"KICK\"\>"}], "}"}]], "Output",
 CellLabel->"Out[68]=",ExpressionUUID->"3a42503b-166d-4b30-8219-799c73871113"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Explicit", " ", "weights"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"S1", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", "\n", "\t", 
      RowBox[{"\"\<S1\>\"", ",", "                     ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "sequence"}], " ", "name"}], " ", "*)"}], "\n", 
       "\t", "\"\<DIRECT\>\"", ",", "                 ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "method"}], ",", " ", 
         RowBox[{"\"\<DIRECT\>\"", " ", "or", " ", "\"\<YOSHIDA\>\""}]}], " ",
         "*)"}], "\n", "\t", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<KICK\>\""}], "}"}], ",", 
       "          ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "list"}], " ", "of", " ", "unique", " ", "maps"}],
         " ", "*)"}], "\n", "\t", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<KICK\>\"", ",", "\"\<DRIF\>\""}], 
        "}"}], ",", "   ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "ordered"}], " ", "sequence", " ", "of", " ", 
         "maps"}], " ", "*)"}], "\n", "\t", 
       RowBox[{"{", 
        RowBox[{"0.5", ",", "1.0", ",", "0.5"}], "}"}]}], "             ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", "weights"}], " ", "for", " ", "each", " ", "map"}],
        " ", "*)"}], "\n", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"S1", " ", "//", " ", "Short"}], "\n", 
   RowBox[{"N", "[", 
    RowBox[{
     RowBox[{"Last", "[", "S1", "]"}], "[", "\"\<ORDERING\>\"", "]"}], 
    "]"}]}]}]], "Code",
 CellLabel->"In[69]:=",ExpressionUUID->"65d3bb9d-a926-4e77-9530-d3eaf4ba7815"],

Cell[BoxData[
 TagBox[
  RowBox[{"\<\"S1\"\>", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"SIGNATURE\"\>", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\<\"PROJECT\"\>", ",", "1", ",", "1", ",", "2", ",", "2", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"\<\"TYPE\"\>", "\[Rule]", "\<\"SEQUENCE\"\>"}], ",", 
     RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
     RowBox[{"\<\"LENGTH\"\>", "\[Rule]", "3"}], ",", 
     RowBox[{"\<\"CODE\"\>", "\[Rule]", "Null"}]}], "\[RightAssociation]"}]}],
  
  Short]], "Output",
 CellLabel->
  "Out[70]//Short=",ExpressionUUID->"31f4feb3-e879-46c6-b5ef-40bb585f10ec"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"DRIF\"\>", ",", "0.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"KICK\"\>", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DRIF\"\>", ",", "0.5`"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[71]=",ExpressionUUID->"3f9e3d69-0de7-4877-86c0-0d064eee5410"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"I$MAKE$SEQUENCE", "[", "]"}], " ", "returns", " ", "a", " ", 
      "rule"}], " ", "<", "NAME", ">"}], " ", "->", " ", 
    RowBox[{"<", "DATA", ">", " ", "where", " ", "<", "DATA", ">", " ", 
     RowBox[{"is", " ", "an", " ", "association"}]}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"S1", " ", "//", " ", "Last"}], " ", "//", " ", "Keys"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "S1", "]"}], "[", "\"\<SIGNATURE\>\"", "]"}], 
   "         ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "matching"}], " ", "signature"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "S1", "]"}], "[", "\"\<TYPE\>\"", "]"}], 
   "              ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", " ", "object"}], " ", "type"}], ",", " ", 
     RowBox[{
     "always", " ", "equal", " ", "to", " ", "\"\<SEQUENCE\>\"", " ", "for", 
      " ", 
      RowBox[{"I$MAKE$SEQUENCE", "[", "]"}]}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "S1", "]"}], "[", "\"\<METHOD\>\"", "]"}], 
   "            ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", " ", "generation"}], " ", "method"}], ",", " ", 
     RowBox[{"\"\<DIRECT\>\"", " ", "or", " ", "\"\<YOSHIDA\>\""}]}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "S1", "]"}], "[", "\"\<UNIQUE\>\"", "]"}], 
   "            ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "list"}], " ", "of", " ", "unique", " ", "maps"}], 
    " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "S1", "]"}], "[", "\"\<LENGTH_UNIQUE\>\"", "]"}], 
   "     ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "number"}], " ", "of", " ", "unique", " ", "maps"}], 
    " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "S1", "]"}], "[", "\"\<LOCAL\>\"", "]"}], 
   "             ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "list"}], " ", "of", " ", "local", " ", "parameters", 
     " ", "for", " ", "each", " ", "unique", " ", "map"}], " ", "*)"}], "\n", 
   
   RowBox[{
    RowBox[{"Last", "[", "S1", "]"}], "[", "\"\<LENGTH_LOCAL\>\"", "]"}], 
   "      ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "number"}], " ", "of", " ", "local", " ", 
     "parameters", " ", "for", " ", "each", " ", "unique", " ", "map"}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "S1", "]"}], "[", "\"\<RULE_LOCAL\>\"", "]"}], 
   "        ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "local"}], " ", "parameters", " ", "rules"}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "S1", "]"}], "[", "\"\<ORDERING\>\"", "]"}], 
   "          ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "ordering"}], " ", "with", " ", "weights"}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "S1", "]"}], "[", "\"\<LENGTH\>\"", "]"}], 
   "            ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "ordered"}], " ", "sequence", " ", "length"}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "S1", "]"}], "[", "\"\<CODE\>\"", "]"}], 
   "              ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", " ", "code"}], " ", "placeholder"}], ",", " ", 
     RowBox[{"code", " ", "is", " ", "generated", " ", "separatly"}]}], " ", 
    "*)"}]}]}]], "Code",
 CellLabel->"In[72]:=",ExpressionUUID->"3e32e6bd-616d-46b4-9060-dae02f3c2055"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"SIGNATURE\"\>", ",", "\<\"TYPE\"\>", ",", "\<\"METHOD\"\>", 
   ",", "\<\"UNIQUE\"\>", ",", "\<\"LENGTH_UNIQUE\"\>", ",", "\<\"LOCAL\"\>", 
   ",", "\<\"LENGTH_LOCAL\"\>", ",", "\<\"RULE_LOCAL\"\>", 
   ",", "\<\"ORDERING\"\>", ",", "\<\"LENGTH\"\>", ",", "\<\"CODE\"\>"}], 
  "}"}]], "Output",
 CellLabel->"Out[72]=",ExpressionUUID->"202c9bf8-15c4-4481-8819-ff9cc694fd7f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "1", ",", "1", ",", "2", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[73]=",ExpressionUUID->"cb8ba062-59f3-4805-9610-cce2bb13c876"],

Cell[BoxData["\<\"SEQUENCE\"\>"], "Output",
 CellLabel->"Out[74]=",ExpressionUUID->"95920011-58c6-4662-929d-7ac88dc6755a"],

Cell[BoxData["\<\"DIRECT\"\>"], "Output",
 CellLabel->"Out[75]=",ExpressionUUID->"8b2a55d9-fcb2-43b6-b983-8edebfaf3391"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"DRIF\"\>", ",", "\<\"KICK\"\>"}], "}"}]], "Output",
 CellLabel->"Out[76]=",ExpressionUUID->"f30bd50f-6f5f-4c57-8293-e024a3ecc9ef"],

Cell[BoxData["2"], "Output",
 CellLabel->"Out[77]=",ExpressionUUID->"5f84a36c-4139-46c0-b24e-6a19bc32b31c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "KS", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[78]=",ExpressionUUID->"66d576be-db5a-493c-99ad-60f1c8071209"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1"}], "}"}]], "Output",
 CellLabel->"Out[79]=",ExpressionUUID->"892cbe0d-1936-4141-b375-1b099287ed3b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"DRIF\"\>", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"\<\"KICK\"\>", "\[Rule]", 
    RowBox[{"{", "KS", "}"}]}]}], "}"}]], "Output",
 CellLabel->"Out[80]=",ExpressionUUID->"68fb8377-2ab0-4ea0-aa0f-c4b4020e581b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"DRIF\"\>", ",", "0.5`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"KICK\"\>", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DRIF\"\>", ",", "0.5`"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[81]=",ExpressionUUID->"9c8b0f0e-c6d8-4a9c-9a4d-c08b0aa766ce"],

Cell[BoxData["3"], "Output",
 CellLabel->"Out[82]=",ExpressionUUID->"9b2c25bb-bed8-4d23-a349-9cb9cb67741f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Yoshida", " ", "weights"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Note", ",", " ", 
    RowBox[{
    "for", " ", "\"\<YOSHIDA\>\"", " ", "ordered", " ", "sequence", " ", 
     "argument", " ", "should", " ", "correspond", " ", "to", " ", "half", 
     " ", "of", " ", "integration", " ", "step"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"S2", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", "\n", "\t", 
      RowBox[{"\"\<S2\>\"", ",", "                     ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "sequence"}], " ", "name"}], " ", "*)"}], "\n", 
       "\t", "\"\<YOSHIDA\>\"", ",", "                ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "method"}], ",", " ", 
         RowBox[{"\"\<DIRECT\>\"", " ", "or", " ", "\"\<YOSHIDA\>\""}]}], " ",
         "*)"}], "\n", "\t", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<KICK\>\""}], "}"}], ",", 
       "          ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "list"}], " ", "of", " ", "unique", " ", "maps"}],
         " ", "*)"}], "\n", "\t", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<KICK\>\""}], "}"}], ",", 
       "          ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "ordered"}], " ", "sequence", " ", "of", " ", 
         "maps"}], " ", "*)"}], "\n", "\t", "1"}], 
      "                         ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"--", " ", "Yoshida"}], " ", "order", " ", 
         RowBox[{"(", "integer", ")"}]}], ",", " ", 
        RowBox[{
        "order", " ", "is", " ", "an", " ", "integer", " ", "greater", " ", 
         "or", " ", "equal", " ", "to", " ", "zero"}]}], " ", "*)"}], "\n", 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{"S2", " ", "//", " ", "Short"}], "\n", 
   RowBox[{"N", "[", 
    RowBox[{
     RowBox[{"Last", "[", "S2", "]"}], "[", "\"\<ORDERING\>\"", "]"}], 
    "]"}]}]}]], "Code",
 CellLabel->"In[87]:=",ExpressionUUID->"78539c5b-ce35-40b1-8013-0f76a4c53bcd"],

Cell[BoxData[
 TagBox[
  RowBox[{"\<\"S2\"\>", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"SIGNATURE\"\>", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\<\"PROJECT\"\>", ",", "1", ",", "1", ",", "2", ",", "2", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"\<\"TYPE\"\>", "\[Rule]", "\<\"SEQUENCE\"\>"}], ",", 
     RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",", 
     RowBox[{"\<\"LENGTH\"\>", "\[Rule]", "7"}], ",", 
     RowBox[{"\<\"CODE\"\>", "\[Rule]", "Null"}]}], "\[RightAssociation]"}]}],
  
  Short]], "Output",
 CellLabel->
  "Out[88]//Short=",ExpressionUUID->"7c78d5ab-57ca-489b-9d6d-8d6e20ca2431"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"DRIF\"\>", ",", "0.6756035959798288`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"KICK\"\>", ",", "1.3512071919596575`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DRIF\"\>", ",", 
     RowBox[{"-", "0.17560359597982883`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"KICK\"\>", ",", 
     RowBox[{"-", "1.7024143839193153`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DRIF\"\>", ",", 
     RowBox[{"-", "0.17560359597982883`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"KICK\"\>", ",", "1.3512071919596575`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DRIF\"\>", ",", "0.6756035959798288`"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[89]=",ExpressionUUID->"a1c7d8ff-aaae-4cec-8a10-fa857d190647"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Add", " ", "sequencies"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"I$TABLE$APPEND", "[", 
    RowBox[{"\"\<SEQUENCE\>\"", ",", "S1"}], "]"}], " ", "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "S2"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE", "[", "\"\<SEQUENCE\>\"", "]"}], " ", "//", " ", 
    "Keys"}]}]}]], "Code",
 CellLabel->"In[90]:=",ExpressionUUID->"432bba0d-d01f-4bb7-b7f8-19f2025d84d4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"S1\"\>", ",", "\<\"S2\"\>"}], "}"}]], "Output",
 CellLabel->"Out[92]=",ExpressionUUID->"46081547-719b-4f1c-aca8-5e7a1d8f9f83"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"I$EVALUATE$SEQUENCE", "[", "]"}], " ", "function", " ", "can", 
    " ", "be", " ", "used", " ", "to", " ", "test", " ", "evaluation", " ", 
    "of", " ", "a", " ", "sequence"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Compare", " ", "with", " ", 
    RowBox[{"I$NDSOLVE", "[", "]"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{"0.001", ",", "0.01"}], "]"}], ",", 
       RowBox[{"List", "[", 
        RowBox[{"0.1", ",", "0.0"}], "]"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MAP", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{
       RowBox[{"ReplaceAll", "[", 
        RowBox[{
         RowBox[{"Total", "[", "HAMILTONIAN", "]"}], ",", 
         RowBox[{"Rule", "[", 
          RowBox[{"KS", ",", "0.1"}], "]"}]}], "]"}], ",", "100", ",", "0.1", 
       ",", "1"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"MAP", "[", "INITIAL", "]"}], "\n", 
   RowBox[{"I$EVALUATE$SEQUENCE", "[", "\n", "\t", 
    RowBox[{"\"\<S1\>\"", ",", "                     ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"--", " ", "name"}], " ", "of", " ", "map", " ", "to", " ", 
        "evaluate"}], ",", " ", 
       RowBox[{"should", " ", "be", " ", "present", " ", "in", " ", 
        RowBox[{"I$TABLE", "[", "\"\<SEQUENCE\>\"", "]"}]}]}], " ", "*)"}], 
     "\n", "\t", "0.01", ",", "                     ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "maximum"}], " ", "integration", " ", "step", " ", 
       "length"}], " ", "*)"}], "\n", "\t", "0.1", ",", 
     "                      ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "total"}], " ", "integration", " ", "length"}], " ",
       "*)"}], "\n", "\t", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "0.1", "}"}]}], "}"}], ",", "               ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "list"}], " ", "of", " ", "values", " ", "for", " ",
        "local", " ", "parameters", " ", "for", " ", "each", " ", "unique", 
       " ", "map"}], " ", "*)"}], "\n", "\t", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", "                    ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "values"}], " ", "for", " ", "parametric", " ", 
       "flags"}], " ", "*)"}], "\n", "\t", "INITIAL"}], "                   ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "initial"}], " ", "state"}], " ", "*)"}], "\n", 
    "]"}], "\n", 
   RowBox[{"I$EVALUATE$SEQUENCE", "[", 
    RowBox[{"\"\<S2\>\"", ",", "0.01", ",", "0.1", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "0.1", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", "INITIAL"}], "]"}]}]}]], "Code",
 CellLabel->"In[93]:=",ExpressionUUID->"3c8ada59-afcc-4106-8d79-9899523be890"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", "0.001`", ",", "0.01`", ",", "0.0999949551297922`", ",", 
   RowBox[{"-", "0.0001009966031492884`"}], ",", "0.999899103444201`", ",", 
   RowBox[{"-", "0.002019898095335488`"}], ",", "0.09989674004143223`", ",", 
   "0.9998991051409153`", ",", "5.039745626465864`*^-6", ",", 
   RowBox[{"-", "3.393371656306268`*^-9"}], ",", 
   RowBox[{"-", "4.994837002071613`*^-6"}], ",", 
   RowBox[{"-", "0.00009999327364778262`"}], ",", "0.00010079321753847996`", 
   ",", 
   RowBox[{"-", "1.0179943776078009`*^-7"}], ",", 
   RowBox[{"-", "0.00009989506015447368`"}], ",", 
   RowBox[{"-", "0.0019997982119785047`"}], ",", 
   RowBox[{"-", "0.09979358668083427`"}], ",", "0.00010078982755680409`", ",", 
   RowBox[{"-", "3.326508828846454`*^-6"}], ",", 
   RowBox[{"-", "0.00009989170038055533`"}], ",", "4.989679334041715`*^-6", 
   ",", 
   RowBox[{"-", "6.719378336407665`*^-9"}], ",", "0.00009979023034799893`", 
   ",", 
   RowBox[{"-", "2.015762652540903`*^-7"}], ",", "6.646203634392998`*^-6", 
   ",", "0.00009978351768232331`"}], "}"}]], "Output",
 CellLabel->"Out[95]=",ExpressionUUID->"201cf104-7b03-4f8f-a786-bd3c8399fe86"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", "0.001`", ",", "0.01`", ",", "0.0999949551289441`", ",", 
   RowBox[{"-", "0.00010099663711609926`"}], ",", "0.9998991034187537`", ",", 
   
   RowBox[{"-", "0.0020198991143142793`"}], ",", "0.09989672324170679`", ",", 
   "0.9998991050985001`", ",", "5.039747321106125`*^-6", ",", 
   RowBox[{"-", "3.3594413289024174`*^-9"}], ",", 
   RowBox[{"-", "4.994838681959008`*^-6"}], ",", 
   RowBox[{"-", "0.000099993340906266`"}], ",", "0.00010079326838408065`", 
   ",", 
   RowBox[{"-", "1.0078157895519463`*^-7"}], ",", 
   RowBox[{"-", "0.00009989511055025216`"}], ",", 
   RowBox[{"-", "0.0019998002296571665`"}], ",", 
   RowBox[{"-", "0.09979355311494095`"}], ",", "0.00010078991229873631`", ",", 
   RowBox[{"-", "3.3431422288267403`*^-6"}], ",", 
   RowBox[{"-", "0.00009989178436736103`"}], ",", "4.989682690375854`*^-6", 
   ",", 
   RowBox[{"-", "6.652194620338772`*^-9"}], ",", "0.00009979033103549564`", 
   ",", 
   RowBox[{"-", "1.99560905290851`*^-7"}], ",", "6.6794372174146884`*^-6", 
   ",", "0.00009978368547636148`"}], "}"}]], "Output",
 CellLabel->"Out[96]=",ExpressionUUID->"636d9db1-7d18-4e76-ae2c-a1f136d939f2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "0.001`", ",", "0.01`", ",", "0.09999495512979276`", ",", 
   RowBox[{"-", "0.00010099660314923534`"}], ",", "0.9998991034442071`", ",", 
   
   RowBox[{"-", "0.0020198980953333575`"}], ",", "0.09989674004142594`", ",", 
   "0.9998991051409152`", ",", "5.0397456258372`*^-6", ",", 
   RowBox[{"-", "3.393371762699199`*^-9"}], ",", 
   RowBox[{"-", "4.994837002062707`*^-6"}], ",", 
   RowBox[{"-", "0.00009999327364762401`"}], ",", "0.00010079321753164727`", 
   ",", 
   RowBox[{"-", "1.0179944202743661`*^-7"}], ",", 
   RowBox[{"-", "0.00009989506015411704`"}], ",", 
   RowBox[{"-", "0.0019997982119721535`"}], ",", 
   RowBox[{"-", "0.09979358668081517`"}], ",", "0.00010078982755648447`", ",", 
   RowBox[{"-", "3.3265088418148783`*^-6"}], ",", 
   RowBox[{"-", "0.000099891700380238`"}], ",", "4.989679334015011`*^-6", ",", 
   RowBox[{"-", "6.719378653610927`*^-9"}], ",", "0.00009979023034692967`", 
   ",", 
   RowBox[{"-", "2.0157627795257606`*^-7"}], ",", "6.64620367324617`*^-6", 
   ",", "0.00009978351768137192`"}], "}"}]], "Output",
 CellLabel->"Out[97]=",ExpressionUUID->"cb92bb7f-9c43-4af9-becf-db614bbdf358"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Clean", " ", "table"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->"In[98]:=",ExpressionUUID->"64deb05c-8483-464e-b12a-e2a97113c787"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"I$MAKE$ELEMENT", "[", "]"}], " ", "function", " ", "can", " ", 
    "be", " ", "used", " ", "to", " ", "generate", " ", 
    RowBox[{"(", "accelerator", ")"}], " ", "elements"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Element", " ", "is", " ", "an", " ", "ordered", " ", "collection", " ", 
    "of", " ", "sequencies"}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[100]:=",ExpressionUUID->"49ce4599-b323-4d4e-8b67-ffda7f84509b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "map"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], "*", 
         RowBox[{
          RowBox[{"P1", "^", "2"}], "/", 
          RowBox[{"(", 
           RowBox[{"1", "+", "K1"}], ")"}]}]}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"KICK", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<KICK\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "3"}], "*", 
         RowBox[{"(", 
          RowBox[{"1", "+", "K2"}], ")"}], "*", "KS", "*", 
         RowBox[{"Q1", "^", "3"}]}], "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "KICK"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}], " ", "//", " ", 
    "Keys"}]}]}]], "Code",
 CellLabel->
  "In[101]:=",ExpressionUUID->"b3f5d6f3-7f9e-476c-b9a1-7d29ccea431f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"DRIF\"\>", ",", "\<\"KICK\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[106]=",ExpressionUUID->"38957059-67c7-4754-80df-e041f6202722"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "sequencies"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEQUENCE", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<SEQUENCE\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<KICK\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<KICK\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "SEQUENCE"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE", "[", "\"\<SEQUENCE\>\"", "]"}], " ", "//", " ", 
    "Keys"}]}]}]], "Code",
 CellLabel->
  "In[107]:=",ExpressionUUID->"20f55381-bab6-4329-b98c-91f9be22075f"],

Cell[BoxData[
 RowBox[{"{", "\<\"SEQUENCE\"\>", "}"}]], "Output",
 CellLabel->
  "Out[110]=",ExpressionUUID->"24be9650-3457-4599-9bc3-603c4aca974c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "element"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ELEMENT", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", "\n", "\t", 
      RowBox[{"\"\<ELEMENT\>\"", ",", "                ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "element"}], " ", "name"}], " ", "*)"}], "\n", 
       "\t", 
       RowBox[{"{", 
        RowBox[{"KS1", ",", "KS2"}], "}"}], ",", "                ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "list"}], " ", "of", " ", "all", " ", 
         "parameters", " ", 
         RowBox[{"(", 
          RowBox[{"for", " ", "all", " ", "sequencies"}], ")"}]}], " ", 
        "*)"}], "\n", "\t", 
       RowBox[{"{", 
        RowBox[{"\"\<SEQUENCE\>\"", ",", "\"\<SEQUENCE\>\""}], "}"}], ",", 
       "  ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "ordered"}], " ", "list", " ", "of", " ", 
         "sequncies"}], " ", "*)"}], "\n", "\t", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "KS1", "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "KS2", "}"}]}], "}"}]}], "}"}]}], "   ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"--", " ", "local"}], "/", "global"}], " ", "relation", " ", 
        "of", " ", "parameters", " ", "for", " ", "all", " ", "unique", " ", 
        "maps", " ", "of", " ", "each", " ", "sequence"}], " ", "*)"}], "\n", 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{"ELEMENT", "//", "Short"}]}]}]], "Code",
 CellLabel->
  "In[111]:=",ExpressionUUID->"4594c6f5-9d73-4f25-8ac0-79c2fc3a1cb3"],

Cell[BoxData[
 TagBox[
  RowBox[{"\<\"ELEMENT\"\>", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"SIGNATURE\"\>", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\<\"PROJECT\"\>", ",", "1", ",", "1", ",", "2", ",", "2", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"\[LeftSkeleton]", "6", "\[RightSkeleton]"}], ",", 
     RowBox[{"\<\"RULE_LOCAL\"\>", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\<\"DRIF\"\>", "\[Rule]", 
           RowBox[{"{", "}"}]}], ",", 
          RowBox[{"\<\"KICK\"\>", "\[Rule]", 
           RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}]}], "}"}], 
        ",", 
        RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}], "}"}]}]}], 
    "\[RightAssociation]"}]}],
  Short]], "Output",
 CellLabel->
  "Out[112]//Short=",ExpressionUUID->"09a6848f-5c0b-4434-a334-48422a0ab346"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"I$MAKE$ELEMENT", "[", "]"}], " ", "returns", " ", "a", " ", 
      "rule"}], " ", "<", "NAME", ">"}], " ", "->", " ", 
    RowBox[{"<", "DATA", ">", " ", "where", " ", "<", "DATA", ">", " ", 
     RowBox[{"is", " ", "an", " ", "association"}]}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ELEMENT", " ", "//", " ", "Last"}], " ", "//", " ", "Keys"}], 
   "\n", 
   RowBox[{
    RowBox[{"Last", "[", "ELEMENT", "]"}], "[", "\"\<SIGNATURE\>\"", "]"}], 
   "    ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "matching"}], " ", "signature"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "ELEMENT", "]"}], "[", "\"\<TYPE\>\"", "]"}], 
   "         ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", " ", "object"}], " ", "type"}], ",", " ", 
     RowBox[{
     "always", " ", "equal", " ", "to", " ", "\"\<ELEMENT\>\"", " ", "for", 
      " ", 
      RowBox[{"I$MAKE$ELEMENT", "[", "]"}]}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "ELEMENT", "]"}], "[", "\"\<GLOBAL\>\"", "]"}], 
   "       ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "list"}], " ", "of", " ", "all", " ", "global", " ", 
     "parameters"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "ELEMENT", "]"}], "[", "\"\<ORDERING\>\"", "]"}], 
   "     ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "sequence"}], " ", "ordering"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "ELEMENT", "]"}], "[", "\"\<LENGTH\>\"", "]"}], 
   "       ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "number"}], " ", "of", " ", "sequencies"}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "ELEMENT", "]"}], "[", "\"\<RELATION\>\"", "]"}], 
   "     ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "relation"}], " ", "between", " ", "global", " ", 
     "and", " ", "local", " ", "parameters"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "ELEMENT", "]"}], "[", "\"\<LENGTH_LOCAL\>\"", "]"}],
    " ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "length"}], " ", "of", " ", "local", " ", 
     "parameters", " ", "for", " ", "each", " ", "unique", " ", "map", " ", 
     "of", " ", "each", " ", "sequence"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Last", "[", "ELEMENT", "]"}], "[", "\"\<RULE_LOCAL\>\"", "]"}], 
   "   ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "parameter"}], " ", "rules", " ", "for", " ", "each", 
     " ", "map", " ", "in", " ", "each", " ", "sequence"}], " ", 
    "*)"}]}]}]], "Code",
 CellLabel->
  "In[113]:=",ExpressionUUID->"a1159331-d584-407e-b99c-93e3f426b3ca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"SIGNATURE\"\>", ",", "\<\"TYPE\"\>", ",", "\<\"GLOBAL\"\>", 
   ",", "\<\"ORDERING\"\>", ",", "\<\"LENGTH\"\>", ",", "\<\"RELATION\"\>", 
   ",", "\<\"LENGTH_LOCAL\"\>", ",", "\<\"RULE_LOCAL\"\>"}], "}"}]], "Output",\

 CellLabel->
  "Out[113]=",ExpressionUUID->"b48ba21c-d620-47f5-ac62-ad945e2f6d2e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "1", ",", "1", ",", "2", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[114]=",ExpressionUUID->"887bc686-44a2-47a8-a2b4-4de916061b5e"],

Cell[BoxData["\<\"ELEMENT\"\>"], "Output",
 CellLabel->
  "Out[115]=",ExpressionUUID->"06fc1ee3-82f1-4eab-a2a6-87a7cbbb0339"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"KS1", ",", "KS2"}], "}"}]], "Output",
 CellLabel->
  "Out[116]=",ExpressionUUID->"c503605e-3745-4397-a085-b4bbe2d2ec44"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"SEQUENCE\"\>", ",", "\<\"SEQUENCE\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[117]=",ExpressionUUID->"dd3a14a6-a8ac-4df2-a612-aa72628e7fd2"],

Cell[BoxData["2"], "Output",
 CellLabel->
  "Out[118]=",ExpressionUUID->"1e3d4058-4269-4665-8b65-3549b9e89145"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "KS1", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "KS2", "}"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[119]=",ExpressionUUID->"1811571c-e01f-4512-ad6a-e7d27a5ff128"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[120]=",ExpressionUUID->"da6d93b5-33fd-4da2-9b89-41678a0b3bf0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"DRIF\"\>", "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"\<\"KICK\"\>", "\[Rule]", 
      RowBox[{"{", "KS", "}"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"DRIF\"\>", "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"\<\"KICK\"\>", "\[Rule]", 
      RowBox[{"{", "KS", "}"}]}]}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[121]=",ExpressionUUID->"ebd9e7b9-cac6-485e-ad57-f340fda582ba"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Add", " ", "element"}], " ", "*)"}], "\n", 
  RowBox[{"I$TABLE$APPEND", "[", 
   RowBox[{"\"\<ELEMENT\>\"", ",", "ELEMENT"}], "]"}]}]], "Code",
 CellLabel->
  "In[122]:=",ExpressionUUID->"a4637a12-689f-4712-aa2e-75883025d02e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"I$EVALUATE$ELEMENT", "[", "]"}], " ", "function", " ", "can", 
    " ", "be", " ", "used", " ", "to", " ", "test", " ", "evaluation", " ", 
    "of", " ", "an", " ", "element"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Compare", " ", "with", " ", 
    RowBox[{"I$NDSOLVE", "[", "]"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{"0.001", ",", "0.01"}], "]"}], ",", 
       RowBox[{"List", "[", 
        RowBox[{"0.1", ",", "0.0"}], "]"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MAP", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{
       RowBox[{"ReplaceAll", "[", 
        RowBox[{
         RowBox[{"Total", "[", "HAMILTONIAN", "]"}], ",", 
         RowBox[{"Rule", "[", 
          RowBox[{"KS", ",", "0.1"}], "]"}]}], "]"}], ",", "100", ",", "0.1", 
       ",", "1"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"MAP", "[", "INITIAL", "]"}], "\n", 
   RowBox[{"I$EVALUATE$ELEMENT", "[", "\n", "\t", 
    RowBox[{"\"\<ELEMENT\>\"", ",", "                ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"--", " ", "name"}], " ", "of", " ", "map", " ", "to", " ", 
        "evaluate"}], ",", " ", 
       RowBox[{"should", " ", "be", " ", "present", " ", "in", " ", 
        RowBox[{"I$TABLE", "[", "\"\<ELEMENT\>\"", "]"}]}]}], " ", "*)"}], 
     "\n", "\t", 
     RowBox[{"{", 
      RowBox[{"0.01", ",", "0.01"}], "}"}], ",", "              ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "maximum"}], " ", "integration", " ", "step", " ", 
       "length", " ", "for", " ", "each", " ", "sequence"}], " ", "*)"}], 
     "\n", "\t", 
     RowBox[{"{", 
      RowBox[{"0.05", ",", "0.05"}], "}"}], ",", "              ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "total"}], " ", "integration", " ", "length", " ", 
       "for", " ", "each", " ", "sequence"}], " ", "*)"}], "\n", "\t", 
     RowBox[{"{", 
      RowBox[{"0.1", ",", "0.1"}], "}"}], ",", "                ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "list"}], " ", "of", " ", "values", " ", "for", " ",
        "global", " ", "parameters"}], " ", "*)"}], "\n", "\t", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", "                    ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "values"}], " ", "for", " ", "parametric", " ", 
       "flags"}], " ", "*)"}], "\n", "\t", "INITIAL"}], "                   ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "initial"}], " ", "state"}], " ", "*)"}], "\n", 
    "]"}]}]}]], "Code",
 CellLabel->
  "In[123]:=",ExpressionUUID->"bd8dc65a-13df-4e36-831d-4e7b4eab4bb0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", "0.001`", ",", "0.01`", ",", "0.0999949551297922`", ",", 
   RowBox[{"-", "0.0001009966031492884`"}], ",", "0.999899103444201`", ",", 
   RowBox[{"-", "0.002019898095335488`"}], ",", "0.09989674004143223`", ",", 
   "0.9998991051409153`", ",", "5.039745626465864`*^-6", ",", 
   RowBox[{"-", "3.393371656306268`*^-9"}], ",", 
   RowBox[{"-", "4.994837002071613`*^-6"}], ",", 
   RowBox[{"-", "0.00009999327364778262`"}], ",", "0.00010079321753847996`", 
   ",", 
   RowBox[{"-", "1.0179943776078009`*^-7"}], ",", 
   RowBox[{"-", "0.00009989506015447368`"}], ",", 
   RowBox[{"-", "0.0019997982119785047`"}], ",", 
   RowBox[{"-", "0.09979358668083427`"}], ",", "0.00010078982755680409`", ",", 
   RowBox[{"-", "3.326508828846454`*^-6"}], ",", 
   RowBox[{"-", "0.00009989170038055533`"}], ",", "4.989679334041715`*^-6", 
   ",", 
   RowBox[{"-", "6.719378336407665`*^-9"}], ",", "0.00009979023034799893`", 
   ",", 
   RowBox[{"-", "2.015762652540903`*^-7"}], ",", "6.646203634392998`*^-6", 
   ",", "0.00009978351768232331`"}], "}"}]], "Output",
 CellLabel->
  "Out[125]=",ExpressionUUID->"3b98d10e-97b9-4843-9d34-a33c49b894a1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "0.001`", ",", "0.01`", ",", "0.09999495512979276`", ",", 
   RowBox[{"-", "0.00010099660314923534`"}], ",", "0.9998991034442071`", ",", 
   
   RowBox[{"-", "0.0020198980953333575`"}], ",", "0.09989674004142594`", ",", 
   "0.9998991051409152`", ",", "5.0397456258372`*^-6", ",", 
   RowBox[{"-", "3.393371762699199`*^-9"}], ",", 
   RowBox[{"-", "4.994837002062707`*^-6"}], ",", 
   RowBox[{"-", "0.00009999327364762401`"}], ",", "0.00010079321753164727`", 
   ",", 
   RowBox[{"-", "1.0179944202743661`*^-7"}], ",", 
   RowBox[{"-", "0.00009989506015411704`"}], ",", 
   RowBox[{"-", "0.0019997982119721535`"}], ",", 
   RowBox[{"-", "0.09979358668081517`"}], ",", "0.00010078982755648447`", ",", 
   RowBox[{"-", "3.3265088418148783`*^-6"}], ",", 
   RowBox[{"-", "0.000099891700380238`"}], ",", "4.989679334015011`*^-6", ",", 
   RowBox[{"-", "6.719378653610927`*^-9"}], ",", "0.00009979023034692967`", 
   ",", 
   RowBox[{"-", "2.0157627795257606`*^-7"}], ",", "6.64620367324617`*^-6", 
   ",", "0.00009978351768137192`"}], "}"}]], "Output",
 CellLabel->
  "Out[126]=",ExpressionUUID->"0d1b51f4-b96c-4284-b92d-7ba6d29b9713"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Clean", " ", "table"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<ELEMENT\>\"", "]"}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->
  "In[127]:=",ExpressionUUID->"41694aa1-6b11-4a0e-b64f-06ed9a72cbf9"]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-07:  Code generation", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"a8016beb-e69f-4bb0-8e35-3f91709a131e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[78]:=",ExpressionUUID->"39192d6c-c938-45d0-ab3a-aa13688670ed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", 
   RowBox[{"\"\<PROJECT\>\"", ",", "1", ",", "1", ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "1", ",", 
    RowBox[{"List", "[", "]"}]}], "]"}]}]], "Code",
 CellLabel->
  "In[134]:=",ExpressionUUID->"47f81a39-e877-4a61-8ba2-e9b3d3477d91"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "1", ",", "1", ",", "2", ",", "1", ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[134]=",ExpressionUUID->"5e940846-cfd8-40ec-ba88-87dab0ed5a44"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"'", 
    RowBox[{"CODE", "'"}], " ", "is", " ", "generated", " ", "by", " ", 
    RowBox[{"I$CODE", "[", "]"}], " ", "function", " ", 
    RowBox[{"(", 
     RowBox[{
     "generate", " ", "code", " ", "for", " ", "all", " ", "maps", " ", "and",
       " ", "sequencies", " ", "in", " ", "tables"}], ")"}]}], " ", "*)"}], 
  "\n", 
  RowBox[{
   RowBox[{"Options", "[", "I$CODE", "]"}], " ", "//", " ", 
   "TableForm"}]}]], "Code",
 CellLabel->
  "In[135]:=",ExpressionUUID->"6d39401c-733e-4af3-b3d4-e7fcabae4ac3"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"\<\"LEVEL\"\>", "\[Rule]", "1"}]},
     {
      RowBox[{"\<\"MAP\"\>", "\[Rule]", "Map"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[135]//TableForm=",ExpressionUUID->"f1b640e7-1485-4260-bc6c-\
76ec495f2622"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"LEVEL", " ", "--"}], " ", "common", " ", "expression", " ", 
     "optimization", " ", "level", " ", "0"}], ",", " ", 
    RowBox[{"1", " ", "or", " ", "2"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"MAP", "   ", "--"}], " ", "map", " ", "function", " ", "Map"}], 
    ",", " ", "ParallelMap", ",", " ", "..."}], " ", "*)"}]}]], "Code",
 CellLabel->
  "In[136]:=",ExpressionUUID->"897140fd-e8f5-4913-814e-f4beb4163897"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "maps"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], "*", 
         RowBox[{
          RowBox[{"P1", "^", "2"}], "/", 
          RowBox[{"(", 
           RowBox[{"1", "+", "K1"}], ")"}]}]}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"KICK", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<KICK\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "3"}], "*", 
         RowBox[{"(", 
          RowBox[{"1", "+", "K2"}], ")"}], "*", "KS", "*", 
         RowBox[{"Q1", "^", "3"}]}], "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "KICK"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}], " ", "//", " ", 
    "Keys"}]}]}]], "Code",
 CellLabel->
  "In[137]:=",ExpressionUUID->"689de939-c169-4762-a4ec-93288ec1b23b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"DRIF\"\>", ",", "\<\"KICK\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[142]=",ExpressionUUID->"e0cb68a7-64bd-4b3a-aee6-3bb51075409a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "sequencies"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEXTUPOLE", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<SEXTUPOLE\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<KICK\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<KICK\>\""}], "}"}], ",", "0"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "SEXTUPOLE"}], "]"}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"I$TABLE", "[", "\"\<SEQUENCE\>\"", "]"}], " ", "//", " ", 
    "Keys"}]}]}]], "Code",
 CellLabel->
  "In[143]:=",ExpressionUUID->"5598bf13-122c-40a1-9f71-92e5a3c5981c"],

Cell[BoxData[
 RowBox[{"{", "\<\"SEXTUPOLE\"\>", "}"}]], "Output",
 CellLabel->
  "Out[146]=",ExpressionUUID->"6b672149-4120-4d08-9b73-8d25de9f5e25"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "element"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<ELEMENT\>\"", "]"}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"SEXTUPOLE", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<SEXTUPOLE\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "\"\<SEXTUPOLE\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KS", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{"I$TABLE$APPEND", "[", 
    RowBox[{"\"\<ELEMENT\>\"", ",", "SEXTUPOLE"}], "]"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE", "[", "\"\<ELEMENT\>\"", "]"}], " ", "//", " ", 
    "Keys"}]}]}]], "Code",
 CellLabel->
  "In[147]:=",ExpressionUUID->"ed375a02-b41a-4d43-88bf-2b1c9c3df7d3"],

Cell[BoxData[
 RowBox[{"{", "\<\"SEXTUPOLE\"\>", "}"}]], "Output",
 CellLabel->
  "Out[150]=",ExpressionUUID->"1597c363-6b28-48fc-92a1-b8ed26a08b14"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Generate", " ", "code", " ", "for", " ", "current", " ", "tables"}], " ", 
   "*)"}], "\n", 
  RowBox[{
   RowBox[{"I$CODE", "[", 
    RowBox[{"Rule", "[", 
     RowBox[{"\"\<LEVEL\>\"", ",", 
      RowBox[{"Plus", "[", 
       RowBox[{"1", ",", "1"}], "]"}]}], "]"}], "]"}], " ", ";"}]}]], "Code",
 CellLabel->
  "In[151]:=",ExpressionUUID->"cd435612-6e37-4a1f-bfe3-24bca65b0c62"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "Generated", " ", "code", " ", "is", " ", "added", " ", "to", " ", "each", 
   " ", "element", " ", "and", " ", "sequence", " ", "in", " ", "current", 
   " ", "tables"}], " ", "*)"}]], "Code",
 CellLabel->
  "In[152]:=",ExpressionUUID->"c6546278-d54a-4cb9-ba67-3a9d3b9dc4a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Sequnce", " ", "code", " ", "is", " ", "an", " ", "optimization", " ", 
    "of", " ", "weights", " ", "computation"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"CODE", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"I$TABLE", "[", "\"\<SEQUENCE\>\"", "]"}], "[", 
       "\"\<SEXTUPOLE\>\"", "]"}], "[", "\"\<CODE\>\"", "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{"CODE", " ", "//", " ", "Keys"}], "\n", 
   RowBox[{
    RowBox[{"N", "[", 
     RowBox[{"CODE", "[", "\"\<SET\>\"", "]"}], "]"}], " ", "//", " ", 
    "Short"}], "     ", 
   RowBox[{"(*", " ", 
    RowBox[{"--", " ", "code"}], " ", "*)"}], "\n", 
   RowBox[{"CODE", "[", "\"\<LENGTH\>\"", "]"}], "              ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "number"}], " ", "of", " ", "local", " ", 
     "variables"}], " ", "*)"}], "\n", 
   RowBox[{"CODE", "[", "\"\<DATA\>\"", "]"}], "                ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "local"}], " ", "variables"}], " ", 
    "*)"}]}]}]], "Code",
 CellLabel->
  "In[153]:=",ExpressionUUID->"53c5aae0-9de4-4d5f-9199-e77f05d0cbcb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"SET\"\>", ",", "\<\"LENGTH\"\>", ",", "\<\"DATA\"\>"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[154]=",ExpressionUUID->"9a972277-2e5c-439f-a782-1b4235af8abc"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"I$OPT$WEI$1", ",", "I$OPT$WEI$2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"I$SET", "[", 
         RowBox[{"I$OPT$WEI$1", ",", "0.5`"}], "]"}], ",", 
        RowBox[{"I$SET", "[", 
         RowBox[{"I$OPT$WEI$2", ",", "1.`"}], "]"}]}], "}"}]}], "}"}], ",", 
    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[155]//Short=",ExpressionUUID->"17622408-d3fb-45cb-99f3-3040f29605a0"],

Cell[BoxData["2"], "Output",
 CellLabel->
  "Out[156]=",ExpressionUUID->"03771619-59e4-4c69-b9e2-1d7d4b91a637"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"I$OPT$WEI$1", ",", "I$OPT$WEI$2"}], "}"}]], "Output",
 CellLabel->
  "Out[157]=",ExpressionUUID->"cf4aa514-07a1-45b6-a27e-2628a6236681"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Map", " ", "code", " ", "is", " ", "an", " ", "optimization", " ", "of", 
    " ", "map", " ", "computation"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"CODE", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}], "[", "\"\<KICK\>\"", 
       "]"}], "[", "\"\<CODE\>\"", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"CODE", " ", "//", " ", "Keys"}], "\n", 
   RowBox[{
    RowBox[{"N", "[", 
     RowBox[{"CODE", "[", "\"\<SET\>\"", "]"}], "]"}], " ", "//", " ", 
    "Short"}], "     ", 
   RowBox[{"(*", " ", 
    RowBox[{"--", " ", "code"}], " ", "*)"}], "\n", 
   RowBox[{"CODE", "[", "\"\<LENGTH\>\"", "]"}], "              ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "number"}], " ", "of", " ", "local", " ", 
     "variables"}], " ", "*)"}], "\n", 
   RowBox[{"CODE", "[", "\"\<DATA\>\"", "]"}], "                ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "local"}], " ", "variables"}], " ", 
    "*)"}]}]}]], "Code",
 CellLabel->
  "In[158]:=",ExpressionUUID->"5e7af343-267d-4997-af52-bba07a0c0849"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"SET\"\>", ",", "\<\"LENGTH\"\>", ",", "\<\"DATA\"\>"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[159]=",ExpressionUUID->"13c32c93-4beb-4e21-b186-5bb7cdabb36e"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"I$SET", "[", 
    RowBox[{
     RowBox[{"I$STATE", "[", 
      RowBox[{"{", 
       RowBox[{
       "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", "15", ",", "17", 
        ",", "19", ",", "21"}], "}"}], "]"}], ",", 
     RowBox[{"I$BLOCK", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"I$OPT$1", ",", "I$OPT$2", ",", "I$OPT$3"}], "}"}], ",", 
       RowBox[{
        RowBox[{"\[LeftSkeleton]", "21", "\[RightSkeleton]"}], "[", 
        RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "]"}]}], 
      "]"}]}], "]"}], "}"}],
  Short]], "Output",
 CellLabel->
  "Out[160]//Short=",ExpressionUUID->"823a0a5b-6d9c-4273-b389-8dc3aab693a8"],

Cell[BoxData["3"], "Output",
 CellLabel->
  "Out[161]=",ExpressionUUID->"ff461036-bfa8-40d5-96ac-c83da5dd1aee"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"I$OPT$1", ",", "I$OPT$2", ",", "I$OPT$3"}], "}"}]], "Output",
 CellLabel->
  "Out[162]=",ExpressionUUID->"a3144488-e201-44f4-b079-33ed00fec73c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Clean", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<ELEMENT\>\"", "]"}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->
  "In[163]:=",ExpressionUUID->"665aa3e3-5378-4c8e-9cd8-37483fb059b6"]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-08:  (COMPILE) Elements", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"a127ff7f-ff28-4db5-bb0b-9aab5af4a2a6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[2]:=",ExpressionUUID->"5b42fad9-73c7-40a4-a4ca-5db44574d2b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", 
   RowBox[{"\"\<PROJECT\>\"", ",", "1", ",", "0", ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "0", ",", 
    RowBox[{"List", "[", "]"}]}], "]"}]}]], "Code",
 CellLabel->"In[3]:=",ExpressionUUID->"5a2d6d7e-a437-46a2-a8a3-5c52be552612"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "1", ",", "0", ",", "2", ",", "0", ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[3]=",ExpressionUUID->"988a73dc-7988-46f6-bd6a-b289ba1dfce1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"I$NDSOLVE", "[", "]"}], " ", "element"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", 
       RowBox[{
        RowBox[{"P1", "^", "2"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", "K1"}], ")"}]}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"1", "/", "3"}], "*", 
       RowBox[{"(", 
        RowBox[{"1", "+", "K2"}], ")"}], "*", "KS", "*", 
       RowBox[{"Q1", "^", "3"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{"0.001", ",", "0.01"}], "]"}], ",", 
       RowBox[{"List", "[", 
        RowBox[{"0.1", ",", "0.0"}], "]"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MAP", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{
       RowBox[{"ReplaceAll", "[", 
        RowBox[{"HAMILTONIAN", ",", 
         RowBox[{"Rule", "[", 
          RowBox[{"KS", ",", "0.1"}], "]"}]}], "]"}], ",", "100", ",", "0.1", 
       ",", "1"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"NDSOLVE", " ", "=", " ", 
    RowBox[{"MAP", "[", "INITIAL", "]"}]}]}]}]], "Code",
 CellLabel->"In[4]:=",ExpressionUUID->"53e3abb0-125c-44ba-8b97-b092be5eb8fb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", "0.001`", ",", "0.01`", ",", "0.0999949551297922`", ",", 
   RowBox[{"-", "0.0001009966031492884`"}]}], "}"}]], "Output",
 CellLabel->"Out[7]=",ExpressionUUID->"d7aa3d38-502f-4a9b-90f6-191430e7070b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "data"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<ELEMENT\>\"", "]"}], " ", ";"}], "\n", 
   "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], "*", 
         RowBox[{
          RowBox[{"P1", "^", "2"}], "/", 
          RowBox[{"(", 
           RowBox[{"1", "+", "K1"}], ")"}]}]}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"KICK", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<KICK\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "3"}], "*", 
         RowBox[{"(", 
          RowBox[{"1", "+", "K2"}], ")"}], "*", "KS", "*", 
         RowBox[{"Q1", "^", "3"}]}], "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "KICK"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"SEXTUPOLE", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<SEXTUPOLE\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<KICK\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<KICK\>\""}], "}"}], ",", "0"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "SEXTUPOLE"}], "]"}], " ", ";"}], "\n", 
   "\n", 
   RowBox[{
    RowBox[{"SEXTUPOLE", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<SEXTUPOLE\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "\"\<SEXTUPOLE\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KS", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "SEXTUPOLE"}], "]"}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->"In[8]:=",ExpressionUUID->"c2fd7c12-f5bb-4c66-adf5-30a720195b90"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "code"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"I$CODE", "[", 
    RowBox[{"Rule", "[", 
     RowBox[{"\"\<LEVEL\>\"", ",", 
      RowBox[{"Plus", "[", "1", "]"}]}], "]"}], "]"}], " ", ";"}]}]], "Code",
 CellLabel->"In[19]:=",ExpressionUUID->"b345ed63-4d9e-4df2-a2d3-8865df888573"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Element", " ", "can", " ", "be", " ", "compiled", " ", "with", " ", 
    RowBox[{"I$COMPILE$ELEMENT", "[", "]"}], " ", "function"}], " ", "*)"}], 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Note", ",", " ", 
    RowBox[{"all", " ", "maps"}], ",", " ", 
    RowBox[{
    "sequencies", " ", "and", " ", "elements", " ", "should", " ", "present", 
     " ", "in", " ", "corresponding", " ", "tables", " ", "and", " ", "code", 
     " ", "should", " ", "be", " ", "generated"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Options", "[", "I$COMPILE$ELEMENT", "]"}], "//", 
   "TableForm"}]}]], "Code",
 CellLabel->"In[20]:=",ExpressionUUID->"40d96f94-bd7c-4fe9-993c-9be00dd9664c"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"CompilationTarget", "\[Rule]", "\<\"C\"\>"}]},
     {
      RowBox[{"RuntimeOptions", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\<\"Speed\"\>", ",", 
         RowBox[{"\<\"EvaluateSymbolically\"\>", "\[Rule]", "False"}]}], 
        "}"}]}]},
     {
      RowBox[{"CompilationOptions", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\<\"ExpressionOptimization\"\>", "\[Rule]", "True"}], 
        "}"}]}]},
     {
      RowBox[{"RuntimeAttributes", "\[Rule]", 
       RowBox[{"{", "Listable", "}"}]}]},
     {
      RowBox[{"Parallelization", "\[Rule]", "True"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[20]//TableForm=",ExpressionUUID->"167276d3-ffd0-4f43-b770-\
95f9946313e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compile", " ", "element", " ", 
    RowBox[{"(", 
     RowBox[{
     "return", " ", "ready", " ", "to", " ", "compile", " ", "expresion"}], 
     ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"CODE", " ", "=", " ", 
     RowBox[{"I$COMPILE$ELEMENT", "[", "\n", "\t", 
      RowBox[{"\"\<SEXTUPOLE\>\"", ",", "                 ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "element"}], " ", "name", " ", 
         RowBox[{"(", "string", ")"}]}], " ", "*)"}], "\n", "\t", 
       RowBox[{"{", "0.01", "}"}], ",", "                      ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "maximum"}], " ", "intergation", " ", "step", " ",
          "size", " ", "for", " ", "each", " ", "sequence"}], " ", "*)"}], 
       "\n", "\t", 
       RowBox[{"{", "0.1", "}"}], ",", "                       ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "total"}], " ", "integration", " ", "length", " ",
          "for", " ", "each", " ", "sequence"}], " ", "*)"}], "\n", "\t", 
       RowBox[{"{", 
        RowBox[{"1.", ",", "1."}], "}"}]}], "                      ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", "flag"}], " ", "values"}], " ", "*)"}], "\n", 
      "\t                             ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"--", " ", "compile"}], " ", "options"}], ",", " ", 
        RowBox[{
        "by", " ", "default", " ", "compilation", " ", "target", " ", "is", 
         " ", "\"\<C\>\""}]}], " ", "*)"}], "\n", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"CODE", "//", "Short"}]}]}]], "Code",
 CellLabel->"In[21]:=",ExpressionUUID->"0d45e8ac-f64c-428b-af4b-a9eac2c8c6e7"],

Cell[BoxData[
 TagBox[
  RowBox[{"Hold", "[", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"C$VAR", ",", "_Real", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"C$PAR", ",", "_Real", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], ",", 
     RowBox[{"CompilationOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\<\"Expressi\"\>", "\[Ellipsis]", "\<\"mization\"\>"}], 
        "\[Rule]", 
        RowBox[{"\[LeftSkeleton]", "4", "\[RightSkeleton]"}]}], "}"}]}]}], 
    "]"}], "]"}],
  Short]], "Output",
 CellLabel->
  "Out[22]//Short=",ExpressionUUID->"b678fde0-47ba-49a5-be41-2db31ca50d5a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Compile", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"MAP", " ", "=", " ", 
    RowBox[{"ReleaseHold", "[", "CODE", "]"}]}], " ", ";"}]}]], "Code",
 CellLabel->"In[23]:=",ExpressionUUID->"77da4ae8-296d-4570-be23-3effd2e16192"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Calls", " ", "to", " ", 
    RowBox[{"MainEvaluate", "[", "]"}], " ", "can", " ", "be", " ", "checked",
     " ", "with", " ", 
    RowBox[{"I$COMPILE$CHECK", "[", "]"}]}], " ", "*)"}], " ", "\n", 
  RowBox[{"I$COMPILE$CHECK", "[", "MAP", "]"}]}]], "Code",
 CellLabel->"In[24]:=",ExpressionUUID->"6c41654f-3f22-4773-b8c2-122c1080f901"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TestResultObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 TraditionalForm]]]}, PlotRange -> {{0, 1}, {0, 1}}, 
             Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Success\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["None", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              InsetBox[
               BoxData[
                FormBox[
                 PaneBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "MUnitExpressions", "SuccessIcon"]], Alignment -> Center, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 TraditionalForm]]]}, PlotRange -> {{0, 1}, {0, 1}}, 
             Background -> GrayLevel[0.93], Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.55]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Outcome: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Success\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Test ID: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["None", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Input: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   TagBox[
                    RowBox[{"StringFreeQ", "[", 
                    RowBox[{
                    RowBox[{"CompilePrint", "[", 
                    InterpretationBox[
                    RowBox[{
                    TagBox[
                    RowBox[{"\[LeftSkeleton]", "16", "\[RightSkeleton]"}], 
                    "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    GraphicsBox[{
                    Thickness[0.038461538461538464`], {
                    FaceForm[{
                    GrayLevel[0.93], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                    25.499999999999996`, 2.5}, {25.499999999999996`, 
                    1.3953100000000003`}, {24.604699999999998`, 
                    0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5,
                     0.49999999999999994`}, {1.3953100000000003`, 
                    0.49999999999999994`}, {0.49999999999999994`, 
                    1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                    0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                    24.604699999999998`}, {1.3953100000000003`, 
                    25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                    25.499999999999996`}, {24.604699999999998`, 
                    25.499999999999996`}, {25.499999999999996`, 
                    24.604699999999998`}, {25.499999999999996`, 23.5}, {
                    25.499999999999996`, 2.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.5, 0.5, 0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                    19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                    16.3832, 20.021499999999996`}, {6.930469999999999, 
                    20.021499999999996`}, {6.930469999999999, 
                    18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                    16.3832, 16.357399999999995`}, {20.5426, 
                    19.116799999999998`}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 
                    13.8391}, {9.46445, 11.079700000000003`}, {9.46445, 
                    12.933999999999997`}, {18.917199999999998`, 
                    12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                    9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
                    13.8391}}}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                    
                    "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
                    AspectRatio -> 1, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                    FrameTicks -> None, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    StyleBox[
                    PaneBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_Real", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"_Real", ",", "1"}], "}"}]}], "}"}], 
                    ContentPadding -> False, FrameMargins -> 0, StripOnInput -> 
                    True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{2}}, 
                    "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    GraphicsBox[{
                    Thickness[0.038461538461538464`], {
                    FaceForm[{
                    GrayLevel[0.93], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                    25.499999999999996`, 2.5}, {25.499999999999996`, 
                    1.3953100000000003`}, {24.604699999999998`, 
                    0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5,
                     0.49999999999999994`}, {1.3953100000000003`, 
                    0.49999999999999994`}, {0.49999999999999994`, 
                    1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                    0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                    24.604699999999998`}, {1.3953100000000003`, 
                    25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                    25.499999999999996`}, {24.604699999999998`, 
                    25.499999999999996`}, {25.499999999999996`, 
                    24.604699999999998`}, {25.499999999999996`, 23.5}, {
                    25.499999999999996`, 2.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.5, 0.5, 0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                    19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                    16.3832, 20.021499999999996`}, {6.930469999999999, 
                    20.021499999999996`}, {6.930469999999999, 
                    18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                    16.3832, 16.357399999999995`}, {20.5426, 
                    19.116799999999998`}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 
                    13.8391}, {9.46445, 11.079700000000003`}, {9.46445, 
                    12.933999999999997`}, {18.917199999999998`, 
                    12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                    9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
                    13.8391}}}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                    
                    "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
                    AspectRatio -> 1, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                    FrameTicks -> None, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_Real", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"_Real", ",", "1"}], "}"}]}], "}"}], 
                    ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Variables: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"C$VAR", ",", "C$PAR"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"Compile`$2", ",", "Compile`$5", ",", 
                    "Compile`$20", ",", "Compile`$23"}], "}"}], ",", 
                    RowBox[{"Catch", "[", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"I$STATE", ",", "I$GLOBAL", ",", "I$LOCAL"}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{"I$STATE", "=", "C$VAR"}], ";", 
                    RowBox[{"I$GLOBAL", "=", "C$PAR"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    
                    RowBox[{"I$STATE", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "<", "0.5`"}], ",", 
                    RowBox[{"Throw", "[", "I$STATE", "]"}]}], "]"}], ";", 
                    RowBox[{"Do", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"I$STATE", "\[LeftDoubleBracket]", 
                    RowBox[{"{", "4", "}"}], "\[RightDoubleBracket]"}], "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Compile`$2", "=", 
                    
                    RowBox[{"I$STATE", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"Compile`$5", "=", 
                    
                    RowBox[{"I$STATE", "\[LeftDoubleBracket]", "4", 
                    "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1.`", 
                    RowBox[{
                    RowBox[{"1.`", "\[VeryThinSpace]"}], "+", "Compile`$2"}]],
                     " ", 
                    RowBox[{"(", 
                    RowBox[{"Compile`$5", "+", 
                    RowBox[{"Compile`$2", " ", "Compile`$5"}], "+", 
                    RowBox[{
                    
                    RowBox[{"I$STATE", "\[LeftDoubleBracket]", "5", 
                    "\[RightDoubleBracket]"}], " ", "0.005`"}]}], ")"}]}], 
                    "}"}]}], ")"}]}], ";", 
                    RowBox[{"I$LOCAL", "=", 
                    RowBox[{"{", 
                    
                    RowBox[{"I$GLOBAL", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "}"}]}], ";", 
                    RowBox[{
                    RowBox[{"I$STATE", "\[LeftDoubleBracket]", 
                    RowBox[{"{", "5", "}"}], "\[RightDoubleBracket]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{"I$STATE", "\[LeftDoubleBracket]", "5", 
                    "\[RightDoubleBracket]"}], "-", 
                    RowBox[{"1.`", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"1.`", "\[VeryThinSpace]"}], "+", 
                    
                    RowBox[{"I$STATE", "\[LeftDoubleBracket]", "3", 
                    "\[RightDoubleBracket]"}]}], ")"}], " ", 
                    
                    RowBox[{"I$LOCAL", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], " ", 
                    SuperscriptBox[
                    
                    RowBox[{"I$STATE", "\[LeftDoubleBracket]", "4", 
                    "\[RightDoubleBracket]"}], "2"], " ", "0.01`"}]}], 
                    "}"}]}], ";", 
                    RowBox[{
                    RowBox[{"I$STATE", "\[LeftDoubleBracket]", 
                    RowBox[{"{", "4", "}"}], "\[RightDoubleBracket]"}], "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Compile`$20", "=", 
                    
                    RowBox[{"I$STATE", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"Compile`$23", "=", 
                    
                    RowBox[{"I$STATE", "\[LeftDoubleBracket]", "4", 
                    "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1.`", 
                    RowBox[{
                    RowBox[{"1.`", "\[VeryThinSpace]"}], "+", 
                    "Compile`$20"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{"Compile`$23", "+", 
                    RowBox[{"Compile`$20", " ", "Compile`$23"}], "+", 
                    RowBox[{
                    
                    RowBox[{"I$STATE", "\[LeftDoubleBracket]", "5", 
                    "\[RightDoubleBracket]"}], " ", "0.005`"}]}], ")"}]}], 
                    "}"}]}], ")"}]}]}], ",", "10"}], "]"}], ";", 
                    "I$STATE"}]}], "]"}], "]"}]}], "]"}], 
                    ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{2}}, 
                    "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    CompiledFunction[{11, 12.1, 5400}, {{
                    Blank[Real], 1}, {
                    Blank[Real], 1}}, {{3, 1, 0}, {3, 1, 1}, {3, 1, 
                    8}}, {{0, {2, 0, 3}}, {1., {3, 0, 4}}, {{5}, {2, 1, 9}}, {
                    10, {2, 0, 1}}, {
                    4, {2, 0, 6}}, {-1., {3, 0, 10}}, {{4}, {2, 1, 6}}, {
                    5, {2, 0, 7}}, {2, {2, 0, 5}}, {0.01, {3, 0, 12}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 8}}, {0.5, {3, 0, 1}}, {
                    0., {3, 0, 2}}, {0.005, {3, 0, 8}}}, {1, 9, 14, 0, 
                    12}, {{42, "CopyTensor", 3, 1, 0, 3, 1, 2}, {
                    42, "CopyTensor", 3, 1, 1, 3, 1, 4}, {38, 2, 0, 0, 0, 
                    0}, {27, 3, 2, 0, 1, 0}, {2, 0, 3}, {3, 41}, {3, 1}, {6, 
                    1, 2}, {6, 3, 4}, {3, 35}, {38, 2, 0, 5, 0, 0}, {38, 2, 0,
                     6, 0, 3}, {13, 4, 0, 5}, {40, 60, 3, 0, 5, 3, 0, 6}, {16,
                     0, 3, 5}, {38, 2, 0, 7, 0, 7}, {16, 7, 8, 7}, {13, 3, 5, 
                    7, 9}, {16, 6, 9, 6}, {34, 1, 1, 6, 3, 7}, {39, 2, 1, 6, 
                    1, 7}, {38, 4, 0, 0, 0, 6}, {34, 1, 1, 6, 3, 8}, {38, 2, 
                    0, 7, 0, 6}, {38, 2, 0, 8, 0, 5}, {13, 4, 5, 7}, {38, 8, 
                    0, 0, 0, 5}, {38, 2, 0, 6, 0, 9}, {40, 56, 3, 0, 9, 3, 0, 
                    11}, {16, 10, 7, 5, 11, 12, 9}, {13, 6, 9, 6}, {34, 1, 1, 
                    6, 3, 10}, {39, 2, 1, 9, 1, 10}, {38, 2, 0, 5, 0, 6}, {38,
                     2, 0, 6, 0, 9}, {13, 4, 6, 7}, {40, 60, 3, 0, 7, 3, 0, 
                    5}, {16, 6, 9, 7}, {38, 2, 0, 7, 0, 11}, {16, 11, 8, 
                    11}, {13, 9, 7, 11, 13}, {16, 5, 13, 5}, {34, 1, 1, 5, 3, 
                    11}, {39, 2, 1, 6, 1, 11}, {4, 4, 2, -34}, {3, 3}, {
                    42, "CopyTensor", 3, 1, 2, 3, 1, 8}, {3, 3}, {
                    42, "CopyTensor", 3, 1, 2, 3, 1, 8}, {3, 1}, {1}}, 
                    Function[{$CellContext`C$VAR, $CellContext`C$PAR}, 
                    
                    Block[{Compile`$2, Compile`$5, Compile`$20, Compile`$23}, 
                    
                    Catch[
                    
                    Block[{$CellContext`I$STATE, $CellContext`I$GLOBAL, \
$CellContext`I$LOCAL}, $CellContext`I$STATE = $CellContext`C$VAR; \
$CellContext`I$GLOBAL = $CellContext`C$PAR; 
                    If[Part[$CellContext`I$STATE, 1] < 0.5, 
                    Throw[$CellContext`I$STATE]]; 
                    Do[Part[$CellContext`I$STATE, {4}] = (
                    Compile`$2 = Part[$CellContext`I$STATE, 2]; 
                    Compile`$5 = Part[$CellContext`I$STATE, 4]; {
                    Divide[1., 1. + Compile`$2] (Compile`$5 + 
                    Compile`$2 Compile`$5 + 
                    Part[$CellContext`I$STATE, 5] 
                    0.005)}); $CellContext`I$LOCAL = {
                    Part[$CellContext`I$GLOBAL, 1]}; 
                    Part[$CellContext`I$STATE, {5}] = {
                    Part[$CellContext`I$STATE, 5] - 
                    1. (1. + Part[$CellContext`I$STATE, 3]) 
                    Part[$CellContext`I$LOCAL, 1] 
                    Part[$CellContext`I$STATE, 4]^2 0.01}; 
                    Part[$CellContext`I$STATE, {4}] = (
                    Compile`$20 = Part[$CellContext`I$STATE, 2]; 
                    Compile`$23 = Part[$CellContext`I$STATE, 4]; {
                    Divide[1., 1. + Compile`$20] (Compile`$23 + 
                    Compile`$20 Compile`$23 + 
                    Part[$CellContext`I$STATE, 5] 0.005)}), 
                    10]; $CellContext`I$STATE]]]], Evaluate, 
                    LibraryFunction[
                    "/home/imorozov/.Mathematica/ApplicationData/\
CCompilerDriver/BuildFolder/work-23759/compiledFunction0.so", 
                    "compiledFunction0", {{Real, 1, "Constant"}, {
                    Real, 1, "Constant"}}, {Real, 1}]], Selectable -> False, 
                    Editable -> False, SelectWithContents -> True], "]"}], 
                    ",", "\"MainEvaluate\""}], "]"}], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                   BaselinePosition -> Baseline, ContentPadding -> False, 
                   FrameMargins -> 0, StripOnInput -> True], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Expected output: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   TagBox["True", Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                   BaselinePosition -> Baseline, ContentPadding -> False, 
                   FrameMargins -> 0, StripOnInput -> True], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Actual output: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   TagBox["True", Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                   BaselinePosition -> Baseline, ContentPadding -> False, 
                   FrameMargins -> 0, StripOnInput -> True], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Time taken: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   TagBox[
                    
                    TemplateBox[{
                    "0.007096`4.001528604655659", "\"s\"", "seconds", 
                    "\"Seconds\""}, "Quantity", SyntaxForm -> Mod], Short[#, 
                    Rational[2, 3]]& ], ImageSize -> {{1, 500}, Automatic}, 
                   BaselinePosition -> Baseline, ContentPadding -> False, 
                   FrameMargins -> 0, StripOnInput -> True], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TestResultObject[
   Association[
   "TestClass" -> None, "TestIndex" -> 1, "TestID" -> None, "Outcome" -> 
    "Success", "Input" -> HoldForm[
      StringFreeQ[
       CompiledFunctionTools`CompilePrint[
        CompiledFunction[{11, 12.1, 5400}, {{
           Blank[Real], 1}, {
           Blank[Real], 1}}, {{3, 1, 0}, {3, 1, 1}, {3, 1, 
         8}}, {{0, {2, 0, 3}}, {1., {3, 0, 4}}, {{5}, {2, 1, 9}}, {
          10, {2, 0, 1}}, {
          4, {2, 0, 6}}, {-1., {3, 0, 10}}, {{4}, {2, 1, 6}}, {
          5, {2, 0, 7}}, {2, {2, 0, 5}}, {0.01, {3, 0, 12}}, {1, {2, 0, 0}}, {
          3, {2, 0, 8}}, {0.5, {3, 0, 1}}, {0., {3, 0, 2}}, {
          0.005, {3, 0, 8}}}, {1, 9, 14, 0, 
         12}, {{42, "CopyTensor", 3, 1, 0, 3, 1, 2}, {
          42, "CopyTensor", 3, 1, 1, 3, 1, 4}, {38, 2, 0, 0, 0, 0}, {27, 3, 2,
           0, 1, 0}, {2, 0, 3}, {3, 41}, {3, 1}, {6, 1, 2}, {6, 3, 4}, {3, 
          35}, {38, 2, 0, 5, 0, 0}, {38, 2, 0, 6, 0, 3}, {13, 4, 0, 5}, {40, 
          60, 3, 0, 5, 3, 0, 6}, {16, 0, 3, 5}, {38, 2, 0, 7, 0, 7}, {16, 7, 
          8, 7}, {13, 3, 5, 7, 9}, {16, 6, 9, 6}, {34, 1, 1, 6, 3, 7}, {39, 2,
           1, 6, 1, 7}, {38, 4, 0, 0, 0, 6}, {34, 1, 1, 6, 3, 8}, {38, 2, 0, 
          7, 0, 6}, {38, 2, 0, 8, 0, 5}, {13, 4, 5, 7}, {38, 8, 0, 0, 0, 5}, {
          38, 2, 0, 6, 0, 9}, {40, 56, 3, 0, 9, 3, 0, 11}, {16, 10, 7, 5, 11, 
          12, 9}, {13, 6, 9, 6}, {34, 1, 1, 6, 3, 10}, {39, 2, 1, 9, 1, 10}, {
          38, 2, 0, 5, 0, 6}, {38, 2, 0, 6, 0, 9}, {13, 4, 6, 7}, {40, 60, 3, 
          0, 7, 3, 0, 5}, {16, 6, 9, 7}, {38, 2, 0, 7, 0, 11}, {16, 11, 8, 
          11}, {13, 9, 7, 11, 13}, {16, 5, 13, 5}, {34, 1, 1, 5, 3, 11}, {39, 
          2, 1, 6, 1, 11}, {4, 4, 2, -34}, {3, 3}, {
          42, "CopyTensor", 3, 1, 2, 3, 1, 8}, {3, 3}, {
          42, "CopyTensor", 3, 1, 2, 3, 1, 8}, {3, 1}, {1}}, 
         Function[{$CellContext`C$VAR, $CellContext`C$PAR}, 
          Block[{Compile`$2, Compile`$5, Compile`$20, Compile`$23}, 
           Catch[
            
            Block[{$CellContext`I$STATE, $CellContext`I$GLOBAL, \
$CellContext`I$LOCAL}, $CellContext`I$STATE = $CellContext`C$VAR; \
$CellContext`I$GLOBAL = $CellContext`C$PAR; 
             If[Part[$CellContext`I$STATE, 1] < 0.5, 
               Throw[$CellContext`I$STATE]]; 
             Do[Part[$CellContext`I$STATE, {4}] = (
                 Compile`$2 = Part[$CellContext`I$STATE, 2]; 
                 Compile`$5 = Part[$CellContext`I$STATE, 4]; {
                  Divide[1., 1. + Compile`$2] (Compile`$5 + 
                    Compile`$2 Compile`$5 + 
                    Part[$CellContext`I$STATE, 5] 
                    0.005)}); $CellContext`I$LOCAL = {
                  Part[$CellContext`I$GLOBAL, 1]}; 
               Part[$CellContext`I$STATE, {5}] = {
                 Part[$CellContext`I$STATE, 5] - 
                  1. (1. + Part[$CellContext`I$STATE, 3]) 
                  Part[$CellContext`I$LOCAL, 1] 
                  Part[$CellContext`I$STATE, 4]^2 0.01}; 
               Part[$CellContext`I$STATE, {4}] = (
                 Compile`$20 = Part[$CellContext`I$STATE, 2]; 
                 Compile`$23 = Part[$CellContext`I$STATE, 4]; {
                  Divide[1., 1. + Compile`$20] (Compile`$23 + 
                    Compile`$20 Compile`$23 + 
                    Part[$CellContext`I$STATE, 5] 0.005)}), 
               10]; $CellContext`I$STATE]]]], Evaluate, 
         LibraryFunction[
         "/home/imorozov/.Mathematica/ApplicationData/CCompilerDriver/\
BuildFolder/work-23759/compiledFunction0.so", 
          "compiledFunction0", {{Real, 1, "Constant"}, {
           Real, 1, "Constant"}}, {Real, 1}]]], "MainEvaluate"]], 
    "ExpectedOutput" -> HoldForm[True], "ActualOutput" -> HoldForm[True], 
    "ExpectedMessages" -> {}, "ActualMessages" -> {}, "AbsoluteTimeUsed" -> 
    Quantity[0.007096`4.001528604655659, "Seconds"], "CPUTimeUsed" -> 
    Quantity[0.007117000000000484, "Seconds"], "MemoryUsed" -> 
    Quantity[7304, "Bytes"]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[24]=",ExpressionUUID->"31f28cb7-781c-4bcb-b50e-48a79141ab1b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compiled", " ", "code", " ", 
    RowBox[{"(", 
     RowBox[{"output", " ", "removed"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"CompilePrint", "[", "MAP", "]"}]}]], "Code",ExpressionUUID->\
"54897269-b7be-4169-8c79-1080fe55a666"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compiled", " ", "function", " ", "invocation"}], " ", "*)"}], 
  "\n", 
  RowBox[{"NDSOLVE", "\n", 
   RowBox[{"MAP", "[", "\n", "\t", 
    RowBox[{"INITIAL", ",", "                     ", 
     RowBox[{"(*", " ", 
      RowBox[{"--", " ", "state"}], " ", "*)"}], "\n", "\t", 
     RowBox[{"{", "0.1", "}"}]}], "                        ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "list"}], " ", "of", " ", "values", " ", "for", " ", 
      "all", " ", "global", " ", "parameters"}], " ", "*)"}], "\n", 
    "]"}]}]}]], "Code",
 CellLabel->"In[28]:=",ExpressionUUID->"96b3989b-349d-4de4-acbc-717b91b97170"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", "0.001`", ",", "0.01`", ",", "0.0999949551297922`", ",", 
   RowBox[{"-", "0.0001009966031492884`"}]}], "}"}]], "Output",
 CellLabel->"Out[28]=",ExpressionUUID->"8c82652b-aa9d-40da-bc52-3172b4182c77"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", "0.001`", ",", "0.01`", ",", "0.0999949551289441`", ",", 
   RowBox[{"-", "0.00010099663711609928`"}]}], "}"}]], "Output",
 CellLabel->"Out[29]=",ExpressionUUID->"4d84e34f-106d-4753-a21c-9c5f9cbe3926"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Compiled", " ", "function", " ", "can", " ", "be", " ", "saved", " ", 
    RowBox[{"(", 
     RowBox[{"into", " ", "project", " ", "directory"}], ")"}]}], " ", "*)"}],
   "\n", 
  RowBox[{
   RowBox[{"I$COMPILE$SAVE", "[", 
    RowBox[{"MAP", ",", "\"\<MAP\>\""}], "]"}], "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "MAP", "]"}], " ", ";"}]}]}]], "Code",
 CellLabel->"In[30]:=",ExpressionUUID->"9d7b0f6c-52c2-4c8f-9ab5-a0cbee6e19f7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"And", " ", "loaded"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"MAP", " ", "=", " ", 
     RowBox[{"I$COMPILE$LOAD", "[", "\"\<MAP\>\"", "]"}]}], " ", ";"}], "\n", 
   
   RowBox[{"MAP", "[", 
    RowBox[{"INITIAL", ",", 
     RowBox[{"{", "0.1", "}"}]}], "]"}]}]}]], "Code",
 CellLabel->"In[32]:=",ExpressionUUID->"4df2c0cc-d789-4018-bf8b-7e8dca79d0e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", "0.001`", ",", "0.01`", ",", "0.0999949551289441`", ",", 
   RowBox[{"-", "0.00010099663711609928`"}]}], "}"}]], "Output",
 CellLabel->"Out[33]=",ExpressionUUID->"0183656a-5e20-4283-9d9c-e1ff85ec613f"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-09:  (COMPILE) FODO ring tracking, modulation", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"77649bf8-4a1e-48d1-a542-843b4e90e502"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[1]:=",ExpressionUUID->"d968bd81-7e93-49a7-908a-28903864880e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "4", "D", " ", "phase", " ", "space", " ", "with", " ", "4", " ", 
    "deviation", " ", "parameters", " ", 
    RowBox[{"(", 
     RowBox[{
     "3", " ", "sextupole", " ", "amplitudes", " ", "and", " ", "momentum", 
      " ", "deviation"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"K1", " ", "--"}], " ", "deviation"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"K2", " ", "--"}], " ", "SF", " ", "sextupole", " ", 
    "amplutude"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"K3", " ", "--"}], " ", "SD", " ", "sextupole", " ", 
    "amplutude"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"K4", " ", "--"}], " ", "BM", " ", "sextupole", " ", 
    "amplutude"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", 
   RowBox[{"\"\<PROJECT\>\"", ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "0", ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], ",", "0", ",", 
    RowBox[{"List", "[", "]"}]}], "]"}]}]], "Code",
 CellLabel->"In[2]:=",ExpressionUUID->"c66484ae-8ab5-444c-908f-922f98df0cd4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "2", ",", "0", ",", "4", ",", "0", ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"0423408b-5f7c-4190-bbc3-a8a0e391d658"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "generic", " ", "parameters"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ARC", " ", "=", " ", "3.0"}], " ", ";"}], "                    ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "bend"}], " ", "arc", " ", "length"}], " ", "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"ANG", " ", "=", " ", "0.1308996938995747"}], " ", ";"}], "     ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "bend"}], " ", "angle"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"RAD", " ", "=", " ", 
     RowBox[{"ARC", "/", "ANG"}]}], " ", ";"}], "                ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "bend"}], " ", "radius"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"KBM", " ", "=", " ", "0.015"}], " ", ";"}], "                  ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "bend"}], " ", "quadrupole", " ", "amplitude"}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"KQF", " ", "=", " ", 
     RowBox[{"+", " ", "0.19"}]}], " ", ";"}], "                 ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "QF"}], " ", "amplitude"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"KQD", " ", "=", " ", 
     RowBox[{"-", " ", "0.21"}]}], " ", ";"}], "                 ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "QD"}], " ", "amplitude"}], " ", "*)"}]}]}]], "Code",
 CellLabel->"In[3]:=",ExpressionUUID->"a74a33c4-ff6c-499f-80b7-5988b4b66105"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Define", " ", "maps"}], ",", " ", 
    RowBox[{"sequencies", " ", "and", " ", "elements"}]}], " ", "*)"}], "\n", 
  "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], "*", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"P1", "^", "2"}], "+", 
            RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
          RowBox[{"(", 
           RowBox[{"1", "+", "K1"}], ")"}]}]}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Q1", "^", "2"}], "-", 
           RowBox[{"Q2", "^", "2"}]}], ")"}]}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "6"}], "*", 
         RowBox[{"(", 
          RowBox[{"KS", "+", "K2", "+", "K3"}], ")"}], "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Q1", "^", "3"}], "-", 
           RowBox[{"3", "*", "Q1", "*", 
            RowBox[{"Q2", "^", "2"}]}]}], ")"}]}], "}"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"1", "/", "2"}], "*", 
          RowBox[{
           RowBox[{"Q1", "^", "2"}], "/", 
           RowBox[{"R", "^", "2"}]}]}], "-", 
         RowBox[{
          RowBox[{"1", "/", "R"}], "*", "Q1", "*", "K1"}], "+", 
         RowBox[{
          RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Q1", "^", "2"}], "-", 
            RowBox[{"Q2", "^", "2"}]}], ")"}]}], "+", 
         RowBox[{
          RowBox[{"1", "/", "6"}], "*", 
          RowBox[{"(", 
           RowBox[{"KS", "+", "K4"}], ")"}], "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Q1", "^", "3"}], "-", 
            RowBox[{"3", "*", "Q1", "*", 
             RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], "}"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", "0"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<BEND\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<ELEMENT\>\"", "]"}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"{", "}"}], "}"}], "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", "\"\<QUAD\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KQ", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "\"\<SEXT\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KS", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", "\"\<BEND\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}]}], "}"}], "}"}]}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "BEND"}], "]"}], " ", ";"}]}]}]], "Code",\

 CellLabel->"In[9]:=",ExpressionUUID->"ffc62a23-9f4a-4136-bc10-85fe7b0a53c6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "code"}], " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{"I$CODE", "[", 
    RowBox[{"Rule", "[", 
     RowBox[{"\"\<LEVEL\>\"", ",", 
      RowBox[{"Plus", "[", "1", "]"}]}], "]"}], "]"}], " ", ";"}]}]], "Code",
 CellLabel->"In[36]:=",ExpressionUUID->"b6763448-2550-494d-90ee-c4a04675fca5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Compile", " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"DR", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<DRIF\>\"", ",", 
        RowBox[{"{", "0.45", "}"}], ",", 
        RowBox[{"{", "0.45", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QF", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<QUAD\>\"", ",", 
        RowBox[{"{", "0.05", "}"}], ",", 
        RowBox[{"{", "0.50", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QD", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<QUAD\>\"", ",", 
        RowBox[{"{", "0.05", "}"}], ",", 
        RowBox[{"{", "0.50", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SF", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<SEXT\>\"", ",", 
        RowBox[{"{", "0.01", "}"}], ",", 
        RowBox[{"{", "0.10", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SD", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<SEXT\>\"", ",", 
        RowBox[{"{", "0.01", "}"}], ",", 
        RowBox[{"{", "0.10", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BM", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<BEND\>\"", ",", 
        RowBox[{"{", "0.05", "}"}], ",", 
        RowBox[{"{", "3.00", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}]}]}]], "Code",
 CellLabel->"In[37]:=",ExpressionUUID->"c601e9a0-0499-47b6-b9de-c2dc636e2fc8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "FODO", " ", "ring", " ", 
    RowBox[{"(", "composition", ")"}]}], " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ClearAll", "[", "FODO", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"FODO", " ", "=", " ", 
     RowBox[{"Composition", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"QF", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "KQF", "]"}]}], "]"}], "]"}], ",", "\n", "\t", 
       
       RowBox[{"Function", "[", 
        RowBox[{"DR", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "]"}]}], "]"}], "]"}], ",", "\n", "\t", 
       RowBox[{"Function", "[", 
        RowBox[{"SF", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "0.0", "]"}]}], "]"}], "]"}], ",", "\n", "\t", 
       
       RowBox[{"Function", "[", 
        RowBox[{"DR", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "]"}]}], "]"}], "]"}], ",", "\n", "\t", 
       RowBox[{"Function", "[", 
        RowBox[{"BM", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", 
           RowBox[{"RAD", ",", "KBM", ",", "0.0"}], "]"}]}], "]"}], "]"}], 
       ",", "\n", "\t", 
       RowBox[{"Function", "[", 
        RowBox[{"DR", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "]"}]}], "]"}], "]"}], ",", "\n", "\t", 
       RowBox[{"Function", "[", 
        RowBox[{"SD", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "0.0", "]"}]}], "]"}], "]"}], ",", "\n", "\t", 
       
       RowBox[{"Function", "[", 
        RowBox[{"DR", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "]"}]}], "]"}], "]"}], ",", "\n", "\t", 
       RowBox[{"Function", "[", 
        RowBox[{"QD", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "KQD", "]"}]}], "]"}], "]"}], ",", "\n", "\t", 
       
       RowBox[{"Function", "[", 
        RowBox[{"QD", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "KQD", "]"}]}], "]"}], "]"}], ",", "\n", "\t", 
       
       RowBox[{"Function", "[", 
        RowBox[{"DR", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "]"}]}], "]"}], "]"}], ",", "\n", "\t", 
       RowBox[{"Function", "[", 
        RowBox[{"SD", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "0.0", "]"}]}], "]"}], "]"}], ",", "\n", "\t", 
       
       RowBox[{"Function", "[", 
        RowBox[{"DR", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "]"}]}], "]"}], "]"}], ",", "\n", "\t", 
       RowBox[{"Function", "[", 
        RowBox[{"BM", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", 
           RowBox[{"RAD", ",", "KBM", ",", "0.0"}], "]"}]}], "]"}], "]"}], 
       ",", "\n", "\t", 
       RowBox[{"Function", "[", 
        RowBox[{"DR", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "]"}]}], "]"}], "]"}], ",", "\n", "\t", 
       RowBox[{"Function", "[", 
        RowBox[{"SF", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "0.0", "]"}]}], "]"}], "]"}], ",", "\n", "\t", 
       
       RowBox[{"Function", "[", 
        RowBox[{"DR", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "]"}]}], "]"}], "]"}], ",", "\n", "\t", 
       RowBox[{"Function", "[", 
        RowBox[{"QF", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "KQF", "]"}]}], "]"}], "]"}]}], "\n", "]"}]}], 
    " ", ";"}]}]}]], "Code",
 CellLabel->"In[43]:=",ExpressionUUID->"f7a5c6ee-08d6-4a17-a8f6-8009ed2144ca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Track", " ", "ring"}], " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"Map", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"I$MAKE$INITIAL", "[", 
         RowBox[{
          RowBox[{"List", "[", 
           RowBox[{"0.", ",", "0.5", ",", 
            RowBox[{"-", "0.75"}], ",", "0.05"}], "]"}], ",", 
          RowBox[{"List", "[", 
           RowBox[{
            RowBox[{"Slot", "[", "1", "]"}], ",", "0.", ",", "0.", ",", 
            "0."}], "]"}]}], "]"}], "]"}], ",", "\n", "\t", 
       RowBox[{"Range", "[", 
        RowBox[{"0.075", ",", "0.2", ",", "0.0075"}], "]"}]}], "\n", "]"}]}], 
    " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"ParallelMap", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"NestList", "[", 
         RowBox[{"FODO", ",", 
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{
           RowBox[{"2", "^", "10"}], "-", "1"}]}], "]"}], "]"}], ",", "\n", 
       "\t", "INITIAL"}], "\n", "]"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Plot", " ", 
     RowBox[{"(", 
      RowBox[{"Q1", ",", "P1"}], ")"}], " ", "projection"}], " ", "*)"}], 
   "\n", "\n", 
   RowBox[{
    RowBox[{"ORBIT", " ", "=", " ", 
     RowBox[{"Part", "[", 
      RowBox[{"DATA", ",", "All", ",", "All", ",", 
       RowBox[{"List", "[", 
        RowBox[{"6", ",", "7"}], "]"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"ListPlot", "[", "\n", "\t", 
     RowBox[{"ORBIT", ",", "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"PlotRange", ",", "All"}], "]"}], ",", "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"PlotTheme", ",", "\"\<Detailed\>\""}], "]"}], ",", "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"AspectRatio", ",", "1"}], "]"}], ",", "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"PlotStyle", ",", "Black"}], "]"}], ",", "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"ImageSize", ",", "Large"}], "]"}]}], "\n", "]"}], " ", "//", 
    " ", "Rasterize"}]}]}]], "Code",
 CellLabel->"In[45]:=",ExpressionUUID->"e16b5073-73b4-4681-bbe0-2cde67f2a927"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
IRh/sPD06PncYxhbAP2zV2J73tn/sVdGdlXlhQq+2o0oP9kMDW32LZzbjA3B
mKc35uT0aCLI9VmF6oGZpyvLvrpllre6nRqmKMvYsBZJt5MXvK0vp/kUmeGg
Q8FSKKkyCZsA/bNXlntY2M+aFyT3dXDeRPnZf6OF911/aFwI/v0vwxEUbKhv
kuW/urEh4NbTEozN7CSL8r//VTFm845S2istW5gpY1OaZVnmGtdaPt+h8NMv
9x9igfnlsmXQeFnu2AS9mWdpZNA/x0GzgfUHgvDKCC9Xlmf5WNCHmhxprpOs
JrmWGuMWllNmBpm8OdQ0EbozL+W6+EMwb6fcNU0a51oqu65lU7fHdvs82FDG
4NZ/CPoM+k96EDrVjFdpvznQP9vF2ZDJ/ekb+G+H4ES27Px2+G+3LYDkKZFs
WNFyykxDa1lONebN1jyLYF9NOy3pKLeV0jjXTBlt0lUtm1pmk3XTdt5CQu/L
kikyh36tbxYL3invPNJVQP9sF2d/Bnevbx/0EHMulwxFcDaU//6h7VjT2+vd
1nWYG2GWpW2uDG31DutSEt5kSh+5ASgts8yUoZb40cSjnIfcGfCNg+dDhy1x
SqkUpTffc8ws2ZdTXmvUI4P+2TrKzSxY5hovDZx3Klmot8mcBjdsm6vcVtUt
VzTLssya2PJl9bvWU8uPIXibkyz7imZ6P4U2dQPWuzJMvnnRhYelZ+Eh2FAf
tm8veIj5t83AhkD/bB1hq8d2r1+leTWctzL4IicLDTbyWJSTo2+b1STXsoqZ
stNcs4qWvr1h+Vrsh4pdZ/VuaGVYl3Jv5QadnchmWdNeuLh+d/5Dlreg55hB
bCCCWbCJEMwuQf+Mj/IdDxYGG8rvePAtznqbqnBKoXFyuf/KbTXpcorebFJP
mr7Tiq7qWtrs/Va2FU9i+/tfVQKbjQ1zLhvXtZGjSiI7qRJG1gRqbGxL6TSs
MnvKruVnZRO51RR5izuPtynon9HwN5Ww3zRvrv4wOT16OI+2t/0zJyvI3CZK
4xZmtWyy1r26pW1pht1+S2ptxdy+Cn0mbcpnXhlDSZBZTrJ2rGzp21eZq5KN
5HvznwWz5U+/SSwkocnmQP+Mhn7rTt7LG2wbfC/8Qs1mjr2qsYegWbAqF7Of
LPvcadGYjWYjm5mnN8u4fD+shXkIWU1yzZI27QyqNK8SYS2zKXOx9G39qiwb
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
rePp8wqAz3LG/NlzqvyHtaYa/aPhtGDy3prlz9OjyH6Ets2HNB7y1AXNBINk
86wq2W31qhiGyJMBVGyVbAs+ml1nW3S/yrDiuatZy3/FUOvOIQSZ5+q0YO2g
0qB/9DhL7JdPqZPHsXHMnPKtbKFyTo+iMUvamGtzG5ZU2cLIqrKFp+nL0BB8
ChfIr627IXNX07xF25Unm9j2OUziXcmyKvascdgU9I9M4esf3AxKz6cFmVFv
idOjJG00ruYS/3//y3bWHbYqWKtZjmH37Tj3X5oJNExjcuEqNtGXV3TVYoCG
t+Dg+PvTmahYlf8sOGkN+kdGvzTOUgZ/Bt0KPQYD2MHLeAqhMTbbKD0YaqtX
CTQKI1irnE/zhB+ckultVFWxiV9uaGJ2VbEqWXtYlnOSPA2W9rkNm4L+0RNc
JmdZnZV1zIJ7IOhQ6EvuaHBOIZT2SRubgf7Nza21VQmU9BWs1cyMHIx5Vg+O
ZlHqLqhhoQ3ezL1UcVVYZVuOgxCch1OIZVXMsnf0EdA/hcRW37cJPjgGsSaC
vbzrRiD4jshBxiZK8Bw0mP/HvzROksHUqkrW1o1E07BFrd6mJ+vef1WZsVit
ZrGyWpm99WlSZRKq3I/vnpOIY7P8GfTTNXQR9E85+vPKf3AM/J/ylhPsnbbV
Rqsj+bJoGiotS2z0a5db26JhO5+FtSUzfCgK59PctqQqOhhThLUC6LzbNVt9
xzgDVy6ZbzPaBKJ/cvHXV/9OBc30m0T5DjrdOa3qvsV+F0EMfpTGJWZJJ5rm
cltDbYseS+ZBP8+Cjd5sl2TNT/VFNK+voapzR+bxyg2TbXe/jZUjdQycJn7z
0aauv/6Z6dlvRYLrG1tozS4KbiHBQHAS7MspDz4HozW00ow3ODRlQ4NZ7L5D
40qoldtqaoX4DfG0i1bfXLkogk0HVrn/qrKxBQO5efWqKT4i27ZvVKVpGPzf
/1Lu9tU3czv8MQbH65gFfzrNR5i3tXTIdmWPBn+5lQsd2zO+26DB5L2VyjdU
bpV8tm3jrAhjDQvNahm0qBWQoyoPSfasaa4ZV8nm2RbOKyObmVd2KtgYtkVv
1FfFCJW1wapk2ylzw28CYUROlW/jlAQtTx5BV51B/1QkazWDeyNm4xvLnfqb
bfWdFosqt2FFM7MfpYfOtSUxF47IcVI4//tAOcxam61k3QepCtYWxl8+q4U2
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
APaHIEiefvrpTz755PL8zTffnC2/++67ufbevXvnkh9++OHy84MPPnjmmWcc
D3/4wx/4/gPAtVd/fHmz1DzBn8G2ALBXBEFy9erVy5XWmQcPHpwtv/7667n2
7t27jz322Pzzo48+unnz5rL5hx9+eOXKlX/91391unOYFl8geeCh7sNvf/vb
y/NaYTh59lK1TK9Oq2BGHmQyt/Xgz7zzzWcuCVbxcJCHN39h9TB46PPgK5B/
+qd/+m+P8nd/93dnyxs3bnz66aeXtrHvP/Mfina+//zxj388N/+Xf/mX6VH4
/gOHIvglQbiOid3IgB7hw06wJFbOEgDsm8sd1p8e5fKd54UXXnj33XcvZnfu
3Ll+/fqy4eXP/3z55ZeXn2dxdevWrfPDzz///Prrrz/77LN//vOfg921HQ/A
wMTuWeTrGMji9ChCrcZPszABYGUEQfLee+/dvHnzq6+++vbbb59//vk33nhj
+kX2fPjhh/fv3z8/v/baay+99NKDBw/u3r177dq1jz/++Fz4j//4j7/61a/+
/d///eu/wJ9/hrVYftzujCb5ynKoZ7S7JCh1LvtB/xUI9s1a5wOMgCBIzrrl
9u3bN27cuHLlyvzv/zx8+PDc5M6dO+fn77///tVXX7169er169cv//7P2eZv
//Zvnfu15a0Z+gcOgpBJSb6NCArIrFllCQCOA//+M0BrZMHjZ22ysA3lh7VY
LQAcCvQP7JgV77+WKNMx+seMPGPBCXfoGCwMxAjnA6wF+gegHfIHB2U5JMma
MSQQAEzoH4DaLJNpVnpF/9Qi9mFtWevb944SAFYF/QM7ZpX7LyGZ5uZlkInN
mDDPb/7lXzvsGiiMCvdfRwb9A9CNYF720zQJWkPyw1ruZzcAOBToH4B1iekf
krJMLbnIVAMcE/QP7JjR/v1DZRP0j0zw3tD5mBY0ZlbBgfuvI4P+AWiBJu0K
6ZhMLSB8MYvpnypfigBgT6B/ANoRTMqx9O037Bzt5lDOEpMJAD7oH9gxq//7
h47+0dzRQAzhk1pMSfoTy30HLGE/HBn0D0ALTh6TQudwUxPE141BVTmpdREA
APoHoAXBhJuUQ+TrIMFpyZor5hMAHNA/sGPWuv+Ssy36Jxf/S5pgILvivgOW
sB+ODPoHoDq56sWXPeifKfV36Pxa2R4AYAn6B6ADTjqO/SRrL3FUjTyHwbY9
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
mc+ePVupVObn56V15+bmfIeVy+Xm5mbyj/Y+f/7c2to6Ozu7tbU1OjoqEcg1
4MaNG729vV++fJFL5OXLl48fP55InfinwqeFX79+SUKenJyU6+CjR4/kqicj
kyoVCkxNTeVyOZkc1tfX5Z//zZs3XQNkHpDYI5PG2tpaT0+PzBKJ1AnEJ/PY
7t27ZYqz7pZKpQsXLniHSbbv6uoqFovkH+3JRU0ufNZtWcTJAn95edk54Pr1
6/Z6f2FhYdeuXb9//1ZdJf6lyGnh7du3knnsz72/v//Bgweqq4RCp0+fvn37
tnX71atX+/btc/5UYnChUPj27Zt19969e951E5A2kuebmprsvUpZyh0+fNg1
Rma5vr6+x48fy4WP/KO94eFh+aDtu7LMl48+aLCEJfZ/9BM5LZTL5WPHjtl3
R0ZGRkdHlZYItfbv3//8+XPr9tevX6U9fvz4ETT4zJkz7P8g/RYXF5ubm+27
MzMzuVzONUauccVisVpb+JN/tHfu3Dnn5vaRI0empqZ8R05PT2ez2ffv36sq
DYpETguuBf7Y2Bgzg97a29vtM9BKpSL5Z3V11TtMFstXr17N5/MbGxtqCwTC
yEWt9U8yZVkLPfvLbN6F3vz8/IEDB6zDffKPTl6/fu3qh+7u7mpt/2d8fNwe
Jg8+efLE+/Rbt251dna+e/dOXcVQJXJaePjwoXPfb2RkRK56SkuEWvKP/cWL
F9btoP2fra0tWT319vbaB2FASki7rvxJutQ66P/w4YM1plQqDQ0NOZ8l01om
k/mvJlNz6NChJMrHX7a9ve3qB2tBNzk5WSgU7DEtLS0fP350PlGWeBKDjx49
ura2lkDd+Pcip4U3b960t7fb3/8ZGBi4f/++6iqh0KlTp+7evWvdlqXT3r17
XQO+f/8uc8LFixe9vxoGpFaxWBwcHKxUKouLix0dHc+ePavWEv709HS11tX2
9VFWeefPn/fd9oQ2lpeXW1tbZa0n89jY2FhPT0+1dkGUflhfX5fb4+PjBw8e
lFC0+n98/1k/vtPCwsKCXPuqtQzc1dU1MTEhTSKN0dbWZvUGdFUul3O53KdP
n+SK0N/fb31F0J4WrO+IWlcHC/2AhrCxsTE8PCyrOYn09h/6ePr0qfe/tuf8
yxDy6efzeUlBJ06csP68z+bmpvSDXPvkepfJZJr+FPJNSDQo32nh2rVrAwMD
1u2lpSW5LclHWmV2dja5SqGCJByJu52dndls1v77P/a0MDc355oTvL9HAwAA
AAAAAAAAAAAAAABIlf8Bp+F6Cg==
    "], {{0, 563.25}, {576., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Large,
  ImageSizeRaw->{576., 563.25},
  PlotRange->{{0, 576.}, {0, 563.25}}]], "Output",
 CellLabel->"Out[48]=",ExpressionUUID->"7e0b6384-7b4b-4235-8a9a-01b156b8b99a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "FODO", " ", "ring", " ", 
    RowBox[{"(", "compiled", ")"}]}], " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ClearAll", "[", "FODO", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"FODO", " ", "=", " ", 
     RowBox[{"Compile", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"STATE", ",", "_Real", ",", "1"}], "}"}], "}"}], ",", "\n", 
       "\t", 
       RowBox[{"Block", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"{", "RESULT", "}"}], ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"RESULT", " ", "=", " ", "STATE"}], " ", ";", "\n", "\t\t", 
          
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"RESULT", "[", 
                RowBox[{"[", "6", "]"}], "]"}], "^", "2"}], " ", "+", " ", 
              RowBox[{
               RowBox[{"RESULT", "[", 
                RowBox[{"[", "8", "]"}], "]"}], "^", "2"}]}], " ", ">", " ", 
             "10.0"}], ",", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"RESULT", "[", 
               RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", "0.0"}], " ", 
             ";"}]}], " ", "]"}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"QF", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "KQF", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"SF", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "0.0", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"BM", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", 
              RowBox[{"RAD", ",", "KBM", ",", "0.0"}], "]"}]}], "]"}]}], " ", 
          ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"SD", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "0.0", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"QD", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "KQD", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"QD", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "KQD", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"SD", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "0.0", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"BM", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", 
              RowBox[{"RAD", ",", "KBM", ",", "0.0"}], "]"}]}], "]"}]}], " ", 
          ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"SF", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "0.0", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"QF", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "KQF", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", "RESULT"}]}], "\n", "\t", "]"}], ",", "\n", "\t", 
       RowBox[{"Rule", "[", 
        RowBox[{"CompilationTarget", ",", "\"\<C\>\""}], "]"}], ",", "\n", 
       "    ", 
       RowBox[{"Rule", "[", 
        RowBox[{"RuntimeOptions", ",", 
         RowBox[{"List", "[", 
          RowBox[{"\"\<Speed\>\"", ",", 
           RowBox[{"Rule", "[", 
            RowBox[{"\"\<EvaluateSymbolically\>\"", ",", "False"}], "]"}]}], 
          "]"}]}], "]"}], ",", "\n", "    ", 
       RowBox[{"Rule", "[", 
        RowBox[{"CompilationOptions", ",", 
         RowBox[{"List", "[", 
          RowBox[{
           RowBox[{"Rule", "[", 
            RowBox[{"\"\<ExpressionOptimization\>\"", ",", "True"}], "]"}], 
           ",", 
           RowBox[{"Rule", "[", 
            RowBox[{"\"\<InlineExternalDefinitions\>\"", ",", "True"}], 
            "]"}]}], "]"}]}], "]"}], ",", "\n", "    ", 
       RowBox[{"Rule", "[", 
        RowBox[{"RuntimeAttributes", ",", 
         RowBox[{"List", "[", "Listable", "]"}]}], "]"}], ",", "\n", "    ", 
       RowBox[{"Rule", "[", 
        RowBox[{"Parallelization", ",", "True"}], "]"}]}], "\n", "]"}]}], " ",
     ";"}]}]}]], "Code",
 CellLabel->
  "In[107]:=",ExpressionUUID->"91be5f12-d4e8-444c-b1f3-5c1064f8a5ae"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Periodic", " ", "orbits"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"REGION", " ", "=", " ", 
     RowBox[{"ImplicitRegion", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"-", "0.5"}], " ", "<", " ", "Q1", " ", "<", " ", 
         RowBox[{"+", "0.5"}]}], " ", "&&", " ", 
        RowBox[{
         RowBox[{"-", "0.1"}], " ", "<", " ", "P1", " ", "<", " ", 
         RowBox[{"+", "0.1"}]}], " ", "&&", " ", 
        RowBox[{
         RowBox[{"-", "0.5"}], " ", "<", " ", "Q2", " ", "<", " ", 
         RowBox[{"+", "0.5"}]}], " ", "&&", " ", 
        RowBox[{
         RowBox[{"-", "0.1"}], " ", "<", " ", "P2", " ", "<", " ", 
         RowBox[{"+", "0.1"}]}]}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"Q1", ",", "P1", ",", "Q2", ",", "P2"}], "}"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"PERIODIC", " ", "=", " ", 
     RowBox[{"I$PERIODIC$ORBIT", "[", "\n", "\t", 
      RowBox[{"FODO", ",", "                          ", 
       RowBox[{"(*", " ", 
        RowBox[{"--", " ", "map"}], " ", "*)"}], "\n", "\t", 
       RowBox[{"Plus", "[", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], ",", 
       "                 ", 
       RowBox[{"(*", " ", 
        RowBox[{"--", " ", "period"}], " ", "*)"}], "\n", "\t", "100", ",", 
       "                           ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "number"}], " ", "of", " ", "random", " ", 
         "initial", " ", "conditions"}], " ", "*)"}], "\n", "\t", "REGION", 
       ",", "                        ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "phase"}], " ", "space", " ", "region", " ", 
         "for", " ", "initial", " ", "conditions"}], " ", "*)"}], "\n", "\t", 
       
       RowBox[{"{", 
        RowBox[{"0.0", ",", "0.5", ",", 
         RowBox[{"-", "0.75"}], ",", "0.05"}], "}"}], ",", "          ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "knob"}], " ", "values"}], " ", "*)"}], "\n", 
       "\t", 
       RowBox[{"{", "}"}]}], "                             ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", "derivative"}], " ", "values"}], " ", "*)"}], "\n",
       "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"PERIODIC", " ", "=", " ", 
     RowBox[{"Take", "[", 
      RowBox[{"PERIODIC", ",", "All", ",", "All", ",", 
       RowBox[{"List", "[", 
        RowBox[{"6", ",", "7"}], "]"}]}], "]"}]}], " ", ";"}]}]}]], "Code",
 CellLabel->
  "In[109]:=",ExpressionUUID->"942871a1-1e43-4d3b-b88b-1d4f761eca70"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Track", " ", "ring"}], " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"Map", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"I$MAKE$INITIAL", "[", 
         RowBox[{
          RowBox[{"List", "[", 
           RowBox[{"0.", ",", "0.5", ",", 
            RowBox[{"-", "0.75"}], ",", "0.05"}], "]"}], ",", 
          RowBox[{"List", "[", 
           RowBox[{
            RowBox[{"Slot", "[", "1", "]"}], ",", "0.", ",", "0.", ",", 
            "0."}], "]"}]}], "]"}], "]"}], ",", "\n", "\t", 
       RowBox[{"Range", "[", 
        RowBox[{"0.075", ",", "0.2", ",", "0.0075"}], "]"}]}], "\n", "]"}]}], 
    " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{
      RowBox[{"NestList", "[", 
       RowBox[{"FODO", ",", "INITIAL", ",", 
        RowBox[{
         RowBox[{"2", "^", "10"}], "-", "1"}]}], "]"}], " ", "//", " ", 
      "Transpose"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Plot", " ", 
     RowBox[{"(", 
      RowBox[{"Q1", ",", "P1"}], ")"}], " ", "projection"}], " ", "*)"}], 
   "\n", "\n", 
   RowBox[{
    RowBox[{"ORBIT", " ", "=", " ", 
     RowBox[{"Part", "[", 
      RowBox[{"DATA", ",", "All", ",", "All", ",", 
       RowBox[{"List", "[", 
        RowBox[{"6", ",", "7"}], "]"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Show", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"ListPlot", "[", "\n", "\t\t", 
       RowBox[{"ORBIT", ",", "\n", "\t\t", 
        RowBox[{"Rule", "[", 
         RowBox[{"PlotRange", ",", "All"}], "]"}], ",", "\n", "\t\t", 
        RowBox[{"Rule", "[", 
         RowBox[{"PlotTheme", ",", "\"\<Detailed\>\""}], "]"}], ",", "\n", 
        "\t\t", 
        RowBox[{"Rule", "[", 
         RowBox[{"AspectRatio", ",", "1"}], "]"}], ",", "\n", "\t\t", 
        RowBox[{"Rule", "[", 
         RowBox[{"PlotStyle", ",", "Black"}], "]"}], ",", "\n", "\t\t", 
        RowBox[{"Rule", "[", 
         RowBox[{"ImageSize", ",", "Large"}], "]"}]}], "\n", "\t", "]"}], ",",
       "\n", "\t", 
      RowBox[{"ListPlot", "[", 
       RowBox[{"PERIODIC", ",", " ", 
        RowBox[{"Rule", "[", 
         RowBox[{"PlotStyle", ",", 
          RowBox[{"{", 
           RowBox[{"Red", ",", "Blue"}], "}"}]}], "]"}]}], "]"}]}], "\n", 
     "]"}], " ", "//", " ", "Rasterize"}]}]}]], "Code",
 CellLabel->
  "In[112]:=",ExpressionUUID->"2f61e151-453c-490c-a616-4a144061c3a9"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvW3sZ9V13/uzTeo4uU6voqpVHKXKVXRf1IkSqw9q3qRKqrxoq/ZFm95W
lfqgVjfBN6LcmTDDEP2rWEFCNsIVuAKpzRQQ7pXbF8XNHTGWW+DFTS8qQsYi
BWyGvrgGPFXCuNiMgf8YMnPuD37h5Mx+WHuttdd+OPt8P7Ks89t77bXXfjh7
fTl7Bv6Xf/J//q1f+eBut7vl+/f/97f+8Zlf+LVf+8e//kv/8/7H/3bzLf/H
jTf/8v/+V28+9cs3/vKv/ew/+dC+8Nvv2n7ovf/tpor8CgAAAABAB1TWP6v2
jxjWFcO5c+d6CAMxIAbEgBgQQ28xQP8ghoFjmPoIAzEgBsSAGBBDbzFA/yCG
gWOY+ggDMSAGxIAYEENvMUD/gIHp5P4L9AP2A1iC/bBloH/A2GBLgCXYD2AJ
9sOWGUz/AAAAAAAkgf4BA3PuPVpHAToC+wEswX7YMtA/AAAAANga0D8AAAAA
2BrQP2BgcP8FHLAfwBLshy0D/QMAAACArQH9AwAAAICtAf0DBgb3X8AB+wEs
wX7YMtA/AAAAANga0D8AAAAA2BrQP2BgcP8FHLAfwBLshy0D/QMAAACArQH9
AwAAAICtAf0DBgb3X8AB+wEswX7YMtA/AAAAANga0D8AAAAA2BrQP2BgcP8F
HLAfwBLshy0D/QMAAACArVFf/8zU7BcAAAAAoJUOgewBNcH9F3DAfgBLsB+2
DPQPAAAAALYG9A8AAAAAtgb0DxgY3H8BB+wHsAT7YctA/wAAAABga0D/AAAA
AGBrQP+AgcH9F3DAfgBLsB+2DPQPAAAAALYG9A8AAAAAtgb0DxgY3H8BB+wH
sAT7YctA/wAAAABga0D/ALBGdu9Rzh4AAMYG+gcMzMD3XzE9Iy3fGqPuB6AD
+2HLQP8AMBJJnbN7n2ohAQBAh0D/ANAtvlDJ/+zj6B/HANIIALARoH/AwKz9
/mtWI/5DzJJZPi2E0Kb0z6r3AzAH+2HLQP8A0D9J/bM0C9okPwQBAMCmgP4B
YEUQV1eTUP/ECgEAYAtA/4CBWfX9l8nVFf2Rh6+XhlFK690PoATYD1sG+geA
fqA/7wTNOIVBP/Sd2qj6BwAADkD/ANAPQf2j+6M7weZMfcU0AACA9QL9Awam
8/svpsCg9Y/o847o+9KSZNhrEUs97wdQH+yHLQP9A0AriDumpFBJ6p9kj8nv
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
nT17NtlKrX+W+LV0yTj8zb8Z3sMf/3jryLrjsA3OvYdTGLTsqjBIw5BGeqeW
+2GlmC+l2qz/8JJtB9gPab70paj++Z3faR1cmHmZdgv82invdCIEyRNPPHF0
dPTqq6++8cYbd91118MPPzy9J3uefvrpy5cv758ffPDBe++99/j4+OLFi6dO
nXr22WdjrTjd0TiTwBmy1H4FfOMb7/6JNWcDf+AD+0lvHVl38Fc85yzNL+TT
MM5BXp+hsVUOORvYfKflhIfN/C7Xrk1/5+8ExM8/+ketI4vi5G5n1ZY/cxaU
ECTXrl07f/78mTNnTpw4Mf+bfK5cubJvcuHChf3zW2+99cADD5w8efL06dPz
v/8n2IrTXQx6+P6D3zBYu1b+63+dPvGJP9rAf/pPT+9/bQNJco7NQj7bdpQZ
EmiCefZXm5m3DVIhvPF5663p137t3X9Y3r3/V2Z+/df36bx1WFHq5O7+//3P
9PCDs+QXDrXnr1599+8z/vZvv6uF3v/7d8DhsOIrvf/qrXD3PtP6GeC+wzz7
q81atTXsYoD9IOB//I/p0Uff/Ufmb3+7dSgJdgucQk5DZi896x/mQIgd7j+A
jZBzQtYsbBs8s3f/IAINMcz+mWat2pp3AfrEWazdAmYTmtXpH2I/01sd2347
xNY659gk3PIDMLdsWwj6oYJI6Kft7n2sugArYrcg01XP+icIMWp6/2Pbb4d5
rZf3X7FXpsPCIB2GtEYGuO+w1RKZbdXh5fQbfJd1bQfYD+PBWVzmBqBZl/5x
Bjj/3C0IVgWbg1EhTkL1yVyzMMha4gSlSeb0mBm/MGcPmG8q25hj5wDoB3px
dySijkbSP8GHWCEYGP5Cx96atoVEqF0VgibEskOwsGhbwuG62oKu2C2gy2OW
TNalf5Ikdzt2/haYV9m//4pZMsvNLUs0r9bRGhnyvoNIFkFLq7axwliEzGBq
th1yP6yaeXU4S7xboOhrRfpnOUZ/yMQ8+A3VMYBVkH96Z3oYrxB0gvnimm+M
VsFgh4+Bszr0Ys21ujUdTP84z7vr8S3BePh7Y1muLsz3MF4hqI/5OtZpG8Q2
mBIRgobsFjCNpV2sSP84EOOdq/yHaTGrVpGArlgu7nz/FVt0aaHt4RwrDFKt
9+BIh3ll1n7fkbO4/JUVOTSPsKbDte+Hgdl5mHexRv3jT4h0coY5zIEPP6fT
xoU8cAqDlIg/0xJ0gkgM8PcAp1AdDBGhuUNs5rUwL42zRvRPNevVP3QJ0wne
gvEQHd35h795+ohhkhr4+QuvxlqIrVcFdUHEoys0jzA4Odjh3TKvC71AVsu3
Rv3DJDiTTiFegfFYLqvz3/8KWpbICOY5ReHTfFxjvC+rvu/gZ/M6G6CQw5q9
rHo/jMdugfMzefgoDqh16R/mAINzGPSgmDHQM7EFlZ6WzF0h2j/mxzgRbbVC
UJPgctdZa37XROSGvWAzD8y8OrsQSxu/RNTRGPrHKafnIXPGQM8QZ53oYCxx
tPI3W/NoReMCbamz1sGdVrPr0r2ATlguzW4BXaVjXfonhjM/znNwxvzyEoGB
mvivw+H+K7a+ooMx/2jNPIcLBZYZ1eoY777DfK2DaaXaNqscz3j7YaXMK8JZ
a6sDar36x5kuB6fcaRJ8NplP0JDYIvJPRdo457yVGjObi9xKC3OiBeZkrlTQ
kijk9C6N09CnNHKOJWhFbBsvq5a1Vss3mP6ZhDOjawU6hE4E/LO3E2Nmc5Hb
/PnBa9IQk4W2LVxFnMEdHtv2oAnzWsQelhj2u179M0PPiT+ffi3eggEILqXu
8iszI+QbB8nvrtyQV8Rg9x0mq7/lwsH2w9qZV4q5jpkn0tr1T3L4sflMloN1
IVq4mLGJGChk3IMH0BuV1cLwhaAyy1VIHlC+QeYiDql/iFmKzaRTjvdiXYgy
u7S8qJMg+WEQhcwwpKMGRREtaLVCPm3jLDEiYMJyFeqfOfX1z4yJw+TG3i3w
fzpNfEyCBEUhFktUHvNj6JzvpGZ3JrOxFlZ635G5FqLVbFtIxJ9ZuIuc+ZwA
QAmIJViWOzb5q2auQ/j92jpMvgJMg533UQivxlqg3yDmYZj0wyxXGOekgKJh
iDyD+mSuWv66r6sQm7k3/PmfS+h1tFq1teufIMT8LKt216PwBppDLF/RcumJ
mn/8lgsP2aFzrJaY4yF/M5hEpY4/3y2owzz5y1VwVoT+mQ/0D9MbXpM+Sa61
f98Ra6I4Y/knav7xqzjtTcLjl6+C1d1/lVt3vgcrt7ZRlXMLKjDPPLEEpVdn
SP3jIJpDUdYAzZEujTSnx/yblCuMTZyY9Ig3og7B2RYtjWjn5O+9EoWV3YKi
LOc8tl1jP20ZVf/4MzyX0G8HPfmxcwDUh1gLYo2sjsH8U1rqPDZeRSTIDmtH
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
awQAIIH+AaAE9LeFmMjhZOde+L7vi+qf//gfWwcXxlcsok9AAICRgP4BA9Pw
/ovOsyPon5/6qbD4ueGG6Z13WgcXhvP9jdkQjAHuv7YM9A8A5ZCm1zXpn298
Y/rQhwL651/8i9aRaWDqVQDAMED/AFCC3YJJpX9WwO/+7vSxj/2R8vnwh6ff
+q3WMYWRTqx/UwYAGAzoHzAwTe6/dh5T5HuC+jqmL775zelf/svpK19pHQdF
bDmIeV7TtzigBfdfWwb6BwBbOCl1KP3TPYTsic1zUK/WihcAUANakJw/f/6W
W265+eabH3rooXe8P9N45cqVs2fP7mtPnTr12GOPHQr3Zl/4whf2JSdOnLj3
3nu/9a1v8bsDYGyY2ZawBCKC3+ImhrzB/AMwPIQgefLJJ4+Oji5dunT58uU7
77zzkUcecQz2oui+++47Pj5++eWX94LnxRdf3Bd+8Ytf3Bt/5zvf2aujz3/+
85/5zGeY3QFgTp///kNOtkX+NcHXPCb//S8wDB2eD6AahCC55557Hn300cPz
Cy+8cOutty5rr169etNNN+2Vz+Hnfhfdf//9+4eHH37461//+qHwm9/85ic/
+clr165xugNgI3AuuZCRDYnJS/7nIADAeBCC5LbbbnvuuecOz6+//vre8s03
35xrL126tC95++23Dz+feuqp22+/3fHwpS99Cd9/AMC1V318ebPUPMGfwbYA
gFEhBMnJkycPV1p7jo+P95avvfbaXHvx4sUbb7xx/vnMM88cHR0tmz/99NMn
Tpx46aWXnO4cpsUXSDzgwfbhs5/97OG5VRhOnj1ULdOr0yqYkTuZzHU9+DPv
fPOZS4JVeNjIw7n3aB4GHuo8+Arka1/72j+9nk996lN7yzNnzjz//POHtrHv
P/Mfina+/3z5y1/eN//GN74xXQ++/4BNEfySQFzHxG5kAB/iw06wJFaOJQBg
bA53WN+6nsN3nrvvvvvxxx8/mF24cOH06dPLhoc///PKK68cfu7F1dmzZ/cP
165de+ihh+64445vf/vbwe7KjgeAjonds9DXMUDE7nqIWo6fYmECABpDCJIn
nnji6Ojo1VdffeONN+66666HH354ek/2PP3005cvX94/P/jgg/fee+/x8f/f
3r2/VPH8cRz//LUZmn6VNENTqcjy0g0MI0krJMwoQVKCLj9UggSWYVlKQZmi
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
BFAP8KMeXEb+AQAAriH/AAAA15B/YDH2vxBAPcCPenAZ+QcAALiG/AMAAFxD
/oHF2P9CAPUAP+rBZfrzT57O9wUAAMgqhxB7AABA5sg/sBj7XwigHuBHPbiM
/AMAAFxD/gEAAK4h/8Bi7H8hgHqAH/XgMvIPAABwDfkHAAC4hvwDi7H/hQDq
AX7Ug8vIPwAAwDXkHwAA4BryDyzG/hcCqAf4UQ8uI/8AAADXkH8AAIBryD+w
GPtfCKAe4Ec9uIz8AwAAXEP+AQAAriH/wGLsfyGAeoAf9eAy8g8AAHCNZfmH
fIUASgJ+1AP8qAeXkX9gsdHRUUoCftQD/KgHl5F/6IPFfciZ0Q36QB/oA32g
D6b1gfxDHyzuQ86MbtAH+kAf6AN9MK0P5B/6YHEfDNn/og/0gT7QB/pgWh/0
5x8AAIDM6cw/AAAAAAAAAAAAAAAAAAAAAAAAAAB3bG1t9fX11dTU1NfX3717
V9Gyt7f38uXL2jqGrExPT7e0tFRVVZ06derTp0+BZ3/+/Hn16lVRLbW1tT09
PeEGsEDssLC8vNzZ2SmKpK2t7eXLl/p7CM3Gxsb2798vSkLMAmIQCDwrxgEx
GogxQRSMGB92dnYy6SSQiijmc+fObW5uLiwsiNKdn5+XNpuYmKioqCD/WO/j
x4/V1dWzs7Pb29tDQ0MiAgUa3Lx5s6Oj48uXL2KKvHLlyokTJzLpJ0pKPSz8
+vVLJOTx8XExDz5+/FjMeqJlVl2FBpOTk83NzWJwWF9fF//8b926FWggxgER
e8Sgsba21t7eLkaJTPoJJCfGsX379okhzrs7Ojp68eLFcDOR7ZuamgYGBsg/
1hOTmpj4vNviIk5c4K+urvob3LhxI3+9v7i4uHfv3t+/f+vuJUopdlh48+aN
yDz5n3tXV9fDhw919xIanTlz5s6dO97tV69eHThwwP+siMG9vb3fvn3z7t6/
fz983QSYRuT5PXv25NcqxaXckSNHAm3EKNfZ2fnkyRMx8ZF/rNff3y9+0Pm7
4jJf/OijGouwxPqPfWKHhYmJiePHj+fvDg4ODg0Nae0i9Dp48ODz58+921+/
fhXl8ePHj6jGZ8+eZf0H5ltaWqqoqMjfnZ6ebm5uDrQRc9zAwEBu98Kf/GO9
8+fP+xe3jx49Ojk5KW05NTVVW1v77t07XV2DJrHDQuACf3h4mJHBbnV1dfk9
0M3NTZF/Pn/+HG4mLpavXbvW1ta2sbGht4OAipjUqv8mhizvQi//y2zhC72F
hYVDhw55m/vkH5vMzc0F6qGlpSW3u/4zMjKSbyYefPr0afjw27dvNzY2vn37
Vl+PoUvssPDo0SP/ut/g4KCY9bR2EXqJf+wvXrzwbket/2xvb4urp46OjvxG
GGAIUa6f/iaq1Nvof//+vddmdHS0r6/Pf5QY1iorK/+3q3LX4cOHs+g+imxn
ZydQD94F3fj4eG9vb75NVVXVysqK/0BxiSdi8LFjx9bW1jLoN0ovdlh4/fp1
XV1d/vd/uru7Hzx4oLuX0Oj06dP37t3zbotLp4aGhkCD79+/izHh0qVL4T8N
A4w1MDDQ09Ozubm5tLRUX18/MzOT2034U1NTud2qzs+P4irvwoUL0mVPWGN1
dbW6ulpc64lxbHh4uL29Pbc7IYp6WF9fF7dHRkZaW1tFKPr8B7//bB/psLC4
uCjmvtxuBm5qahobGxNFIgqjpqbGqw3YamJiorm5+cOHD2JG6Orq8n5FMD8s
eL8j6s0OHuoBZWFjY6O/v19czYlIn/+ij2fPnoX/a3v2vxwhfvptbW0iBZ08
edL7ep+trS1RD2LuE/NdZWXlnr8pfhMSZUo6LFy/fr27u9u7vby8LG6L5CNK
ZXZ2NrueQgeRcETcbWxsrK2tzX//T35YmJ+fD4wJ4b+jAQAAAAAAAAAAAAAA
AAAY5f9Y3Xjr
    "], {{0, 563.25}, {576., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Large,
  ImageSizeRaw->{576., 563.25},
  PlotRange->{{0, 576.}, {0, 563.25}}]], "Output",
 CellLabel->
  "Out[115]=",ExpressionUUID->"7a9fbe29-148a-4fee-8f1b-0b5f3e3bef21"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Sextupole", " ", "amplitude", " ", "modulation", " ", 
    RowBox[{"(", 
     RowBox[{
     "amplitude", " ", "is", " ", "changed", " ", "every", " ", "turn"}], 
     ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Set", " ", "initial", " ", "condition", " ", "without", " ", 
    "sextupoles"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Track", " ", 
    RowBox[{"2", "^", "10"}], " ", "turns"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"STATE1", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
      "1.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.15", ",", 
       "0.", ",", "0.", ",", "0."}], "}"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"ORBIT1", " ", "=", " ", 
     RowBox[{"NestList", "[", 
      RowBox[{"FODO", ",", "STATE1", ",", 
       RowBox[{
        RowBox[{"2", "^", "10"}], "-", "1"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"STATE2", " ", "=", " ", 
     RowBox[{"Last", "[", "ORBIT1", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Change", " ", "sextupole", " ", "in", " ", "1", " ", "turn"}], 
    " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Part", "[", 
      RowBox[{"STATE2", ",", "4"}], "]"}], " ", "=", " ", 
     RowBox[{"-", "5.0"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"Track", " ", 
      RowBox[{"2", "^", "12"}]}], " ", "+", " ", 
     RowBox[{
      RowBox[{"2", "^", "10"}], " ", "turns"}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"ORBIT2", " ", "=", " ", 
     RowBox[{"NestList", "[", 
      RowBox[{"FODO", ",", "STATE2", ",", 
       RowBox[{
        RowBox[{"2", "^", "12"}], " ", "+", " ", 
        RowBox[{"2", "^", "10"}], "-", "1"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"ORBIT", " ", "=", " ", 
     RowBox[{"Part", "[", 
      RowBox[{
       RowBox[{"Join", "[", 
        RowBox[{"ORBIT1", ",", "ORBIT2"}], "]"}], ",", "All", ",", 
       RowBox[{"List", "[", 
        RowBox[{"6", ",", "7"}], "]"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Slowly", " ", "change", " ", "sextupole", " ", 
     RowBox[{"(", 
      RowBox[{"in", " ", 
       RowBox[{"2", "^", "12"}]}], ")"}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"STATE1", " ", "=", " ", 
     RowBox[{"Last", "[", "ORBIT1", "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MODULATE1", " ", "=", " ", 
     RowBox[{"NestList", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"Function", "[", "\n", "\t\t", 
        RowBox[{"Block", "[", "\n", "\t\t\t", 
         RowBox[{
          RowBox[{"{", "STATE", "}"}], ",", "\n", "\t\t\t", 
          RowBox[{
           RowBox[{"STATE", " ", "=", " ", 
            RowBox[{"Slot", "[", "1", "]"}]}], " ", ";", "\n", "\t\t\t", 
           RowBox[{
            RowBox[{"Part", "[", 
             RowBox[{"STATE", ",", "4"}], "]"}], " ", "=", " ", 
            RowBox[{
             RowBox[{"Part", "[", 
              RowBox[{"STATE", ",", "4"}], "]"}], " ", "-", " ", 
             RowBox[{"5.0", "/", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"2", "^", "12"}], "-", "1"}], ")"}]}]}]}], " ", ";", 
           "\n", "\t\t\t", 
           RowBox[{"FODO", "[", "STATE", "]"}]}]}], "\n", "\t\t", "]"}], "\n",
         "\t", "]"}], ",", "\n", "\t", "STATE1", ",", "\n", "\t", 
       RowBox[{
        RowBox[{"2", "^", "12"}], "-", "1"}]}], "\n", "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Track", " ", 
     RowBox[{"2", "^", "10"}], " ", "turns"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"STATE2", " ", "=", " ", 
     RowBox[{"Last", "[", "MODULATE1", "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MODULATE2", " ", "=", " ", 
     RowBox[{"NestList", "[", 
      RowBox[{"FODO", ",", "STATE2", ",", 
       RowBox[{
        RowBox[{"2", "^", "10"}], "-", "1"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MODULATE", " ", "=", " ", 
     RowBox[{"Part", "[", 
      RowBox[{
       RowBox[{"Join", "[", 
        RowBox[{"MODULATE1", ",", "MODULATE2"}], "]"}], ",", "All", ",", 
       RowBox[{"List", "[", 
        RowBox[{"6", ",", "7"}], "]"}]}], "]"}]}], " ", ";"}]}]}]], "Code",
 CellLabel->"In[55]:=",ExpressionUUID->"5bfc8f8b-6f3c-458d-98c6-4233d85772dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Plot", " ", "result"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Grid", "[", "\n", "\t", 
    RowBox[{"List", "[", "\n", "\t\t", 
     RowBox[{"List", "[", "\n", "\t\t\t", 
      RowBox[{
       RowBox[{"ListPlot", "[", "\n", "\t\t\t\t", 
        RowBox[{
         RowBox[{"List", "[", 
          RowBox[{"ORBIT", ",", "MODULATE"}], "]"}], ",", "\n", "\t\t\t\t", 
         RowBox[{"Rule", "[", 
          RowBox[{"PlotRange", ",", "All"}], "]"}], ",", "\n", "\t\t\t\t", 
         RowBox[{"Rule", "[", 
          RowBox[{"PlotTheme", ",", "\"\<Detailed\>\""}], "]"}], ",", "\n", 
         "\t\t\t\t", 
         RowBox[{"Rule", "[", 
          RowBox[{"AspectRatio", ",", "1"}], "]"}], ",", "\n", "\t\t\t\t", 
         RowBox[{"Rule", "[", 
          RowBox[{"PlotStyle", ",", 
           RowBox[{"List", "[", 
            RowBox[{
             RowBox[{"Directive", "[", 
              RowBox[{"List", "[", 
               RowBox[{"Black", ",", 
                RowBox[{"PointSize", "[", "Medium", "]"}]}], "]"}], "]"}], 
             ",", 
             RowBox[{"Directive", "[", 
              RowBox[{"List", "[", 
               RowBox[{"Red", ",", 
                RowBox[{"PointSize", "[", "Small", "]"}]}], "]"}], "]"}]}], 
            "]"}]}], "]"}], ",", "\n", "\t\t\t\t", 
         RowBox[{"Rule", "[", 
          RowBox[{"ImageSize", ",", "Large"}], "]"}], ",", "\n", "\t\t\t\t", 
         RowBox[{"Rule", "[", 
          RowBox[{"ImagePadding", ",", "40"}], "]"}]}], "\n", "\t\t\t", "]"}],
        ",", "\n", "\t\t\t", 
       RowBox[{"ListPlot", "[", "\n", "\t\t\t\t", 
        RowBox[{
         RowBox[{"List", "[", "\n", "\t\t\t\t\t", 
          RowBox[{
           RowBox[{"Part", "[", 
            RowBox[{
             RowBox[{"Join", "[", 
              RowBox[{"ORBIT1", ",", "ORBIT2"}], "]"}], ",", "All", ",", 
             "4"}], "]"}], ",", "\n", "\t\t\t\t\t", 
           RowBox[{"Part", "[", 
            RowBox[{
             RowBox[{"Join", "[", 
              RowBox[{"ORBIT1", ",", "MODULATE1", ",", "MODULATE2"}], "]"}], 
             ",", "All", ",", "4"}], "]"}]}], "\n", "\t\t\t\t", "]"}], ",", 
         "\n", "\t\t\t\t", 
         RowBox[{"Rule", "[", 
          RowBox[{"PlotRange", ",", "All"}], "]"}], ",", "\n", "\t\t\t\t", 
         RowBox[{"Rule", "[", 
          RowBox[{"PlotTheme", ",", "\"\<Detailed\>\""}], "]"}], ",", "\n", 
         "\t\t\t\t", 
         RowBox[{"Rule", "[", 
          RowBox[{"AspectRatio", ",", "1"}], "]"}], ",", "\n", "\t\t\t\t", 
         RowBox[{"Rule", "[", 
          RowBox[{"PlotStyle", ",", 
           RowBox[{"List", "[", 
            RowBox[{
             RowBox[{"Directive", "[", 
              RowBox[{"List", "[", 
               RowBox[{"Black", ",", 
                RowBox[{"PointSize", "[", "Medium", "]"}]}], "]"}], "]"}], 
             ",", 
             RowBox[{"Directive", "[", 
              RowBox[{"List", "[", 
               RowBox[{"Red", ",", 
                RowBox[{"PointSize", "[", "Small", "]"}]}], "]"}], "]"}]}], 
            "]"}]}], "]"}], ",", "\n", "\t\t\t\t", 
         RowBox[{"Rule", "[", 
          RowBox[{"ImageSize", ",", "Large"}], "]"}], ",", "\n", "\t\t\t\t", 
         RowBox[{"Rule", "[", 
          RowBox[{"ImagePadding", ",", "40"}], "]"}]}], "\n", "\t\t\t", 
        "]"}]}], "\n", "\t\t", "]"}], "\n", "\t", "]"}], "\n", "]"}], " ", "//",
    " ", "Rasterize"}]}]], "Code",
 CellLabel->"In[66]:=",ExpressionUUID->"d595c33f-09e2-46d0-8861-279f6756dcd9"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
T1odCJoOXFzoQ9B0YPWZbRFGAAAch+FbAIJsMYpFAIDYMXwbgjBGVV5efvLk
yfz8/N27d2/btu3rr7/+8jcrV6786quv1q1bt3fv3v379xcWFgYCAasbCwBI
CAzfAhBk61EpAgDEiOHbEIQxqLCwcO3ata+++urDDz98zTXXNGnSpFq1aj6f
7yzNvF5vcnJyZmZmlSpVKleuXKdOna5du06dOnX16tUFBQXmtZwJopYj/paj
CyxHFwjG8C0AQTZPDKkLxaIQfNLqQNB04OJCH4KmA6vPbCuRw3js2LF58+bd
e++9TZs2zcjI8Hg82otCOqSkpNStW7d9+/YjRoxYvHhxYWGh1QEAADhVIg/f
whBkW2ANGgAgFgzfhki0MO7evXvcuHEdOnSoXLmyqXWhqDweT1ZWVuvWrYcM
GfLVV1+VlZVZHRsAgGMk2vBtCYJsF1SKAACaMXwbIhHCGAgEvv32244dOyYl
JVlbHVLh8XgyMjKaNGny8ssvl5SUxHSATBC1HPG3HF1gObpAsEQYvi1HkM0T
c+pCseg3fNLqQNB04OJCH4KmA6vPbMvdYdywYcPtt99u+fShWHk8noYNGz70
0EPr16/nLtkAACV3D982QZBthDVoAABtGL4N4cowHj58ePjw4bVr1zaweuPz
+apWrVqvXr3GjRufd955TZs2bdKkifS4fv362dnZVapUSUtLS0pKMvxmR9Jm
27ZtO3v2bL/fb3VcAQB24crh224Isr1QKQIAaMDwbQiXhXHDhg2dOnWK6QvL
QmtBNWrUaNOmTY8ePV588cVPPvlk165dxcXFMc3qKS8vz8vLW7Zs2aBBg+68
886//vWvrVq1kjabnJwcZ8nI4/E0b9587Nixx44dk+2UCaKWI/6WowssRxcI
5rLh254Isnl0pi4JXyzik1YHgqYDFxf6EDQdWH1mW64J4yeffNKkSZOYai9e
r7d27do333zz5MmTd+3aZfY6r6NHj0onwvDhw6+88soaNWronn0kvfDcc8+d
MGHCqVOnTG0wAMC2XDN829mDIaxuC37DGjQAQGSM2gZyehgDgcD7779fr149
7ZUWn893+eWXL1y4sLi42MKW+/3+VatWDR06tFWrVikpKfqqRpmZmQMHDoz1
DtgAAKdz+vDtCATZjqgUAQBUMXwbwtFhnDNnzjnnnKNxHk6TJk2efPLJ/fv3
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
wnj8+HHlhfkPP/xgRvMAdffff3/YSpHH4ykoKLC6dUB0J0+e3LFjx3fffffN
N98sXLhwzpw5U6dOHTVqVG5u7qBBg3r27NmjR49bb731xhtv7NSp09VXX33l
lVdefvnlDRs2rFy5ckZGxtlnn920adMLL7ywRYsW0n9btmx5ySWXtGrV6o+/
adeu3XXXXXf99dffdtttt99+e69evXJycqTNPvDAA9Jf+/XrN3PmzM8++2zb
tm1SG4qLizlrHIQsSACCjDCsLhYBANQxfBtCRxhff/112VX5OeecY0bbAC2k
q+OwxSKv12t105C4SktLDx06tH79+vfff//FF18cOHDg7bfffvXVV1900UWN
GjU6++yzMzIykpOTPR5PpHlx4nl+k5KSkpmZWbNmzcaNG1922WUdO3b8+9//
PmTIkFdfffW9995bt27d7t27/X6/1QEGWZAIBBlhsAYNAOyN4dsQOsLYokUL
2fVFr169zGgbNGKCqHRJG/bKt06dOmIakODxtwPxXRAIBI4ePfrFF19MnTp1
4MCBXbp0Oe+881JSUirqLebXdazk9XqlY/T5fBkZGc2bN3/ggQfGjRs3bNiw
bdu2STER3BEJiyxIAIJsHmenLtZVihwcNOsQNB2cfYZah6DpwOoz24o1jEVF
RcqLoHXr1pnUPECjrKyssJe00tWr1U2DswUCgR07dnz88cdPPfXUrbfe2qJF
i5o1a6alpbm+HKRbenp6nTp12rRpc++9944cOXLBggX79u0rLS21uifdhixI
AIKMiJhWBAB2xfBtiFjDOGXKFNlFQVJSkkltA7QrKyuLdOW+d+9eq1sHxzh8
+PCCBQsGDRp0zTXX1K1bV/p8M7+ykhB8Pl/NmjVbtWr1wAMPTJgwYenSpSdP
nrS6t52NLEgAgoyIWIMGAHbF8G2IWMN41VVXyfL/WrVqmdQ2aMQE0Qo//PBD
2EtUj8dj9q6Jv+X0dcHu3btnzpzZo0ePCy64ICsry+v1ml8ywe8q1q+lp6ef
f/75zzzzzLp164qKigx/Y7gYWZAABNk8bkhdrCgWOT5oViBoOrjhDLUCQdOB
1We2FWsYa9WqJcv2e/bsaVLbgFi99tprYa9J27RpY3XTYD2/379o0aKHHnro
ggsusMNkIY/HU3HDH+m/KSkpderUueiii6644orrrrvulltukT5a+/btO2zY
sOeff/6ll16aOnXqrFmz3nvvvfnz5y/5zbRp06ZPn7548eJ169Zt2LBhzZo1
mzZtkv779ddfr169evny5V988YX0tAULFkivmjlz5uuvvz5x4kRpa4888kin
Tp2aNGnSrFmzSy+9tF27di1atDjvvPNq165dpUoVqSVWBcfn89WtW7djx47P
PvusdAgnTpyw+i1ja2RBAhBkRMG0IgCwH4ZvQ8QUxoKCAuUCn/3795vXPCBW
bdq0CXsRumvXLqubBtFOnTr1wQcf3HbbbfXq1UtOTja/1PE/Xq83IyOjZs2a
TZo0adu2rdSGAQMGjB8/fvbs2atXr969e/fRo0fLy8utjlAYgUDg9G+r8PLz
86WmLly4cPLkyU8//fR9993XtWvX1q1bn3vuuWlpaQJiKA032dnZf/3rX59/
/vm1a9daHRjbIQsSgCAjOopFAGAzDN+GiCmMn3zyiSyTr127tnltg0ZMEJUJ
e8Mi6crdvD0Sf8tVdEF5efnq1au7d++enp5u9h2npe0nJydXq1atSZMm1113
3T/+8Y+XX3553rx5X3311alTp6yOh+mkUO/du3fx4sVS5F955ZVevXpddtll
zZo1q1GjhklTklJTU5s3b56Tk7N8+fJEiHBUZEECEGTzuCd1EbsGzSVBE4ug
6eCeM1QsgqYDq89sK6Yw9ujRQ5a633rrrea1DdBnx44dYa80pWtMq5sG4xUU
FPzrX/9q27ZtpUqVzKsOJSUlNWzY8Oabb37iiSfmz5+/f/9+v99v9aHbVFlZ
2aFDh1asWDFp0qT+/ftfffXVjRo1MnYaktTRjRs37tu37yeffJKwd8YmCxKA
IEMTphUBgJ0wfBviwRBRnyxdKMnS9X//+98CGgnE6i9/+UvYC0yr2wVjHD9+
vFevXnXr1jV8TZnX683MzDz//PO7dev24osvfvXVVyUlJVYfrhsEAoH8/PwV
K1aMGzfuvvvuM/ZWUSkpKVddddWqVasqls65W0yjNuJEkKEVxSIAsA2Gb0No
D2NxcbEysT927JipzYMWTBANK+z0kt69e5uxL+IvQHl5+bx581q3bm1sdcjn
8zVt2vT++++fM2dOXl6e1UfpYDrOgp9++umNN94YOHBgly5d/vCHP8Tfs2lp
aW3btn3ttdcSYXkaWZAA1OXM47bURdQaNFcFTRSCpoPbzlBRCJoOxgaNUdtA
2sO4cuVKWU5eo0YNU9sGxOPtt98Oey1pdbsQm927d99+++2ZmZlx1hAqJCUl
1a5d+4Ybbnj11Vf37Nlj9cHhDGVlZbt27XrrrbfuvPPO5s2bp6en6+7oiuVp
jz766LZt26w+LLOQBQlAkBEDphUBgD0wfBtCexifffZZWSreoUMHU9sGxMnn
8ykvIV955RWr24UoAoHAv//97zp16uguFAR5vd7atWvfcsst77zzTmFhodVH
hhiUlZV9//33kyZNuummm2rVqqXvJlTSq6TX9ujRY/Xq1VYfkMHIggQgyIgN
xSIAsAGGb0NoD2Pbtm1lGfjzzz9vatugERNEI1m3bp3yytHn8xm+I+JviEAg
8Morr2RnZ+spCYWoVKnSxRdf3Ldv3927d1t9TAnE7LOgqKjoww8/vOeee84/
/3x969Rq1qz597//XfpYcMftjMiCBCDI5nFn6mL+GjQXBs18BE0Hd56h5iNo
OvDdZ7alPYzVq1eXZd2bNm0ytW1A/MJeMLrjOtE1pO545JFH4lxqVKNGjdtu
u+3LL7+kcxPB8ePHpbzixhtvTElJ0fGGqV279mOPPfbLL79YfRxxIQsSgCAj
ZkwrAgCrMXwbQmMYT506JZv57/P5+JJo2N8///lP5XXivffea3W78KslS5bU
rVtXZ3norLOSk5OvuOKK9evXW30csNK+ffueffbZ66+/vlq1arG+hS644IJn
nnnGoV/NQBYkAEGGHhSLAMBSDN+G0BjGzz//XJZgS9d3ZrcNGjFBVJ3y8tDw
BWjEPyZHjhxp166d1+vVUR1KS0vr1KnTihUrZNukCyxnhy7YtGnTkCFDmjRp
Euu7q1GjRsuXL7e6+bEhCxKAIJvHzamLmWvQXBs0MxE0Hdx8hpqJoOnA6jPb
0hjG5557TpZX//nPfza7bYAhwt4I1+pGJajp06cnJSXpKBCdffbZ48aNKykp
sfoI4AzHjh2bNGlSmzZtwt7WPpJmzZq9+eabpaWlVjdfE7IgAQgydDL/hkUA
gEgYvg2hMYydOnWSZdQTJkwwu22AIa666ioqRdby+/233357rN9d5fV6W7du
vXjxYqubDweT3ntz5sy58sortc8ySk9Pz8nJyc/Pt7rtUZAFCUCQoR+VIgCw
CMO3ITSGsX79+rJc+ssvvzS7bdCICaLq9u/fr7wYLCoqMnAXxD+So0ePxvpd
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
1IqTeiPV22OcTZs2he2gzz//3KQ9Aq7Xs2dP2Qnl8/mCo7YKF2dB9kGQYSMU
iwBAGxcP39OmTXv//feDf83NzV27dm3oE4YNGxa8o+/x48elUBQUFEiPjx49
Kv1Xem2wUrRy5crRo0cHXzhz5szZs2eHbko9jLNmzZJlsG3atInr2GACR08Q
zc/PV/6TeqiLL77YyP2p1H80/gm3nTCrz2IqKGkvLoU9HJWjM1pGRkbYbjJ8
R7Fy7ingGnSBPmFvF68lmC7OguyDIJvH0amLNYRMHnYl3mk6cIbqQ9B0YPVZ
TKZMmRJcUCYZOXKk7K4FAwYM2L59e8XjoqIiKRRSqhn8bWil6PPPPw9dvDZ3
7tzQWxid/i2MMsHOkh7MnDlTlr7WqlXrdEiH8oAH8Ty44YYbVGpEkpdfftmA
fcVTFIr680i7qKD4ubKmFKWpyu0oN3s68mwoozuuuLg4bE9Vq1bN8H3xgAcJ
8qBOnTqyE+qqq65SPlk5Xp+GyYg27IVKEQCocv2oPW3atA8//DD419zc3HXr
1oU+YejQoZs2bap4HDqnqEJopWjFihXPPfdc8FczZ86cM2dO6KaCYQybvk6e
PFmWvqalpUV6Mg94ENODpk2bqpeJfvrpJ2P2FaEQpPKrGCpIpyNXk2L6layp
oUcRtU6l/EmEnRrScb169QrbXxWfLXZ4a/GAB856MGzYMNnZlJqaGvVVLs6C
7IMgw3YoFgFANC4evhcsWDB58uSKxxX3KTp48GDoEyZMmPDZZ59VPN62bduj
jz4a+tvQStHOnTsHDBgQvOPBuHHjvvjii9Anq4dx7ty5svQ1JSUljiODKf7z
G6tbEYPdu3cnJyer1IgaN24c7z70lYDirBpp/5XGl4Q9FtkxnlZdqmZOPhnp
K+qKi4uN3ZF2zjoFXIku0O3w4cORSuUqXJwF2QdBNo/jUhe7iJQSIDLeaTpw
hupD0HQwI2guHr7z8vL69eu3adMmv98/d+7cUaNGVfx8y5Yt+/fvP/3b3Yce
f/zxX3755dSpU2PHjg29qdHpMytFgUDgsccemz9/vrSpb7/9Nicn58SJE6FP
Vg+jdEUvy10zMzONPFQkngEDBqjUiDwez+uvvx7XDowq2oT7U1hYKPvJr7eI
j/DkX78+XmN16HS4sk/YSlHYn2ipFBmaVUrXsGG7z+fzGbJ9INGkpKTIzqZ7
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
8Y9/xO4rNJw8eTIzM5PQNXk8ns8++4zn5ugnfBeUl5cnJydrhU5KK3v37hXb
QrYwCuIAQTYPhi50nBw000bRTg6aaXCE0kHQKGD1mWUJD2NCQgLnYtEtt9xC
LhN9+OGHsqdMmjQp8lfrFIgAwIKkjivcrVF3FP/v//0/ch/VrVs3PttiIxs3
biTMyGrUqFEgEBDdRsaEp283QJAB+MGIGgAYQfpmQngYq6urCV8Bs12GJp1K
kM+/pBONwsJC5RMjv7OsfsaHpAYAUcLTiuKpKr///vvkziopKWn//v18Nsf6
XnzxRUKsbr75ZtENNIXw9O0GCDIAV6gUAQALSN9MWCGMhYWFhEH+jh074n+L
UCh00UUXkc+8LrnkEtXnRi9Vs+aEIkwQFQ7xF85quyAyW5K6xwgGg61atSL3
Wv/3f//HZ3P0ELILpL69devWhBA9//zz/FvFhxXSt+MhyObB0IWO84Nmwrja
+UEzAY5QOggaBaw+syyLhHHVqlWEof6wYcPiefGePXuSz7YkI0eO1Hp68+bN
dZWJ8PUHAPzioYceirNSFPb222+TL3Mt/XXz5s1mb441bdiwwefzEYLzxRdf
iG6jiSySvp0NQQbgDUNrAIgb0jcT1gnju+++SxjwS6cDx48fN/qa9957L/kk
65zTP7V28OBBrVfYtm1b5JGoFAGAToFAIM6rFUVUVlYmJiaS+7Fbb73V1M2x
oD59+pBTxr59+0S30VzWSd8OhiADCIChNQDEB+mbCUuFcc6cOeSzoczMzBMn
TsR8nZMnTzZr1oz8UmFdu3Ylv9Rdd90Vu1IkGiaICof4C2fBXdCtWzddRWZ9
7r//fnJv5vV6ly5dauoWkXHbBVVVVQ0bNiSEonXr1qb+eqZFWCp9OxWCbB4M
Xei4JWhMh9luCRpTOELpIGgUsPrMsqwWRvIytDCPx9O2bdsjR47Invuf//wn
IyNDR33ojDVr1pAbc/LkyfCUJEwlAgCj9u/fH+5qWE1HLCkpqVOnDrlbS09P
r6mpMXW7xHr//ffJM0WfffZZ0W3kxGrp25EQZAAxMNIGgDggfTNhwTAWFRXp
r/bQ6dGjh56WPPnkk+HHo0wEABSuvfba2H2IwZ5E6rTJ/ZvH43nppZfM2yhR
ampqzj//fMKGe73e9evXi24mPxZM386DIAMIg/E2ANBC+mbCsmGsW7cuk6KQ
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
w3iwHqRvJmJ+XxYKhcIn/hEej6empoZzO8FSJk6cSCgWSZ+Qp59+umvXrjrr
RbJ/ffr02bFjh+hNdDjpuN65c+cdd9xRv3798EwGnWW9c05fpXz48OGlpaXk
t9i6dSvKRAD6ZWRkyI6UxYsXKx+GWS48IcgAADHgO1+wHqRvJmKG8eTJk7Kx
a0JCAp+2gU5CpnCTfxNNcs0115SUlDz00EMXXXSRx+PRXykKq1+//nXXXTd6
9GjZtZGtyS5zTX/66afJkyefe+650etcdBaI/H7//fff/8knn+h5o8OHD2t9
MNq1a2fGptllFzgYdkGcGjVqJDtY3nzzTcLjMQriAEE2D1af0UHQKCBoFIwd
oSgW/QIfNgr47TPLihnGtWvXysauMX+QBVwiFAo1bdqUUCzyer3hhYp79uy5
5ZZbMjMzDZWMIpWKpKSk6667bs2aNdG/ug46rV69+q233rrsssuiJwfqj7+0
y2666aYPPvhA/0zC8vJyrY9Eenq6qRsLYF+tWrWSHS/PP/884fEYBXGAIAMA
6IJKEVgJ0jcTMcM4f/582di1efPmfNoGtjBo0CBCsUgyefLkyIMPHDjQo0eP
8OU4jM4yCpOee9ttt/373/9ev369wK22slAo9NFHHz366KPt27enqw5F/kn7
7uTJk0bfXbZeFWUiAD0uu+wy2SHz+OOPEx6PURAHCDIAgF4oFoFlIH0zETOM
o0ePlo1dr7/+ej5tA52ET+EuLi6uU6cOoVjUqlWrYDAY/ZQdO3b06NGjfv36
Xq+XrmR0zulfkW7Tps1NN9304osvHjx4UNTm14qea1pZWbl27dp//OMfl1xy
SXJycvin7eMpEEn/Kioq6BpTr1491c+A9Alhu9UymO4rHHZBnHJycmRHzQ03
3EB4PEZBHCDI5hE+dLEpBI0CgkaB5gjFGjR82Khg9ZllxQzjI488Ihu79u7d
m0/bwF66d+9OKBb5fL6NGzcqn3X06NE///nPjRo1oqhmyHg8nuzs7AcffHDY
sGHz5s1z8FK1srKyKVOm9OjRo0uXLunp6bI40JWGmCR35fKZMK/XKysVAoDM
ueeeKztwrrrqKsLjMQriAEEGADDA9ZUisAikbyZihlF5+v/Xv/6VT9vAdj74
4ANCsUjyu9/9Tuu5oVDo/fffb9++fXZ2dpwlo0jhKCUlJT09/ZprrnnjjTem
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
mVl1gagxCgsL/V5d1qtXz7gHJX/lPLvg6tWrmZmZXbp0SUlJMa5w5Ek8SrVq
1Vq2bNm5c+dXXnklIyNj8eLFu3fvFq9Gm33zWnFx8YULF7Zv375y5coJEyYM
GDCga9eu7dq1q1+/fkxMjEFpi7sV52/Hjh1//etf5+bm2ixSzZgFSUDIxmHq
og2haUBoGlj7DFVXLLJwaOqw+8y0wopRzM8TEhK85vC2/E4ZWJe4XPV7sam6
XVDm1KlTM2bM6Ny5c1JSkhF1jErFxsZWr169QYMGd97SpEmTu++++/XXX8/M
zMzJyfnrX/966NCh06dPl5aWKlmedOPGDfHefubMmRMnTojG/PnPf543b97U
qVP79+//yiuv3HvvvbVr146LixPPQvxfWmg1a9a8//77+/Tps2bNmmvXrsmP
xfyYBUlAyABgPexBi3gM37oIN8Z77rnHaz4/duxYg9oGhKt9+/Z+rzoXLFig
umkwiwsXLixfvrxnz54/+clPqlevHh0dbXzZIyRRt4j2xMfHi4bVrFmzfv36
jRs3vuOOO2677TbxY0pKyp133vnYY489/vjj//mf/9n9ll//+te/ukU8oxde
eOE3v/nNSy+99Itf/KJHjx5PP/20OFI8zTp16ojfvf3223/605+KexD32aBB
A/En4lESEhJcD6r62f9IPNmf/exngwcPXrt2LZ8KFQpmQRLwqVAAYElUiiIV
o7aOwo3xd7/7ndf0Xlx6GNQ2hMjaC0T1k5qa6vcKtGHDhkY/NPkrV5UuOHny
5IIFC3r27NmuXbsaNWoYXxTB90uGRNrdu3efOXNmXl5eUVGRji+GCMEsSAJC
Ng5TF20ITQNC08AOZ6iKYpHlQ1OB3WemFW6M3333ndeEPzY2trS01KDmASHa
sGFDoGtS1U2D9RQUFCxbtiw9Pf3ZZ59t3bp1SkqK7h/LHCGioqLi4+Nr167d
oEGDNm3aiBFn586dFy9eVN3DdsAsSAJCBgCrYg9aBGP41oWGGGvVquV1LfDR
Rx8Z0TYgROLCM9CF6tGjR1W3DjZRXl6+e/fuhQsXDh48+KmnnmrdunVycrKc
T8y2hLi4uPr167dv3/7JJ58cNWrU7Nmzt2zZUlRUFMlfT2YoZkESEDIAWBiV
okjF8K0LDTF2797d6wLhiSeeMKJtCJEdFohWwY0bNwJ9ykpGRoacNkRy/iah
sAsqKiouXryYl5e3cOHC1NTUX/7ylw8++GCLFi0aNGhQrVo1Oy1GEidaSkpK
06ZN77///ieffHLQoEGTJ09etWrVnj17Ll26xFkgGbMgCQjZOBE+ddGM0DQg
NA3sc4bKLRbZJDS52H1mWhpi/OSTT7wuH6pXr86/GkMJp9Pp+318Lu3bt1fd
OuB7N27cuHjx4u7duz/++OO0tLR///d/79y58xNPPCH+/y//8i8tWrT48Y9/
7P586ejoaNdHWxta83Hdf2xsrOvTs+vUqXP77bffddddHTt2fOyxx1588cV+
/fqNHTs2Ozs795a8vLyCggJxuqnOEv/ELEgCQgYAa2MPWkRi+NaFhhgrKip8
/5V848aNRjQPCE5c5/q9EE5MTFTdNECj8lsKCwvPnDlz6tSpXbt2iTfYqVOn
pqenZ2dnL168eM6cObNnz87Kypo+ffqMGTPee++9adOmvf/++5MnTxY/zpw5
83//93/nzp07f/78nJycefPmTZw4Ufz5unXr9u7de+KWsrKy4uJi5y2qny40
YhYkASEDgOVRLIo8DN+60BbjQw895HVh/l//9V+6tw0hss8C0TDVrVvXb5ko
NjZW8vVvZOZvKnSBcnSBZMyCJCBk40Ts1KWKCE0DQtPAbmeorEqRrUKThd1n
pqUtxkWLFnldmycnJ/Nv05DpjjvuCLStpri4WHXrAMBYzIIkIGQAsAmWFUUS
hm9daIuxrKzM9zOE//znP+vePMCvIGWi06dPq24dABiOWZAEhAwANsEetEjC
8K0LzTF27NjR6yK9a9eu+rYNIbLbAtGgnE5nnTp1/JaJhLy8PCWtipz8TYsu
UI4ukIxZkASEbJyImrroiNA0IDQN7HmGGl8psmFoxmP3mWlpjnHFihW+Hw5T
Xl6ub/MAL8nJyYHKROvWrVPdOgCQhFmQBIQMALbCsqLIwPCtC80xOhwO36+d
GjZsmL7NA9zKy8tTUlIClYk+/fRT1Q0EAHmYBUlAyABgK+xBiwwM37ro5SHc
3+3SpYvX1TpfTa6EPReI/lBZWVlSUlKgMpHyz8iyff7mRxcoRxfIUZVRG+Ei
ZONEwtTFCISmAaFpYOcz1MhKkW1DMxK7z0yrKjHm5OT4XrPv3btXx+YBwvnz
52NjYwOViTZt2qS6gQAgG7MgCQgZAGyIZUV2x/Cti6rE6HQ6fb8B7eWXX9ax
ecDGjRsD1YiEFStWqG4gACjALEgCQgYAG2IPmt0xfOuiijE+/fTTXlfu1apV
czqdejUPobDxAtFFixYFqhFFRUXl5+erbuDf2TV/C6ELlKMLJGMWJAEhG8fG
UxdDEZoGhKaB/c9QYypFNg/NGOw+M60qxnj58mVxwe51CT9nzhydWoeIlpaW
FqhMFBMTc+rUKdUNBABlmAVJQMgAYFssK7Ivhm9dVD3GBx980OsqvnHjxiwr
QhU99dRTgcpECQkJxcXFqhsIACoxC5KAkAHAttiDZl8M37qoeoybNm3yvZbf
uHGjLs1DKGy2QLSioqJJkyaBykTVq1cvLy9X3UZvdsrfougC5egCyZgFSUDI
xrHZ1EUaQtOA0DSIlDNU72JRRISmN3afmZYuMd5xxx1el/P33ntv1e8WEejI
kSNBvuasbt26LFcDgJvMgqQgZACwOZYV2RHDty50iXHBggVeV/RRUVH79u2r
+j0jouTk5ASqEQk///nPVTcQAMyCWZAEhAwA9kexyHYYvnWhS4xOpzM5Odnr
uv7f/u3fqn7PCIU9FogOGTIkSJkoIyNDdQODsUH+VkcXKEcXSMYsSAJCNo49
pi7yEZoGhKZBZJ2h+u1Bi6DQ9MPuM9PSK8bRo0f7Xt2zrAihcDgc99xzT6Aa
UVRU1KZNm1S3EQDMhVmQBIQMABGBZUX2wvCtC71iLCoqSkxM9LrGf/TRR3W5
c9jYqVOnqlWrFqhMFB8ff/bsWdVtBADTYRYkQS8PqtsCADASxSJbYNTWkY4x
Dh482Hc1yKFDh/S6fwRi3QWi8+fPFy+SQGWimjVrVlRUqG5jSCyav53QBcrR
BZIxC5KAkI1j3amLWoSmAaFpEIlnqB570CIuND2w+yxcu3btSktL69u375Qp
UwoLC30PyM3NHTJkyIABA+bNm+f1peHir8Qfun9cv3695z+K5efnex6sY4zX
r1/3XVbUqVMnve4fduJ0On/yk58EqhEJ3bp1U91GADAve8+CTIKQASCCsKzI
Lmw8fBcUFPTv33/v3r1lZWWLFy+eMmWK1wHbt28fPXq0OKyoqGjChAkff/yx
689LSkqWLFkikvGsFM2cOXPNmjUX/8GrrKRvjIMGDfK95N+8ebOODwEbOHfu
nG9R0XMpmnjZq24jAJiajWdB5kHIABBZKBbZgo2H77Vr137wwQeu2zdu3Ojb
t6+4svY8YNq0aRs2bHDd3r9///Dhw123J02a9Mc//vFPf/qTZ6Vo6NChWVlZ
aWlpEyZM2Lt3r9dj6RtjSUlJQkKC14V/kyZNHA6Hjo8CL9ZaILpgwYLo6OhA
ZaKkpKTjx4+rbmPYLJS/XdEFytEFktl4FmQehGwca01dzIPQNCA0DSL3DK3a
HrQIDa1q2H0Wluzs7OXLl7t/TEtL27lzp+cBI0eOdG8iu3Llioji2rVr4val
S5fE/8XvuitFhYWFvXv3XrduXUFBwebNm/v06XPixAnPu9I9xrfeesv38n/S
pEn6PgqsyOl0duvWLciOs3vuucdrzRsAwC8bz4LMg5ABIOKwrMj6bDx8Z2Vl
uTeUCePGjdu+fbvnAYMGDTp48KDrdklJiYji4sWL7r/1rBTdvLUqyfOeFy1a
5HlXvXy4y3rabohHr127tu9+ovPnz1fxnrlh6RviFRtkx5mQlpZmkqZygxvc
4IYJb/iO1zdhMEIGgEhEscjibDB8OxyO/j4KCgqys7NXrFjhPkxcQX/99dee
vzhixIg9e/a4bnuuKXLxqhR5EnebmZnp+SdGxLhw4ULfOkCrVq10fyC4rL5F
dSuC8bvSzLOQuH79etVtrBKT5x8J6ALl6ALJbDALMj9CNo75py7mRGgaEJoG
kX6Gat2DFtGhaWVEaPYYvgt9OByOtWvXuus5rs8pOnv2rOdvTZ069dNPP3Xd
PnDgwLBhwzz/1rNSlJ+fn5GR4f6rrKysZcuWeR5sUIyNGjXyLQh8+eWXRjwW
zOzkyZPJyclBykQtW7YsLS1V3UwAsBh7zIJMjpABIEJV7QOLoJaNh+9z5871
799/z5495eXlS5cudZd69u3bd/r0aXFj69ato0ePPn/+fHFx8aRJkzw/1Ojm
DytFRUVFAwcO3LRpk8Ph2LlzZ79+/QoKCjwPNijG3Nxc35pA48aNnU6nEQ8H
c8rOzg6+lGjcuHGq2wgAlmTjWZB5EDIARC4qRZZl7+H7m2++GTNmTP/+/SdP
nlxYWOj6w/T0dNfqLKfTmZubO2LEiIEDB86bN8/rQ4C9dp8dPnw4IyND3JW4
Q/fnYLsZF+Odd97pWxx46623DHq4SGbCBaLXr1+/7777gpSJkpOTDx06pLqZ
ujFb/hGILlCOLpDM3rMgkyBk45hw6mIJhKYBoWnAGfq98JcVEZoG7D4zLeNi
vHDhQnx8vFd9IDo6+vDhwwY9Ikxi1apVsbGxQcpE3bp1czgcqpsJABbGLEgC
QgaAiMayImti+NaFoTEuWbLEt0rQvHlzvgndrkpKSh566KEgNaLo6OiVK1eq
biYAWB6zIAkIGQAiHcUiC2L41oXRMT7yyCO+5YK+ffsa+qCRxiQLRJcvXx4X
FxekTFSzZs0rV66obqYhzJB/hKMLlKMLJGMWJAEhG8ckUxfLITQNCE0DztB/
CmcPGqFpwO4z0zI6xoKCgoSEBN+iwcaNGw19XMh04cKF5s2bB6kRRUVFvf32
26qbCQD2wSxIAkIGAPA9aJbD8K0LCTEuXbrUt3RQrVo19yd1w9JSU1OD1IiE
Jk2aeH3jHgCgipgFSUDIAIDvUSmyFIZvXciJsVu3br4FhDZt2lRUVEh4dNtT
tUD02LFjTZs2Db6UKD09XX7D5GOtqXJ0gXJ0gWTMgiQgZOOwt0UbQtOA0DTg
DPUjhGIRoWnA7jPTkhPj9evXa9Wq5VtJ+M1vfiPh0aG7ioqK3r17R0VFBV9K
dP78edUtBQB7YhYkASEDAP6OPWjWwfCtC2kxbt++3W9hYfr06XIaAL1s3Lgx
OTk5SI0oOjp68uTJqpsJAHbGLEgCQgYA/BOVIotg+NaFzBgzMjL8blDavHmz
tDbYkrQFopcvX/7Xf/3XIDUioX79+uIwCY0xFdaaKkcXKEcXSMYsSAJCNg57
W7QhNA0ITQPO0ICCFosITQN2n5mW5Bi7dOniW1uIj48/cuSIzGYgXE6nc/Dg
wdHR0UFqRFFRUcOGDVPdUgCICMyCJCBkAMAPsAfNChi+dSE5xrKysttuu823
yBAXF7d//36ZLUHo3nrrreA1IqFr166lpaWqWwoAkYJZkASEDADwRqXI9Bi+
dSE/xmPHjiUkJPiWGmJiYs6ePSu5MfZg3ALRI0eONGzYMHiNqE6dOl9++aUR
j24hrDVVji5Qji6QjFmQBIRsHPa2aENoGhCaBpyhlQhQLCI0Ddh9Zlq9PEh7
0E2bNvn9dOvatWtfv35dWjMQxLVr1x5//PHgNaLo6OjU1FTVLQWACKJk1I5Y
hAwA8IM9aObG8K0LVTH+6U9/8lt8aNGiBZuY1HI4HAMHDoyJiQleJurYsWNR
UZHqxgJAhGIWJAEhAwD8o1JkYgzfulAY40svveS3BNGsWbOSkhJVrbIiHReI
Tp8+3e/eQE+1atXasmWLLg9nG6w1VY4uUI4ukIxZkASs4DIOe1u0ITQNCE0D
ztCQ+BSLCE0DfUNj1NaR2hjbtm3rtxbx4x//OAK/aV2tJUuWpKSkBK8RCa++
+qrT6VTdWACIdMyCJCBkAEBA7EEzK4ZvXaiN0el0PvbYY4EWrhw/flxh2yLH
ggUL6tatW2mNqFOnTpcuXVLdWADA95gFSUDIAIBgKBaZEsO3LpTH6HQ6e/To
4bc0kZCQ8MUXX6htniVoXiC6ePHi+Pj4SmtEbdq0OXnypO7NthPWmipHFyhH
F0imfPiOBIRsHPa2aENoGhCaBpyhYfCoFBGaBnz3mWmZJMZf/epXfmsU0dHR
s2bNUt06G/rLX/7SuHHjSmtE9erVo1gHACZkkuHb3ggZAFA5lhWZDMO3LswT
42uvvRaoXiH+yuFwqG6gTaxevbpRo0aV1oiqV68+d+5c1Y0FAPhnnuHbxggZ
AFA59qCZDMO3LkwV48iRIwMVLtq1a3fhwgXVDTSpUBaIOp3OOXPmhPJ5RPHx
8RkZGZTmwsJaU+XoAuXoAslMNXzbFSEbh70t2hCaBoSmAWdo2KgUacXuM9My
W4zvv/9+VFSU3wpGtWrVNm7cqLqB1lNRUTFu3Ljq1atXWiOKjo4ePHhweXm5
6iYDACphtuHblggZABAqikWmwfCtCxPGuGrVqri4uEDVjAcffPDatWuq22gN
hYWFPXv2jI2NrbRGJHTs2LGkpER1kwEAITHh8G0/hAwACBV70EyD4VsX5oxx
3759tWvXDrL05aOPPlLdRhPxXSD64Ycf1qlTJ5QCUWxs7Msvv3z16lVVjbcH
FugqRxcoRxdIZs7h22YI2TjsbdGG0DQgNA04QzWiUhQ+dp+ZlmljLC4uvvfe
e4OUOJ5//vnr16+rbqa5lJSUTJkypWbNmqHUiOLi4vr27StyVt1qAEDYTDt8
2wkhAwDCQ7HIBBi+dWHmGJ1O5+jRowN9bJGQmJg4Y8YMcZjqlqq3d+/ebt26
hbjRLCkp6a233iorK1PdagCARmYevm2DkAEA4WEPmgkwfOvC/DH+9a9/TU5O
DlL3aNq0qThGdTPVuH79+sSJE4Ps1PNSp06dGTNm8L1mumOBrnJ0gXJ0gWTm
H75tgJCNw94WbQhNA0LTgDNUm7+HRqUoHOw+My1LxHjt2rW77roreA2kdevW
27ZtU91SSZxO5/Llyzt06BAdHR1ijahZs2Zr1qxR3XAAgD4sMXxbHSEDALSg
WKQUw7cuLBRjampqTExM8HpIhw4dvvzyS9UtNYrD4Vi/fn23bt2CfDecrzZt
2uzbt0912wEAerLQ8G1dhAwA0II9aEoxfOuilwfVbanc9evXu3fvHuSTi1xu
v/32efPm2ebzi8rLy3Nycpo0aVLpE/eUkJDw+OOPnzlzRnXzIwILdJWjC5Sj
C+Sw1qhtdYRsHPa2aENoGhCaBpyh2vwgNIpFoWH3mWlZMcb/+7//a9GiRaWl
kqSkpOeee04crLq9GhUXF2dnZ3fo0CGsFUTC3XffvWrVKtsUygAAvqw4fFsO
IQMAtKNSpAjDty4sGqPT6ZwxY0b16tVDqZzEx8f37dv38uXLqltdOYfD8eWX
X/bs2bNRo0ZhrSASatSo0adPn4sXL6p+EgAAw1l0+LYWQgYAaMeyIkUYvnVh
6RhLS0tTU1MTExNDKaRERUU1b9581KhRx48fV93wH3A4HF999dVvf/vbu+66
q9IPYvIlfqVt27bjx49X/TwiGgt0laMLlKMLJLP08G0VhGwc9rZoQ2gaEJoG
nKHa+AmNYlFl2H1mWjaIsbS0dPjw4SHWi9zLb7p16/bBBx+cO3dOfoOdTueR
I0def/31pk2bJicnh/79ZZ7Eb7Vq1So7O7uiokL+UwAAqGWD4dv8CBkAUFVU
iqRj+NaFbWIsLS3NyMioV69euCWXatWqtW3b9r//+7+XLVt29OhR3T/eR9zh
sWPHPvnkk8GDBz/66KO33XabhoVDXg0eNWqUJTbTAQAMYpvhW63169d7fkh4
fn6+598SMgBABxSL5GL41oXNYnQ6nStXrmzXrp3mOkxUVFR0dHRSUpK4k//5
n//5/e9//+GHH27dunXPnj1nz569fv36tWvXbty44XA4ysvLS0pKioqKLl68
uGXLFnHY7Nmzs7Kyhg0b9otf/OK+++5r3Lix5iVDXmJiYkR7xo4de/78ed9n
zQJR5chfObpAObpAMpsN36rMnDlzzZo1F/9BjOyef0vIxnFPXU6fPr3jlp07
d+4I4KuvvvK64f4Vt0C/a7M7nzp1qkVbrvDOXaFZseUK73zKlCnTpk2zYsvV
3nmgM9RrD5oJW67wzsM6Q48ePRrKEMPwrQu7xnj27NmHH35YlyqNX1G3GHTn
bjVq1HjqqadWrlzJFjMAgCe7Dt+SDR06NCsrKy0tbcKECXv37vX6W0I21MSJ
E42eRwGASXhWilBFP//5z4OPLwzfurB3jE6nc9u2bd27d69Vq5bqV3So4uLi
7r777tTU1BMnTqjODwBgUvYevuUoLCzs3bv3unXrCgoKNm/e3KdPH6+Rl5CN
c/78edUTLgCQimKRjlauXBlkiGH41kWExOh0Ovfs2TNw4MCmTZtKWAsUrsTE
xPbt248YMWLfvn0anh27z5Qjf+XoAuXoAskiZPg22o0bN9y3s7KyFi1a5Pm3
vXy4X+fcqOKNF154QfXkCwCk8v4eNP7T+p/QpEkTzzHFd7y+iSqLwBhLS0s/
+eQTMUW54447qvjh0polJCQ0aNCgbdu2ffr0+e6771RHAgCwmAgcvqti6tSp
/X9o27ZtXsesWLEiMzPT80/cIZuhtGKzG5MmTVIyAQMAhZTXWOzxn9CyZcsg
owxzJF1EeIwOh+PgwYOTJ09+/vnn77rrrvj4eN3fEKKiopKTk5s1a/b444+P
GjVq/fr1ly5dUv28AQDWFuHDd7iuXLlS+EOlpaX5+fkZGRnuY7KyspYtW+b5
W4RsnOLiYhOu8QYAWEJeXl6QIYbhWxfE6EVMHbdt2zZnzpypU6e+9tpr//Ef
/3Hfffe1bNmyYcOGtWvXrlmzZrVq1RISEpKSkhJvSb4l/pY6dep07Njxl7/8
5ciRIzMzM7/44oszZ844nU6j28zuM+XIXzm6QDm6QDKG76orKioaOHDgpk2b
HA7Hzp07+/XrV1BQ4HkAIRtHvGOMGzeOYhEAIFzp6enBhxiGb10QIwAAlsPw
rYvDhw9nZGT0799/zJgx+fn5Xn9LyAAAWA7Dty6IEQAAy2H4loCQAQCwHIZv
XRCjDbD7TDnyV44uUI4ukIzhWwJCNg5TF20ITQNC04AzVBtC08CI0Bi+dUGM
AABYDsO3BIQMAIDlMHzropcH1W0BAADBMGrLRMgAAFgOw7cuiNEGWCCqHPkr
RxcoRxdIxvAtASEbh6mLNoSmAaFpwBmqDaFpwO4z0yJGAAAsh+FbAkIGAMBy
GL51QYwAAFgOw7cEhAwAgOUwfOuCGG2ABaLKkb9ydIFydIFkDN8SELJxmLpo
Q2gaEJoGnKHaEJoG7D4zLWIEAMByGL4lIGQAACyH4VsXxAgAgOUwfEtAyAAA
WA7Dty6I0QZYIKoc+StHFyhHF0jG8C0BIRuHqYs2hKYBoWnAGaoNoWnA7jPT
IkYAACyH4VsCQgYAwHIYvnVBjAAAWA7DtwSEDACA5TB864IYbYAFosqRv3J0
gXJ0gWQM3xIQsnGYumhDaBoQmgacodoQmgbsPjMtYgQAwHIYviUgZAAALIfh
WxfECACA5TB8S0DIAABYDsO3LojRBlggqhz5K0cXKEcXSMbwLQEhG4epizaE
pgGhacAZqg2hacDuM9MiRgAALIfhWwJCBgDAchi+dUGMAABYDsO3BIQMAIDl
MHzrghhtgAWiypG/cnSBcnSBZAzfEhCycZi6aENoGhCaBpyh2hCaBuw+M61e
HlS3BQAABMOoLRNpAwBgIYzaOiJGAAAsh+FbAkIGAMByGL51QYw2wAJR5chf
ObpAObpAMoZvCQjZOExdtCE0DQhNA85QbQhNA3afmRYxAgBgOQzfEhAyAACW
w/CtC11ipC+UowvUIn/l6ALl6ALJCFyCEEOmL7QhNw0ITQNC04bcNCA0DYwI
jY7QBZUiG1i9ejVdoBb5K0cXKEcXSEbgElApMg5TF20ITQNC04AzVBtC04BK
kWmZsFKk472ZtmFmvjfTNszM92bahul7b6ZtmJnvzbQNM/O9mbZhpro3ZkES
yKkUKfx1Wi7/12m5/F+n5fJ/nZbL/3VaruN9woVKEfdm3F1Fzr2ZtmH63ptp
G2bmezNtw8x8b6ZtmKnujVmQBFSKTPvrtFz+r9Ny+b9Oy+X/Oi2X/+tUikyL
SpEN7k3fBaKmfZpmvjfTNkzfezNtw8x8b6ZtmJnvzbQNM9W9MQuSoBcAALAg
1TMIO1DdhwAAQAvVMwgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAMJ25syZiRMn9u3bd8yYMfv27fM9YNOmTW+++Wb//v3T
09MPHDggv4W2t2vXrrS0NNEFU6ZMKSws9HuMw+F47733tm/fLrltNpabmztk
yJABAwbMmzevvLxcwwGoitLS0lmzZol4hw4d+pe//CXQYVeuXBk+fPjFixdl
ti1C8OYPuFV6OkQs3+mH30mL3wAjM1W/75x+owg0Dkbg9OP06dPvvvuuCE2M
+KtXr3Y6nTfDzCeUubRdffrpp6NHj3b/yBka3PTp03t5uHHjxk3O0MqIp7lo
0aJBgwYNHDhw7ty5rmfNGWp7YgIgem3t2rWiH/Py8kTvl5SUeB6Qn58/ePDg
7777Thz5xRdfiE6/evWqqtbaUkFBgRgZ9+7dW1ZWtnjxYnH6+D1m6tSp4t2M
SpFeRJJiVBXBFhUVTZgw4eOPPw73AFSRGD4++OAD8YZz/PhxMcQcPHjQ95j9
+/enpqaKVz6VIt3x5g+4VXo6RCzf6YffSYvfACMzVb/vnIGi8DsORuD0w+l0
irFe5COCEpeQI0aM+Nvf/nYznHxCmUvb1enTp8Vzd1eKOEODEy+2QYMG7dmz
5+I/3Aw8BHCGui1dunTixIniKYs3NPGsV69efZMzNAIcOXJEnA6u0r0wadKk
LVu2eB4gutuzSChOLr8XdNBMvC+Js8x1+8aNG3379j137pznAaWlpSL23Nzc
9PR0KkV6mTZt2oYNG1y39+/fP3z48HAPQFWIQblfv35iZHH9KEac2bNnex2z
b98+EbsYsqkUGYE3f8Ct0tMhMvmdfvidtPgNMDJT9fvO6TeKQONgZE4/iouL
RSA3b9U9xFMWV5Rh5VPpXNquKioqxOmZk5PjrhRxhgYnXmAik1mzZonERFAF
BQU3AwwBnKFu4mXWv3//EydOuH4sLCw8e/YsZ2gk2Lp16+9//3v3j/Pnz1+8
eHGgg8V5JHr22rVrUpoWKbKzs5cvX+7+MS0tbefOnZ4HiDOxqKhI3BA9RaVI
LyNHjszPz3fdvnLlSq9evbxe2JUegKoQQ7N7xa+Ql5c3duxYr2PEvLG8vFwc
Q6XICLz5A25hnQ6Rw+/0w++kxW+ApOp+5/QbRaBxMJKnHyIB8Xz/8Ic/iGv2
sPKpdC5tVytWrBCvJRGIu1LEGRqceNYDBgz45ptvzp49K57yqFGjxGuMMzQ4
17o18UJKT08fM2bM6tWrxejAGRoJNm7c6LkAbOnSpfPmzfN7pHiRDBs27PPP
P5fVtEiRlZXluXBx3LhxgcpBVIp05LlAoqSkxLcWUekBqIpTp0717t3b/eOu
Xbs8t9h7olJkEN78AbfQT4fI5Dn98Dtp8RtghKfq+c7pN4pA42AkTz/E5eel
S5fefvvtFStWhJVP6HNpOzl06JDISkyTPCtFnKGVchc3xOtNnKQ7duzgDA1O
vNL69Okzbdq0kydPHj58OC0tLTc3lzPUZqZOndr/h7Zt2/bFF1+MHz/efcz8
+fOXLFni+7t79uwZMmTI1q1bJbbXbg4cOOCVvzjRbt4q/osB0X2Y+MOvv/7a
7z1QKdLRiBEjxKvaddvvvwhUegCqwvUvEe6PufO7psiFSpFBePMH3EI8HSKW
15oi30mL3wAjOVWvd06/UQQaB5l+iLhSU1PDyif0ubRtiGtw8TS//fbbm7c+
HctzTRFnaOgmTJiwceNGztDgjh07Jp7m2bNnXT+K4eCdd97hDLUZ0VmFP1Ra
Wnr48OFBgwa5N2a+++67vv9wvGXLluHDh4sjpTfZVsQFr1f+rovftWvXZmZm
uo/p27ev+0z0QqVIR1OnTv30009dtw8cODBs2LBwD0BVuHY3u7c8r169etas
WX6PpFJkEN78AbdQTodI5jn98Dtp8RtgxKbq+87pN4pA42AETj+Ki4vF0xTX
Ka4fxZV7RkZGWPmEPpe2jV27dvXu3fuNW/r37++6feHCBc7Q4MQLyb3JTrzG
hg4dunv3bs7Q4K5duyZeYO4o8vLyxowZwxkaCcRJ8eabb+bm5paXl+/YsWPA
gAGuPeknT550fbNnfn6+eP8Rt90fEe9eswddnDt3TiS8Z88e0QVLly4Vg6Pr
z/ft23f69GnPI6kU6Wjr1q2jR48+f/68mJ9MmjTJtXlWvOmJs8B1Cvg9ADqa
M2fOjBkzSkpKTp065Rqpb94qaIsu8DyMSpFBePMH3AKdDnDxnH74nbT4DTAy
U/X7zhkoCr/jYGROP8S1uUhDZCWiGDly5GeffXYznHwCzaVtrKyszP1Pz9u2
bRs1apS4IeaxnKHB7d27V+Rz9OhR8azFi+ett94SoXGGViorK+u99967evXq
5cuXx40b59pKxhkaCc6cOSPen8VJMWbMGHH6uP4wJydH/KG4MXny5F4/xGox
3X3zzTcifHEGibTF+7zrD9PT011fQehGpUhHYlAQI8KIESMGDhw4b9481+LJ
0tJS8Qp3XSb7PQA6un79enZ29qBBg4YNG+b+phhxLogu8DyMSpFxePMH3Pye
DnDxmn74nbT4DTACUw30zuk3Cr/jYGROP8TlZ2Zm5htvvCEu2Dds2OBa3RFW
Pn5flhHCc/fZTc7QymzZskW8zPr16zdlypTz58+7/pAzNDhxiTR//vyhQ4eK
NBYvXlxRUXGTMxQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgEj1/wrtbOM=
    "], {{0, 578.25}, {1162.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{1162.5, 578.25},
  PlotRange->{{0, 1162.5}, {0, 578.25}}]], "Output",
 CellLabel->"Out[66]=",ExpressionUUID->"2a867ad3-fbc9-4741-bad1-0f8cf00abac7"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-10:  (COMPILE) FODO ring with chromatic effects", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"0c77fcd1-528c-4cff-a287-ece0a9bb2192"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[1]:=",ExpressionUUID->"2f0dd1a4-f3c8-4b40-8550-ca6f45b7f3da"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "4", "D", " ", "phase", " ", "space", " ", "with", " ", "4", " ", 
    "deviation", " ", "parameters", " ", 
    RowBox[{"(", 
     RowBox[{
     "3", " ", "sextupole", " ", "amplitudes", " ", "and", " ", "momentum", 
      " ", "deviation"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"K1", " ", "--"}], " ", "deviation"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"K2", " ", "--"}], " ", "SF", " ", "sextupole", " ", 
    "amplutude"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"K3", " ", "--"}], " ", "SD", " ", "sextupole", " ", 
    "amplutude"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"K4", " ", "--"}], " ", "BM", " ", "sextupole", " ", 
    "amplutude"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", 
   RowBox[{"\"\<PROJECT\>\"", ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "1", ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", 
    RowBox[{"List", "[", 
     RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}]}], "]"}]}]], "Code",
 CellLabel->"In[2]:=",ExpressionUUID->"fdb1126d-3e29-4093-ba4a-a5c1ff4ae0b9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "2", ",", "1", ",", "4", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"e6dd5287-3c2f-446a-920b-b60cff96105a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "generic", " ", "parameters"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ARC", " ", "=", " ", "3.0"}], " ", ";"}], "                    ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "bend"}], " ", "arc", " ", "length"}], " ", "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"ANG", " ", "=", " ", "0.1308996938995747"}], " ", ";"}], "     ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "bend"}], " ", "angle"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"RAD", " ", "=", " ", 
     RowBox[{"ARC", "/", "ANG"}]}], " ", ";"}], "                ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "bend"}], " ", "radius"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"KBM", " ", "=", " ", "0.015"}], " ", ";"}], "                  ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "bend"}], " ", "quadrupole", " ", "amplitude"}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"KQF", " ", "=", " ", "0.19"}], " ", ";"}], "                   ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "QF"}], " ", "amplitude"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"KQD", " ", "=", " ", 
     RowBox[{"-", " ", "0.21"}]}], " ", ";"}], "                 ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "QD"}], " ", "amplitude"}], " ", "*)"}]}]}]], "Code",
 CellLabel->"In[3]:=",ExpressionUUID->"d6341097-2cab-4f5c-9c7e-f229dfd99b84"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Define", " ", "maps"}], ",", " ", 
    RowBox[{"sequencies", " ", "and", " ", "elements"}]}], " ", "*)"}], "\n", 
  "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], "*", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"P1", "^", "2"}], "+", 
            RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
          RowBox[{"(", 
           RowBox[{"1", "+", "K1"}], ")"}]}]}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Q1", "^", "2"}], "-", 
           RowBox[{"Q2", "^", "2"}]}], ")"}]}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "6"}], "*", 
         RowBox[{"(", 
          RowBox[{"KS", "+", "K2", "+", "K3"}], ")"}], "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Q1", "^", "3"}], "-", 
           RowBox[{"3", "*", "Q1", "*", 
            RowBox[{"Q2", "^", "2"}]}]}], ")"}]}], "}"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"1", "/", "2"}], "*", 
          RowBox[{
           RowBox[{"Q1", "^", "2"}], "/", 
           RowBox[{"R", "^", "2"}]}]}], "-", 
         RowBox[{
          RowBox[{"1", "/", "R"}], "*", "Q1", "*", "K1"}], "+", 
         RowBox[{
          RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Q1", "^", "2"}], "-", 
            RowBox[{"Q2", "^", "2"}]}], ")"}]}], "+", 
         RowBox[{
          RowBox[{"1", "/", "6"}], "*", 
          RowBox[{"(", 
           RowBox[{"KS", "+", "K4"}], ")"}], "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Q1", "^", "3"}], "-", 
            RowBox[{"3", "*", "Q1", "*", 
             RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], "}"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", "0"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<BEND\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<ELEMENT\>\"", "]"}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"{", "}"}], "}"}], "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", "\"\<QUAD\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KQ", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "\"\<SEXT\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KS", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", "\"\<BEND\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}]}], "}"}], "}"}]}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "BEND"}], "]"}], " ", ";"}]}]}]], "Code",\

 CellLabel->"In[9]:=",ExpressionUUID->"b8424ff6-4cd6-4cbb-a1d5-052a27cc13f4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "code"}], " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{"I$CODE", "[", 
    RowBox[{"Rule", "[", 
     RowBox[{"\"\<LEVEL\>\"", ",", 
      RowBox[{"Plus", "[", "1", "]"}]}], "]"}], "]"}], " ", ";"}]}]], "Code",
 CellLabel->"In[36]:=",ExpressionUUID->"df1726f5-4735-47af-bdb9-baedd4262e1e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Compile", " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"DR", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<DRIF\>\"", ",", 
        RowBox[{"{", "0.45", "}"}], ",", 
        RowBox[{"{", "0.45", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QF", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<QUAD\>\"", ",", 
        RowBox[{"{", "0.05", "}"}], ",", 
        RowBox[{"{", "0.50", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QD", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<QUAD\>\"", ",", 
        RowBox[{"{", "0.05", "}"}], ",", 
        RowBox[{"{", "0.50", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SF", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<SEXT\>\"", ",", 
        RowBox[{"{", "0.01", "}"}], ",", 
        RowBox[{"{", "0.10", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SD", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<SEXT\>\"", ",", 
        RowBox[{"{", "0.01", "}"}], ",", 
        RowBox[{"{", "0.10", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BM", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<BEND\>\"", ",", 
        RowBox[{"{", "0.05", "}"}], ",", 
        RowBox[{"{", "3.00", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}]}]}]], "Code",
 CellLabel->"In[37]:=",ExpressionUUID->"f3a85c3e-7b8f-4e0c-ba81-a8891256706a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "FODO", " ", "ring", " ", 
    RowBox[{"(", "compiled", ")"}]}], " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ClearAll", "[", "FODO", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"FODO", " ", "=", " ", 
     RowBox[{"Compile", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"STATE", ",", "_Real", ",", "1"}], "}"}], "}"}], ",", "\n", 
       "\t", 
       RowBox[{"Block", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"{", "RESULT", "}"}], ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"RESULT", " ", "=", " ", "STATE"}], " ", ";", "\n", "\t\t", 
          
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"QF", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "KQF", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"SF", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "0.0", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"BM", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", 
              RowBox[{"RAD", ",", "KBM", ",", "0.0"}], "]"}]}], "]"}]}], " ", 
          ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"SD", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "0.0", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"QD", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "KQD", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"QD", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "KQD", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"SD", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "0.0", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"BM", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", 
              RowBox[{"RAD", ",", "KBM", ",", "0.0"}], "]"}]}], "]"}]}], " ", 
          ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"SF", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "0.0", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"QF", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "KQF", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", "RESULT"}]}], "\n", "\t", "]"}], ",", "\n", "\t", 
       RowBox[{"Rule", "[", 
        RowBox[{"CompilationTarget", ",", "\"\<C\>\""}], "]"}], ",", "\n", 
       "    ", 
       RowBox[{"Rule", "[", 
        RowBox[{"RuntimeOptions", ",", 
         RowBox[{"List", "[", 
          RowBox[{"\"\<Speed\>\"", ",", 
           RowBox[{"Rule", "[", 
            RowBox[{"\"\<EvaluateSymbolically\>\"", ",", "False"}], "]"}]}], 
          "]"}]}], "]"}], ",", "\n", "    ", 
       RowBox[{"Rule", "[", 
        RowBox[{"CompilationOptions", ",", 
         RowBox[{"List", "[", 
          RowBox[{
           RowBox[{"Rule", "[", 
            RowBox[{"\"\<ExpressionOptimization\>\"", ",", "True"}], "]"}], 
           ",", 
           RowBox[{"Rule", "[", 
            RowBox[{"\"\<InlineExternalDefinitions\>\"", ",", "True"}], 
            "]"}]}], "]"}]}], "]"}], ",", "\n", "    ", 
       RowBox[{"Rule", "[", 
        RowBox[{"RuntimeAttributes", ",", 
         RowBox[{"List", "[", "Listable", "]"}]}], "]"}], ",", "\n", "    ", 
       RowBox[{"Rule", "[", 
        RowBox[{"Parallelization", ",", "True"}], "]"}]}], "\n", "]"}]}], " ",
     ";"}]}]}]], "Code",
 CellLabel->"In[43]:=",ExpressionUUID->"88a46116-de08-4177-9ba2-0059b2c46fbb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Compute", " ", "parameter", " ", "dependent", " ", "transverse", " ", 
    "closed", " ", "orbit"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ORBIT", " ", "=", " ", 
     RowBox[{"I$ORBIT", "[", 
      RowBox[{"I$ORDER", ",", "FODO"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"ORBIT", " ", "//", " ", "Chop"}], " ", "//", " ", 
    "N"}]}]}]], "Code",
 CellLabel->"In[45]:=",ExpressionUUID->"5704faf1-c865-4348-8e28-b370c2e95a74"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1.8162535546749987`", " ", "K1"}], ",", "0.`", ",", "0.`", ",", 
   "0.`"}], "}"}]], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"4c8dc177-656b-4972-be9a-e915e4af679e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Test", " ", "closed", " ", "orbit"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$MAKE$COMPONENTS", "[", 
     RowBox[{"FODO", "[", 
      RowBox[{"I$MAKE$STATE", "[", "ORBIT", "]"}], "]"}], "]"}], " ", "//", 
    " ", "Chop"}], " ", "//", " ", "N"}]}]], "Code",
 CellLabel->"In[47]:=",ExpressionUUID->"aede3b35-d6c7-4657-991f-5a3067c2e2da"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1.8162535546749972`", " ", "K1"}], ",", "0.`", ",", "0.`", ",", 
   "0.`"}], "}"}]], "Output",
 CellLabel->"Out[47]=",ExpressionUUID->"1bcb046c-8f8c-47a6-a26c-05d36d7d0d2d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Compute", " ", "one", " ", "turn", " ", "matrix", " ", "on", " ", 
    "closed", " ", "orbit"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"I$MATRIX", "[", 
      RowBox[{"ORBIT", ",", "FODO"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"TableForm", "[", 
    RowBox[{"Take", "[", 
     RowBox[{
      RowBox[{"Collect", "[", 
       RowBox[{"MATRIX", ",", "K1"}], "]"}], ",", 
      RowBox[{"List", "[", 
       RowBox[{"1", ",", "2"}], "]"}], ",", 
      RowBox[{"List", "[", 
       RowBox[{"1", ",", "2"}], "]"}]}], "]"}], "]"}], "\n", 
   RowBox[{"TableForm", "[", 
    RowBox[{"Take", "[", 
     RowBox[{
      RowBox[{"Collect", "[", 
       RowBox[{"MATRIX", ",", "K1"}], "]"}], ",", 
      RowBox[{"List", "[", 
       RowBox[{"3", ",", "4"}], "]"}], ",", 
      RowBox[{"List", "[", 
       RowBox[{"3", ",", "4"}], "]"}]}], "]"}], "]"}]}]}]], "Code",
 CellLabel->"In[48]:=",ExpressionUUID->"63d011f4-6fe2-458c-a66b-db5b9b0aa1e9"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{
      RowBox[{"-", "0.017463581493885983`"}], "+", 
      RowBox[{"K1", " ", 
       RowBox[{"(", 
        RowBox[{"1.4719712028774494`", "\[VeryThinSpace]", "-", 
         RowBox[{"2.2735607785755265`", " ", "K2"}], "-", 
         RowBox[{"0.5469089907989668`", " ", "K3"}], "-", 
         RowBox[{"36.898698032189955`", " ", "K4"}]}], ")"}]}]}], 
     RowBox[{"15.529171715973185`", "\[VeryThinSpace]", "+", 
      RowBox[{"K1", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "18.30791703010167`"}], "-", 
         RowBox[{"4.798801062677615`", " ", "K2"}], "-", 
         RowBox[{"7.735111816264375`", " ", "K3"}], "-", 
         RowBox[{"253.38545015277896`", " ", "K4"}]}], ")"}]}]}]},
    {
     RowBox[{
      RowBox[{"-", "0.06437529583713276`"}], "+", 
      RowBox[{"K1", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "0.0792050841852389`"}], "-", 
         RowBox[{"0.014779616994087988`", " ", "K2"}], "-", 
         RowBox[{"0.030835394237521893`", " ", "K3"}], "-", 
         RowBox[{"0.9674048783136874`", " ", "K4"}]}], ")"}]}]}], 
     RowBox[{
      RowBox[{"-", "0.017463581493886583`"}], "+", 
      RowBox[{"K1", " ", 
       RowBox[{"(", 
        RowBox[{"1.4719712028774505`", "\[VeryThinSpace]", "-", 
         RowBox[{"2.273560778575529`", " ", "K2"}], "-", 
         RowBox[{"0.5469089907989706`", " ", "K3"}], "-", 
         RowBox[{"36.89869803219009`", " ", "K4"}]}], ")"}]}]}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[49]//TableForm=",ExpressionUUID->"92957089-2ca5-442b-a205-\
3b77382189c9"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"0.729370760341835`", "\[VeryThinSpace]", "+", 
      RowBox[{"K1", " ", 
       RowBox[{"(", 
        RowBox[{"1.038568339350257`", "\[VeryThinSpace]", "+", 
         RowBox[{"1.283684679057721`", " ", "K2"}], "+", 
         RowBox[{"2.032207488993371`", " ", "K3"}], "+", 
         RowBox[{"47.57060367384934`", " ", "K4"}]}], ")"}]}]}], 
     RowBox[{"6.558057202310845`", "\[VeryThinSpace]", "+", 
      RowBox[{"K1", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "0.2595851203014288`"}], "+", 
         RowBox[{"2.1557697451941973`", " ", "K2"}], "+", 
         RowBox[{"7.639893975650377`", " ", "K3"}], "+", 
         RowBox[{"154.66514966343763`", " ", "K4"}]}], ")"}]}]}]},
    {
     RowBox[{
      RowBox[{"-", "0.07136538757140751`"}], "+", 
      RowBox[{"K1", " ", 
       RowBox[{"(", 
        RowBox[{"0.22818912976732278`", "\[VeryThinSpace]", "+", 
         RowBox[{"0.30899570126857784`", " ", "K2"}], "+", 
         RowBox[{"0.5351721293585217`", " ", "K3"}], "+", 
         RowBox[{"12.26444823692769`", " ", "K4"}]}], ")"}]}]}], 
     RowBox[{"0.7293707603418367`", "\[VeryThinSpace]", "+", 
      RowBox[{"K1", " ", 
       RowBox[{"(", 
        RowBox[{"1.0385683393502527`", "\[VeryThinSpace]", "+", 
         RowBox[{"1.2836846790577214`", " ", "K2"}], "+", 
         RowBox[{"2.032207488993364`", " ", "K3"}], "+", 
         RowBox[{"47.570603673849355`", " ", "K4"}]}], ")"}]}]}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[50]//TableForm=",ExpressionUUID->"abe48ed0-88b3-492d-a885-\
9df9716f9f3b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compute", " ", "parameter", " ", "dependent", " ", "tunes"}], " ",
    "*)"}], "\n", 
  RowBox[{
   RowBox[{"Collect", "[", 
    RowBox[{
     RowBox[{"I$EXPAND", "[", 
      RowBox[{"Divide", "[", 
       RowBox[{
        RowBox[{"ArcCos", "[", 
         RowBox[{"Divide", "[", 
          RowBox[{
           RowBox[{"Tr", "[", 
            RowBox[{"Take", "[", 
             RowBox[{"MATRIX", ",", 
              RowBox[{"List", "[", 
               RowBox[{"1", ",", "2"}], "]"}], ",", 
              RowBox[{"List", "[", 
               RowBox[{"1", ",", "2"}], "]"}]}], "]"}], "]"}], ",", "2"}], 
          "]"}], "]"}], ",", 
        RowBox[{"Times", "[", 
         RowBox[{"2", ",", "Pi"}], "]"}]}], "]"}], "]"}], ",", "K1", ",", 
     "Expand"}], "]"}], "\n", 
   RowBox[{"Collect", "[", 
    RowBox[{
     RowBox[{"I$EXPAND", "[", 
      RowBox[{"Divide", "[", 
       RowBox[{
        RowBox[{"ArcCos", "[", 
         RowBox[{"Divide", "[", 
          RowBox[{
           RowBox[{"Tr", "[", 
            RowBox[{"Take", "[", 
             RowBox[{"MATRIX", ",", 
              RowBox[{"List", "[", 
               RowBox[{"3", ",", "4"}], "]"}], ",", 
              RowBox[{"List", "[", 
               RowBox[{"3", ",", "4"}], "]"}]}], "]"}], "]"}], ",", "2"}], 
          "]"}], "]"}], ",", 
        RowBox[{"Times", "[", 
         RowBox[{"2", ",", "Pi"}], "]"}]}], "]"}], "]"}], ",", "K1", ",", 
     "Expand"}], "]"}]}]}]], "Code",
 CellLabel->"In[51]:=",ExpressionUUID->"95443915-03cd-4ead-8c22-0836e0855042"],

Cell[BoxData[
 RowBox[{"0.2527795566143744`", "\[VeryThinSpace]", "+", 
  RowBox[{"K1", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "0.23430722487102762`"}], "+", 
     RowBox[{"0.3619036266214212`", " ", "K2"}], "+", 
     RowBox[{"0.08705654542739688`", " ", "K3"}], "+", 
     RowBox[{"5.873505894935833`", " ", "K4"}]}], ")"}]}]}]], "Output",
 CellLabel->"Out[51]=",ExpressionUUID->"e306e369-63ea-46e4-9fa9-c9047b061c14"],

Cell[BoxData[
 RowBox[{"0.1199064761559419`", "\[VeryThinSpace]", "+", 
  RowBox[{"K1", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "0.2416149462233856`"}], "-", 
     RowBox[{"0.2986393797565165`", " ", "K2"}], "-", 
     RowBox[{"0.4727774615920594`", " ", "K3"}], "-", 
     RowBox[{"11.066935523628414`", " ", "K4"}]}], ")"}]}]}]], "Output",
 CellLabel->"Out[52]=",ExpressionUUID->"4c8b172b-d394-47bb-b1d7-fe11ffb6b752"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-11:  (COMPILE) FODO ring nonlinear Taylor map", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"9f175500-f3cd-40ba-9ce8-43ac19e12270"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[1]:=",ExpressionUUID->"727f0df2-adb8-499a-8413-8f5d87b62b63"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "4", "D", " ", "phase", " ", "space", " ", "with", " ", "4", " ", 
    "deviation", " ", "parameters", " ", 
    RowBox[{"(", 
     RowBox[{
     "3", " ", "sextupole", " ", "amplitudes", " ", "and", " ", "momentum", 
      " ", "deviation"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"K1", " ", "--"}], " ", "deviation"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"K2", " ", "--"}], " ", "SF", " ", "sextupole", " ", 
    "amplutude"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"K3", " ", "--"}], " ", "SD", " ", "sextupole", " ", 
    "amplutude"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"K4", " ", "--"}], " ", "BM", " ", "sextupole", " ", 
    "amplutude"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", 
   RowBox[{"\"\<PROJECT\>\"", ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "]"}], 
    ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "]"}], ",", "0", ",", 
    RowBox[{"List", "[", "]"}]}], "]"}]}]], "Code",
 CellLabel->"In[2]:=",ExpressionUUID->"339dbe0f-9a41-47f2-9785-177fa5d98126"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "2", ",", "6", ",", "4", ",", "0", ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"20c9abfc-bf49-4717-bebd-fa31eae9138a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "generic", " ", "parameters"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ARC", " ", "=", " ", "3.0"}], " ", ";"}], "                    ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "bend"}], " ", "arc", " ", "length"}], " ", "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"ANG", " ", "=", " ", "0.1308996938995747"}], " ", ";"}], "     ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "bend"}], " ", "angle"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"RAD", " ", "=", " ", 
     RowBox[{"ARC", "/", "ANG"}]}], " ", ";"}], "                ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "bend"}], " ", "radius"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"KBM", " ", "=", " ", "0.015"}], " ", ";"}], "                  ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "bend"}], " ", "quadrupole", " ", "amplitude"}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"KQF", " ", "=", " ", "0.19"}], " ", ";"}], "                   ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "QF"}], " ", "amplitude"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"KQD", " ", "=", " ", 
     RowBox[{"-", " ", "0.21"}]}], " ", ";"}], "                 ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "QD"}], " ", "amplitude"}], " ", "*)"}]}]}]], "Code",
 CellLabel->"In[3]:=",ExpressionUUID->"b1d11d25-99b3-4938-bdad-cd16f222c16f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Define", " ", "maps"}], ",", " ", 
    RowBox[{"sequencies", " ", "and", " ", "elements"}]}], " ", "*)"}], "\n", 
  "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], "*", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"P1", "^", "2"}], "+", 
            RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
          RowBox[{"(", 
           RowBox[{"1", "+", "K1"}], ")"}]}]}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Q1", "^", "2"}], "-", 
           RowBox[{"Q2", "^", "2"}]}], ")"}]}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "6"}], "*", 
         RowBox[{"(", 
          RowBox[{"KS", "+", "K2", "+", "K3"}], ")"}], "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Q1", "^", "3"}], "-", 
           RowBox[{"3", "*", "Q1", "*", 
            RowBox[{"Q2", "^", "2"}]}]}], ")"}]}], "}"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"1", "/", "2"}], "*", 
          RowBox[{
           RowBox[{"Q1", "^", "2"}], "/", 
           RowBox[{"R", "^", "2"}]}]}], "-", 
         RowBox[{
          RowBox[{"1", "/", "R"}], "*", "Q1", "*", "K1"}], "+", 
         RowBox[{
          RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Q1", "^", "2"}], "-", 
            RowBox[{"Q2", "^", "2"}]}], ")"}]}], "+", 
         RowBox[{
          RowBox[{"1", "/", "6"}], "*", 
          RowBox[{"(", 
           RowBox[{"KS", "+", "K4"}], ")"}], "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Q1", "^", "3"}], "-", 
            RowBox[{"3", "*", "Q1", "*", 
             RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], "}"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", "0"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<BEND\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<ELEMENT\>\"", "]"}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"{", "}"}], "}"}], "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", "\"\<QUAD\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KQ", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "\"\<SEXT\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KS", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", "\"\<BEND\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}]}], "}"}], "}"}]}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "BEND"}], "]"}], " ", ";"}]}]}]], "Code",\

 CellLabel->"In[9]:=",ExpressionUUID->"1999fcdf-3d47-4352-891b-4c40dcebaf87"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "code"}], " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{"I$CODE", "[", 
    RowBox[{"Rule", "[", 
     RowBox[{"\"\<LEVEL\>\"", ",", 
      RowBox[{"Plus", "[", "1", "]"}]}], "]"}], "]"}], " ", ";"}]}]], "Code",
 CellLabel->"In[36]:=",ExpressionUUID->"46945c0c-d836-4a97-86ad-27a33f9aa497"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Compile", " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"DR", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<DRIF\>\"", ",", 
        RowBox[{"{", "0.45", "}"}], ",", 
        RowBox[{"{", "0.45", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QF", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<QUAD\>\"", ",", 
        RowBox[{"{", "0.05", "}"}], ",", 
        RowBox[{"{", "0.50", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QD", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<QUAD\>\"", ",", 
        RowBox[{"{", "0.05", "}"}], ",", 
        RowBox[{"{", "0.50", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SF", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<SEXT\>\"", ",", 
        RowBox[{"{", "0.01", "}"}], ",", 
        RowBox[{"{", "0.10", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SD", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<SEXT\>\"", ",", 
        RowBox[{"{", "0.01", "}"}], ",", 
        RowBox[{"{", "0.10", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BM", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<BEND\>\"", ",", 
        RowBox[{"{", "0.05", "}"}], ",", 
        RowBox[{"{", "3.00", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}]}], "]"}], "]"}]}],
     " ", ";"}]}]}]], "Code",
 CellLabel->"In[37]:=",ExpressionUUID->"c1776128-c894-4e38-a6e3-0ab324a8b97b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "FODO", " ", "ring", " ", 
    RowBox[{"(", "compiled", ")"}]}], " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ClearAll", "[", "FODO", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"FODO", " ", "=", " ", 
     RowBox[{"Compile", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"STATE", ",", "_Real", ",", "1"}], "}"}], "}"}], ",", "\n", 
       "\t", 
       RowBox[{"Block", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"{", "RESULT", "}"}], ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"RESULT", " ", "=", " ", "STATE"}], " ", ";", "\n", "\t\t", 
          
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"QF", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "KQF", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"SF", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "0.0", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"BM", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", 
              RowBox[{"RAD", ",", "KBM", ",", "0.0"}], "]"}]}], "]"}]}], " ", 
          ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"SD", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "0.0", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"QD", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "KQD", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"QD", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "KQD", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"SD", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "0.0", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"BM", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", 
              RowBox[{"RAD", ",", "KBM", ",", "0.0"}], "]"}]}], "]"}]}], " ", 
          ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"SF", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "0.0", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"DR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"QF", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "KQF", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", "RESULT"}]}], "\n", "\t", "]"}], ",", "\n", "\t", 
       RowBox[{"Rule", "[", 
        RowBox[{"CompilationTarget", ",", "\"\<C\>\""}], "]"}], ",", "\n", 
       "    ", 
       RowBox[{"Rule", "[", 
        RowBox[{"RuntimeOptions", ",", 
         RowBox[{"List", "[", 
          RowBox[{"\"\<Speed\>\"", ",", 
           RowBox[{"Rule", "[", 
            RowBox[{"\"\<EvaluateSymbolically\>\"", ",", "False"}], "]"}]}], 
          "]"}]}], "]"}], ",", "\n", "    ", 
       RowBox[{"Rule", "[", 
        RowBox[{"CompilationOptions", ",", 
         RowBox[{"List", "[", 
          RowBox[{
           RowBox[{"Rule", "[", 
            RowBox[{"\"\<ExpressionOptimization\>\"", ",", "True"}], "]"}], 
           ",", 
           RowBox[{"Rule", "[", 
            RowBox[{"\"\<InlineExternalDefinitions\>\"", ",", "True"}], 
            "]"}]}], "]"}]}], "]"}], ",", "\n", "    ", 
       RowBox[{"Rule", "[", 
        RowBox[{"RuntimeAttributes", ",", 
         RowBox[{"List", "[", "Listable", "]"}]}], "]"}], ",", "\n", "    ", 
       RowBox[{"Rule", "[", 
        RowBox[{"Parallelization", ",", "True"}], "]"}]}], "\n", "]"}]}], " ",
     ";"}]}]}]], "Code",
 CellLabel->"In[43]:=",ExpressionUUID->"34d8ddcc-7974-4e5c-8ecc-4e9ce5e4808f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Compute", " ", "parameter", " ", "dependent", " ", "transverse", " ", 
    "closed", " ", "orbit"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ORBIT", " ", "=", " ", 
     RowBox[{"I$ORBIT", "[", 
      RowBox[{"I$ORDER", ",", "FODO"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"ORBIT", " ", "//", " ", "Chop"}], " ", "//", " ", 
    "N"}]}]}]], "Code",
 CellLabel->"In[45]:=",ExpressionUUID->"0ae289dd-e7f2-44fa-86e2-5abb3d914341"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}]], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"ce2938e9-0f82-4bd8-8e7f-180038a6aadb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Test", " ", "closed", " ", "orbit"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$MAKE$COMPONENTS", "[", 
     RowBox[{"FODO", "[", 
      RowBox[{"I$MAKE$STATE", "[", "ORBIT", "]"}], "]"}], "]"}], " ", "//", 
    " ", "Chop"}], " ", "//", " ", "N"}]}]], "Code",
 CellLabel->"In[47]:=",ExpressionUUID->"08ac2811-0e20-4a36-8008-753cc7529bf7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}]], "Output",
 CellLabel->"Out[47]=",ExpressionUUID->"bc9c59f9-447f-4f35-a3a1-43cf5b9bf905"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Compute", " ", "one", " ", "turn", " ", "matrix", " ", "on", " ", 
    "closed", " ", "orbit"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"I$MATRIX", "[", 
      RowBox[{"ORBIT", ",", "FODO"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"TableForm", "[", "MATRIX", "]"}]}]}]], "Code",
 CellLabel->"In[51]:=",ExpressionUUID->"41b15a3c-db7a-4819-a5d5-5ae3f35b1776"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"-", "0.017463581493885987`"}], "15.529171715973183`", "0.`", 
     "0.`"},
    {
     RowBox[{"-", "0.06437529583713276`"}], 
     RowBox[{"-", "0.01746358149388594`"}], "0.`", "0.`"},
    {"0.`", "0.`", "0.729370760341835`", "6.558057202310839`"},
    {"0.`", "0.`", 
     RowBox[{"-", "0.07136538757140751`"}], "0.7293707603418359`"}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[52]//TableForm=",ExpressionUUID->"fd95725b-7247-4c0e-b73a-\
94d863db263d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Generate", " ", "nonlinear", " ", "map", " ", "around", " ", "closed", 
    " ", "orbit"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$STATE", "[", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{"0.0", ",", "0.5", ",", 
         RowBox[{"-", "0.75"}], ",", "0.05"}], "]"}], ",", 
       RowBox[{"ORBIT", "+", "I$VARIABLES$CANONICAL"}]}], "]"}]}], " ", ";"}],
    "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "SERIES", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SERIES", " ", "=", " ", 
     RowBox[{"FODO", "[", "INITIAL", "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SERIES", " ", "=", " ", 
     RowBox[{"I$MAKE$COMPONENTS", "[", "SERIES", "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SERIES", " ", "=", " ", 
     RowBox[{"N", "[", 
      RowBox[{"Chop", "[", "SERIES", "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"TableForm", "[", "SERIES", "]"}], "\n", 
   RowBox[{
    RowBox[{"SERIES", " ", "=", " ", 
     RowBox[{"Apply", "[", 
      RowBox[{"Function", ",", 
       RowBox[{"List", "[", 
        RowBox[{"I$VARIABLES$CANONICAL", ",", "SERIES"}], "]"}]}], "]"}]}], 
    " ", ";"}]}]}]], "Code",
 CellLabel->"In[62]:=",ExpressionUUID->"bc33bd0b-6063-4b4a-8f1e-71ba70633577"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{
       RowBox[{"15.529171715973183`", " ", "P1"}], "-", 
       RowBox[{"22.59641508511693`", " ", 
        SuperscriptBox["P1", "2"]}], "+", 
       RowBox[{"5.5298439665135835`", " ", 
        SuperscriptBox["P1", "3"]}], "+", 
       RowBox[{"8.925671632115929`", " ", 
        SuperscriptBox["P1", "4"]}], "-", 
       RowBox[{"10.732376553845446`", " ", 
        SuperscriptBox["P1", "5"]}], "+", 
       RowBox[{"4.4945784175336145`", " ", 
        SuperscriptBox["P1", "6"]}], "+", 
       RowBox[{"2.8179268962857202`", " ", 
        SuperscriptBox["P2", "2"]}], "-", 
       RowBox[{"6.479961195770353`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"]}], "+", 
       RowBox[{"3.0536250649746868`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "2"]}], "-", 
       RowBox[{"4.668185095264977`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["P2", "2"]}], "-", 
       RowBox[{"0.7391060315295095`", " ", 
        SuperscriptBox["P1", "4"], " ", 
        SuperscriptBox["P2", "2"]}], "-", 
       RowBox[{"5.963722759300993`", " ", 
        SuperscriptBox["P2", "4"]}], "-", 
       RowBox[{"2.0948033261126957`", " ", "P1", " ", 
        SuperscriptBox["P2", "4"]}], "+", 
       RowBox[{"1.504220558632496`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "4"]}], "+", 
       RowBox[{"2.2654393514872484`", " ", 
        SuperscriptBox["P2", "6"]}], "-", 
       RowBox[{"0.017463581493885987`", " ", "Q1"}], "-", 
       RowBox[{"2.859367022900737`", " ", "P1", " ", "Q1"}], "+", 
       RowBox[{"5.7565520580782295`", " ", 
        SuperscriptBox["P1", "2"], " ", "Q1"}], "+", 
       RowBox[{"1.496170614946344`", " ", 
        SuperscriptBox["P1", "3"], " ", "Q1"}], "-", 
       RowBox[{"7.584776839222262`", " ", 
        SuperscriptBox["P1", "4"], " ", "Q1"}], "+", 
       RowBox[{"6.998927355228591`", " ", 
        SuperscriptBox["P1", "5"], " ", "Q1"}], "-", 
       RowBox[{"0.5925156472328893`", " ", 
        SuperscriptBox["P2", "2"], " ", "Q1"}], "+", 
       RowBox[{"1.2851117423867888`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", "Q1"}], "+", 
       RowBox[{"0.6473574026241499`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "2"], " ", "Q1"}], "-", 
       RowBox[{"1.5588818016399473`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["P2", "2"], " ", "Q1"}], "-", 
       RowBox[{"3.115557901921531`", " ", 
        SuperscriptBox["P2", "4"], " ", "Q1"}], "-", 
       RowBox[{"0.8223554642090503`", " ", "P1", " ", 
        SuperscriptBox["P2", "4"], " ", "Q1"}], "-", 
       RowBox[{"0.704109408001556`", " ", 
        SuperscriptBox["Q1", "2"]}], "+", 
       RowBox[{"1.8416695704180526`", " ", "P1", " ", 
        SuperscriptBox["Q1", "2"]}], "-", 
       RowBox[{"0.5122725923320924`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q1", "2"]}], "-", 
       RowBox[{"2.6078416578407264`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["Q1", "2"]}], "+", 
       RowBox[{"4.098846286172119`", " ", 
        SuperscriptBox["P1", "4"], " ", 
        SuperscriptBox["Q1", "2"]}], "-", 
       RowBox[{"0.00850234861930424`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "2"]}], "-", 
       RowBox[{"0.08720678806516334`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "2"]}], "+", 
       RowBox[{"0.19080181220914771`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "2"]}], "-", 
       RowBox[{"0.8930565223763085`", " ", 
        SuperscriptBox["P2", "4"], " ", 
        SuperscriptBox["Q1", "2"]}], "+", 
       RowBox[{"0.03182835550451868`", " ", 
        SuperscriptBox["Q1", "3"]}], "-", 
       RowBox[{"0.2622571843385339`", " ", "P1", " ", 
        SuperscriptBox["Q1", "3"]}], "-", 
       RowBox[{"0.32262973088025304`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q1", "3"]}], "+", 
       RowBox[{"1.1907794919524501`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["Q1", "3"]}], "-", 
       RowBox[{"0.09469990811051496`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "3"]}], "-", 
       RowBox[{"0.11426596501086445`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "3"]}], "-", 
       RowBox[{"0.037637173478806026`", " ", 
        SuperscriptBox["Q1", "4"]}], "-", 
       RowBox[{"0.011012332941257169`", " ", "P1", " ", 
        SuperscriptBox["Q1", "4"]}], "+", 
       RowBox[{"0.1961684696731963`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q1", "4"]}], "-", 
       RowBox[{"0.01996205310843477`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "4"]}], "+", 
       RowBox[{"0.0007219406041603165`", " ", 
        SuperscriptBox["Q1", "5"]}], "+", 
       RowBox[{"0.013950031644841947`", " ", "P1", " ", 
        SuperscriptBox["Q1", "5"]}], "+", 
       RowBox[{"0.00033287584642230307`", " ", 
        SuperscriptBox["Q1", "6"]}], "+", 
       RowBox[{"2.7975740647259486`", " ", "P2", " ", "Q2"}], "-", 
       RowBox[{"8.718409068112692`", " ", "P1", " ", "P2", " ", "Q2"}], "+", 
       RowBox[{"2.324225591341178`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", "Q2"}], "+", 
       RowBox[{"4.3049438619750084`", " ", 
        SuperscriptBox["P1", "3"], " ", "P2", " ", "Q2"}], "-", 
       RowBox[{"8.393782094390666`", " ", 
        SuperscriptBox["P1", "4"], " ", "P2", " ", "Q2"}], "-", 
       RowBox[{"6.336370152573137`", " ", 
        SuperscriptBox["P2", "3"], " ", "Q2"}], "-", 
       RowBox[{"3.8186747999838246`", " ", "P1", " ", 
        SuperscriptBox["P2", "3"], " ", "Q2"}], "-", 
       RowBox[{"0.2928225312207847`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "3"], " ", "Q2"}], "+", 
       RowBox[{"4.005801211955019`", " ", 
        SuperscriptBox["P2", "5"], " ", "Q2"}], "-", 
       RowBox[{"0.24287678781448765`", " ", "P2", " ", "Q1", " ", "Q2"}], "+", 
       RowBox[{
       "1.103001865329079`", " ", "P1", " ", "P2", " ", "Q1", " ", "Q2"}], 
       "+", 
       RowBox[{"1.739797948782593`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", "Q1", " ", "Q2"}], "-", 
       RowBox[{"5.770276200032216`", " ", 
        SuperscriptBox["P1", "3"], " ", "P2", " ", "Q1", " ", "Q2"}], "-", 
       RowBox[{"4.176324245233726`", " ", 
        SuperscriptBox["P2", "3"], " ", "Q1", " ", "Q2"}], "-", 
       RowBox[{"1.8542772733209483`", " ", "P1", " ", 
        SuperscriptBox["P2", "3"], " ", "Q1", " ", "Q2"}], "+", 
       RowBox[{"0.1658173095200215`", " ", "P2", " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "+", 
       RowBox[{"0.06122761144874932`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "-", 
       RowBox[{"1.0928386212281989`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "-", 
       RowBox[{"1.435076494505542`", " ", 
        SuperscriptBox["P2", "3"], " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "-", 
       RowBox[{"0.0673796035205941`", " ", "P2", " ", 
        SuperscriptBox["Q1", "3"], " ", "Q2"}], "-", 
       RowBox[{"0.1818532908878977`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q1", "3"], " ", "Q2"}], "-", 
       RowBox[{"0.02117762148097318`", " ", "P2", " ", 
        SuperscriptBox["Q1", "4"], " ", "Q2"}], "+", 
       RowBox[{"1.040557086608569`", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"3.0736586001804818`", " ", "P1", " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"0.646407225571257`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"2.3046958103290844`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"2.9801697301386794`", " ", 
        SuperscriptBox["P1", "4"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"3.0488245786288917`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"1.794974437978318`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"0.018617259605230987`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"2.942172319022655`", " ", 
        SuperscriptBox["P2", "4"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.07755362444024376`", " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"0.3350037634795662`", " ", "P1", " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"0.5288750848290543`", " ", 
        SuperscriptBox["P1", "2"], " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"1.7394374465126092`", " ", 
        SuperscriptBox["P1", "3"], " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"1.8781557749806428`", " ", 
        SuperscriptBox["P2", "2"], " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"1.198522761849422`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"0.10262207880166074`", " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"0.018463932532242277`", " ", "P1", " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.4126470755557634`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.811458178466268`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.011999878993945412`", " ", 
        SuperscriptBox["Q1", "3"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.04881026314695168`", " ", "P1", " ", 
        SuperscriptBox["Q1", "3"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.004761815223908332`", " ", 
        SuperscriptBox["Q1", "4"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.8736016244388551`", " ", "P2", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.2780321209119015`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q2", "3"]}], "+", 
       RowBox[{"0.6908538550366385`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", 
        SuperscriptBox["Q2", "3"]}], "+", 
       RowBox[{"1.1413018359421916`", " ", 
        SuperscriptBox["P2", "3"], " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.36132780821887495`", " ", "P2", " ", "Q1", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.2226930913521764`", " ", "P1", " ", "P2", " ", "Q1", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.18324322440480123`", " ", "P2", " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.12193640532830372`", " ", 
        SuperscriptBox["Q2", "4"]}], "-", 
       RowBox[{"0.003634538604363292`", " ", "P1", " ", 
        SuperscriptBox["Q2", "4"]}], "+", 
       RowBox[{"0.19891391134112402`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q2", "4"]}], "+", 
       RowBox[{"0.2507008769628495`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q2", "4"]}], "-", 
       RowBox[{"0.02760265201546734`", " ", "Q1", " ", 
        SuperscriptBox["Q2", "4"]}], "-", 
       RowBox[{"0.0031902853963433815`", " ", "P1", " ", "Q1", " ", 
        SuperscriptBox["Q2", "4"]}], "-", 
       RowBox[{"0.014132451369368946`", " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "4"]}], "+", 
       RowBox[{"0.031232535802593622`", " ", "P2", " ", 
        SuperscriptBox["Q2", "5"]}], "+", 
       RowBox[{"0.0019253187513523795`", " ", 
        SuperscriptBox["Q2", "6"]}]}]},
     {
      RowBox[{
       RowBox[{
        RowBox[{"-", "0.01746358149388594`"}], " ", "P1"}], "-", 
       RowBox[{"10.959203298201091`", " ", 
        SuperscriptBox["P1", "2"]}], "+", 
       RowBox[{"8.170562948534538`", " ", 
        SuperscriptBox["P1", "3"]}], "+", 
       RowBox[{"2.2642157266575413`", " ", 
        SuperscriptBox["P1", "4"]}], "-", 
       RowBox[{"7.597394468637037`", " ", 
        SuperscriptBox["P1", "5"]}], "+", 
       RowBox[{"4.651696622298301`", " ", 
        SuperscriptBox["P1", "6"]}], "+", 
       RowBox[{"2.1134908250822866`", " ", 
        SuperscriptBox["P2", "2"]}], "-", 
       RowBox[{"0.4139126852782077`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"]}], "+", 
       RowBox[{"2.0686546819069846`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "2"]}], "-", 
       RowBox[{"7.4135850095738975`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["P2", "2"]}], "-", 
       RowBox[{"0.17289177994112676`", " ", 
        SuperscriptBox["P1", "4"], " ", 
        SuperscriptBox["P2", "2"]}], "-", 
       RowBox[{"3.0145752474593204`", " ", 
        SuperscriptBox["P2", "4"]}], "-", 
       RowBox[{"1.9645054480312902`", " ", "P1", " ", 
        SuperscriptBox["P2", "4"]}], "-", 
       RowBox[{"0.27316564208058103`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "4"]}], "+", 
       RowBox[{"1.2839464089219232`", " ", 
        SuperscriptBox["P2", "6"]}], "-", 
       RowBox[{"0.06437529583713276`", " ", "Q1"}], "-", 
       RowBox[{"0.15948005395168294`", " ", "P1", " ", "Q1"}], "+", 
       RowBox[{"3.6064240372223253`", " ", 
        SuperscriptBox["P1", "2"], " ", "Q1"}], "-", 
       RowBox[{"1.8364197498541206`", " ", 
        SuperscriptBox["P1", "3"], " ", "Q1"}], "-", 
       RowBox[{"3.694623184968635`", " ", 
        SuperscriptBox["P1", "4"], " ", "Q1"}], "+", 
       RowBox[{"5.858595142845678`", " ", 
        SuperscriptBox["P1", "5"], " ", "Q1"}], "+", 
       RowBox[{"0.5152990061586585`", " ", 
        SuperscriptBox["P2", "2"], " ", "Q1"}], "+", 
       RowBox[{"1.390125450147656`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", "Q1"}], "-", 
       RowBox[{"0.9321668772802509`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "2"], " ", "Q1"}], "+", 
       RowBox[{"0.0926204465327739`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["P2", "2"], " ", "Q1"}], "-", 
       RowBox[{"1.6452321495948719`", " ", 
        SuperscriptBox["P2", "4"], " ", "Q1"}], "-", 
       RowBox[{"0.743223085753741`", " ", "P1", " ", 
        SuperscriptBox["P2", "4"], " ", "Q1"}], "-", 
       RowBox[{"0.005045180898852137`", " ", 
        SuperscriptBox["Q1", "2"]}], "+", 
       RowBox[{"0.9968584988022564`", " ", "P1", " ", 
        SuperscriptBox["Q1", "2"]}], "-", 
       RowBox[{"1.0938323290390524`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q1", "2"]}], "-", 
       RowBox[{"0.7153898665254561`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["Q1", "2"]}], "+", 
       RowBox[{"2.886928423400694`", " ", 
        SuperscriptBox["P1", "4"], " ", 
        SuperscriptBox["Q1", "2"]}], "+", 
       RowBox[{"0.061019494877572446`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "2"]}], "-", 
       RowBox[{"0.06821304061221371`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "2"]}], "+", 
       RowBox[{"0.8479937684882541`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "2"]}], "-", 
       RowBox[{"0.4479951488229859`", " ", 
        SuperscriptBox["P2", "4"], " ", 
        SuperscriptBox["Q1", "2"]}], "+", 
       RowBox[{"0.006336731130622106`", " ", 
        SuperscriptBox["Q1", "3"]}], "-", 
       RowBox[{"0.18743625554330873`", " ", "P1", " ", 
        SuperscriptBox["Q1", "3"]}], "+", 
       RowBox[{"0.08418519523490386`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q1", "3"]}], "+", 
       RowBox[{"0.6507047563522125`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["Q1", "3"]}], "-", 
       RowBox[{"0.06056256659474905`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "3"]}], "+", 
       RowBox[{"0.050860268261701314`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "3"]}], "-", 
       RowBox[{"0.021846997171569547`", " ", 
        SuperscriptBox["Q1", "4"]}], "+", 
       RowBox[{"0.029923425049326477`", " ", "P1", " ", 
        SuperscriptBox["Q1", "4"]}], "+", 
       RowBox[{"0.07403586358789996`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q1", "4"]}], "-", 
       RowBox[{"0.01000513787839705`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "4"]}], "+", 
       RowBox[{"0.001214749236450646`", " ", 
        SuperscriptBox["Q1", "5"]}], "+", 
       RowBox[{"0.0006405666562391379`", " ", "P1", " ", 
        SuperscriptBox["Q1", "5"]}], "-", 
       RowBox[{"0.0002860662560699276`", " ", 
        SuperscriptBox["Q1", "6"]}], "+", 
       RowBox[{"0.6074596742713678`", " ", "P2", " ", "Q2"}], "-", 
       RowBox[{"2.867345554572269`", " ", "P1", " ", "P2", " ", "Q2"}], "+", 
       RowBox[{"4.154065249156462`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", "Q2"}], "-", 
       RowBox[{"1.216540993258125`", " ", 
        SuperscriptBox["P1", "3"], " ", "P2", " ", "Q2"}], "-", 
       RowBox[{"6.44224814426762`", " ", 
        SuperscriptBox["P1", "4"], " ", "P2", " ", "Q2"}], "-", 
       RowBox[{"3.0056677079852676`", " ", 
        SuperscriptBox["P2", "3"], " ", "Q2"}], "-", 
       RowBox[{"2.8670658757723677`", " ", "P1", " ", 
        SuperscriptBox["P2", "3"], " ", "Q2"}], "-", 
       RowBox[{"3.214346781893314`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "3"], " ", "Q2"}], "+", 
       RowBox[{"2.0948763269308612`", " ", 
        SuperscriptBox["P2", "5"], " ", "Q2"}], "+", 
       RowBox[{"0.5013260951938208`", " ", "P2", " ", "Q1", " ", "Q2"}], "+", 
       
       RowBox[{
       "1.5513700263826913`", " ", "P1", " ", "P2", " ", "Q1", " ", "Q2"}], 
       "-", 
       RowBox[{"0.6503926016581667`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", "Q1", " ", "Q2"}], "-", 
       RowBox[{"3.330581627143248`", " ", 
        SuperscriptBox["P1", "3"], " ", "P2", " ", "Q1", " ", "Q2"}], "-", 
       RowBox[{"2.1190821877552013`", " ", 
        SuperscriptBox["P2", "3"], " ", "Q1", " ", "Q2"}], "-", 
       RowBox[{"1.8461089287001395`", " ", "P1", " ", 
        SuperscriptBox["P2", "3"], " ", "Q1", " ", "Q2"}], "+", 
       RowBox[{"0.2075030989995466`", " ", "P2", " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "-", 
       RowBox[{"0.16413705332428008`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "-", 
       RowBox[{"0.1439776571968004`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "-", 
       RowBox[{"0.7381002735971249`", " ", 
        SuperscriptBox["P2", "3"], " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "-", 
       RowBox[{"0.04763946494531946`", " ", "P2", " ", 
        SuperscriptBox["Q1", "3"], " ", "Q2"}], "+", 
       RowBox[{"0.013768845347013565`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q1", "3"], " ", "Q2"}], "-", 
       RowBox[{"0.0073295011312250686`", " ", "P2", " ", 
        SuperscriptBox["Q1", "4"], " ", "Q2"}], "+", 
       RowBox[{"0.04477740916024669`", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"1.394214004522197`", " ", "P1", " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"1.5108761446053547`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"0.5493855038929631`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"2.4214309157218086`", " ", 
        SuperscriptBox["P1", "4"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"1.377484756814752`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.9203263461839037`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"2.381702302658083`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"1.411350410620246`", " ", 
        SuperscriptBox["P2", "4"], " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"0.054187780797947414`", " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"0.4217756393181122`", " ", "P1", " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.12652989840628137`", " ", 
        SuperscriptBox["P1", "2"], " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"1.1280424739361252`", " ", 
        SuperscriptBox["P1", "3"], " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.8722880607191722`", " ", 
        SuperscriptBox["P2", "2"], " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"1.3582856651914819`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"0.08944226557555027`", " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.06335992830381665`", " ", "P1", " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.16163595252635896`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.429610470022071`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.007961371903015487`", " ", 
        SuperscriptBox["Q1", "3"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.0013433839072161799`", " ", "P1", " ", 
        SuperscriptBox["Q1", "3"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.0010268269681090914`", " ", 
        SuperscriptBox["Q1", "4"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.4022791519045828`", " ", "P2", " ", 
        SuperscriptBox["Q2", "3"]}], "+", 
       RowBox[{"0.10797072844797256`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.3542431750244367`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", 
        SuperscriptBox["Q2", "3"]}], "+", 
       RowBox[{"0.5109768181010144`", " ", 
        SuperscriptBox["P2", "3"], " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.13903847977945633`", " ", "P2", " ", "Q1", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.3627120870863119`", " ", "P1", " ", "P2", " ", "Q1", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.10248440867544442`", " ", "P2", " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.05942124474532723`", " ", 
        SuperscriptBox["Q2", "4"]}], "+", 
       RowBox[{"0.06338917841506175`", " ", "P1", " ", 
        SuperscriptBox["Q2", "4"]}], "+", 
       RowBox[{"0.030549677081428046`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q2", "4"]}], "+", 
       RowBox[{"0.11725705892507178`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q2", "4"]}], "-", 
       RowBox[{"0.007500459336305346`", " ", "Q1", " ", 
        SuperscriptBox["Q2", "4"]}], "-", 
       RowBox[{"0.03036758514405519`", " ", "P1", " ", "Q1", " ", 
        SuperscriptBox["Q2", "4"]}], "-", 
       RowBox[{"0.008951678730104226`", " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "4"]}], "+", 
       RowBox[{"0.02004209739018905`", " ", "P2", " ", 
        SuperscriptBox["Q2", "5"]}], "+", 
       RowBox[{"0.0020642492775085905`", " ", 
        SuperscriptBox["Q2", "6"]}]}]},
     {
      RowBox[{
       RowBox[{"6.558057202310839`", " ", "P2"}], "+", 
       RowBox[{"14.236023778310816`", " ", "P1", " ", "P2"}], "-", 
       RowBox[{"18.869192606391756`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2"}], "-", 
       RowBox[{"28.606188464192726`", " ", 
        SuperscriptBox["P1", "3"], " ", "P2"}], "+", 
       RowBox[{"5.2102560302737`", " ", 
        SuperscriptBox["P1", "4"], " ", "P2"}], "+", 
       RowBox[{"14.377254805678454`", " ", 
        SuperscriptBox["P1", "5"], " ", "P2"}], "-", 
       RowBox[{"6.474550610344491`", " ", 
        SuperscriptBox["P2", "3"]}], "-", 
       RowBox[{"20.656927977689776`", " ", "P1", " ", 
        SuperscriptBox["P2", "3"]}], "-", 
       RowBox[{"8.496354347188483`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "3"]}], "+", 
       RowBox[{"20.322362082801604`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["P2", "3"]}], "-", 
       RowBox[{"0.3394070914517527`", " ", 
        SuperscriptBox["P2", "5"]}], "+", 
       RowBox[{"5.436538467575079`", " ", "P1", " ", 
        SuperscriptBox["P2", "5"]}], "+", 
       RowBox[{"0.9007184718372377`", " ", "P2", " ", "Q1"}], "-", 
       RowBox[{"1.3525776126359912`", " ", "P1", " ", "P2", " ", "Q1"}], "+", 
       
       RowBox[{"0.04256609036422533`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", "Q1"}], "+", 
       RowBox[{"11.858028318788863`", " ", 
        SuperscriptBox["P1", "3"], " ", "P2", " ", "Q1"}], "+", 
       RowBox[{"4.733918294184165`", " ", 
        SuperscriptBox["P1", "4"], " ", "P2", " ", "Q1"}], "-", 
       RowBox[{"4.018425017461514`", " ", 
        SuperscriptBox["P2", "3"], " ", "Q1"}], "-", 
       RowBox[{"3.942834490141144`", " ", "P1", " ", 
        SuperscriptBox["P2", "3"], " ", "Q1"}], "+", 
       RowBox[{"7.676169449118305`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "3"], " ", "Q1"}], "+", 
       RowBox[{"0.738354125206031`", " ", 
        SuperscriptBox["P2", "5"], " ", "Q1"}], "-", 
       RowBox[{"0.6392526990905993`", " ", "P2", " ", 
        SuperscriptBox["Q1", "2"]}], "+", 
       RowBox[{"1.1129582240813367`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q1", "2"]}], "+", 
       RowBox[{"4.588704616686818`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", 
        SuperscriptBox["Q1", "2"]}], "-", 
       RowBox[{"0.5383657974916263`", " ", 
        SuperscriptBox["P1", "3"], " ", "P2", " ", 
        SuperscriptBox["Q1", "2"]}], "-", 
       RowBox[{"0.22658225707736135`", " ", 
        SuperscriptBox["P2", "3"], " ", 
        SuperscriptBox["Q1", "2"]}], "+", 
       RowBox[{"0.7151060636421872`", " ", "P1", " ", 
        SuperscriptBox["P2", "3"], " ", 
        SuperscriptBox["Q1", "2"]}], "-", 
       RowBox[{"0.035704059261565974`", " ", "P2", " ", 
        SuperscriptBox["Q1", "3"]}], "+", 
       RowBox[{"0.16092519291477628`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q1", "3"]}], "-", 
       RowBox[{"0.964674306608863`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", 
        SuperscriptBox["Q1", "3"]}], "+", 
       RowBox[{"0.05955221733001464`", " ", 
        SuperscriptBox["P2", "3"], " ", 
        SuperscriptBox["Q1", "3"]}], "-", 
       RowBox[{"0.022392082764603544`", " ", "P2", " ", 
        SuperscriptBox["Q1", "4"]}], "-", 
       RowBox[{"0.20554805595085893`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q1", "4"]}], "-", 
       RowBox[{"0.006292596097646168`", " ", "P2", " ", 
        SuperscriptBox["Q1", "5"]}], "+", 
       RowBox[{"0.729370760341835`", " ", "Q2"}], "+", 
       RowBox[{"2.442673612904405`", " ", "P1", " ", "Q2"}], "-", 
       RowBox[{"3.518889391652334`", " ", 
        SuperscriptBox["P1", "2"], " ", "Q2"}], "-", 
       RowBox[{"9.00900344711559`", " ", 
        SuperscriptBox["P1", "3"], " ", "Q2"}], "-", 
       RowBox[{"1.0693394734675692`", " ", 
        SuperscriptBox["P1", "4"], " ", "Q2"}], "+", 
       RowBox[{"4.6301109630961435`", " ", 
        SuperscriptBox["P1", "5"], " ", "Q2"}], "-", 
       RowBox[{"3.2522512487768718`", " ", 
        SuperscriptBox["P2", "2"], " ", "Q2"}], "-", 
       RowBox[{"23.361611896167688`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", "Q2"}], "-", 
       RowBox[{"23.60834574059421`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "2"], " ", "Q2"}], "+", 
       RowBox[{"16.863202001046808`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["P2", "2"], " ", "Q2"}], "-", 
       RowBox[{"1.9029973017822848`", " ", 
        SuperscriptBox["P2", "4"], " ", "Q2"}], "+", 
       RowBox[{"6.109194157492153`", " ", "P1", " ", 
        SuperscriptBox["P2", "4"], " ", "Q2"}], "+", 
       RowBox[{"0.7447235082215338`", " ", "Q1", " ", "Q2"}], "+", 
       RowBox[{"1.006640475173433`", " ", "P1", " ", "Q1", " ", "Q2"}], "-", 
       RowBox[{"1.3563705496554663`", " ", 
        SuperscriptBox["P1", "2"], " ", "Q1", " ", "Q2"}], "+", 
       RowBox[{"1.7201162228838474`", " ", 
        SuperscriptBox["P1", "3"], " ", "Q1", " ", "Q2"}], "+", 
       RowBox[{"3.1239848105992483`", " ", 
        SuperscriptBox["P1", "4"], " ", "Q1", " ", "Q2"}], "-", 
       RowBox[{"4.130760193923632`", " ", 
        SuperscriptBox["P2", "2"], " ", "Q1", " ", "Q2"}], "-", 
       RowBox[{"7.14835555224083`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", "Q1", " ", "Q2"}], "+", 
       RowBox[{"8.76317345652941`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "2"], " ", "Q1", " ", "Q2"}], "+", 
       RowBox[{"0.8260839010489796`", " ", 
        SuperscriptBox["P2", "4"], " ", "Q1", " ", "Q2"}], "-", 
       RowBox[{"0.07653134601551248`", " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "+", 
       RowBox[{"0.0245755990768272`", " ", "P1", " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "+", 
       RowBox[{"1.4179017319232088`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "+", 
       RowBox[{"1.0819881224476866`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "-", 
       RowBox[{"0.5255754314072397`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "+", 
       RowBox[{"1.5410920715508667`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "-", 
       RowBox[{"0.06104606432738419`", " ", 
        SuperscriptBox["Q1", "3"], " ", "Q2"}], "+", 
       RowBox[{"0.12471639887690059`", " ", "P1", " ", 
        SuperscriptBox["Q1", "3"], " ", "Q2"}], "-", 
       RowBox[{"0.002282126999257488`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q1", "3"], " ", "Q2"}], "+", 
       RowBox[{"0.09024572399238015`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "3"], " ", "Q2"}], "-", 
       RowBox[{"0.0036172814218242443`", " ", 
        SuperscriptBox["Q1", "4"], " ", "Q2"}], "-", 
       RowBox[{"0.053378673364381464`", " ", "P1", " ", 
        SuperscriptBox["Q1", "4"], " ", "Q2"}], "-", 
       RowBox[{"0.0030116698995113983`", " ", 
        SuperscriptBox["Q1", "5"], " ", "Q2"}], "-", 
       RowBox[{"0.2942182646457951`", " ", "P2", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"8.83885491864664`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"13.717912967907747`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"2.943711259323835`", " ", 
        SuperscriptBox["P1", "3"], " ", "P2", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"2.632250412988641`", " ", 
        SuperscriptBox["P2", "3"], " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"0.24755864242625336`", " ", "P1", " ", 
        SuperscriptBox["P2", "3"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"1.1101028256567111`", " ", "P2", " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"3.595887114692943`", " ", "P1", " ", "P2", " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"2.2443250520097227`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"0.01752995526080332`", " ", 
        SuperscriptBox["P2", "3"], " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.2582633395066302`", " ", "P2", " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"0.7149154504874499`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"0.034077568763372146`", " ", "P2", " ", 
        SuperscriptBox["Q1", "3"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.02934423513428411`", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"1.0633977129301453`", " ", "P1", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"2.2008182651150157`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.25677507423559404`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"1.5271020735703875`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"2.2049365331643096`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.05211801692796354`", " ", "Q1", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.5713996333056953`", " ", "P1", " ", "Q1", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.03130204350240273`", " ", 
        SuperscriptBox["P1", "2"], " ", "Q1", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.31882366690003583`", " ", 
        SuperscriptBox["P2", "2"], " ", "Q1", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.033358904902268005`", " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "3"]}], "+", 
       RowBox[{"0.08618623369054512`", " ", "P1", " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "3"]}], "+", 
       RowBox[{"0.004435358182563993`", " ", 
        SuperscriptBox["Q1", "3"], " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.4058540518856074`", " ", "P2", " ", 
        SuperscriptBox["Q2", "4"]}], "-", 
       RowBox[{"0.9799951494193175`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q2", "4"]}], "-", 
       RowBox[{"0.14327638995318331`", " ", "P2", " ", "Q1", " ", 
        SuperscriptBox["Q2", "4"]}], "-", 
       RowBox[{"0.04061795640946979`", " ", 
        SuperscriptBox["Q2", "5"]}], "-", 
       RowBox[{"0.12431352504021935`", " ", "P1", " ", 
        SuperscriptBox["Q2", "5"]}], "-", 
       RowBox[{"0.01913579073138482`", " ", "Q1", " ", 
        SuperscriptBox["Q2", "5"]}]}]},
     {
      RowBox[{
       RowBox[{"0.7293707603418359`", " ", "P2"}], "+", 
       RowBox[{"11.60759706979611`", " ", "P1", " ", "P2"}], "-", 
       RowBox[{"8.242332239401849`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2"}], "-", 
       RowBox[{"21.073089647302712`", " ", 
        SuperscriptBox["P1", "3"], " ", "P2"}], "+", 
       RowBox[{"2.720782045357132`", " ", 
        SuperscriptBox["P1", "4"], " ", "P2"}], "+", 
       RowBox[{"12.500175623713927`", " ", 
        SuperscriptBox["P1", "5"], " ", "P2"}], "-", 
       RowBox[{"1.9218695389345817`", " ", 
        SuperscriptBox["P2", "3"]}], "-", 
       RowBox[{"12.871787809534077`", " ", "P1", " ", 
        SuperscriptBox["P2", "3"]}], "-", 
       RowBox[{"7.5878081795628605`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "3"]}], "+", 
       RowBox[{"14.980472751600198`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["P2", "3"]}], "-", 
       RowBox[{"0.8657566228217841`", " ", 
        SuperscriptBox["P2", "5"]}], "+", 
       RowBox[{"3.274034594804801`", " ", "P1", " ", 
        SuperscriptBox["P2", "5"]}], "+", 
       RowBox[{"0.14424229678804085`", " ", "P2", " ", "Q1"}], "-", 
       RowBox[{"0.700255853940917`", " ", "P1", " ", "P2", " ", "Q1"}], "-", 
       RowBox[{"0.8804258573900081`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", "Q1"}], "+", 
       RowBox[{"7.9606842317828015`", " ", 
        SuperscriptBox["P1", "3"], " ", "P2", " ", "Q1"}], "+", 
       RowBox[{"4.163878099593161`", " ", 
        SuperscriptBox["P1", "4"], " ", "P2", " ", "Q1"}], "-", 
       RowBox[{"1.8383778215077258`", " ", 
        SuperscriptBox["P2", "3"], " ", "Q1"}], "-", 
       RowBox[{"3.042949002041998`", " ", "P1", " ", 
        SuperscriptBox["P2", "3"], " ", "Q1"}], "+", 
       RowBox[{"5.145525986383334`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "3"], " ", "Q1"}], "+", 
       RowBox[{"0.09537428854322255`", " ", 
        SuperscriptBox["P2", "5"], " ", "Q1"}], "-", 
       RowBox[{"0.5277810336361494`", " ", "P2", " ", 
        SuperscriptBox["Q1", "2"]}], "+", 
       RowBox[{"0.31711425870486093`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q1", "2"]}], "+", 
       RowBox[{"3.196707160546048`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", 
        SuperscriptBox["Q1", "2"]}], "-", 
       RowBox[{"0.08470645294024562`", " ", 
        SuperscriptBox["P1", "3"], " ", "P2", " ", 
        SuperscriptBox["Q1", "2"]}], "-", 
       RowBox[{"0.024510700440729175`", " ", 
        SuperscriptBox["P2", "3"], " ", 
        SuperscriptBox["Q1", "2"]}], "+", 
       RowBox[{"0.5601318267304147`", " ", "P1", " ", 
        SuperscriptBox["P2", "3"], " ", 
        SuperscriptBox["Q1", "2"]}], "-", 
       RowBox[{"0.043964520247478905`", " ", "P2", " ", 
        SuperscriptBox["Q1", "3"]}], "+", 
       RowBox[{"0.12782011585715247`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q1", "3"]}], "-", 
       RowBox[{"0.6200370789959819`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", 
        SuperscriptBox["Q1", "3"]}], "+", 
       RowBox[{"0.0813258825413482`", " ", 
        SuperscriptBox["P2", "3"], " ", 
        SuperscriptBox["Q1", "3"]}], "-", 
       RowBox[{"0.007679946082354599`", " ", "P2", " ", 
        SuperscriptBox["Q1", "4"]}], "-", 
       RowBox[{"0.13764152668969995`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q1", "4"]}], "-", 
       RowBox[{"0.0036723118203981723`", " ", "P2", " ", 
        SuperscriptBox["Q1", "5"]}], "-", 
       RowBox[{"0.07136538757140751`", " ", "Q2"}], "+", 
       RowBox[{"1.7175537842664412`", " ", "P1", " ", "Q2"}], "-", 
       RowBox[{"0.9183304846305297`", " ", 
        SuperscriptBox["P1", "2"], " ", "Q2"}], "-", 
       RowBox[{"6.019990295979167`", " ", 
        SuperscriptBox["P1", "3"], " ", "Q2"}], "-", 
       RowBox[{"1.2140978630868657`", " ", 
        SuperscriptBox["P1", "4"], " ", "Q2"}], "+", 
       RowBox[{"3.7565546437504604`", " ", 
        SuperscriptBox["P1", "5"], " ", "Q2"}], "+", 
       RowBox[{"0.06681865775028048`", " ", 
        SuperscriptBox["P2", "2"], " ", "Q2"}], "-", 
       RowBox[{"12.837191687443463`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", "Q2"}], "-", 
       RowBox[{"17.855480088883024`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "2"], " ", "Q2"}], "+", 
       RowBox[{"11.454010363001697`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["P2", "2"], " ", "Q2"}], "-", 
       RowBox[{"2.08974088050245`", " ", 
        SuperscriptBox["P2", "4"], " ", "Q2"}], "+", 
       RowBox[{"2.9823099185901794`", " ", "P1", " ", 
        SuperscriptBox["P2", "4"], " ", "Q2"}], "+", 
       RowBox[{"0.10867026101907062`", " ", "Q1", " ", "Q2"}], "+", 
       RowBox[{"0.9194282692164591`", " ", "P1", " ", "Q1", " ", "Q2"}], "-", 
       
       RowBox[{"0.9436129153947708`", " ", 
        SuperscriptBox["P1", "2"], " ", "Q1", " ", "Q2"}], "+", 
       RowBox[{"0.7905090280258739`", " ", 
        SuperscriptBox["P1", "3"], " ", "Q1", " ", "Q2"}], "+", 
       RowBox[{"2.3802890847902245`", " ", 
        SuperscriptBox["P1", "4"], " ", "Q1", " ", "Q2"}], "-", 
       RowBox[{"1.6555319799555297`", " ", 
        SuperscriptBox["P2", "2"], " ", "Q1", " ", "Q2"}], "-", 
       RowBox[{"5.004435398737878`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", "Q1", " ", "Q2"}], "+", 
       RowBox[{"5.377385154074243`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["P2", "2"], " ", "Q1", " ", "Q2"}], "-", 
       RowBox[{"0.23952297383193066`", " ", 
        SuperscriptBox["P2", "4"], " ", "Q1", " ", "Q2"}], "-", 
       RowBox[{"0.072711927311413`", " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "-", 
       RowBox[{"0.11791218475152168`", " ", "P1", " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "+", 
       RowBox[{"0.8511295636827999`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "+", 
       RowBox[{"0.8843877388174556`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "-", 
       RowBox[{"0.20924845711083`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "+", 
       RowBox[{"1.0539380487539267`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "2"], " ", "Q2"}], "-", 
       RowBox[{"0.0531055066381436`", " ", 
        SuperscriptBox["Q1", "3"], " ", "Q2"}], "+", 
       RowBox[{"0.06613159783015796`", " ", "P1", " ", 
        SuperscriptBox["Q1", "3"], " ", "Q2"}], "+", 
       RowBox[{"0.04034482268232603`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q1", "3"], " ", "Q2"}], "+", 
       RowBox[{"0.1032357158308392`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q1", "3"], " ", "Q2"}], "-", 
       RowBox[{"0.0008784836493233924`", " ", 
        SuperscriptBox["Q1", "4"], " ", "Q2"}], "-", 
       RowBox[{"0.030473927795756105`", " ", "P1", " ", 
        SuperscriptBox["Q1", "4"], " ", "Q2"}], "-", 
       RowBox[{"0.001418268569121511`", " ", 
        SuperscriptBox["Q1", "5"], " ", "Q2"}], "+", 
       RowBox[{"0.5715259670888125`", " ", "P2", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"4.375560617030042`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"9.689010277853288`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"1.5546502914535094`", " ", 
        SuperscriptBox["P1", "3"], " ", "P2", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"2.0745667875240006`", " ", 
        SuperscriptBox["P2", "3"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.9041416777929038`", " ", "P1", " ", 
        SuperscriptBox["P2", "3"], " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.30096691138351117`", " ", "P2", " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"2.2702388554184783`", " ", "P1", " ", "P2", " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"1.1013368627565414`", " ", 
        SuperscriptBox["P1", "2"], " ", "P2", " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.565062519754387`", " ", 
        SuperscriptBox["P2", "3"], " ", "Q1", " ", 
        SuperscriptBox["Q2", "2"]}], "-", 
       RowBox[{"0.11143248510658244`", " ", "P2", " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"0.4521160084823989`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"0.03464181437919753`", " ", "P2", " ", 
        SuperscriptBox["Q1", "3"], " ", 
        SuperscriptBox["Q2", "2"]}], "+", 
       RowBox[{"0.06837927283374515`", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.4731963999633726`", " ", "P1", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"1.4633376314890338`", " ", 
        SuperscriptBox["P1", "2"], " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.27869749497452384`", " ", 
        SuperscriptBox["P1", "3"], " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"1.0051072644043226`", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"1.9344048168699364`", " ", "P1", " ", 
        SuperscriptBox["P2", "2"], " ", 
        SuperscriptBox["Q2", "3"]}], "+", 
       RowBox[{"0.026176972546087644`", " ", "Q1", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.32587346620259583`", " ", "P1", " ", "Q1", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.10249992649190699`", " ", 
        SuperscriptBox["P1", "2"], " ", "Q1", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.4012130042645782`", " ", 
        SuperscriptBox["P2", "2"], " ", "Q1", " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.01358325982987527`", " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "3"]}], "+", 
       RowBox[{"0.05011018168285057`", " ", "P1", " ", 
        SuperscriptBox["Q1", "2"], " ", 
        SuperscriptBox["Q2", "3"]}], "+", 
       RowBox[{"0.0037364860747156657`", " ", 
        SuperscriptBox["Q1", "3"], " ", 
        SuperscriptBox["Q2", "3"]}], "-", 
       RowBox[{"0.2388544196972343`", " ", "P2", " ", 
        SuperscriptBox["Q2", "4"]}], "-", 
       RowBox[{"0.7398472488602923`", " ", "P1", " ", "P2", " ", 
        SuperscriptBox["Q2", "4"]}], "-", 
       RowBox[{"0.11938857679747977`", " ", "P2", " ", "Q1", " ", 
        SuperscriptBox["Q2", "4"]}], "-", 
       RowBox[{"0.02231029236403081`", " ", 
        SuperscriptBox["Q2", "5"]}], "-", 
       RowBox[{"0.08741922885013546`", " ", "P1", " ", 
        SuperscriptBox["Q2", "5"]}], "-", 
       RowBox[{"0.013022980250254152`", " ", "Q1", " ", 
        SuperscriptBox["Q2", "5"]}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[67]//TableForm=",ExpressionUUID->"e36abd0c-1b29-4197-9271-\
7cde12c64bd9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compare", " ", "Taylor", " ", "map", " ", "tracking", " ", 
    RowBox[{"(", 
     RowBox[{"not", " ", "symplectric"}], ")"}], " ", "with", " ", "exact", 
    " ", "tracking"}], " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"I$MAKE$INITIAL", "[", 
         RowBox[{
          RowBox[{"List", "[", 
           RowBox[{"0.", ",", "0.5", ",", 
            RowBox[{"-", "0.75"}], ",", "0.05"}], "]"}], ",", 
          RowBox[{"List", "[", 
           RowBox[{
            RowBox[{"Slot", "[", "1", "]"}], ",", "0.", ",", "0.", ",", 
            "0."}], "]"}]}], "]"}], "]"}], ",", 
       RowBox[{"Range", "[", 
        RowBox[{"0.05", ",", "0.125", ",", "0.01"}], "]"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"DATA1", " ", "=", " ", 
     RowBox[{
      RowBox[{"NestList", "[", 
       RowBox[{"FODO", ",", "INITIAL", ",", 
        RowBox[{
         RowBox[{"2", "^", "8"}], "-", "1"}]}], "]"}], " ", "//", " ", 
      "Transpose"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"ORBIT1", " ", "=", " ", 
     RowBox[{"Part", "[", 
      RowBox[{"DATA1", ",", "All", ",", "All", ",", 
       RowBox[{"List", "[", 
        RowBox[{"6", ",", "7"}], "]"}]}], "]"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"List", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", "0.", ",", "0.", ",", "0."}], 
         "]"}], "]"}], ",", 
       RowBox[{"Range", "[", 
        RowBox[{"0.05", ",", "0.125", ",", "0.01"}], "]"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"DATA2", " ", "=", " ", 
     RowBox[{"ParallelMap", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"NestList", "[", 
         RowBox[{
          RowBox[{"Apply", "[", "SERIES", "]"}], ",", 
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{
           RowBox[{"2", "^", "8"}], "-", "1"}]}], "]"}], "]"}], ",", 
       "INITIAL"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"ORBIT2", " ", "=", " ", 
     RowBox[{"Part", "[", 
      RowBox[{"DATA2", ",", "All", ",", "All", ",", 
       RowBox[{"List", "[", 
        RowBox[{"1", ",", "2"}], "]"}]}], "]"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"ListPlot", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"List", "[", 
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{"ORBIT1", ",", "1"}], "]"}], ",", 
        RowBox[{"Flatten", "[", 
         RowBox[{"ORBIT2", ",", "1"}], "]"}]}], "]"}], ",", "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"PlotRange", ",", "All"}], "]"}], ",", "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"PlotTheme", ",", "\"\<Detailed\>\""}], "]"}], ",", "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"AspectRatio", ",", "1"}], "]"}], ",", "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"PlotStyle", ",", 
        RowBox[{"List", "[", 
         RowBox[{
          RowBox[{"Directive", "[", 
           RowBox[{"List", "[", 
            RowBox[{"Black", ",", 
             RowBox[{"PointSize", "[", "Large", "]"}]}], "]"}], "]"}], ",", 
          RowBox[{"Directive", "[", 
           RowBox[{"List", "[", 
            RowBox[{"Red", ",", 
             RowBox[{"PointSize", "[", "Medium", "]"}]}], "]"}], "]"}]}], 
         "]"}]}], "]"}], ",", "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"ImageSize", ",", "Large"}], "]"}]}], "\n", "]"}], " ", "//", 
    " ", "Rasterize"}]}]}]], "Code",ExpressionUUID->"19a45676-c22a-409d-9b82-\
54d6c937af9b"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
b3BE2u9r7NZH+HIrdMWib6gElnhwTLNmzQgOiRckzf7Lly8Jzp05c2b16tX0
r0XVxkksItRXokQJhlrle01ZCS/MtZ84gUxqAqXLTdUbiPr27ZvwTHk1xCBh
74kTJ44aNWrnzp10TAjXY2NjW7VqxTDdaU2tP4sVKya+R20ifCjLvW3SpIm4
c5+WdP36dc4M7TJ3keciDPuLdoSssax6Z9azZ8/27t1Le+rKlSvai8qkiH8+
fvzo4OCgLLM8FIvqr7/+Uo9PJbVu3doWEbBiTpaAkyVLlmjJiUCBgYH09DmK
8akGrnRJNSJV2snJiaFEbSWUJWHwXAgLnmZt4cKF3bp1mzFjBulK2nMoIzrc
Ca1x+VDUxLBxdSlGtS0O31s4C5wZy5gxY1LpQf9FRCfIunXrevbs2a5du9mz
Z4eGhjZo0EAszLNkyULynH6oi3DZi8gzSgbIIW5Qzu0GuaQY5g0MgO+kA+uL
cypSYaXfIL3yKY4GWNVRalJ8pbs0YpB/OgLzBIkALW8K6YrCOGcAA3xwxQMk
vG/WrFlpo5EsCgoKmj9//pw5czSu6KsSEYjt3r07t9e5oDOvI+ZRFty4Xxq5
cdPUnG748OF6v4EZEjKeeEHI1yi4wTSPjiYdkDbR4MGDSTM6fPgwV/FowIk9
Eobly5fv1asXwQDNmOnYkZa/PAD+OkaGONGGDX0pKeIfAzrCOEtNsq+R2unq
6qqx3aB48eJZFUL1FJbQtGnTtOREoNevX6dJk8ZdenZMAku6lGEkpdLFxcUW
mWicmXemmth0amjPT/xE6+fhw4d0ojFUMHhhOmR5oezV0om+yCSUM2dOmd6U
ROnx48fbt29fvHjxmTNn6Ij/+++/eW9HK1PeULJkyaxgFrgOQ8oSUy21Wgo7
TG/F7shhLuNP2ch4E0I4ZBdvIshcdnGqOfwzVnFllcJeZ0ClBZmmEAYzaZj0
4gS8nQu+dhv+TYUSVdmyZRMvAPrv5cuX+RgSDE66pr93794NHTq0atWqXl5e
3K8kDhd5D4grG8nP8FxbW1v7+Pg0b9585syZdMLq/R5Goh2dIkWKvIq4Jm6p
JByiI2+EmXnomjOyR63gt9UsZJTDwiDFVLqhQ4c2POhLSRT/nDp1ijZaNgjJ
UOhoxfjxtHq1ShzGRdz+I5Ori8CM2U4c2uR/rV+/niGUcSTK8TXAzqKNpksd
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
wf2e1IGP0IFChQodO3YsQdFi/frrr3RAyuiKxv4FSe+YEN3ATmGtLq6IulYa
Vxh8/UpYPHny5O2332YIU6ZXXnnl77//VtI4E10aAvn7DqNg2PzEYlBfaLFu
3brVpUsXffgZjah9+/YK4xNIuWb8/6yaIzJ79uzJqGWfJuSf9etJFnaSffyq
EIGBgQq7QYdFoAg7id8/IL+AlrBq1aqqYkpJwqH2x0kD4Ug+Myr/mkcsJHih
2sJ2rSbvbRS1tygVD+hOyJAhgydiqs8iuNpmH/5c9RXHxFCHy6RlSkCEAws/
JqHfcwXwqbA7xQGKM7N2h1SAn/RXbHui3Llzm9EBF/0PkJeXV35p667Htlm1
alXXrl0LFChQqlSpoUOHKmd98OBBVlVaSh24jgPrA4OGwrpFY8aMoafWC3UG
d9hzbK7UOMwVMeRrIRsSPZSwYLpw4cL3338/e/ZsetCVpzP8+eefAtW9HUZR
WGlezJYtW2hRAmDCGgM4eoGqiEpKQpNmHRQUlAuXIXd+KaKkihQp8qKGsjQh
/2zbtk0A281hycIBrKSwGySBcDqnjVq2bKkwM/3u3bu0K1rYjyIeTmS6E1Rx
Ybpz587OnTvPnj1rEvw4yfMWhAHbBnIfJm6iatWqKXT1slDqgL/6Le12TZ1U
m3tO14474kcfSvvtHO03IfLmzauQnZ74gv3Cnuk9yJP+/v42rZC2UL169Vx5
Xi5KjNiNojcBRcOT4unpqbctCOwrtsYoJHrj6Iykk0J5+TMNfJs0aaLQZrtj
x45MmTJll3j9AF6qCqJFR0fT7FW3Z7ESLGhip0yZkpoLPdiI7o18+fIFoT6j
bRQcn9yvXz8lLGhlQ0NDg+z9AuPAglRL4+1/+qkV7HaTM5P4iwa9pwn558cf
f6ShLZK2dzEgMyvsxvHjx+vWrcuGtWzZsg0ePFj5KxMZGWlBhLBN+GGcnE8+
+UQVi2vXrnFxTKacOXNu2rRJVeNMjx8/9vHxKS6tyCRwVBtllDlz5hwSuOJF
MCpXrpwShcJG+/fv9/DwIHF0pzS0a5ophqRxhRz1VL9+feFM7iqHCzYBqbjK
X6v/JXL5v2zEJVP9ABZRRBObidIDcyMeIR/rNBFIOfcNGzYIQPFsk1KB4pDA
QkQKlEKOFSpUyCUdnLVgNG/ePFVc3nvPGhBRF4/vYdTg2I7LnAt9qkUpNI9+
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
nzNnjiougYGBMrzYI6xF8+bNVXE5depUUFCQ0OGE2D6hMMJ8/fXXqnglaHaz
SrqwhHskXYORlxfpxNb/SJ8+/datWxUydZGLnk9ZsljjoC/ae1gCcKJ//PHH
tm3bDhw4UCGcKdPw4cOFhAv9EJ6d0NBQVTn4kZGRIdLR5gI9O3fuVMKiYsWK
WaSCNQw6rSSq4cGDB1z90EYkPSqMlyhcuLAM9/o7GL3++usGG+ek2r/sGz+K
xs3AG08epRX5Jz4+ftKkSbY8TRJXxo4dq8oP8vDhQzc3t/bSThgOXocPHzbO
gnV/B0vjPQAGli9f3nj7KUAkc9KtWE+apSaIL1II/O7t7S3Di11WqjjQzqlQ
oQLdt4udMSKJ7rXXXuPfVOVSKVq0qIAUJw+qUaNGSli4yOX/elE6c+YMZ2SM
FuIQsq3Zcc4yuY3Cw8MVHvARI0bIekccrMoW2MOV8Bo8eLCwT6C4jpBCawXq
Fi0c/DvJoxkzrIVD2+qsHPO1CSxTpowSFkR//fXX4sWLZ86cGRUVpRZ/vmnT
phYp9PGZECFSRftknKyffvpJ9t+1xuRs375d3SAMUVqRf7g0QDHIJJ8hCZqo
T58+qjpQokSJ7BBI9NugghC+vr5KbE0NGzaUg/nPYRTJQK1MjOh0nD59ev36
9XRklFdq4MhqOU/qfYxCVWLjnj17fHx80qGkjp7Le+Cya9cuJVw4i00G/CFV
jgvHrlmzRgkjG5HEHiyxewZe2bNnV8vLRS5KOp08eTJ9+vQ2UYckH5IQ3IX4
EffhVQ25t1ChQqo40gVFDb4rHYcE3O1CUdLB/fv3w8LCLMDfm42W66BATy1I
WRkyZCDZzyALumNbtrTGy2TEQ39Is1SP0nSoVF4RnuW3VdIqVEb5b4ON09hJ
zqT26yHGYAFmnqhjx45KOq+E0oT8s2/fPjqStXXIXU8RRKfwQZw7dy6vVAza
v4uURqIPPvhASftcns/B/sPliVWhWO/fv18Plk73ldpiNFz7+JJ0WOogVEaJ
lEhClB8KQgxGiZOHmpDwBa4sklGNs0gAfnWOHDk8hTghjaUBpq579+5KGOkp
ODjYU2LH1Qfy58+vnJ2LXPRCFBsbu27dujt37pQsaVUuHWA5Oe+S5BYlvOLi
4qpUqeKObKMH0okIhpdHCaNLly41asQKjTU53cblB8Ta1apVyzgLeuWrVq3q
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
If8QzZ8/nwvwBcJLQlS+fHkl8TkbN24UAFe3ORAvwCmcLl064+Fk33zzjUCg
1w20/ADx1SItFMSk7VpW2ld/o/M9e/Y02PiKFSsEDoJD+5mFqF69usHGSSuk
tfNEb/WN70fnXwiiNjEitYVFHX9N5vHw8AgJCalVq9bu3buNt+8iF6UJ4svT
Icruoa5upnEiJddHSn7hFNf33nvPSMuxsbFOQY9bK6qFyib0N3S1QnYhBLp4
8eJGkiPo0Wdkj+xCtIS1yg1iVVRUlMEOM9ENabFY3ABVF4x5pqU8d+6cwWZP
njwZGRlpUxKzZ8++bt06471t27YtdXWD/SOVDggtSbGNpBX5JwGFSocMGdKw
YcOuXbvOmjVLlaxLRA+6gMzTC47mYMTvLVq0yHjLtHPy2se9P0MUXFBQkPIa
vmopd+7cpaWbYYEKtSsBBj2a4Yr21xo3bjxtn2sZz5eMP6/AKWz8luB0g5Fa
52lBZ6PnxoFSXeSiNEe5cuVyQzYKh9DcxEEj+uGHH5S0T0+DRdMfbR8Od6E7
ymCONr0mpE3v0LX8G0IESfsznj9bs2bNDFLSE1fUogvQSMv0sk+fPr1kyZLu
7u6ZM2du06aNcfmEievXl9dqCjyDc5/Wt3bt2sZdLdTCX3/9tXr1alISVXlA
Lly4EBwc7IXc7SWIw2fL0rZt25Ly52lI/jGPbt68WaVKFZsjgza/8SozCYCg
EQjrdZAiuFzyqVOnjLNgunfvnkJpkKl169YeSMiydZvLRpDcYrBoHek+RYsW
pTutBcqDnkFk10eov5MzZ07jFfFKlCiRWZrzVcn1TMmGX5qBqlL7XdG+K+f9
5ZLL/5XyRPcYPUACZvkMmnbfoEGDL7/88vmPchIXa/HixUIKsU4ArrtVDRk5
0kjnz5w5ExAQ4IVYxO+F2ANBride/OLFiz9+/NhI49myZasidXsFur106VIj
LduIxD+10aQtW7b0hgdE3+fuih4s6u2IESPCwsL4kSWxTQkO8NGjRzkJkSlH
jhxJh+9zyT83btwIDQ0VyIzupVX+IqXGeOUCEnHprewoHYHeYGG8fdr5U6dO
zZfPWo/U29u7WrVqBj3L+pbbtWvHNrFN0OkOa/hdxsuC0JUlgB9rm5BYaBxE
GzZsMNh4TEwMybGyR5jrsBvHdDp9+jS1s0Vq/zjaX7VqlcH2XeSiNEf0rvXq
1atw4cIhISG5c+d2c3OzPUZ58+Y1WKg6Pj4+MjLSAvuw/sTFI9G+bNmyBju/
efNmuqUr29uiJ6LzEydONNIy6dTZJM/dZ2hZ1UWtnPLnzy+HPSiR2Ug3rF69
ugDIQGfk9LkhyERJNgptEhLPvvvuu6ioqBcyCbrkny5dulgQUGdb7pkvAiDw
HKKVFYjMd9hOpSGuGO+5TUTpjhAjP5Rr+fHHH423zMF7dbX8hXikiBLR6TCo
EyXAs+YrXQvbFMknDBsrI2+8ifYPHTpksH2OmdwgtX8Y7W/cuNFg+y5yUdql
vn370ikoCdCeQ3BG0EXq6+trsNAzvbzU7Dzp0NVVkWW2aJE12WWVJFzRddq0
aVMjLX/++ecO9/9pmMjoAky1+S/h4eF5ElEeaThGWh4/frzAPRyna9ZTCBJu
XyJU2r9c/iG5MTAwsKa04jVRX96gO4ORFZ0eW+P4MBxC3AzGE9vhygKJ2mBa
KFHlypUzSPlTbP8x7p8i2a+uNCdX0Hi/fv0MNk4yoacEB3EHxnm6dpIRcyVb
6Um9jZD63xj9d2Eevlxy+b9eIl26dImD+p7pzsWvmjtM/v2kL9aff/4pu8BU
2X8mTZoktMxi/SenEHQNGmk5NjaW/TLVoT/2RPIO3R4Gk55MpXr16gnJ/3UR
i2jwjS5Xrlx2KaGYMbfPnz+vqv8vSv9y+efCBSukzSBp8w/Eupw9e9ZI4ytX
rhRSCZt4oBTSW2yw54UKFXJHWK++8fnotsHiEfSI+/v715PmhHNOkxhX9hxy
WvaLAxrHjh1rsPEiRYpYJMktCo2/++67Bhtn6tbNCkPbR5Oy6ER/gvZr166t
pH0XuSgtEoNuHZaOdpgQGTJkMNIy3UglSpTwFWKvrlmO/zGORbZ9+3YBQBV9
n4/DctW3b1+Djd+7d693795eXl5CRyQN0rtjsGWT6J13rLnjf0mLGCAEiUZG
Wnb6pszBhLzEapv/cvknLi6OnuOG0ro0hIvKYHIBW/x227f8DJbVkiVLGuy5
h4dHJanbXDzU+LENDQ2VvcAj0PjRo0cNNh4ZGeknAW43QuMxMTFGWv7xR2tR
uPqS/YfLOhsHjE2AKkpXLgd86iksLMwV/OyifzP16NFDOCuH11ZFOeCoqCgf
Hx9PIVoB3aW8du6oZYN+GbrkIyIifIRYrnX4T7jw3NzclLizqefUSV9oTJOA
qO+GEq7Xr1833jjRli1bBg8eTEoZyZ9///23wdYWLLCm4S63X8HTmOr+/fsb
aZkk2HzS3ngXLf/xxx8Gu51sSkPyD2kB586dW7t27aFDhxSmOzVv3tzN3v/7
A7ZokyZNDLbM8s9vkv3HX4jGjRsbaZmmwmKx9Ja20x1spy5duhjseceOHd10
lXcSUEgiJ4L2Dc787du3Odq8qYbPcweWYaIWLVoY7DZdAtTtGPs52YjGq1at
mrw2bVZ6Em8qVaqkl3loCQIDA0mUnT59usGeu0gJufxfL5EWLlwokC7hoO6l
B9iL/Psvulj/j73vAI+q2r4/k16BJBB67x2pIoHQeydUQQThIVWqFFGqolIF
pCsgTUFFpCsdhCBVOgJK751AgATmv2ed/8zv3jkR4e6JTMhd33zv873nrNk5
955z9tln77WPHTtWtKitA6HML7oO3b+SmIlLlizhWE5nuowZMwoo6hSBPkku
xH9CQkJ27tzJYSYUL17cH/Ftx5jIdu3kLjKZY2NjZfMjB8hFZDbEvHDhQlBQ
UE6NIPB9u6b9hg0bOMxSKnycPsgWhJPjS5SCSSr+z6lTpyIjIx0POn369OQI
ueSn6YnTtu6BFOIhKMr2wJvPD1Fu3bpVoGeWdkH4HvaPHDmSw0wvDB1PGir+
z06QM5ubO/S1skGikPy3GULkADO/bLNDhw7EM0azPH4E5ixZsjCTJAklS5bM
pIzJLlcMOEE6Py3R3ugBQvGy6fXRo0eZzCZMvAKg7Zj231CUizpmtyx3YgoV
OlCwYMFwTEDH7L4NpyVnzpxM5i1bttCKWkhz9bMau3OePHkePHhgmFa2CHxX
WZRe/wef8IUg76oaw5GIEWIlVmw6lDH7J379te1WirzWNjiZZnXRnUJMTAwN
pgXx+U/ALAt2tm3bxmTmIEn4Pzdu3EiXLp0nBm0e5lQaPBSXCEhakQVUr149
Ly8vAeXPOnXquCQjixyJGjVqeEDc5jym6hy8V+S80V/EJC9QoEBKpb9nFQwL
M/9ZNi9uAs9f0v6MRP3s2bMzr3ji4uL8/f0rKatBcYwJh1mSkx/rpTFbfuZj
TH788UcOuczAbKFE2yyusNyEiVcDixYtov3XE6LHtEoXwNTLmzevS+oC7t69
S+Rq608pJ8LU6u/Zs6dQkpc+BzMnO2XXLtvxa7Ri85tg5khM3759m0YjQp9t
fhYqavzOs+vWrStWrJjUMaBlf+bMmS55grTrtW7d2qGzlzlzZlcFMQwjSfg/
nTt3tqAnu+NBn0cv3UyZMrkqdLZ3794JEyaQR71y5UoXXq5dvHixfPny//+6
BP+ZJk0afpYvYfVqW1ViaXuLUnKu/ueiy6+IiIgUQtzVT9j3XBHrkIIAHyir
QVeQMy/EZauRgXrmG4hcBQUFXblyxRitjNK/955tANTcBtlomGO2CRfCvP96
6aAdn3ZMucf5+fmlA4oUKTJ48GCnPfRFHxYd6wQ8K6c5KKUtmO26KlWqpIqm
yo45o0aNMkx779498lKilBSIvIgscQyWQs0/KDbXxxGew6w13rEmu2Rm0QtA
r4G2YWJwcPDcuXP5zIaRJPyf3LlzF1Ye9IcYQH7/d3rKb7/9tvYWtWTJki5s
EU4e2pIlS+h80aFDh2nTpvGL0x2QjVqEbNgByytXrsxv/u7j46PqGy8GP7Mh
bExMDHkLbyrkteGiMF3ZOnXqBGjUAORHKnd169aNw0yoXZts/L8OcY6PDO8z
yU2YePXQoIEUzPi/1SljxoxM9QzyGTLoqzsdF+jMCxqpm+FUTrsCzHPmzOEw
N2zY0KJpx/PEnvTLTCeWicq7lBVJCrXxcwkSA9OnTxfQGd6K+pefcTilHWH7
9u0vyyT393/IafT19a2tPOjpeND8FP327W3y3uSib4LD/yFCiORx8R2J/wA7
d+7s1atX1apV33nnnUWLFvGjlOSiCISUnUZ7EUab39yzQIECPvppuwHiPPxs
85CQkFyK2Vtg9hdffMEklz2Xf1f4M7pIytKEiVcJY8eOFajVisE0ibcv16VL
l+bQSl3WysoxRybocpwruTVrQ9Nx2KnpgMk8C1+6dClDBvLabGnVo4WYiP6q
nmgB+ddffxmmPXnS1gN2nLIiNURSjRvWotLxVi7R2lPkX6gG4ve8loiNjd29
e/epU6eefx90f/+HQK9Kbv1FpxU5VATOK0Q4cMAm3NtEzyyFbkaPHs1hdoBc
8c2bN8+fP/+PP/6g1/JnwCXMiYGDBw8KCNo4Tav3MSYXLlzgkEtBJPIZpiJn
j7ygHsgsCgoKYvbvk/fsbRWzR8HsTZs2GWaWD+vRo0deXl7+yPlx8sCbNWvG
sdyEC+HOMytZITQ0NK1G6Vd+umC+OBJ1DDws2tcCAgIqKtNcrtjr1q0zbHBc
XBz5ZhYchH9EgGKyEK+Btn79+sxzZVRUlEUvBLcWLlCNGjU4tDTIYZpsc/oc
peMYFJU5tAmCP7OOHiXrbKpNTs+uDprXMx02OrZ3795dZvAK5GT+8MMPz/NF
9/d/yG+kI3YtZdwm4i/dunUr53enTqWt2LmdE01bf1eUY1uRS0xOr+NmrXjx
4szOv4kNcqHpLaqnjHYpIVKmTMlZB+i7wcHBqfU529FYBwwXpzswadIkgQie
k9nhcK44eYYOSJ18C05YI6EGQAgPD+czmzDxKkGqc/RXJuM+TJkpU6ZwyLNk
yVJaYR7riuj08ePHvb29swhxUXNX1RbMixYtMkxLo0Erp+qzNUGghlNctnz5
crItM9y/jRiEECT/uOcWI0MNw5VxaIQ8MY7UHnkIsja8EiJsg1ASSPjqq6/+
9bvu7//Q+5NgI10px8fs6DR6NA2YrWzciTyE7Zxb7S0q6P38AnedfXGzFhYW
dvnyZSZzoqJOnToWlE05RmOMK27Yo6PJ2bHFTJyGuiLef+YJa/hwmlhiu0Ke
UoiyZctymK14A5s1a0bOm4eHhwUQuPZq3rw5k9mEiVcSNFO6KpMxGssIU6Cm
ZcuWXvqb6EdCFEKXMeYxZ9myZQKKxFqb75JHwesFKUvg1dH4AKPBrChZuHAh
rUuO83WGDBlc2FyDPJY+ffpUrlyZ/vyvv/6aX/wbGBhYVN8C4wq2WmbAasaM
GQKqmA7am0LkRHL1v9bUuL//Y0X8kF7C3Zo/8D7+wFSpUjFrtTZuJMfZuWho
I94lZqNzMixNmjTpodPlYF6BAII7N0q4d+9e1qxZycjmKC74HrftAqV2d+/e
5TBLV/OIsg50xSU7x/8n/6RixYpk83I980pY/uGHH3LMXrp0aYoUKQRCgnRU
SQFOcn74fdBMuBzm/ZebIH369EFKOrHskedYRow9rJMnTwYEBKTGSeoILpKk
JmmVKlU4sRTrP8jVWiGAU6ZMGcO0tDrRmfd1hbY2HYd9fPiNUG/evLl69erJ
kyevX78+JiaGyebApEmTvL29BRq2yluliIgIpmzLJ5/YklYaQGE7HmGHEmAm
+zm0jRo18hPioX54Z4P5X9+xJOH//Pnnn+TehwnxJYKoPwpRDH8dOaXM35Wi
vt647ZU5deuQoEJbHjMjRYb7himv/WuuUOuyQkuhW7du+fPnT5kyZWRkJJ2q
XCLR0K9fP6cozV9w0TNnzsysz5KyQuoVVQV2N1iZCthSObilxwrD7KlRsqRN
YlYrCC/d42zZsnFoTZh4hUGnBoG17i+c92/Zq9Rpq+KTr1u3Ll26dPIymvyK
t4UoDPIiRYpwXCDZPWeKfhm5jgv6t99+m2Nwp042hfsJGtp5MN4lKRaJge3b
t3t4eBQRYr892jAQBnPiYFbEBGTzRIFRFbit++yzz5jWFitWLKeyrWwF/4QJ
E579XffxfyT+6V8g55a2YEegjw7g5K67ZMen3TNfvnwCl1PydE/OD7OFKOGX
X2yNF2Yoz6UmOsszLT916hSdKeiFLIjahzCY3aZNG/6AFCpUKI9is5QaYNZB
/P333wIhFC3zX5gI5IJymBcvtlXnf6+YXQhuG4eZYLFYGivM/TEgzPZwJky8
whg0aJAU0HOgbNmyrpoydevWtUBO1mmN6tu3r2HO27dvpyUIcdzOGYtkv+cJ
I/wrc65cuYinDCR8y9t1U902EaJx48a+WJy1i14UhoLfFoHcVzplR0VFDRky
hJm+IkEbnyeu0rTWypwNchsS/Mr/NOAbwMfzmHH37t3ly5d//PHHCxYscIk+
s4NWdu4Tdo906NChfFlFGnnV/4mHbCO/G3KBAgU8IW7juA2U85RGhml2UFBQ
DWW7l7FEZpfe8+fPBwYGCuh13MRQ/ILYsqen5+HDhznM8rA5VzE7mxAlSpTg
MJNhxLxNYT6BAZk/fz6H3ITLYd5/uRXoxNS5c+dSpUrRXk9zn9yhkJCQFi1a
yKQFww/r/v37RFU/ofNOlixZOAavWLGC1v8ANJVojwVEoMUqX6Pvzp07tMfR
ydex0eTMmdOFuTquRdasWUspwyuF9GmxfdnWOWPVqlUCbTUcmr27hEgF5ep/
FbFJQv5PYoD8nMqVbRkuVXAF9hmUOW179EcfMZmlYsyvyluUER3fOMzyZq2f
njYWub7kFzHNfuONN9Iqd6lSWZocGA5z7dq1LZrw8l27z0YrJNPmjh07qoHr
VThkdenShcN8/fp1Yv5JeYi7YXl0dDTTchMmXm1cvXqVjlQ0WfIh9JEdEycs
LIxzUbVvn62SbIQyK9uDnCn99/nntq4XBVGxchJnTNn6kKOhYcVGU6WKrT3R
61AX6YakAsLixYs5tIkE2qHyKcO7AAZzSuESD9262e5X08JxrYSEJXI1N2/e
/K9fTOb+j+xZ3FnvSJRCUOLEiRMc5gkTJgiI+zm9RaHEX6oUh1m2vTud0M0a
X/l84kSbrkB7VFVI2u9xRRUZGcm5XLt06ZJQ+mfdxc1dREQEx2A6S9KrXk7P
/BS5B3RIvHjxIoecQG9CJkV7qiRytpnMJky88ihWzJaquUYzd+ZhG61ataph
zlu3bhHDW8oC+AZiNcwrtmzZsqVD3xwH7TkEE0qWLMmhlfqK2l7YF3AWJlfw
9u3bHObEAO1QFqW55GY8uLFjx75s6xIA7U0LFiygZ0QvAA1pw4YNn3P7Tub+
T7t27TyUB70cD5qZXC0rsp0Ug2+CmRmloYcr7MKq2o9U/uQwE9q2bSvgAc7C
Cag1oij+/v7M9jpr165VbwOlzxYcHMxhPnLkiMDtvxNzRwz1zZs3OeSEFi3I
a7OdKeSd3V0Idwh2SqSJxIB5/+VWePSITlG2sI/T3KyDkxrnYZUtW9ZbiB16
WqnRysmnvXz5soBOo5PBrWAwp76+fv36/kpcXco28m/ByCHs2bNnkSJFaOuv
UqXKwoULmYmgDRo08FBEtq+5KFyfqCDv94X+9mTu/9AxJFR52w/gQQ8bNozD
LDtmXtYzxyOWQnOBw0xvIDFfUszOzS6k2rzZ5uPXh/CXw+BaGI3ffvuNwyzv
7IYoNhdCe2gOs7z8HaMw10MI1CU68M2aNRN6VK5cmU9rwsSrjTVr1iSYAyAz
STjS/ZK5j7K6ZuK12Dh9+rRKSx+ZHsoRAClYsKB6o7QRtNOmTTNMS6BhlNVw
eaFVIq/V6BjLcYEGDhwo7J21HR8p3+SS5t3ug2Tu//Tq1UvA4dE+6C/xoH/8
8UcOs7xI2qhnPgpmprKQ3PFH65kvIFDDbKTy/vvvq6/9Xtg8fPhwDnNcXByd
TcL1DuF3sLlTp04cZlmw72TzLbTVKFSoEIfZCodQKy/m4+NDJyMz7ceEiefB
mTNnhKIoaLVL1z58+NAw84oVtt6kcxTmGtB7N0wrtXryam7/6XMPbhWzXXtU
VJSPvnOr1V6j9DxpKs8wmPw9TyTnSM4YHP0ET2dy06ZNAkI9Dq3CR4iBWyyW
ffv2GaZ1QyRz/2fXrl2enp7F4T/IB70TKToZMmRgXssePXrUy8urlCYp/SGm
JzNCS6B1I2vWrP5QU5TM5yGIRC/n77//zmEuVqyYRenacxc2t2zZksN86dIl
f39/D6Ra7cSnO7LUaLW5du0ah5kcEh9lGTwHm9955x0O88KFC4nEA53m1iIG
LhAGd8/eyias5v2X+yEgICBc707QBh0gROrUqTkP6/jx4wIXXtpZ/xQVW8WL
F+cYLDu31hfiDDhP2AVgGzduzKGVGh1Rmiuw/Ugrypw5M6fR9qlTp4TSrvoh
hFyyZ8/OMVi2BS+GXj/DhMiPQejTpw+H0w2RtPyfy5cvb9y48ezZsy5R/pGQ
opR0yK+K5HwvpLvw28pb7SlAWYToiXKtPHiFmF0kJPbs2RMSEmJBbUJxKBeR
88Nv2EpnnJSKL3ERZrdr147DXLVqVQtqsrTRVJeEaGhdIvP+1NssM7hmzJjB
YZYNT7XdiveANl++fEybTZhIJpgzZ46AW7INZ8x1aMlHWLt2LYf2yZMn+fPn
D7QL9GnDSsy8hfj4ePKgBNIpT8On2itEaTBzROFow6IjpIDix/soNC4DzjRp
0nAEWr/++muRUP+m1uxc0Li4uJEjR/r5+cnQd2Bg4Pjx4/myMO6GpOL/nDhx
onz58o6biIIFCzJjHVqQt1OtWrWwsLCsWbM2a9bszz//dAktvfPffPONvJwV
kP2ZOHGiq16hq1ev9ujRg6Yq2dy0aVNmfo5E4cKFsypTaTuMJy/RMC2NA01G
tadqW/atemxsrOw0fU1De1+IAgjUcBIMZGOULYrN9VBWZpjWhInkhjFjxjga
c8tLZL5uP4HWf6Ki7bkNWl5WsJMzZcrI/wkICCisb1N1DbptzBKwDz74QMas
HNmVX8t+yg0bGuaUra/2KstUF4wGP/vx8ePH+/btO3DgALPPlNsiSfg/Fy5c
CAkJ8YTU+WSIJ/hjg9u7d69Lfv3KlStz587t27fvF198Qc/aJZwO0O5/7tw5
2otlzOpnwLU/4Sp07NjRomRDvYepxPE2ZZB2vjJJF4KZM+Dbt9u8M6dUqCc4
YzJFlt59912Bmi8nmxfDZlP52T3htjMrmePevXsLFiwoUqRIcHAwHYWCgoIi
IiL4Yq3btm0jh8cDLtBUqLKnxPSkw4thTil5+pEy8Zux23XlyJEjn6Kk0RDn
KcN9u2SG1QDF2vxC0I5p2FQVLpxZMixQs2bNTJkyVahQ4dNPP+U3QTOMJOH/
NG/enPblZZrnSx6vL1vdV2Lp0qVhYWGO44nFYiFHyCV1Q0kOe/bsocmYzx5V
fgpvk9zOcuXKcQbk6FFb3vcUZZJOwIBz8n9kTzFVn7AMGrYapiV8++23xHw4
oYOVqfxjwsQL4cmTJ9mzZ5e3P3R6LWuP1Rw8eJBDKythF2im5ym4QORpGE6Q
OHHCJu7eX5n49Xn1pA8ePBAJaRaNwlDs3r3bGK0VWoU++ratMq26e/fuhjkT
D/QmNG3aVCBD6XX7ZWjx4sXv3LnzUuxxf/+H3uTQ0NBI5c2RfdSYAi+HDh2i
aZgeqlx/o1wrArSuUnk6cODAsGHDyH8bPHjwjh07XMKZeJCajUURq/lNiOFw
Mum8xpmeVoSUvb29nTogP0HBPqdYg/Dbb2Sm+EDPHIPJVatWLQ5zXFwc+Tk5
9Oe1m/Yrew6zCRPJDbLr5XjNbDqIyoIMGTJwaPPkyVNU2RekCtDJkyeNcdIG
TdtNVpR9ad2qICEqVKhg2FTaxdKmTVtWsbYDrL1+/bphZtrCfH19vZBcTW5b
JAjJA3RhL3gXYtKkSWTem3b9uifYZQgdOnR4Kfa4v/9z7x69iTZFYqc3R47b
/v37Ob/bqFEjcp7/0NA+giiNn58fpzxT4uOPP5YX344ugO+9996yZcvcM0p/
+/Ztf3//QnqRru9xQ01mM8lpnAXywOPsKTpvYkCGDBnCoZXyBfM0Bj+1333P
nj2baXOfPn3kiXUP1JZ+RG484ejRo0xmE4kE95xZJuiYU/Afwr+Gky3Jo6BV
uoFCOwW0/9T48nkwa9YsYiiBBoVnceWdFVFfZo7lW2+9ZYHoh/YWw88Vtxgn
TpyoUqUKHVQFEpXJl3C5prSrZlbBggWz6OsBrWjhzZSXNAz3938IPj4+5ZT3
XDal4vSRIaRPn15l/pwdk7Tam3KWRHL+Y5x3qoJ28uTJHFoHaDKOGDGiS5cu
M2fOZJaQS2zYsIHMm66MRjb2DD1//nzKlCnDMfdj4Eu8b++AzLxnLFKkSG7F
4JGucIwlBgwYQOue426U1ltOaoEJE8kQT57QKd9WQ+00Tw9jTnGqVkuWLJlR
2Uxbg5bTppw8q549e8opXwC7s0yPaN26Nafu+OrVq+Hh4R5Q0hiPonU/NOxw
laIO+Q+nTp1yeeYGOVcLAGZDKCss9PDwaKm8CZ9heHft2sW3lhy/6Ojo598Q
3d//IQ+H9qBWyqANwqBxHgq9zCEhIVUU5olg3rZtm2FmK7bm1EJc19DGCpEL
ijfM4n16i+goITSgv2LFihUcTsKSJUsEAj5Oo0HnoGzZsnGYZSBlfULLFDMB
ICAgoLJi8DdgXrlyJYf51q1b9Fc7RpimLbOu1oSJZAva5dVdbz17no4ZY0t1
6aW/pB7HDizT+ly5cmVPIRZprtSbgpYjKmhFunK1atUcq0pwcPDgwYNdqOXi
WpAvIS8uHaD/yoksSXnJSsqb0AvkzP7aZ8+erVWrlsPU0qVLP8/m4v7+z8OH
D2n6RCmD1gd/5unTpzm/W7169UC71JXjAiWCl5Nvhc/m6en5pmJzX9g8a9Ys
js1duthueJrg2o78q2+FSI9kQqZ/fvLkSaHcM55DClCjRo04zBEREemUoViN
ofjqq68M096/f58e0xsKc0f2AZA8THrlBEQadwvxAyQxCYMGDTLMaeI/gHn/
5Z7Ily+fh75lzxOEVmiR5BRWy/LPz5UVIKMQZcuWNUwru2B01HPGYBGoUqWK
YVrC9evX8+e3SQmmxy6TCqtK/fr13VBXh3yVBg0aCHRUX4pPY1hL/yPHYYuK
ivLU64qcQ8+O3Llzc6y9cuVKmjRpPNBiewyyqmjb8vX1PXTo0LO/6P7+D6FM
mTIpMFCOQbsLXcF06dIxnefNmzdbLJbC9kalF+1xib59+3JoZaCvhTIxpaNL
nqph5qtXr5LBTi70IVRp1alTh2MzjSTNbosQY+3nqdNI0Re8y3RC+fLl0ypD
sQrMHCWQHTt2CGQRODG/hkoNzoshBdD26JfrHMgB4KgVmTCRPHH06FFaDwNw
lDiLYqWimP5Dhw7l0MoizSXKClAOd+uGaZctWyYQRnaircyufWjVyqYi/4l9
gXWkQY4fP55DmxhYvdp2Qv1fQkdLjsIS+ZbBwcH+QgyETzVaiLTg3LBhA8fa
Nm3aWPRvQjRkgf/VDU4S/o8Uo8uDjg90iNiEBuX8aKTEF198IQ/7fkhKEQh3
MHOx6FBD872uMoNqIbLE2Zq//NLWnWy7wlwUmz7H5sePHxcsWNCCwrrlWKmk
Qimzp5jV3qJrjd7gFiA/fPiwYVrZU/4rZSjKQ12fY7CXl1cZhfYEDHZVYaAJ
E8kKNFu1rfRoGWS2QSQcOXJE3n9p5+k9lH/WqFHDMO3evbaehx8rK0BuOlu9
9pph2piYGPqra+o5HwqRWYjChQsbpk0kDBgwgAbhZEJrIPPB0fDS3+t4E8hT
Xb58OYeQ9lNa8COV59UW/M++sEsS/o8VOfmBgYGOQaMdasSIES65OT127Bi9
1Q7mPHnyMJNSJKdQ6rKt9tIkjvCXFFG/rTA3Z+sSy4atn2o44xGk9fT05Agp
WyECQCRhyH++iV4VneBqktPOoZVhaqeL0fPoLsQMhQkkKDqN8H08u9q1a3OY
TSQqzPsvdwadCn/66afcuXOHhISkSJEiR44czOf15MmTkiVL0jF/pWaSykSd
efPmGaalk2DatGnT6Zs1z2bfC+zcuTPB27oWWGNdJanqKp4OHTqoG80dDAJz
3bbiTfjjjz/mz5+/Y8cOftmXrBDvoAys7Ify7EKYpOL/WJE8Nn369J49e06a
NMlVNcgyHOeFvJcJGEMfBFKYuTTyiXRUnkgdJPxzbntlQtoNhbkSfEKOzbVq
1fLTq77T52f2YkKoUKGCBVKKkvOGvQ8sM3z36afkrIlZeoMHg5nf+au8MsJ/
g3nUqFEcZhMmki12794t+0mlQvKPDLa3bduWw3n48OHQ0FALyjTq2S9TsmTJ
cvXqVQ6tvAJLi2SAjTgNydDVnDlzDHOePXtWQE7faWGhMya5W8yz/IMHD95/
//2cOXMKlKv07t2bqf9DbES1S2+q7Ctdt25dDnNigJ64qgRVD47lsyvEk5D/
kxioV6+eJ7ryOQZtC2ReqlWrxqGVoYm+yhN5A81VOcyyKfnPetqnQgSyFY/T
pUuXQTH4EF54zjW9HIp39LQxkGllRn0bNmyoOmxbYPCXX37JYS5QgJZncVw/
wgWQ/3Pr1i0OswkTyRN06EudOrW3Zkt9gPMgYcmSJRzmvn1tZSVF0QKDFseW
8KxKlSrFyazeuXMnTfZymg44J3BRFRIScuXKFWOc5OHkyJEjJU5SjoVlDaxt
3ry5YVOtOG7nzZuXBqEgoknybil79uycWi3ZFjxa2WjID6xevTrH2sSA9Na0
XUtkb7XGjRs/+4vJ2f+hCULeiJqlE4UoDacpidQlHqcwN8MtFaeP8PXr1318
fHLr5UmHuiI0ERYWllcxeD+YP/30U8O048fT4UnsU5hromaNY3DNmjWDFdpd
MHjMmDEc5jt37kgxsU9xW7cJFSWErl27cmhNJDbM+y+3xffffy/gn2hn60Mc
NvPkyWOYlo5XXl5epaGx5rQeTpkyxTCtTFk8ordW9iucP3++Ydp16+iobVMT
GoFk3d64bqClhil9I++qtKkLX8DUpk2bGub84gsbx9aE/B83jP88ePBAJrHk
R0p5Sfz5mTJlunz58rO/mJz9n/PnzycYkOyP0eNU1pPjTQyN9LSPoSNatGhR
ptlTp9JBx3YYoWk+SYjasLZw4cLMFr2ZM2cupgyFbPe5aNEiw7RDhgwREJB3
Ym4KJ5NjcLNm5E6KbXpaqX7PrCYgnDt3LjxcdqexgbzWESNGMDlNmEi2aN++
Pc2jq8o6UI0XEp83b55AJZGW8xHKn6OiogzT1qlTJ0gxVWb/DhgwwDDtpUuX
goOD02BdfYC28h+iO0C1atUM33/RF319fVUZkKrwrAzLIUZHRwul/utHjIB7
KqHFxsYOHDhQ3gDSXtapU6fn6Y2VnP0f2VlMrfSJhDIVU5OhcePGFiG+1Jx0
2uPlGTduHN/y7777LiQkRG7NFoulbdu2fMHzFi1aeAtxTAmFEc6cOWOYdv16
m86ZU5UWnSNSsy/scufOHa5XmKQlJQOvTaHEtWvXsmTJ4lB+JsJNmzZxCE2Y
SOaQEZUzymJbSIiUKVMapv38c5ta/+8KbXp0bTZM2717dwvkULScK7EacNTb
Bg+25Seu1NN2A63h5hoXL5KZtoCP0wh8C9oDBw4Yo6XNsV69ehZkcfyNpM2v
kbiVLl06Trey/wAvlFCdnP0fQrdutrdPW+oom+fy27Fdvnw5R44cAlWTNeyJ
ebVr1/7pp59cEqWnLf7QoUObN292VedcR/P3nRiHe/YuFW+++SaHNiYmhpzJ
9PpiimHscwT91SKhnP93wMzJ0rlx44a8/OqCm69x0FYiLF682DCnif8G5v2X
24KWF9sNsn62nsXM4mgV/vrrr05XP1bcWdPC1apVK8O0K1fanJ1mqIGVnHeF
KIYr+1OnThmmrV69ekplyfoNg/DFF18Y46T1SqBngRPt96D9/fffDVt75cqV
KlWqCA3oVMhsguZuSOb+z7179woVoiOILbu1uT1zLG/evC7pH0fkdOopUqQI
OQBvvPHG5MmT3VDn0wEpp5NFiJlC7MDNWhoEl5gdr+gcUaaMTUmoGhTvt9oV
JsPDwzmlmnQGkS6K06yXCgOc6o/s2bMLfRwsVgh/9m2dCRPJHLQGCuj2X0UF
xGYI/9JZ4++//zbMSYf9oKCglJpEZSsmry9Pq8eKeLiAzzMEJ8EsWFiYCvDy
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
ksd15coVPrkJ18K8/3IryFl/8h/8HzoTGWbu27evyhwPadyGDRsapl2+nJao
BKQaaZnKnDmzYVorTqwpU6ZMq4lUH0EBLC1cL6v1wzMgAzU+Goftb1TEeHh4
7NixwzBtv379hNIB5Ca8Vk5a7Pvv26SkTulpH6Gzxr+qwCVz/yc2NjZ//vxe
EGVaL8SPKPHjX8okKmRqbpQSSg1nVyjs3btXIONFyxyN95N5/Dl48KCAlKKW
+Xcwv/vuuxxmK1LNaRnJqZkCp5GrQ14KX1NLJjBofcJN9mtrJrMJE682pDpN
e8WdKMy+/6pRo4Yaqf4FE3PEiBGGaWmVEwl1Pq2JNogcg2U9aTjSn6ag+5UP
zmhz587l0CYejh49mjFjRnnFUBCKsmQtUwFJeq1/J+T/dOrUyTCtzIByCjPe
AW3r1q2f/d1k7v9YoU5TsWJFR44HPWVyU1+KFvdzYuVK2wXdGmWSvgfjOZHP
p0+f1qpVy4PWECHuIWVxHWQBaLHauXMnx2ZibtCgAb2QdAC4gZPaNiGyY8CZ
LTAIEydOFLi11I7GepCPHj2aw0yDSUPaRhnqDhhqt9XeNGHCTSCPD1OU/OeO
HTsa5jxy5AgxOCmiXMVKRV4KR11k0KBB6gZNn/y8uqcrV67QAS2XENfshDQa
7dhBsMTGrVu3+vfvX65cuXz58rVs2XLbtm1MQqktMFw/thMxDrNmzTJM26pV
K9Vr/RO0b7/99rO/a/o/Vmxzv//++5QpUxYuXGhY3PKfsH//ftri27ZtO3Lk
yH379vHvv5YuXSr0vbTkZyieOCf3z4p0GlpD/NGc9wyCtF3hSNeuXZuZXEQD
6+fnl1KTVvcnusDTzzHz/2VvuFv60XgAs9u0acNhpmdHzEuVoZaZ21u3buWQ
m3A5zPsvd8OjR4/U+vfXXnvNynhYtFcKRfTvCa6/mZfp69fbjk0j9MxnYDOn
ofy3336rJv/cwYD8a4DCTeCSmfX48WPyh32gLHQF3uAEdLEk/4rTrrphw4be
yhJ97vmytkz/J/FADsOQIUM8PW3z3oLH4eHhMXjwYKYjQW65ektFn1K48WHa
LBOiZirhDsEWBJBu2yTlCowwYMAADjM5lkIRMZBKIPXq1eMw379/XySkAyb7
uPE1AUyYeIXRsmXLwMBAi8Xi5eVFx5zg4OACBQpwMl0lpDDFUWVWpmE3/Tx4
8KBNoVGI7+ycJ3BGo3Wb/i/DtLRBJ3itltHuCjJx9+5dOosdOXLkpbSQeCGc
OHFCChdY7HsiOT+csbXa04qc7r9+BfmXX3757O+6iePxPztetiGuxMKFCwXc
ku3o2RqNnmUEfuV+4cKFPZGI4njcM8HMP000a9bMV9/42IpWOPy7pI8++kgo
eh1WyDXUqFGDwyyrFWro6/huC5Eb5VqGRVAlwsLCaD28q2GOESLQFTpgJky8
qqCNOCQkRKAcu6P9pptOgvx8vCdPngQFBeVXinZl1xtO3ubDhw8LFizoh7qS
y/hMR3U2+W9Tp07l2Fy+fHlvxeBYOAAVK1bkMN++fbtt27ZkoQyshYaGfvvt
txxCB+Li4mj/6t69e8eOHWfMmBETE+MSWitCgt98802PHj26du06e/ZsTuW7
BB3MBbpJPtLE1opDX5fcrQS/8j8NmL/uEriJGa5Fzpw50+nvZei5ZOK1p5Gg
x+rv7++JLOgPsPXTBEiXLh1fRbxRo0YBStv6Pa5I1ElQU+Iuair/9Zb2X0Hn
Sgsyi7Tk38FsmsUc5uHDh8tl/EchjguxDGoAhBUrVjBtNuFymPdfboJKlSoJ
vYDeMfsG7fh3jD2sf5Im7gH+AwcOGLZZVquN09N+AlqmU1G2bNlwxeATYO7Q
oYNhWnJRaN2TR7+JaIOYAZwzZ87kWGtF92dHFwDpWtHmsnv3biatxJ49e8aN
G9evX7/58+e7SsdGthXLi5r997DJiufrV+smjoebmOFCyCotVfurKx7NtWvX
mPynTp2qWrWqvFzz8/Nr2bIln9Nqv0tyan/TDzavXbuWw3zkyBE6p1TRO1f9
wcwvgoiMjEytDPVBkA8dOpRJvnjxYvI27ckLtv5f9HO0JHL00EyYeIXh4eFR
SZmP0zF9zp8/z2E+dOiQgNyxE3kTTMxHjx4ZZu7WrZtFk6IsPy6RaO7a1bbq
H9EzjwXzmjVrDNPKo9lQ/fk6J7YDjl8RHx8fERHhhUTlS6jPmiFEMLpNMXXP
6OnIWi0HyK1yiZz+kydPJk2alCZNGkmbJUuW77777nm+6CaOh5uY4ULILB21
9rO7i/wfiYcPH548edKFhUhkWNq0aUOQrXcfEZWPUfxYrlw5/uVynz59BC4B
v6IjlRDNcLgg14KjKSEhu8063bDPx1CT98Ikt2J+bdiwQWpOOpAiRQrXanqb
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
O7Rr165hYWFsKtKz8uWXXyaEbomJQv9ZtIi2RTRAF07el+PI/goPDzeJpWkD
4rdA2YLTiS2pokuv1cSGzG+OM78Gp2W9evXMj1+3bt0kjr7c+6g1IKVFSd7+
8eO0k6K74/xfgkWhQoXMj8+pd19Jm9sK97p3797mWegUGBiYROpEXBjhMPPl
bG5yU0Iget+FqyxZ9sabz0Kh8fPlyydgRMj+k6RJk+7fv98kix9/tCPBh5Bh
gvylx4h8rRAiDdpemO/IkD59ehn5h2tCFdYsK6fLly/T56c1oE1uQbduEvUm
q1Fu3ryZLVs2zhOoIURaLEW5cuUSAkhsotB/6FI0aWLHTsiC4q/3Eaj18vJS
Yu7R7ghUBhmP6xngKZmPBTvR9evXN23aFHt0gn8kUv8CAgJSQiHkmd9DIhPR
xo0bzY9/9OhRX1/fUPjHdgI/MDcGnzJlivnBiZYvX06jTZfERRXTWKZMpKSl
SpUqHSr3jeO/QDo0HaFjx46Z52LT3gUZq4RzsRYsWKCEi5vc9MYpODjY0zFQ
Eg1rVAng89KlS4Vj2aZ+YX2FqF69usnxL1y4QLc+iwEZlQyW+rikJHB+++03
859QsmRJL6Qq6ZN/IERmJJSaz9W5cePGd99916BBgxYtWkycOFFVETHT4sWL
Sdp7ok4kO9La/f39zXe+aNq0qYfBCf9cK6JR4uEn2rdv39ChQ9u3bz9q1KjX
rfpJFPqPDQ/ZDz/8kDkznSN75ILO2M6dO1Vx/+ijjwQ2hUNsO9Goha6z+V6Z
Oh05csRYBVa2bFlVJWArVqzw9vZOihbJ76FFl9173LOnksFtcEenS5fOKa0l
Y8aMJlHcmbgKvpujrItGcd/bb79tfnybVteQTfLMsLv7H3vkxVLHfvyY7Ejx
qyS3r4NLjx49VHyKm/6B3PEv62jPnj3NmzcvUKAAYz77CLEMYa+tUH7E6wPG
utystm3b0lt5Q7pH3DmCnn6TX0GfIIDQaBz8hjosPq5MJ4OxMWq+tqFg/21M
ftq0aSYHX7t2LSmfAggqXhgzd+7cqop0mMgebNWqFQ2bN2/e1q1b649UnG8W
47xVc1zwKAhk8xmqZHX26tXLWLjt4+NDekLsR0gs+o9Ot27dUtU6TacHDx4w
FpYHsBQEEC3GjBmjanx65Un5TwKP6yg0r/EG9JNJIFCdDh06VKNGDboaSZMm
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
Pz5QLYw2CX+SGCNHjly9erVF0WpurLNT2q+SyJ9RxWX9+vVk7eqqeIYMGdau
XatqcKKmTZsKeDtl/Sdu5cYJRPFIINOwaWCq+g7SZSdDRmFYivt/qRrtH2nX
rl3h4eHGaEj+/PmV4+TY4JFImTJluKFzDf2sRi2DNzrVKvduTZ06VUjghLug
svrC4zFt2jTzXOTNmjNnjkDcTW7vaINtkiq+0Lz37NlDm8tNvX19fdu2bUvq
bkAMDyXJIhtyAOrVq1ejRg0rsALeOP0L4l96KYFOHTt2DAgISCZt6wv8Vnnz
l5iI9AG6cWTL+CHhTT75qzRXdt68eWOTFfxam8WX7mtHjtdQZ1EYwi0sLEyh
kUVqZ5UqVXj9Fzsy5WwWVekQNjRv1fvdcCDAitbGqVKlyiU1NHwCzYG+9B//
eWw2a9++fWT6JYM5thSguMkgCRX2r69QoYKskbLPP2412glE8Ugg02A6d+4c
af76gQwNDZ09e7bylNp4o0ePHtEVoxXu1KkTfYh1IOTc9zkE+XVGQ+MvVG0r
ROpmun79Ogm9NNB5mJFuDx4XIiuUrlOnTqllysQ1GgXRHld+CE7AC5QiRQqy
hqzg/goi/UcuCGL9J23atLRcxoc1MDBQbY82N5mkLl26CLQ1vIYKo4tazyzO
NHbKtFmIXw0ZMiQeJkbSj0sOk7uqbuaf6phPt27d1Ia9mCpXruwlhaJsGvBp
mzZtrl27popXdHR00aJFPZFkuxtpzwewHQ8QYk4iRLFixVRJUfbiZhRimhBb
Af4cihLOAwcOKBmf6epVe9bnJ9Lq/YItUwUbUqZMGR/4x/TxD6E2lpZLyfhE
pO1nkb5iK75i0KBBcRgwgSgesZwGmRXTp0+nd7xv375r1qyxQid5+vRpnjx5
yKBoJMQUuHM5g0ttZbqR6CtOnz5NBsXZs2cTr5bFRF9BlzevdEQ5aTBuKfqv
ILJKyHRKAhtwvSNH7nY9dOhQtRyZnj171q9fPxK8OSWTin96aIi7AwYMsGIC
MVHBgvaaY6fW2ycxE9oXgSq5h8hWWgKr2d1EPuEQ3X06UU7IGC/R5Yf2jn7l
h6D8CzSzmIU9tQIxXiZ667/66iuBSOsDV6f9KVQFYU1DXlqWuXPn0pdmcsW6
CMLrajnyx37hyGgwAusCBVMnT55UwogW1svLK62jXncEiJGlS5dWwoKJNFI6
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
CcnAXvzwz6BBpm6HR8wHcyIGc9u2bfH4wgQhXtCmkWILBIMx3ROcP3z4QKZi
A0t6dic41KWAZCxE8o2Zd8fgn/JokGENlV3jRy9evChb1hR7ZQPFxGmWpXlZ
p7jSHPCPK7tInLF2xffkzJmT1GWePHnc3d2rVq26adMmvd/yO8WVSJwOGzZM
LC2eLVs2EmI7duzg+kKsw/wIEc4ynHxfWD8/mbtH0gmdvETfUWLsQ/fkyRPu
MZC+8mfGfkCCgFVlB5ASZ/ClS1mdi8FPnz79q1evNOZn7FhTHZGWQlmAZ3Ag
Lwdgzg2uNC7M0qxZM4Z0V+n4vAM8a9eunZaccIoFeJw4cYL24/Pnz9+8eTNx
4kQloiB4M3PmzMjIyH/++YcgEG/YbfGvPn/+3KdPn7///jtMoLizEQuRwZtS
oRouYlpp3uPxhQlFJUqUyCD0pBY/9cFYx44ddddK9evXt8FhimzodoDDRYsW
6cuejCIiIlKnTu0oAbqfUbyCqEePHuJtr1+/Hjp0aJEiRUjOlClT5vfff0+Q
p6t6pEJQmdAmbfwaNWrQBvHy8nKCjfavZFJCUUtTNlMzLMGk6RgTsveLMlYN
IeIM9RV3795NlkKbNm369u1Lw6K9ENaMEtf51/r165s0aZI3b946depMnz69
du3aDAHwgYz1wiEpUZUqVQyKsNW1inIKf+NmWj/0bxnUdu4KUE3wgDc6P3z4
8N27d63qhFQ6WcTY+PHjaShcXV0Jw9NekK3S7t27m4QnY09RPvSuUFrWSs4v
RHr37h2BTEfs4ofgcyQ8tOnSpXv58qXGzPBWF4XMa5FFCiVQUqRIQWgtjksi
oXYWzW8OxTGcESVi6tatmyCP+CqKZf0EBQXt3buX/3z16tWBAwdK/5fs7oCA
AEI+/FcaH+43sPhXjx496tmz5/z58wkaEWRSVt6L3zJu3bq1rSJk4qAVOEXp
TRmSd94I+noiOlnzY4vSpUvrm2x+//59sgpp6M6ZD10LsKdjDcmY6MyZM05O
psHzQm3t7OAzX758YsFkWmk8QMIDR0K2uKF8+fI6HoPGg2jkCxbkxVdMWmwg
Y62QxVwYMl+cpihU8FbiHyPsfbHv2EugIJEMkp/9/f25DfLhwwdSi4nXh5Yo
iIb38uXLhEKfPHnCr5DSadu2LcPkFhBimLl+F1XDM+gpW1vbVIpZvgKEI73S
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
T9+tpKamAmkJCgq6d+/eD3Enig8fPpw4cQJY3JUrV34ijDP84oMHD27dupV1
5sPAwCB9SIR4SKQZuQB2/6VdYIOlRWCDpUVgg6VF0NXBkgjxkEgzGBgYGBgY
GPQBEiEeEmkGAwMDAwMDgz5AIsTjf3JouiE5Dnb/pV1gg6VFYIOlRWCDpUXQ
scH6Hw+abosMEmkGAwMDAwMDgz5AIsRDIs1gYGBgYGBg0AdIhHhIpBm5AHb/
pV1gg6VFYIOlRWCDpUXQ1cGSCPGQSDMYGBgYGBgY9AESIR4SaQYDAwMDAwOD
PkAixEMizcgFsPsv7QIbLC0CGywtAhssLYKuDpZEiIdEmsHAwMDAwMCgD5AI
8ZBIMxgYGBgYGBj0ARIhHhJpRi6A3X9pF9hgaRHYYGkR2GBpEXR1sCRCPCTS
DAYGBgYGBgZ9gESIh0SawcDAwMDAwKAPkAjxkEgzcgHs/ku7wAZLi8AGS4vA
BkuLoKuDJRHiIZFmMDAwMDAwMOgDJEI8JNIMBgYGBgYGBn2ARIiHRJqRC2D3
X9oFNlhaBDZYWgQ2WFoEXR0siRAPiTSDgYGBgYGBQR8gEeIhkWYwMDAwMDAw
6AMkQjwk0oxcALv/0i6wwdIisMHSIrDB0iLo6mBJhHhIpBkMDAwMDAwM+gCJ
EA+JNIOBgYGBgYFBHyAR4iGRZuQC2P2XdoENlhaBDZYWgQ2WFkFXB0sixEMi
zWBgYGBgYGDQB0iEeEikGbkDvXpYbQcbLC0CGywtAhssLYKuDpZEnksizcgF
/Pfff/rzsDoANlhaBDZYWgQ2WFoEXR0siTzXLzYjh55Ci76WNVWLvlaLmppD
X8uaqkVfq0VNzaGvZU3Voq/9oe9k/Ec3vpY1VYu+VouamkNfy5qqRV+rRU3N
oa9lTdWir9VS/sPAwMDAwMDAkGvQNPdhYGBgYGBgYGBgYGBgYGBgYGBgYGBg
YGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGDIQbx+
/Xrx4sVubm6enp5RUVGqit2/f3/GjBk/Woshe5Gamurr6zt69Ojx48efPHlS
XEDpuDx9+pQfSmLv3r2522r9wqFDh8aNGwdjtGXLlrS0tCwWyLQWQ04gPDwc
tjVYL8uWLXv37p24gNJx+eeff/gL6uvXr7nbaj1FpoNFAUMGg8X9lx1VDKqQ
np4OM+rw4cOwtK9everh4ZGSkiIo8/3797Nnz8IOMG3atKzXYsgJwLpes2YN
9PaLFy+AAj148ID/qapxAaa0cuXKeDnYYOUcQkNDYZm8ffs2MTFx0aJFBw8e
zEqBTGsx5ASgw0eNGnX37t0vX77s3r0bTlVBAaXjAvvhmDFjIiMjuQWlibbr
HTIdLADsbAEBAcBIOf7DjioGNXj8+DFMCVjR9L/e3t7nz58XlNm3b5+Xl9fx
48c5/pOVWgzZDljLI0eOBOZD//vff/9t2rSJX0DVuGzYsAG2i7lz586ZM0ep
1oghu7BixYoTJ07Qv+/duzdx4sSsFMi0FkNOAI5FkCbo31+/fnVzc4uNjeUX
UDour169gpK+vr6wH0J1OJdzudn6iUwHKwN3vI0bN27bto3jP+yoYlCDixcv
LliwgPvv9u3bgVoLyiQkJMC/d+7c4fhPVmoxZDtgp+Ur20GcAT7DL6BqXKZM
mQLb9Zs3byIiIsaPHx8SEpKLrdYvTJ48GVYK/fvjx48wXp8+fcq0QKa1GHIC
fn5+/LvgGTNm3Lhxg19A6bjAKhs9evStW7dgQcESg8XF7r9yAZkOFuDDhw/w
LxTj+A87qhjU4PTp03xFYmBgIP/mlA8+/8l6LYZsxMuXL11dXbn/hoeHcyNC
oWpc0tLSOAkIyM+sWbNypb36iDFjxnCXkikpKXBiCu5HlBbItBZDTsDHx4d/
1Th37tzQ0FB+AVXjwhGe9PT0CRMmhIWF5VaT9ReZDhYHPv9hRxUDxfLly0cp
4tKlSxcuXFi4cCFXBuhxQECA0up8/pP1Wgw/B1jpgsGCZUv1P5wRplj/k5Vx
uXv3LuzqOd1+vcWkSZMiIyPp30o1OUoLZFqLISfg5+cXHBzM/XfGjBk3b97k
F8jKuCxatAgO2ZxuKkOmg8WBz3/YUcVAAev3nSJSU1MfPXoEpyGnHFiyZMm5
c+eUVufzn6zXYvg5wDYrGKykpCRq/xMdHU3L/Pfff76+vvxaSsclOTl58uTJ
nD4hJCTEy8srN59FrwBSxqlTp+jf9+/fnzBhQlYKZFqLISdw+PDhdevW0b+p
ScmbN2/4BZSOC6w77g4FluT48eMjIiJysdV6ikwHiwOf/7CjikENYGJMnTr1
0KFDaWlpYWFho0ePTkxMhPdjYmJgvfNL8vmPqloMOY3NmzevXr06JSXl5cuX
3MYLzJZq4FWNC4iomzZtgk0DaoFIq0pvzPDruHjxIiyTuLg4oJ3e3t7UYgFO
SRgOOhZKCyh9kyGnERsbO2rUqMjISFgvgYGBnFwQFRX16tWrDBXjcvfuXaj1
5MkTqAXvzJw5E8ZXk4+hH8h0sDjw+Q87qhjU4/Xr18CKYWJ4enrC0qZv7tmz
B97kF+PzH1W1GHIanz9/9vPzA4kGRFHOk+vWrVv/+3/t3DEOwBAUxvHbdjK4
hJHNRWxm9zHb2i+RSAftWE38f5MIiXjhPYvj6O1pXGqtMUZrrWblnNcsfQ+6
b3XZqsjUbo8fY1prClB/UEwHTDvxAZ0dnRQlVu/9+FLGOZdSOp/jUkpRVjXG
hBBUHS1b/WbegzXc65+TVAUAAAAAAAAAAAD8zwUKixid
    
    "], {{0, 557.25}, {576., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Large,
  ImageSizeRaw->{576., 557.25},
  PlotRange->{{0, 576.}, {0, 557.25}}]], "Output",
 CellLabel->
  "Out[106]=",ExpressionUUID->"4138f2fd-e7c8-40fc-b887-43833f4cfd1f"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-12:  (FORTRAN) Elements", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"65445080-193f-4b0c-b9e3-c3cfd3c50e04"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[1]:=",ExpressionUUID->"eea1acde-d3c5-41b2-9cc3-03b35a9f5bd8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", 
   RowBox[{"\"\<PROJECT\>\"", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
    RowBox[{"List", "[", "]"}]}], "]"}]}]], "Code",
 CellLabel->"In[2]:=",ExpressionUUID->"f9cec06d-0d5f-49d3-a1d8-9256e6c4702e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"8e44f461-14b9-41eb-ac43-061e2eac90e1"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "simple", " ", "element"}], " ", "*)"}], "\n", 
  "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], "*", 
         RowBox[{
          RowBox[{"P1", "^", "2"}], "/", 
          RowBox[{"(", 
           RowBox[{"1", "+", "K1"}], ")"}]}]}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"KICK", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<KICK\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
          RowBox[{"Q1", "^", "2"}]}], ",", 
         RowBox[{
          RowBox[{"1", "/", "6"}], "*", "KS", "*", 
          RowBox[{"Q1", "^", "3"}]}]}], "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "KICK"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<MULT\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<KICK\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<KICK\>\""}], "}"}], ",", "0"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<ELEMENT\>\"", "]"}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"MULT", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<MULT\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", "\"\<MULT\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"KQ", ",", "KS"}], "}"}]}], "}"}], "}"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "MULT"}], "]"}], " ", ";"}]}]}]], "Code",\

 CellLabel->"In[3]:=",ExpressionUUID->"e2bfd763-4b3b-4c58-a901-3ebb1467f23f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "code"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"I$CODE", "[", 
    RowBox[{"Rule", "[", 
     RowBox[{"\"\<LEVEL\>\"", ",", 
      RowBox[{"Plus", "[", "1", "]"}]}], "]"}], "]"}], " ", ";"}]}]], "Code",
 CellLabel->"In[14]:=",ExpressionUUID->"bb1b856a-ed07-4b9c-b5fb-db6dce38b98b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Generated", " ", "maps"}], ",", " ", 
    RowBox[{
    "sequences", " ", "and", " ", "elements", " ", "can", " ", "be", " ", 
     "converted", " ", "to", " ", "FORTRAN", " ", "modules"}]}], " ", "*)"}], 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Additional", " ", "variables", " ", "global", " ", "variables", " ", 
    "can", " ", "be", " ", "used", " ", "to", " ", "tweak", " ", "conversion",
     " ", "process"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$FORTRAN$DIRECTORY", " ", "=", " ", "I$DIRECTORY"}], " ", ";"}],
    "            ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", " ", "FORTRAN"}], " ", "output", " ", "directory"}], ",", 
     " ", 
     RowBox[{
      RowBox[{"(", "default", ")"}], " ", "I$DIRECTORY"}]}], " ", "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"I$FORTRAN$REAL$PRECISION", " ", "=", " ", "16"}], " ", ";"}], 
   "                ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", " ", "FORTRAN"}], " ", "number", " ", "precision"}], ",", 
     " ", 
     RowBox[{
      RowBox[{"(", "default", ")"}], " ", "16"}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$FORTRAN$LENGTH", " ", "=", " ", "130"}], " ", ";"}], 
   "                       ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", " ", "FORTRAN"}], " ", "line", " ", "length"}], ",", " ", 
     
     RowBox[{
      RowBox[{"(", "default", ")"}], " ", "120"}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$FORTRAN$REAL$KIND", " ", "=", " ", "\"\<RK\>\""}], " ", ";"}], 
   "                   ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", " ", "FORTRAN"}], " ", "kind", " ", "for", " ", "real", 
      " ", "numbers"}], ",", " ", 
     RowBox[{
      RowBox[{"(", "default", ")"}], " ", "\"\<RK\>\""}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$FORTRAN$REAL$KIND$VALUE", " ", "=", " ", "\"\<C_DOUBLE\>\""}], 
    " ", ";"}], "       ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", " ", "FORTRAN"}], " ", "real", " ", "kind", " ", "value", 
      " ", "from", " ", "ISO_C", "_BINDING"}], ",", " ", 
     RowBox[{
      RowBox[{"(", "default", ")"}], " ", "\"\<C_DOUBLE\>\""}]}], " ", "*)"}],
    "\n", 
   RowBox[{
    RowBox[{"I$FORTRAN$FLAGS", " ", "=", " ", "\"\<-O3 -march=native\>\""}], 
    " ", ";"}], "        ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", " ", "FORTRAN"}], " ", "compilation", " ", "flags"}], ",",
      " ", 
     RowBox[{
      RowBox[{"(", "default", ")"}], " ", 
      "\"\<-std=f2018 -Wall -pedantic -fPIC -O3 -ffast-math -frecursive \
-march=native -Wno-unused-function -Wno-unused-value\>\""}]}], " ", "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"I$FORTRAN$COMPILER", " ", "=", " ", "\"\<gfortran-10\>\""}], " ",
     ";"}], "           ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"--", " ", "FORTRAN"}], " ", "compiler"}], ",", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"(", "default", ")"}], " ", "gfortran"}], "-", "10"}]}], " ", 
    "*)"}]}]}]], "Code",
 CellLabel->"In[15]:=",ExpressionUUID->"220b1284-11c9-47b4-a19a-ecd0e1386036"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Code", " ", "for", " ", "maps", " ", "is", " ", "generated", " ", "by", 
    " ", 
    RowBox[{"I$FORTRAN$MAP", "[", "]"}], " ", "function"}], " ", "*)"}], "\n", 
  RowBox[{"TableForm", "[", 
   RowBox[{"Options", "[", "I$FORTRAN$MAP", "]"}], "]"}]}]], "Code",
 CellLabel->"In[22]:=",ExpressionUUID->"8643dbd0-4b8a-4fec-bb62-a3a5f5b41ff0"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"\<\"EXTEND\"\>", "\[Rule]", "0"}]},
     {
      RowBox[{"\<\"USE\"\>", "\[Rule]", 
       RowBox[{"{", "}"}]}]},
     {
      RowBox[{"\<\"PARAMETERS\"\>", "\[Rule]", 
       RowBox[{"{", "}"}]}]},
     {
      RowBox[{"\<\"VARIABLES\"\>", "\[Rule]", 
       RowBox[{"{", "}"}]}]},
     {
      RowBox[{"\<\"PROLOG\"\>", "\[Rule]", 
       RowBox[{"{", "\<\"\"\>", "}"}]}]},
     {
      RowBox[{"\<\"EPILOG\"\>", "\[Rule]", 
       RowBox[{"{", "\<\"\"\>", "}"}]}]},
     {
      RowBox[{"\<\"IO_PROLOG\"\>", "\[Rule]", 
       RowBox[{"{", "\<\"\"\>", "}"}]}]},
     {
      RowBox[{"\<\"IO_EPILOG\"\>", "\[Rule]", 
       RowBox[{"{", "\<\"\"\>", "}"}]}]},
     {
      RowBox[{"\<\"IO_UNIT\"\>", "\[Rule]", "\<\"*\"\>"}]},
     {
      RowBox[{"\<\"IO_FORMAT\"\>", "\[Rule]", "\<\"*\"\>"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[22]//TableForm=",ExpressionUUID->"7faf3fa4-1ca5-404e-8df4-\
d6463adcd1e6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "\"\<EXTEND\>\"", "                                       ", "--"}], " ",
      "extend", " ", "state", " ", "dimension", " ", 
     RowBox[{"(", "integer", ")"}]}], ",", " ", 
    RowBox[{
    "adds", " ", "extra", " ", "dimensions", " ", "to", " ", "state"}], ",", 
    " ", 
    RowBox[{"should", " ", "be", " ", "matched"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "\"\<USE\>\"", "                                          ", "--"}], " ",
      "use", " ", "additional", " ", "modules"}], ",", " ", 
    RowBox[{"list", " ", "of", " ", "strings"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<PARAMETERS\>\"", "                                   ", "--"}], " ", 
    "list", " ", "of", " ", "paramters", " ", 
    RowBox[{"(", "definitions", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<VARIABLES\>\"", "                                    ", "--"}], " ", 
    "list", " ", "of", " ", "variables", " ", 
    RowBox[{"(", "definitions", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<PROLOG\>\"", "                                       ", "--"}], " ", 
    "prolog", " ", "code", " ", "to", " ", "execute", " ", 
    RowBox[{"(", 
     RowBox[{"FORTRAN", " ", "code"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<EPILOG\>\"", "                                       ", "--"}], " ", 
    "epilog", " ", "code", " ", "to", " ", "execute", " ", 
    RowBox[{"(", 
     RowBox[{"FORTRAN", " ", "code"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<IO_PROLOG\>\"", "                                    ", "--"}], " ", 
    "prolog", " ", "IO", " ", 
    RowBox[{"(", 
     RowBox[{"FORTRAN", " ", "code"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<IO_EPILOG\>\"", "                                    ", "--"}], " ", 
    "epilog", " ", "IO", " ", 
    RowBox[{"(", 
     RowBox[{"FORTRAN", " ", "code"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<IO_UNIT\>\"", "                                      ", "--"}], " ", 
    "IO", " ", "unit"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<IO_FORMAT\>\"", "                                    ", "--"}], " ", 
    "IO", " ", "format"}], " ", "*)"}]}]], "Code",
 CellLabel->"In[23]:=",ExpressionUUID->"14002319-ac6c-4994-947e-8660b47da812"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "FORTRAN", " ", "map"}], " ", "*)"}], "\n", 
  RowBox[{"DATA", " ", "=", " ", 
   RowBox[{"I$FORTRAN$MAP", "[", "\n", "\t", 
    RowBox[{"\"\<DRIF\>\"", ",", "\n", "\t", 
     RowBox[{"\"\<EXTEND\>\"", "     ", "\[Rule]", " ", "4"}], ",", "\n", 
     "\t", 
     RowBox[{"\"\<PARAMETERS\>\"", " ", "\[Rule]", " ", 
      RowBox[{
       RowBox[{
       "StringTemplate", "[", "\"\< REAL(RK), PARAMETER :: PI=``\\n\>\"", 
        "]"}], "[", 
       RowBox[{"I$FORTRAN$REAL", "[", 
        RowBox[{"N", "[", "Pi", "]"}], "]"}], "]"}]}], ",", "\n", "\t", 
     RowBox[{
     "\"\<VARIABLES\>\"", "  ", "\[Rule]", " ", 
      "\"\< REAL(RK) :: VARIABLE = STATE(1)*PI\\n\>\""}], ",", "\n", "\t", 
     RowBox[{
     "\"\<PROLOG\>\"", "     ", "\[Rule]", " ", 
      "\"\< VARIABLE = VARIABLE**2\\n\>\""}], ",", "\n", "\t", 
     RowBox[{
     "\"\<EPILOG\>\"", "     ", "\[Rule]", " ", 
      "\"\< VARIABLE = VARIABLE+1.0_RK\\n\>\""}], ",", "\n", "\t", 
     RowBox[{
     "\"\<IO_PROLOG\>\"", "  ", "\[Rule]", " ", 
      "\"\< !WRITE(*,*) \\\"ENTERING MAP\\\"\\n\>\""}], ",", "\n", "\t", 
     RowBox[{
     "\"\<IO_EPILOG\>\"", "  ", "\[Rule]", " ", 
      "\"\< !WRITE(*,*) \\\"EXITING MAP\\\"\\n\>\""}]}], "\n", 
    "]"}]}]}]], "Code",
 CellLabel->"In[24]:=",ExpressionUUID->"8000cf45-64fa-4118-be5d-d848b39ea6af"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"NAME\"\>", "\[Rule]", "\<\"DRIF\"\>"}], ",", 
   RowBox[{"\<\"TYPE\"\>", "\[Rule]", "\<\"MAP\"\>"}], ",", 
   RowBox[{"\<\"SRC\"\>", "\[Rule]", "\<\"drif_map\"\>"}], ",", 
   RowBox[{"\<\"OBJ\"\>", 
    "\[Rule]", "\<\"gfortran-10 -c -O3 -march=native drif_map.f90\"\>"}], ",", 
   RowBox[{"\<\"USE\"\>", "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[24]=",ExpressionUUID->"0cd6e191-1d81-4cfd-a0f9-7e31e4a5307a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Print", " ", "generated", " ", "code"}], " ", "*)"}], "\n", 
  RowBox[{"FilePrint", "[", "\"\<drif_map.f90\>\"", "]"}]}]], "Code",
 CellLabel->"In[25]:=",ExpressionUUID->"6d4cda5c-50df-4890-8070-398e6562ba85"],

Cell["\<\
!gfortran-10 -c -O3 -march=native drif_map.f90
MODULE DRIF_MAP
 USE ISO_C_BINDING
 IMPLICIT NONE
 PUBLIC :: DRIF_MAP_SUB
 PRIVATE
 INTEGER,PARAMETER :: RK=C_DOUBLE
 REAL(RK), PARAMETER :: PI=3.141592653589793_RK
CONTAINS
SUBROUTINE DRIF_MAP_SUB(S,L,F,STATE)
 REAL(RK),INTENT(IN) :: S
 REAL(RK),DIMENSION(1),INTENT(IN) :: L
 REAL(RK),DIMENSION(1),INTENT(IN) :: F
 REAL(RK),DIMENSION(8),INTENT(INOUT) :: STATE
 REAL(RK),DIMENSION(1) :: O
 INTEGER :: I,J,K,N
 REAL(RK) :: VARIABLE = STATE(1)*PI
 VARIABLE = VARIABLE**2
 !WRITE(*,*) \"ENTERING MAP\"
 STATE(3)=((STATE(3)+F(1)*STATE(2)*STATE(3)+S*STATE(4)))/(1._RK+F(1)*STATE(2))\

 VARIABLE = VARIABLE+1.0_RK
 !WRITE(*,*) \"EXITING MAP\"
END SUBROUTINE DRIF_MAP_SUB
END MODULE DRIF_MAP\
\>", "Print",
 CellLabel->
  "During evaluation of \
In[25]:=",ExpressionUUID->"53a67c11-5c55-46a6-aa1c-ecfdd35be501"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Compilation", " ", "command", " ", "is", " ", "given", " ", "by", " ", 
    "\"\<OBJ\>\"", " ", "key"}], " ", "*)"}], "\n", 
  RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}]}]], "Code",
 CellLabel->"In[26]:=",ExpressionUUID->"31d85d5a-7272-47fd-a728-2d44fe93cfb5"],

Cell[BoxData["\<\"gfortran-10 -c -O3 -march=native drif_map.f90\"\>"], \
"Output",
 CellLabel->"Out[26]=",ExpressionUUID->"96ef66b4-1410-445b-8f0f-bb99c76a1c95"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Generate", " ", "FORTRAN", " ", "maps", " ", "for", " ", "all", " ", 
    "maps", " ", "in", " ", 
    RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Rewrites", " ", "previos", " ", "definitions"}], " ", "*)"}], 
  "\n", 
  RowBox[{
   RowBox[{"DATA", " ", "=", " ", 
    RowBox[{"Map", "[", 
     RowBox[{"I$FORTRAN$MAP", ",", 
      RowBox[{"Keys", "[", 
       RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}], "]"}]}], "]"}]}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[27]:=",ExpressionUUID->"5e1a6a04-75fd-4e8a-8d41-d2872d26736c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compile", " ", 
    RowBox[{"(", 
     RowBox[{"can", " ", "be", " ", "done", " ", "in", " ", "parallel"}], 
     ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"Echo", "[", 
       RowBox[{
        RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
        RowBox[{
         RowBox[{"Run", "[", 
          RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
         RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"Through", "[", 
      RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[28]:=",ExpressionUUID->"2f7e7877-2c55-441f-a730-53edaf134889"],

Cell[CellGroupData[{

Cell[BoxData["\<\"0 <- gfortran-10 -c -O3 -march=native drif_map.f90\"\>"], \
"Echo",ExpressionUUID->"0c5db54c-aeec-456b-ab3a-036397b2eb1d"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -O3 -march=native kick_map.f90\"\>"], \
"Echo",ExpressionUUID->"292e301d-5165-4e35-870d-92f0a34024a9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Code", " ", "for", " ", "sequencies", " ", "is", " ", "generated", " ", 
    "by", " ", 
    RowBox[{"I$FORTRAN$SEQUENCE", "[", "]"}], " ", "function"}], " ", "*)"}], 
  "\n", 
  RowBox[{"TableForm", "[", 
   RowBox[{"Options", "[", "I$FORTRAN$SEQUENCE", "]"}], "]"}]}]], "Code",
 CellLabel->"In[29]:=",ExpressionUUID->"88d20ac6-34b8-43dd-b6aa-8315a53ab2d5"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"\<\"EXTEND\"\>", "\[Rule]", "0"}]},
     {
      RowBox[{"\<\"USE\"\>", "\[Rule]", 
       RowBox[{"{", "}"}]}]},
     {
      RowBox[{"\<\"PARAMETERS\"\>", "\[Rule]", 
       RowBox[{"{", "}"}]}]},
     {
      RowBox[{"\<\"VARIABLES\"\>", "\[Rule]", 
       RowBox[{"{", "}"}]}]},
     {
      RowBox[{"\<\"PROLOG\"\>", "\[Rule]", 
       RowBox[{"{", "\<\"\"\>", "}"}]}]},
     {
      RowBox[{"\<\"EPILOG\"\>", "\[Rule]", 
       RowBox[{"{", "\<\"\"\>", "}"}]}]},
     {
      RowBox[{"\<\"IO_PROLOG\"\>", "\[Rule]", 
       RowBox[{"{", "\<\"\"\>", "}"}]}]},
     {
      RowBox[{"\<\"IO_EPILOG\"\>", "\[Rule]", 
       RowBox[{"{", "\<\"\"\>", "}"}]}]},
     {
      RowBox[{"\<\"IO_UNIT\"\>", "\[Rule]", "\<\"*\"\>"}]},
     {
      RowBox[{"\<\"IO_FORMAT\"\>", "\[Rule]", "\<\"*\"\>"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[29]//TableForm=",ExpressionUUID->"a5baca94-a6dd-4bfd-8ca6-\
9a21942f4d44"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "\"\<EXTEND\>\"", "                                       ", "--"}], " ",
      "extend", " ", "state", " ", "dimension", " ", 
     RowBox[{"(", "integer", ")"}]}], ",", " ", 
    RowBox[{
    "adds", " ", "extra", " ", "dimensions", " ", "to", " ", "state"}], ",", 
    " ", 
    RowBox[{"should", " ", "be", " ", "matched"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "\"\<USE\>\"", "                                          ", "--"}], " ",
      "use", " ", "additional", " ", "modules"}], ",", " ", 
    RowBox[{"list", " ", "of", " ", "strings"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<PARAMETERS\>\"", "                                   ", "--"}], " ", 
    "list", " ", "of", " ", "paramters", " ", 
    RowBox[{"(", "definitions", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<VARIABLES\>\"", "                                    ", "--"}], " ", 
    "list", " ", "of", " ", "variables", " ", 
    RowBox[{"(", "definitions", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<PROLOG\>\"", "                                       ", "--"}], " ", 
    "prolog", " ", "code", " ", "to", " ", "execute", " ", 
    RowBox[{"(", 
     RowBox[{"FORTRAN", " ", "code"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<EPILOG\>\"", "                                       ", "--"}], " ", 
    "epilog", " ", "code", " ", "to", " ", "execute", " ", 
    RowBox[{"(", 
     RowBox[{"FORTRAN", " ", "code"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<IO_PROLOG\>\"", "                                    ", "--"}], " ", 
    "prolog", " ", "IO", " ", 
    RowBox[{"(", 
     RowBox[{"FORTRAN", " ", "code"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<IO_EPILOG\>\"", "                                    ", "--"}], " ", 
    "epilog", " ", "IO", " ", 
    RowBox[{"(", 
     RowBox[{"FORTRAN", " ", "code"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<IO_UNIT\>\"", "                                      ", "--"}], " ", 
    "IO", " ", "unit"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<IO_FORMAT\>\"", "                                    ", "--"}], " ", 
    "IO", " ", "format"}], " ", "*)"}]}]], "Code",
 CellLabel->"In[30]:=",ExpressionUUID->"da847d38-c419-4670-8674-1b95fd8176dd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Generate", " ", "FORTRAN", " ", "sequencies", " ", "for", " ", "all", " ",
     "sequencies", " ", "in", " ", 
    RowBox[{"I$TABLE", "[", "\"\<SEQUENCE\>\"", "]"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Rewrites", " ", "previos", " ", "definitions"}], " ", "*)"}], 
  "\n", 
  RowBox[{
   RowBox[{"DATA", " ", "=", " ", 
    RowBox[{"Map", "[", 
     RowBox[{"I$FORTRAN$SEQUENCE", ",", 
      RowBox[{"Keys", "[", 
       RowBox[{"I$TABLE", "[", "\"\<SEQUENCE\>\"", "]"}], "]"}]}], "]"}]}], 
   " ", "\n", 
   RowBox[{"FilePrint", "[", "\"\<mult_seq.f90\>\"", "]"}]}]}]], "Code",
 CellLabel->"In[30]:=",ExpressionUUID->"ae907521-a4a8-4f9e-9565-0a0d5c74b893"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"NAME\"\>", "\[Rule]", "\<\"MULT\"\>"}], ",", 
    RowBox[{"\<\"TYPE\"\>", "\[Rule]", "\<\"SEQUENCE\"\>"}], ",", 
    RowBox[{"\<\"SRC\"\>", "\[Rule]", "\<\"mult_seq\"\>"}], ",", 
    RowBox[{"\<\"OBJ\"\>", 
     "\[Rule]", "\<\"gfortran-10 -c -O3 -march=native mult_seq.f90\"\>"}], 
    ",", 
    RowBox[{"\<\"USE\"\>", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\<\"drif_map\"\>", ",", "\<\"kick_map\"\>"}], "}"}]}]}], 
   "\[RightAssociation]"}], "}"}]], "Output",
 CellLabel->"Out[30]=",ExpressionUUID->"6cbb2768-a2c0-497a-8ff1-62ccaa31e42a"],

Cell["\<\
!gfortran-10 -c -O3 -march=native mult_seq.f90
MODULE MULT_SEQ
 USE ISO_C_BINDING
 USE DRIF_MAP, ONLY: DRIF_MAP_SUB
 USE KICK_MAP, ONLY: KICK_MAP_SUB
 IMPLICIT NONE
 PUBLIC :: MULT_SEQ_SUB
 PRIVATE
 INTEGER,PARAMETER :: RK=C_DOUBLE
CONTAINS
SUBROUTINE MULT_SEQ_SUB(S,L_1,L_2,F,STATE)
 REAL(RK),DIMENSION(2),INTENT(IN) :: S
 REAL(RK),DIMENSION(1),INTENT(IN) :: L_1
 REAL(RK),DIMENSION(2),INTENT(IN) :: L_2
 REAL(RK),DIMENSION(1),INTENT(IN) :: F
 REAL(RK),DIMENSION(4),INTENT(INOUT) :: STATE
 INTEGER :: I,J,K,N
 IF(STATE(1).LT.5.E-1_RK) RETURN
 !IO_PROLOG WRITE(*,*) 
 CALL DRIF_MAP_SUB(&
  S=S(1),&
  L=L_1,&
  F=F,&
  STATE=STATE&
 )
 CALL KICK_MAP_SUB(&
  S=S(2),&
  L=L_2,&
  F=F,&
  STATE=STATE&
 )
 CALL DRIF_MAP_SUB(&
  S=S(1),&
  L=L_1,&
  F=F,&
  STATE=STATE&
 )
 !IO_EPILOG WRITE(*,*) 
END SUBROUTINE MULT_SEQ_SUB
END MODULE MULT_SEQ\
\>", "Print",
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"2653518d-cf06-4494-b61d-5339eee4fb68"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compile", " ", 
    RowBox[{"(", 
     RowBox[{"can", " ", "be", " ", "done", " ", "in", " ", "parallel"}], 
     ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"Echo", "[", 
       RowBox[{
        RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
        RowBox[{
         RowBox[{"Run", "[", 
          RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
         RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"Through", "[", 
      RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[32]:=",ExpressionUUID->"adcd096a-3311-48ee-afe7-a602954f1e6c"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -O3 -march=native mult_seq.f90\"\>"], \
"Echo",ExpressionUUID->"17575ad7-914e-4120-a7e4-fba01dd80961"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Code", " ", "for", " ", "elements", " ", "is", " ", "generated", " ", 
    "by", " ", 
    RowBox[{"I$FORTRAN$ELEMENT", "[", "]"}], " ", "function"}], " ", "*)"}], 
  "\n", 
  RowBox[{"TableForm", "[", 
   RowBox[{"Options", "[", "I$FORTRAN$ELEMENT", "]"}], "]"}]}]], "Code",
 CellLabel->"In[33]:=",ExpressionUUID->"15ad29cd-22f8-4b03-942b-077626880127"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"\<\"EXTEND\"\>", "\[Rule]", "0"}]},
     {
      RowBox[{"\<\"USE\"\>", "\[Rule]", 
       RowBox[{"{", "}"}]}]},
     {
      RowBox[{"\<\"PARAMETERS\"\>", "\[Rule]", 
       RowBox[{"{", "}"}]}]},
     {
      RowBox[{"\<\"VARIABLES\"\>", "\[Rule]", 
       RowBox[{"{", "}"}]}]},
     {
      RowBox[{"\<\"PROLOG\"\>", "\[Rule]", 
       RowBox[{"{", "\<\"\"\>", "}"}]}]},
     {
      RowBox[{"\<\"EPILOG\"\>", "\[Rule]", 
       RowBox[{"{", "\<\"\"\>", "}"}]}]},
     {
      RowBox[{"\<\"IO_PROLOG\"\>", "\[Rule]", 
       RowBox[{"{", "\<\"\"\>", "}"}]}]},
     {
      RowBox[{"\<\"IO_EPILOG\"\>", "\[Rule]", 
       RowBox[{"{", "\<\"\"\>", "}"}]}]},
     {
      RowBox[{"\<\"IO_UNIT\"\>", "\[Rule]", "\<\"*\"\>"}]},
     {
      RowBox[{"\<\"IO_FORMAT\"\>", "\[Rule]", "\<\"*\"\>"}]},
     {
      RowBox[{"\<\"APERTURE\"\>", "\[Rule]", "Null"}]},
     {
      RowBox[{"\<\"MODE\"\>", "\[Rule]", "\<\"NORMAL\"\>"}]},
     {
      RowBox[{"\<\"TOLERANCE\"\>", "\[Rule]", "1.`*^-12"}]},
     {
      RowBox[{"\<\"EXPRESSION\"\>", "\[Rule]", "Null"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[33]//TableForm=",ExpressionUUID->"62303194-5ad9-495b-970d-\
fd001c88d082"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "\"\<EXTEND\>\"", "                                       ", "--"}], " ",
      "extend", " ", "state", " ", "dimension", " ", 
     RowBox[{"(", "integer", ")"}]}], ",", " ", 
    RowBox[{
    "adds", " ", "extra", " ", "dimensions", " ", "to", " ", "state"}], ",", 
    " ", 
    RowBox[{"should", " ", "be", " ", "matched"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "\"\<USE\>\"", "                                          ", "--"}], " ",
      "use", " ", "additional", " ", "modules"}], ",", " ", 
    RowBox[{"list", " ", "of", " ", "strings"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<PARAMETERS\>\"", "                                   ", "--"}], " ", 
    "list", " ", "of", " ", "paramters", " ", 
    RowBox[{"(", "definitions", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<VARIABLES\>\"", "                                    ", "--"}], " ", 
    "list", " ", "of", " ", "variables", " ", 
    RowBox[{"(", "definitions", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<PROLOG\>\"", "                                       ", "--"}], " ", 
    "prolog", " ", "code", " ", "to", " ", "execute", " ", 
    RowBox[{"(", 
     RowBox[{"FORTRAN", " ", "code"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<EPILOG\>\"", "                                       ", "--"}], " ", 
    "epilog", " ", "code", " ", "to", " ", "execute", " ", 
    RowBox[{"(", 
     RowBox[{"FORTRAN", " ", "code"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<IO_PROLOG\>\"", "                                    ", "--"}], " ", 
    "prolog", " ", "IO", " ", 
    RowBox[{"(", 
     RowBox[{"FORTRAN", " ", "code"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<IO_EPILOG\>\"", "                                    ", "--"}], " ", 
    "epilog", " ", "IO", " ", 
    RowBox[{"(", 
     RowBox[{"FORTRAN", " ", "code"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<IO_UNIT\>\"", "                                      ", "--"}], " ", 
    "IO", " ", "unit"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<IO_FORMAT\>\"", "                                    ", "--"}], " ", 
    "IO", " ", "format"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "\"\<APERTURE\>\"", "                                     ", "--"}], " ",
      "aperture", " ", "test"}], ",", " ", 
    RowBox[{"WM", " ", "expression"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "\"\<MODE\>\"", "                                         ", "--"}], " ",
      "integration", " ", "mode"}], ",", " ", 
    RowBox[{"\"\<NORMAL\>\"", " ", "or", " ", "\"\<ADAPTIVE\>\""}]}], " ", 
   "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<TOLERANCE\>\"", "                                    ", "--"}], " ", 
    "\"\<ADAPTIVE\>\"", " ", "mode", " ", "tolerance"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "\"\<EXPRESSION\>\"", "                                   ", "--"}], 
     " ", "\"\<ADAPTIVE\>\"", " ", "mode", " ", "expression"}], ",", " ", 
    RowBox[{"Null", " ", "or", " ", "WM", " ", "expression"}]}], " ", 
   "*)"}]}]], "Code",
 CellLabel->"In[35]:=",ExpressionUUID->"b338d504-ef29-49a6-84d8-e570b99a29a4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "FORTRAN", " ", "element"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"DATA", " ", "=", " ", 
    RowBox[{"I$FORTRAN$ELEMENT", "[", "\n", "\t", 
     RowBox[{"\"\<MULT\>\"", ",", "\n", "\t", 
      RowBox[{"\"\<APERTURE\>\"", "  ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Q1", " ", ">", " ", "10.0"}], ",", " ", 
          RowBox[{"P1", " ", ">", " ", "1.0"}]}], "}"}], "}"}]}]}], 
     "          ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"--", " ", "aperture"}], " ", "test", " ", "for", " ", "each",
         " ", "sequence"}], ",", " ", 
       RowBox[{"see", " ", "CHECK_", "*", " ", "function", " ", "below"}]}], 
      " ", "*)"}], "\n", "]"}]}], "\n", 
   RowBox[{"FilePrint", "[", "\"\<mult_ele.f90\>\"", "]"}]}]}]], "Code",
 CellLabel->"In[34]:=",ExpressionUUID->"be66d76f-c4fc-4202-b230-3eb35357ecdb"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"NAME\"\>", "\[Rule]", "\<\"MULT\"\>"}], ",", 
   RowBox[{"\<\"TYPE\"\>", "\[Rule]", "\<\"ELEMENT\"\>"}], ",", 
   RowBox[{"\<\"SRC\"\>", "\[Rule]", "\<\"mult_ele\"\>"}], ",", 
   RowBox[{"\<\"OBJ\"\>", 
    "\[Rule]", "\<\"gfortran-10 -c -O3 -march=native mult_ele.f90\"\>"}], ",", 
   RowBox[{"\<\"USE\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"drif_map\"\>", ",", "\<\"kick_map\"\>", 
      ",", "\<\"mult_seq\"\>"}], "}"}]}]}], "\[RightAssociation]"}]], "Output",\

 CellLabel->"Out[34]=",ExpressionUUID->"dd5d3386-4fca-47d2-b6bf-21444e53c76c"],

Cell["\<\
!gfortran-10 -c -O3 -march=native mult_ele.f90
MODULE MULT_ELE
 USE ISO_C_BINDING
 USE MULT_SEQ, ONLY: MULT_SEQ_SUB
 IMPLICIT NONE
 PUBLIC :: MULT_ELE_SUB
 PRIVATE
 INTEGER,PARAMETER :: RK=C_DOUBLE
CONTAINS
SUBROUTINE MULT_ELE_SUB(T,MAX_STEP_LENGTH,LENGTH,G,F,STATE)
 LOGICAL,DIMENSION(1),INTENT(IN) :: T
 REAL(RK),DIMENSION(1),INTENT(IN) :: MAX_STEP_LENGTH
 REAL(RK),DIMENSION(1),INTENT(IN) :: LENGTH
 REAL(RK),DIMENSION(2),INTENT(IN) :: G
 REAL(RK),DIMENSION(1),INTENT(IN) :: F
 REAL(RK),DIMENSION(4),INTENT(INOUT) :: STATE
 INTEGER,DIMENSION(1) :: NUMBER_OF_STEPS
 REAL(RK),DIMENSION(1) :: STEP_LENGTH
 REAL(RK),DIMENSION(2) :: S
 REAL(RK),DIMENSION(4) :: THIS, NEXT
 INTEGER :: I,J,K,N
 REAL(RK), DIMENSION(1) :: L_1_1
 REAL(RK), DIMENSION(2) :: L_1_2
 IF(STATE(1).LT.5.E-1_RK) RETURN
 NUMBER_OF_STEPS=CEILING(ABS(LENGTH)/MAX_STEP_LENGTH)
 STEP_LENGTH=LENGTH/REAL(NUMBER_OF_STEPS,RK)
 !IO_PROLOG WRITE(*,*) 
 L_1_1=[0._RK]
 L_1_2=[G(1),G(2)]
 S(1:2:1)=[5.E-1_RK,1._RK]
 S(1:2:1)=S(1:2:1)*STEP_LENGTH(1)
 DO I=1,NUMBER_OF_STEPS(1),1
  CALL MULT_SEQ_SUB(&
   S=S(1:2:1),&
   L_1=L_1_1,&
   L_2=L_1_2,&
   F=F,&
   STATE=STATE&
  )
  !IO_STEP WRITE(*,*) STATE
  IF(T(1).AND.CHECK_1(G,F,STATE))THEN
   STATE(1)=0.0_RK
   RETURN
  END IF
 END DO
 !IO_EPILOG WRITE(*,*) 
END SUBROUTINE MULT_ELE_SUB
LOGICAL FUNCTION CHECK_1(G,F,STATE)
 REAL(RK),DIMENSION(2),INTENT(IN) :: G
 REAL(RK),DIMENSION(1),INTENT(IN) :: F
 REAL(RK),DIMENSION(4),INTENT(IN) :: STATE
 CHECK_1=((STATE(3)).GT.(1.E+1_RK)).OR.((STATE(4)).GT.(1._RK))
END FUNCTION CHECK_1
END MODULE MULT_ELE\
\>", "Print",
 CellLabel->
  "During evaluation of \
In[34]:=",ExpressionUUID->"2921aebe-07ab-4e03-b60b-8c0b0e2c52a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compile", " ", 
    RowBox[{"(", 
     RowBox[{"can", " ", "be", " ", "done", " ", "in", " ", "parallel"}], 
     ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"Echo", "[", 
       RowBox[{
        RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
        RowBox[{
         RowBox[{"Run", "[", 
          RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
         RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"Through", "[", 
      RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[36]:=",ExpressionUUID->"7c34a048-b265-489e-84ab-0a8ae37eb208"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -O3 -march=native mult_ele.f90\"\>"], \
"Echo",ExpressionUUID->"37193075-03fb-481d-a860-a40f5b327844"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Adaptive", " ", "mode", " ", "intergation"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"DATA", " ", "=", " ", 
    RowBox[{"I$FORTRAN$ELEMENT", "[", "\n", "\t", 
     RowBox[{"\"\<MULT\>\"", ",", "\n", "\t", 
      RowBox[{"\"\<APERTURE\>\"", "  ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Q1", " ", ">", " ", "10.0"}], ",", " ", 
          RowBox[{"P1", " ", ">", " ", "1.0"}]}], "}"}], "}"}]}], ",", "\n", 
      "\t", 
      RowBox[{
      "\"\<MODE\>\"", "      ", "\[Rule]", " ", "\"\<ADAPTIVE\>\""}]}], "\n", 
     "]"}]}], "\n", 
   RowBox[{"FilePrint", "[", "\"\<mult_ele.f90\>\"", "]"}]}]}]], "Code",
 CellLabel->"In[37]:=",ExpressionUUID->"cd620fa6-05d9-4842-ba5c-736f59619fc5"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"NAME\"\>", "\[Rule]", "\<\"MULT\"\>"}], ",", 
   RowBox[{"\<\"TYPE\"\>", "\[Rule]", "\<\"ELEMENT\"\>"}], ",", 
   RowBox[{"\<\"SRC\"\>", "\[Rule]", "\<\"mult_ele\"\>"}], ",", 
   RowBox[{"\<\"OBJ\"\>", 
    "\[Rule]", "\<\"gfortran-10 -c -O3 -march=native mult_ele.f90\"\>"}], ",", 
   RowBox[{"\<\"USE\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"drif_map\"\>", ",", "\<\"kick_map\"\>", 
      ",", "\<\"mult_seq\"\>"}], "}"}]}]}], "\[RightAssociation]"}]], "Output",\

 CellLabel->"Out[37]=",ExpressionUUID->"bd0dc2c7-a4f4-446b-af16-63a61ab98b1e"],

Cell["\<\
!gfortran-10 -c -O3 -march=native mult_ele.f90
MODULE MULT_ELE
 USE ISO_C_BINDING
 USE MULT_SEQ, ONLY: MULT_SEQ_SUB
 IMPLICIT NONE
 PUBLIC :: MULT_ELE_SUB
 PRIVATE
 INTEGER,PARAMETER :: RK=C_DOUBLE
CONTAINS
SUBROUTINE MULT_ELE_SUB(T,MAX_STEP_LENGTH,LENGTH,G,F,STATE)
 LOGICAL,DIMENSION(1),INTENT(IN) :: T
 REAL(RK),DIMENSION(1),INTENT(IN) :: MAX_STEP_LENGTH
 REAL(RK),DIMENSION(1),INTENT(IN) :: LENGTH
 REAL(RK),DIMENSION(2),INTENT(IN) :: G
 REAL(RK),DIMENSION(1),INTENT(IN) :: F
 REAL(RK),DIMENSION(4),INTENT(INOUT) :: STATE
 INTEGER,DIMENSION(1) :: NUMBER_OF_STEPS
 REAL(RK),DIMENSION(1) :: STEP_LENGTH
 REAL(RK),DIMENSION(2) :: S
 REAL(RK),DIMENSION(4) :: THIS, NEXT
 INTEGER :: I,J,K,N
 REAL(RK), DIMENSION(1) :: L_1_1
 REAL(RK), DIMENSION(2) :: L_1_2
 IF(STATE(1).LT.5.E-1_RK) RETURN
 NUMBER_OF_STEPS=CEILING(ABS(LENGTH)/MAX_STEP_LENGTH)
 STEP_LENGTH=LENGTH/REAL(NUMBER_OF_STEPS,RK)
 !IO_PROLOG WRITE(*,*) 
 L_1_1=[0._RK]
 L_1_2=[G(1),G(2)]
 DO I=1,NUMBER_OF_STEPS(1),1
  S(1:2:1)=[5.E-1_RK,1._RK]
  S(1:2:1)=S(1:2:1)*STEP_LENGTH(1)
  J=1
  K=0
  THIS=STATE
  CALL MULT_SEQ_SUB(&
   S=S(1:2:1),&
   L_1=L_1_1,&
   L_2=L_1_2,&
   F=F,&
   STATE=THIS&
  )
  IF(T(1).AND.CHECK_1(G,F,THIS))THEN
   THIS(1)=0.0_RK
   STATE=THIS
   RETURN
  END IF
  DO
   J=2*J
   K=K+1
   NEXT=STATE
   S(1:2:1)=S(1:2:1)/REAL(2,RK)
   DO N=1,J,1
    CALL MULT_SEQ_SUB(&
     S=S(1:2:1),&
     L_1=L_1_1,&
     L_2=L_1_2,&
     F=F,&
     STATE=NEXT&
    )
   END DO
   !ADAPTIVE WRITE(*,*) I,J,K,CONVERGENCE_1(G,F,THIS,NEXT)
   IF((CONVERGENCE_1(G,F,THIS,NEXT)).OR.(K.GT.64))THEN
    STATE=NEXT
    EXIT
   ELSE
    THIS=NEXT
   END IF
  END DO
 END DO
 !IO_EPILOG WRITE(*,*) 
END SUBROUTINE MULT_ELE_SUB
LOGICAL FUNCTION CHECK_1(G,F,STATE)
 REAL(RK),DIMENSION(2),INTENT(IN) :: G
 REAL(RK),DIMENSION(1),INTENT(IN) :: F
 REAL(RK),DIMENSION(4),INTENT(IN) :: STATE
 CHECK_1=((STATE(3)).GT.(1.E+1_RK)).OR.((STATE(4)).GT.(1._RK))
END FUNCTION CHECK_1
LOGICAL FUNCTION CONVERGENCE_1(G,F,THIS,NEXT)
 REAL(RK),DIMENSION(2),INTENT(IN) :: G
 REAL(RK),DIMENSION(1),INTENT(IN) :: F
 REAL(RK),DIMENSION(4),INTENT(IN) :: THIS
 REAL(RK),DIMENSION(4),INTENT(IN) :: NEXT
 REAL(RK) :: VALUE_THIS, VALUE_NEXT
 CONVERGENCE_1=(MINVAL(ABS(NEXT-THIS))).LE.(1.E-12_RK)
END FUNCTION CONVERGENCE_1
END MODULE MULT_ELE\
\>", "Print",
 CellLabel->
  "During evaluation of \
In[37]:=",ExpressionUUID->"93e3652b-ec46-4ae6-aaa5-175bd34eeacd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Compile", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"Echo", "[", 
       RowBox[{
        RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
        RowBox[{
         RowBox[{"Run", "[", 
          RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
         RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"Through", "[", 
      RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[39]:=",ExpressionUUID->"017a2d52-e648-469e-a43a-3f583d3edfdf"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -O3 -march=native mult_ele.f90\"\>"], \
"Echo",ExpressionUUID->"be3ffa3a-ffdb-440f-aeed-24b81365515c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Adaptive", " ", "mode", " ", "intergation", " ", "with", " ", "invariant",
     " ", "conservation"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"DATA", " ", "=", " ", 
    RowBox[{"I$FORTRAN$ELEMENT", "[", "\n", "\t", 
     RowBox[{"\"\<MULT\>\"", ",", "\n", "\t", 
      RowBox[{"\"\<APERTURE\>\"", "   ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Q1", " ", ">", " ", "10.0"}], ",", " ", 
          RowBox[{"P1", " ", ">", " ", "1.0"}]}], "}"}], "}"}]}], ",", "\n", 
      "\t", 
      RowBox[{"\"\<MODE\>\"", "       ", "\[Rule]", " ", "\"\<ADAPTIVE\>\""}],
       ",", "\n", "\t", 
      RowBox[{"\"\<EXPRESSION\>\"", " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"1", "/", "2"}], "*", 
          RowBox[{
           RowBox[{"P1", "^", "2"}], "/", 
           RowBox[{"(", 
            RowBox[{"1", "+", "K1"}], ")"}]}]}], "+", 
         RowBox[{
          RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
          RowBox[{"Q1", "^", "2"}]}], "+", 
         RowBox[{
          RowBox[{"1", "/", "6"}], "*", "KS", "*", 
          RowBox[{"Q1", "^", "3"}]}]}], "}"}]}]}], "  ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "expression"}], " ", "for", " ", "each", " ", 
       "sequence"}], " ", "*)"}], "\n", "]"}]}], "\n", 
   RowBox[{"FilePrint", "[", "\"\<mult_ele.f90\>\"", "]"}]}]}]], "Code",
 CellLabel->"In[40]:=",ExpressionUUID->"fa11f161-a0ff-4740-b38b-ee2b0e37d1e1"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"NAME\"\>", "\[Rule]", "\<\"MULT\"\>"}], ",", 
   RowBox[{"\<\"TYPE\"\>", "\[Rule]", "\<\"ELEMENT\"\>"}], ",", 
   RowBox[{"\<\"SRC\"\>", "\[Rule]", "\<\"mult_ele\"\>"}], ",", 
   RowBox[{"\<\"OBJ\"\>", 
    "\[Rule]", "\<\"gfortran-10 -c -O3 -march=native mult_ele.f90\"\>"}], ",", 
   RowBox[{"\<\"USE\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"drif_map\"\>", ",", "\<\"kick_map\"\>", 
      ",", "\<\"mult_seq\"\>"}], "}"}]}]}], "\[RightAssociation]"}]], "Output",\

 CellLabel->"Out[40]=",ExpressionUUID->"0ffb0ba2-a43f-4dd3-9904-e2634aedf574"],

Cell["\<\
!gfortran-10 -c -O3 -march=native mult_ele.f90
MODULE MULT_ELE
 USE ISO_C_BINDING
 USE MULT_SEQ, ONLY: MULT_SEQ_SUB
 IMPLICIT NONE
 PUBLIC :: MULT_ELE_SUB
 PRIVATE
 INTEGER,PARAMETER :: RK=C_DOUBLE
CONTAINS
SUBROUTINE MULT_ELE_SUB(T,MAX_STEP_LENGTH,LENGTH,G,F,STATE)
 LOGICAL,DIMENSION(1),INTENT(IN) :: T
 REAL(RK),DIMENSION(1),INTENT(IN) :: MAX_STEP_LENGTH
 REAL(RK),DIMENSION(1),INTENT(IN) :: LENGTH
 REAL(RK),DIMENSION(2),INTENT(IN) :: G
 REAL(RK),DIMENSION(1),INTENT(IN) :: F
 REAL(RK),DIMENSION(4),INTENT(INOUT) :: STATE
 INTEGER,DIMENSION(1) :: NUMBER_OF_STEPS
 REAL(RK),DIMENSION(1) :: STEP_LENGTH
 REAL(RK),DIMENSION(2) :: S
 REAL(RK),DIMENSION(4) :: THIS, NEXT
 INTEGER :: I,J,K,N
 REAL(RK), DIMENSION(1) :: L_1_1
 REAL(RK), DIMENSION(2) :: L_1_2
 IF(STATE(1).LT.5.E-1_RK) RETURN
 NUMBER_OF_STEPS=CEILING(ABS(LENGTH)/MAX_STEP_LENGTH)
 STEP_LENGTH=LENGTH/REAL(NUMBER_OF_STEPS,RK)
 !IO_PROLOG WRITE(*,*) 
 L_1_1=[0._RK]
 L_1_2=[G(1),G(2)]
 DO I=1,NUMBER_OF_STEPS(1),1
  S(1:2:1)=[5.E-1_RK,1._RK]
  S(1:2:1)=S(1:2:1)*STEP_LENGTH(1)
  J=1
  K=0
  THIS=STATE
  CALL MULT_SEQ_SUB(&
   S=S(1:2:1),&
   L_1=L_1_1,&
   L_2=L_1_2,&
   F=F,&
   STATE=THIS&
  )
  IF(T(1).AND.CHECK_1(G,F,THIS))THEN
   THIS(1)=0.0_RK
   STATE=THIS
   RETURN
  END IF
  DO
   J=2*J
   K=K+1
   NEXT=STATE
   S(1:2:1)=S(1:2:1)/REAL(2,RK)
   DO N=1,J,1
    CALL MULT_SEQ_SUB(&
     S=S(1:2:1),&
     L_1=L_1_1,&
     L_2=L_1_2,&
     F=F,&
     STATE=NEXT&
    )
   END DO
   !ADAPTIVE WRITE(*,*) I,J,K,CONVERGENCE_1(G,F,THIS,NEXT)
   IF((CONVERGENCE_1(G,F,THIS,NEXT)).OR.(K.GT.64))THEN
    STATE=NEXT
    EXIT
   ELSE
    THIS=NEXT
   END IF
  END DO
 END DO
 !IO_EPILOG WRITE(*,*) 
END SUBROUTINE MULT_ELE_SUB
LOGICAL FUNCTION CHECK_1(G,F,STATE)
 REAL(RK),DIMENSION(2),INTENT(IN) :: G
 REAL(RK),DIMENSION(1),INTENT(IN) :: F
 REAL(RK),DIMENSION(4),INTENT(IN) :: STATE
 CHECK_1=((STATE(3)).GT.(1.E+1_RK)).OR.((STATE(4)).GT.(1._RK))
END FUNCTION CHECK_1
LOGICAL FUNCTION CONVERGENCE_1(G,F,THIS,NEXT)
 REAL(RK),DIMENSION(2),INTENT(IN) :: G
 REAL(RK),DIMENSION(1),INTENT(IN) :: F
 REAL(RK),DIMENSION(4),INTENT(IN) :: THIS
 REAL(RK),DIMENSION(4),INTENT(IN) :: NEXT
 REAL(RK) :: VALUE_THIS, VALUE_NEXT
 VALUE_THIS=((5.E-1_RK*G(1)*THIS(3)**2+1.666666666666667E-1_RK*G(2)*THIS(3)**\
3+(5.E-1_RK*THIS(4)**2)/(1._RK+THIS(2))))
 VALUE_NEXT=((5.E-1_RK*G(1)*NEXT(3)**2+1.666666666666667E-1_RK*G(2)*NEXT(3)**\
3+(5.E-1_RK*NEXT(4)**2)/(1._RK+NEXT(2))))
 CONVERGENCE_1=(ABS(VALUE_NEXT-VALUE_THIS).LE.(1.E-12_RK))
END FUNCTION CONVERGENCE_1
END MODULE MULT_ELE\
\>", "Print",
 CellLabel->
  "During evaluation of \
In[40]:=",ExpressionUUID->"28234444-4e06-49bf-a047-ae1835018798"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Compile", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"Echo", "[", 
       RowBox[{
        RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
        RowBox[{
         RowBox[{"Run", "[", 
          RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
         RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"Through", "[", 
      RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[42]:=",ExpressionUUID->"66a8b93b-d3bf-4859-8e2f-c00fbd3cec1b"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -O3 -march=native mult_ele.f90\"\>"], \
"Echo",ExpressionUUID->"71d88fa1-5502-4cc0-a4eb-2e7cb2bbd004"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Clean", " ", "*)"}], "\n", 
  RowBox[{"Run", "[", "\"\<rm -f *.f90 *.o *.mod\>\"", "]"}]}]], "Code",
 CellLabel->"In[43]:=",ExpressionUUID->"c10a24da-20bd-4f8c-b774-0e0fdf2b7132"],

Cell[BoxData["0"], "Output",
 CellLabel->"Out[43]=",ExpressionUUID->"d6b2a571-7b4b-475c-bba9-0fcb78aeb58b"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-13:  (FORTRAN) Lattice and library", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"2f4fbd75-74f8-46f4-bded-d3f5e498d5b4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[1]:=",ExpressionUUID->"9dc2ef6f-ee04-46f2-9aa3-7bd068073ff2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", 
   RowBox[{"\"\<PROJECT\>\"", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
    RowBox[{"List", "[", "]"}]}], "]"}]}]], "Code",
 CellLabel->"In[2]:=",ExpressionUUID->"be82783e-972e-461d-926a-89607d032697"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"cc61c94c-aa62-42ad-af81-45d4f2ccb2ca"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "simple", " ", "element"}], " ", "*)"}], "\n", 
  "\n", 
  RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], "*", 
         RowBox[{
          RowBox[{"P1", "^", "2"}], "/", 
          RowBox[{"(", 
           RowBox[{"1", "+", "K1"}], ")"}]}]}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"KICK", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<KICK\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
          RowBox[{"Q1", "^", "2"}]}], ",", 
         RowBox[{
          RowBox[{"1", "/", "6"}], "*", "KS", "*", 
          RowBox[{"Q1", "^", "3"}]}]}], "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "KICK"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MULT", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<MULT\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<KICK\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<KICK\>\""}], "}"}], ",", "0"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "MULT"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<ELEMENT\>\"", "]"}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"MULT", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<MULT\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", "\"\<MULT\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"KQ", ",", "KS"}], "}"}]}], "}"}], "}"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "MULT"}], "]"}], " ", ";"}]}]}]], "Code",\

 CellLabel->"In[3]:=",ExpressionUUID->"f0b78cdb-2f40-4e95-a9da-49926e327138"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "code"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"I$CODE", "[", 
    RowBox[{"Rule", "[", 
     RowBox[{"\"\<LEVEL\>\"", ",", 
      RowBox[{"Plus", "[", "1", "]"}]}], "]"}], "]"}], " ", ";"}]}]], "Code",
 CellLabel->"In[14]:=",ExpressionUUID->"8b849f48-9b5f-4f6c-969c-bf2e10104f51"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Covert", " ", "to", " ", "FORTRAN", " ", "and", " ", "compile"}], 
   " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$MAP", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}], "]"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"Echo", "[", 
        RowBox[{
         RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
         RowBox[{
          RowBox[{"Run", "[", 
           RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
          RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$SEQUENCE", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<SEQUENCE\>\"", "]"}], "]"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"Echo", "[", 
        RowBox[{
         RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
         RowBox[{
          RowBox[{"Run", "[", 
           RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
          RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$ELEMENT", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<ELEMENT\>\"", "]"}], "]"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"Echo", "[", 
        RowBox[{
         RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
         RowBox[{
          RowBox[{"Run", "[", 
           RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
          RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->"In[15]:=",ExpressionUUID->"e7c90de2-e34e-4f2a-a1c6-96f6ab9eef8e"],

Cell[CellGroupData[{

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
drif_map.f90\"\>"], "Echo",ExpressionUUID->"b45bb406-99bf-4c3a-8e85-\
c4d02f649614"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
kick_map.f90\"\>"], "Echo",ExpressionUUID->"3b19e178-1e43-44c5-a604-\
702eed558ea8"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
mult_seq.f90\"\>"], "Echo",ExpressionUUID->"e7ec6515-9203-405c-a588-\
d5aedd5bcd6a"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
mult_ele.f90\"\>"], "Echo",ExpressionUUID->"55403d0f-95a0-4793-bced-\
50e6b5585ae4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Fortran", " ", "lattice", " ", "can", " ", "be", " ", "build", " ", 
    "with", " ", 
    RowBox[{"I$FORTRAN$LATTICE", "[", "]"}], " ", "function"}], " ", "*)"}], 
  "\n", 
  RowBox[{"TableForm", "[", 
   RowBox[{"Options", "[", "I$FORTRAN$LATTICE", "]"}], "]"}]}]], "Code",
 CellLabel->"In[21]:=",ExpressionUUID->"56d89eec-a8cd-46a0-816f-3c63ab36544d"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"\<\"DEFINITIONS\"\>", "\[Rule]", "\<\"\"\>"}]},
     {
      RowBox[{"\<\"EXTEND\"\>", "\[Rule]", "0"}]},
     {
      RowBox[{"\<\"MAP\"\>", "\[Rule]", "I$PARALLEL$MAP"}]},
     {
      RowBox[{"\<\"VERBOSE\"\>", "\[Rule]", "False"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[21]//TableForm=",ExpressionUUID->"64db66bc-bc01-44b1-a8d2-\
c7850baa0fbd"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<DEFINITIONS\>\"", "                                  ", "--"}], " ", 
    "additional", " ", "definitions", " ", "or", " ", "code", " ", 
    RowBox[{"(", 
     RowBox[{"FORTRAN", " ", "code"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
     "\"\<EXTEND\>\"", "                                       ", "--"}], " ",
      "extend", " ", "state", " ", "dimension", " ", 
     RowBox[{"(", "integer", ")"}]}], ",", " ", 
    RowBox[{
    "adds", " ", "extra", " ", "dimensions", " ", "to", " ", "state"}], ",", 
    " ", 
    RowBox[{"should", " ", "be", " ", "matched"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<MAP\>\"", "                                          ", "--"}], " ", 
    "map", " ", "function"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\"\<VERBOSE\>\"", "                                      ", "--"}], " ", 
    "verbose", " ", "flag"}], " ", "*)"}]}]], "Code",
 CellLabel->"In[22]:=",ExpressionUUID->"b43c536f-5b1d-49ea-8f1a-63669fd24f79"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Create", " ", "FORTRAN", " ", "lattice"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"LATTICE", " ", "=", " ", 
     RowBox[{"I$FORTRAN$LATTICE", "[", "\n", "\t", 
      RowBox[{"\"\<LINE\>\"", ",", "                          ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "lattice"}], " ", "name", " ", 
         RowBox[{"(", "string", ")"}]}], " ", "*)"}], "\n", "\t", 
       RowBox[{"{", "                                ", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"--", " ", "list"}], " ", "of", " ", "elements"}], " ", 
         "*)"}], "\n", "\t\t", 
        RowBox[{
         RowBox[{"{", "                            ", 
          RowBox[{"(*", " ", 
           RowBox[{"--", " ", "element"}], " ", "*)"}], "\n", "\t\t\t", 
          RowBox[{"\"\<MULT\>\"", ",", "                  ", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"--", " ", "element"}], " ", "name", " ", 
             RowBox[{"(", "string", ")"}]}], " ", "*)"}], "\n", "\t\t\t", 
           RowBox[{"List", "[", "1", "]"}], ",", "                 ", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"--", " ", "aperture"}], " ", "flag", " ", 
             RowBox[{"1", "/", "0"}], " ", "for", " ", "each", " ", 
             "sequence", " ", "in", " ", "given", " ", "element"}], " ", 
            "*)"}], "\n", "\t\t\t", 
           RowBox[{"List", "[", "\"\<STEP\>\"", "]"}], ",", "            ", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"--", " ", "maximum"}], " ", "integration", " ", "step", 
             " ", "size", " ", "for", " ", "each", " ", "sequence", " ", "in",
              " ", "given", " ", "element"}], " ", "*)"}], "\n", "\t\t\t", 
           RowBox[{"List", "[", "0.1", "]"}], ",", "               ", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"--", " ", "integration"}], " ", "length", " ", "for", 
              " ", "each", " ", "sequence"}], ",", " ", 
             RowBox[{"can", " ", "be", " ", "negative"}]}], " ", "*)"}], "\n",
            "\t\t\t", 
           RowBox[{"List", "[", 
            RowBox[{"1.0", ",", "5.0"}], "]"}], ",", "           ", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"--", " ", "list"}], " ", "of", " ", "global", " ", 
             "parameters"}], " ", "*)"}], "\n", "\t\t\t", 
           RowBox[{"List", "[", "1.0", "]"}]}], "                ", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"--", " ", "parametric"}], " ", "flag", " ", "values"}], 
           " ", "*)"}], "\n", "\t\t", "}"}], ",", "\n", "\t\t", 
         RowBox[{"{", 
          RowBox[{"\"\<MULT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<STEP\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"1.0", ",", "5.0"}], "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}]}], "\n", "\t", "}"}], 
       ",", "\n", "\t", 
       RowBox[{"\"\<DEFINITIONS\>\"", " ", "\[Rule]", " ", 
        RowBox[{
         RowBox[{
         "StringTemplate", "[", 
          "\"\< REAL(RK), PARAMETER :: STEP = ``\\n\>\"", "]"}], "[", 
         RowBox[{"I$FORTRAN$REAL", "[", "0.01", "]"}], "]"}]}]}], "\n", 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{"TableForm", "[", 
    RowBox[{"Thread", "[", 
     RowBox[{"Rule", "[", 
      RowBox[{
       RowBox[{"Keys", "[", "LATTICE", "]"}], ",", 
       RowBox[{"Map", "[", 
        RowBox[{"LATTICE", ",", 
         RowBox[{"Keys", "[", "LATTICE", "]"}]}], "]"}]}], "]"}], "]"}], 
    "]"}]}]}]], "Code",
 CellLabel->"In[22]:=",ExpressionUUID->"e6a1b08f-3434-4045-a8a1-3f5318b6afa3"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"\<\"NAME\"\>", "\[Rule]", "\<\"LINE\"\>"}]},
     {
      RowBox[{"\<\"TYPE\"\>", "\[Rule]", "\<\"LATTICE\"\>"}]},
     {
      RowBox[{"\<\"LENGTH\"\>", "\[Rule]", "2"}]},
     {
      RowBox[{"\<\"SRC\"\>", "\[Rule]", "\<\"line_lat\"\>"}]},
     {
      RowBox[{"\<\"OBJ\"\>", 
       "\[Rule]", "\<\"gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
line_lat.f90\"\>"}]},
     {
      RowBox[{"\<\"USE\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\<\"drif_map\"\>", ",", "\<\"kick_map\"\>", 
         ",", "\<\"mult_seq\"\>", ",", "\<\"mult_ele\"\>"}], "}"}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[23]//TableForm=",ExpressionUUID->"d45f8243-7d4a-42ff-b652-\
62242ed75d68"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "Aperture", " ", "flags", " ", "turns", " ", "on", " ", "or", " ", "off", 
   " ", "aperture", " ", "checks"}], " ", "*)"}]], "Code",
 CellLabel->"In[28]:=",ExpressionUUID->"1c46c8a9-365b-47c8-8baf-391ab987166a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Empty", " ", "list", " ", "can", " ", "be", " ", "used", " ", "for", " ", 
    "parametric", " ", "flag", " ", "values"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "In", " ", "this", " ", "case", " ", "all", " ", "flags", " ", "are", " ", 
    "equal", " ", "to", " ", "one"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Normaly", ",", " ", 
    RowBox[{
    "zero", " ", "flag", " ", "values", " ", "shuold", " ", "be", " ", "used",
      " ", "to", " ", "generate", " ", "independent", " ", "elements"}]}], 
   " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"i", ".", "e", ".", " ", "when"}], " ", "element", " ", "has", 
    " ", "several", " ", "parameters", " ", "in", " ", "its", " ", 
    "definition"}], " ", "*)"}]}]], "Code",
 CellLabel->"In[29]:=",ExpressionUUID->"7696732c-b5bb-44ff-9032-ac4f9a161498"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Print", " ", "lattice", " ", "file"}], " ", "*)"}], "\n", 
  RowBox[{"FilePrint", "[", "\"\<line_lat.f90\>\"", "]"}]}]], "Code",
 CellLabel->"In[24]:=",ExpressionUUID->"3c77fa22-4201-4462-b4d0-97f8f1159af1"],

Cell["\<\
SUBROUTINE LINE_LAT_SUB(STATE) &
 BIND(C, NAME = \"line_lat_sub\")
 USE ISO_C_BINDING
 USE MULT_ELE, ONLY: MULT_ELE_SUB
 IMPLICIT NONE
 INTEGER,PARAMETER :: RK=C_DOUBLE
 REAL(RK),DIMENSION(6), INTENT(INOUT) :: STATE
 REAL(RK), PARAMETER :: STEP = 1.E-2_RK
 IF(STATE(1).LT.5.E-1_RK)THEN
  RETURN
 ENDIF
 !{MULT,{1},{STEP},{0.1},{1.0,5.0},{1.0}}
 CALL MULT_ELE_SUB(&
  T=[.TRUE.],&
  MAX_STEP_LENGTH=[STEP],&
  LENGTH=[1.E-1_RK],&
  G=[1._RK,5._RK],&
  F=[1._RK],&
  STATE=STATE&
 )
 !{MULT,{1},{STEP},{0.1},{1.0,5.0},{1.0}}
 CALL MULT_ELE_SUB(&
  T=[.TRUE.],&
  MAX_STEP_LENGTH=[STEP],&
  LENGTH=[1.E-1_RK],&
  G=[1._RK,5._RK],&
  F=[1._RK],&
  STATE=STATE&
 )
END SUBROUTINE LINE_LAT_SUB\
\>", "Print",
 CellLabel->
  "During evaluation of \
In[24]:=",ExpressionUUID->"85152c4c-8044-4049-bc1d-b1e75e0527bc"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Lattice", " ", "file", " ", "is", " ", "a", " ", "FORTRAN", " ", 
    "subroutine", " ", "with", " ", "C", " ", "binding"}], " ", "*)"}], "\n", 
  
  RowBox[{"(*", " ", 
   RowBox[{
   "In", " ", "contains", " ", "ordered", " ", "invocations", " ", "of", " ", 
    "element", " ", "procedures"}], " ", "*)"}]}]], "Code",
 CellLabel->"In[31]:=",ExpressionUUID->"d0b9a332-363c-4685-aded-7de4faf08953"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compile", " ", "lattice"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"Echo", "[", 
       RowBox[{
        RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
        RowBox[{
         RowBox[{"Run", "[", 
          RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
         RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"LATTICE", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[25]:=",ExpressionUUID->"5f9afbc0-d981-4fda-821a-45b061e8c199"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
line_lat.f90\"\>"], "Echo",ExpressionUUID->"b71f30eb-5723-459b-ab40-\
9c8efefb534e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Library", " ", "can", " ", "be", " ", "created", " ", "from", " ", 
    "generated", " ", "FORTRAN", " ", "code", " ", "or", " ", "code", " ", 
    "can", " ", "be", " ", "used", " ", "elsewhere", " ", "in", " ", "a", " ",
     "standalone", " ", "program"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Library", " ", "is", " ", "created", " ", "by", " ", 
    RowBox[{"I$FORTRAN$LIBRARY", "[", "]"}], " ", "function"}], " ", "*)"}], 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Note", ",", " ", 
    RowBox[{"do", " ", "not", " ", "use", " ", 
     RowBox[{"(", "uncommented", ")"}], " ", "IO", " ", "in", " ", "FORTRAN", 
     " ", "with", " ", "LibraryLink"}]}], " ", "*)"}]}]], "Code",
 CellLabel->"In[33]:=",ExpressionUUID->"8b16f74f-7c21-429f-a7f6-c27ede06949f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Create", " ", "library"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"I$FORTRAN$LIBRARY", "[", "LATTICE", "]"}], "\n", 
   RowBox[{"FileNames", "[", "\"\<line_*.so\>\"", "]"}]}]}]], "Code",
 CellLabel->"In[26]:=",ExpressionUUID->"bc4f136b-91e5-4a8c-a301-3d6d8810e6c0"],

Cell[BoxData[
 RowBox[{"{", "\<\"line_lat.so\"\>", "}"}]], "Output",
 CellLabel->"Out[27]=",ExpressionUUID->"423ca2fc-2348-4969-b1fe-9a34244b6915"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"Library", " ", "can", " ", "be", " ", "loaded", " ", "with", " ", 
   RowBox[{"I$FORTRAN$LOAD", "[", "]"}], " ", "function"}], " ", 
  "*)"}]], "Code",ExpressionUUID->"556d14d5-f540-429f-8e89-24dd5b20d7d3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "library"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ClearAll", "[", "LIBRARY", "]"}], " ", ";"}], "\n", 
   RowBox[{"LIBRARY", " ", "=", " ", 
    RowBox[{"I$FORTRAN$LOAD", "[", "\n", "\t", 
     RowBox[{"\"\<line_lat\>\"", ",", "       ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", 
         RowBox[{"(", "incomplete", ")"}]}], " ", "library", " ", "name"}], 
       " ", "*)"}], "\n", "\t", "LIBRARY"}], "           ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "variable"}], " ", "name", " ", 
       RowBox[{"(", 
        RowBox[{
        "passed", " ", "as", " ", "input", " ", "to", " ", "clean", " ", 
         "existing", " ", "definitions"}], ")"}]}], " ", "*)"}], "\n", "]"}], 
    " "}]}]}]], "Code",
 CellLabel->"In[28]:=",ExpressionUUID->"da35b4fb-649e-4665-9684-81b0bab0d2e1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["LibraryFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.038461538461538464`], {
               FaceForm[{
                 GrayLevel[0.93], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                25.499999999999996`, 2.5}, {25.499999999999996`, 
                1.3953100000000003`}, {24.604699999999998`, 
                0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                0.49999999999999994`}, {1.3953100000000003`, 
                0.49999999999999994`}, {0.49999999999999994`, 
                1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                24.604699999999998`}, {1.3953100000000003`, 
                25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                25.499999999999996`}, {24.604699999999998`, 
                25.499999999999996`}, {25.499999999999996`, 
                24.604699999999998`}, {25.499999999999996`, 23.5}, {
                25.499999999999996`, 2.5}}}]}, {
               FaceForm[{
                 RGBColor[0.5, 0.5, 0.5], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                16.3832, 20.021499999999996`}, {6.930469999999999, 
                20.021499999999996`}, {6.930469999999999, 
                18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                16.3832, 16.357399999999995`}, {20.5426, 
                19.116799999999998`}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {
                9.46445, 11.079700000000003`}, {9.46445, 
                12.933999999999997`}, {18.917199999999998`, 
                12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                
                "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Function name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"TRACK_line_lat_sub\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.038461538461538464`], {
               FaceForm[{
                 GrayLevel[0.93], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                25.499999999999996`, 2.5}, {25.499999999999996`, 
                1.3953100000000003`}, {24.604699999999998`, 
                0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                0.49999999999999994`}, {1.3953100000000003`, 
                0.49999999999999994`}, {0.49999999999999994`, 
                1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                24.604699999999998`}, {1.3953100000000003`, 
                25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                25.499999999999996`}, {24.604699999999998`, 
                25.499999999999996`}, {25.499999999999996`, 
                24.604699999999998`}, {25.499999999999996`, 23.5}, {
                25.499999999999996`, 2.5}}}]}, {
               FaceForm[{
                 RGBColor[0.5, 0.5, 0.5], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                16.3832, 20.021499999999996`}, {6.930469999999999, 
                20.021499999999996`}, {6.930469999999999, 
                18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                16.3832, 16.357399999999995`}, {20.5426, 
                19.116799999999998`}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {
                9.46445, 11.079700000000003`}, {9.46445, 
                12.933999999999997`}, {18.917199999999998`, 
                12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                
                "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Function name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"TRACK_line_lat_sub\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"Real", ",", "1"}], "}"}], "}"}], 
                   ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                   Baseline, ContentPadding -> False, FrameMargins -> 0, 
                   StripOnInput -> True], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Return type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   RowBox[{"{", 
                    RowBox[{"Real", ",", "1"}], "}"}], 
                   ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                   Baseline, ContentPadding -> False, FrameMargins -> 0, 
                   StripOnInput -> True], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Library: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"line_lat.so\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  LibraryFunction[
  "/media/imorozov/Data/SOFT/PROPAGANDA/PROJECT/line_lat.so", 
   "TRACK_line_lat_sub", {{Real, 1}}, {Real, 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[29]=",ExpressionUUID->"ba6e256b-771a-4478-b9d4-886d2aabb4f9"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Listable", " ", "wrapper"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Compile", "[", "]"}], " ", "function", " ", "can", " ", "be", 
    " ", 
    RowBox[{"(", 
     RowBox[{"and", " ", "should", " ", "be"}], ")"}], " ", "wrapper", " ", 
    "around", " ", "loaded", " ", "library", " ", "to", " ", "get", " ", 
    "listability", " ", "with", " ", "near", " ", "zero", " ", "overhead"}], 
   " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "This", " ", "allows", " ", "invocations", " ", "with", " ", "several", 
    " ", "list", " ", "arguments"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Number", " ", "of", " ", "thread", " ", "can", " ", "be", " ", "set", " ",
     "in", " ", 
    RowBox[{"SetSystemOptions", "[", "]"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"e", ".", "g", ".", " ", 
     RowBox[{"SetSystemOptions", "[", 
      RowBox[{"\"\<ParallelOptions\>\"", " ", "->", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<ParallelThreadNumber\>\"", " ", "->", " ", "64"}], 
        "}"}]}], "]"}]}], " ", ";"}], " ", "*)"}]}]], "Code",
 CellLabel->"In[38]:=",ExpressionUUID->"2ea9a447-8d97-4480-9378-371761da2c06"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compile", " ", "wrapper"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ClearAll", "[", "MAP", "]"}], " ", ";"}], "\n", 
   RowBox[{"MAP", " ", "=", " ", 
    RowBox[{"With", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"FUNCTION", " ", "=", " ", "LIBRARY"}], "}"}], ",", "\n", "\t", 
      RowBox[{"Compile", "[", "\n", "\t\t", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"STATE", ",", "_Real", ",", "1"}], "}"}], "}"}], ",", "\n", 
        "\t\t", 
        RowBox[{"FUNCTION", "[", "STATE", "]"}], ",", "\n", "\t\t", 
        RowBox[{"RuntimeAttributes", " ", "\[Rule]", " ", 
         RowBox[{"{", "Listable", "}"}]}], ",", "\n", "\t\t", 
        RowBox[{"Parallelization", " ", "\[Rule]", " ", "True"}]}], "\t\t", 
       "\n", "\t", "]"}]}], "\n", "]"}]}]}]}]], "Code",
 CellLabel->"In[30]:=",ExpressionUUID->"5076a675-18a8-4acb-baa8-2a4d871c0141"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["CompiledFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.038461538461538464`], {
               FaceForm[{
                 GrayLevel[0.93], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                25.499999999999996`, 2.5}, {25.499999999999996`, 
                1.3953100000000003`}, {24.604699999999998`, 
                0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                0.49999999999999994`}, {1.3953100000000003`, 
                0.49999999999999994`}, {0.49999999999999994`, 
                1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                24.604699999999998`}, {1.3953100000000003`, 
                25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                25.499999999999996`}, {24.604699999999998`, 
                25.499999999999996`}, {25.499999999999996`, 
                24.604699999999998`}, {25.499999999999996`, 23.5}, {
                25.499999999999996`, 2.5}}}]}, {
               FaceForm[{
                 RGBColor[0.5, 0.5, 0.5], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                16.3832, 20.021499999999996`}, {6.930469999999999, 
                20.021499999999996`}, {6.930469999999999, 
                18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                16.3832, 16.357399999999995`}, {20.5426, 
                19.116799999999998`}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {
                9.46445, 11.079700000000003`}, {9.46445, 
                12.933999999999997`}, {18.917199999999998`, 
                12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                
                "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  StyleBox[
                   PaneBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"_Real", ",", "1"}], "}"}], "}"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                   False], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.038461538461538464`], {
               FaceForm[{
                 GrayLevel[0.93], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                25.499999999999996`, 2.5}, {25.499999999999996`, 
                1.3953100000000003`}, {24.604699999999998`, 
                0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                0.49999999999999994`}, {1.3953100000000003`, 
                0.49999999999999994`}, {0.49999999999999994`, 
                1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                24.604699999999998`}, {1.3953100000000003`, 
                25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                25.499999999999996`}, {24.604699999999998`, 
                25.499999999999996`}, {25.499999999999996`, 
                24.604699999999998`}, {25.499999999999996`, 23.5}, {
                25.499999999999996`, 2.5}}}]}, {
               FaceForm[{
                 RGBColor[0.5, 0.5, 0.5], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                16.3832, 20.021499999999996`}, {6.930469999999999, 
                20.021499999999996`}, {6.930469999999999, 
                18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                16.3832, 16.357399999999995`}, {20.5426, 
                19.116799999999998`}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {
                9.46445, 11.079700000000003`}, {9.46445, 
                12.933999999999997`}, {18.917199999999998`, 
                12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                
                "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"_Real", ",", "1"}], "}"}], "}"}], 
                   ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                   Baseline, ContentPadding -> False, FrameMargins -> 0, 
                   StripOnInput -> True], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Variables: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "STATE", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Expression: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["LibraryFunction", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    GraphicsBox[{
                    Thickness[0.038461538461538464`], {
                    FaceForm[{
                    GrayLevel[0.93], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                    25.499999999999996`, 2.5}, {25.499999999999996`, 
                    1.3953100000000003`}, {24.604699999999998`, 
                    0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5,
                     0.49999999999999994`}, {1.3953100000000003`, 
                    0.49999999999999994`}, {0.49999999999999994`, 
                    1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                    0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                    24.604699999999998`}, {1.3953100000000003`, 
                    25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                    25.499999999999996`}, {24.604699999999998`, 
                    25.499999999999996`}, {25.499999999999996`, 
                    24.604699999999998`}, {25.499999999999996`, 23.5}, {
                    25.499999999999996`, 2.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.5, 0.5, 0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                    19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                    16.3832, 20.021499999999996`}, {6.930469999999999, 
                    20.021499999999996`}, {6.930469999999999, 
                    18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                    16.3832, 16.357399999999995`}, {20.5426, 
                    19.116799999999998`}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 
                    13.8391}, {9.46445, 11.079700000000003`}, {9.46445, 
                    12.933999999999997`}, {18.917199999999998`, 
                    12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                    9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
                    13.8391}}}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                    
                    "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
                    AspectRatio -> 1, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                    FrameTicks -> None, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Function name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"TRACK_line_lat_sub\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    GraphicsBox[{
                    Thickness[0.038461538461538464`], {
                    FaceForm[{
                    GrayLevel[0.93], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                    25.499999999999996`, 2.5}, {25.499999999999996`, 
                    1.3953100000000003`}, {24.604699999999998`, 
                    0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5,
                     0.49999999999999994`}, {1.3953100000000003`, 
                    0.49999999999999994`}, {0.49999999999999994`, 
                    1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                    0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                    24.604699999999998`}, {1.3953100000000003`, 
                    25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                    25.499999999999996`}, {24.604699999999998`, 
                    25.499999999999996`}, {25.499999999999996`, 
                    24.604699999999998`}, {25.499999999999996`, 23.5}, {
                    25.499999999999996`, 2.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.5, 0.5, 0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                    19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                    16.3832, 20.021499999999996`}, {6.930469999999999, 
                    20.021499999999996`}, {6.930469999999999, 
                    18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                    16.3832, 16.357399999999995`}, {20.5426, 
                    19.116799999999998`}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 
                    13.8391}, {9.46445, 11.079700000000003`}, {9.46445, 
                    12.933999999999997`}, {18.917199999999998`, 
                    12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                    9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
                    13.8391}}}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                    
                    "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
                    AspectRatio -> 1, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                    FrameTicks -> None, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Function name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"TRACK_line_lat_sub\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"Real", ",", "1"}], "}"}], "}"}], 
                    ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Return type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    RowBox[{"{", 
                    RowBox[{"Real", ",", "1"}], "}"}], 
                    ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Library: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"line_lat.so\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    LibraryFunction[
                    "/media/imorozov/Data/SOFT/PROPAGANDA/PROJECT/line_lat.\
so", "TRACK_line_lat_sub", {{Real, 1}}, {Real, 1}], Selectable -> False, 
                    Editable -> False, SelectWithContents -> True], "[", 
                    "STATE", "]"}], ImageSize -> {{1, 500}, Automatic}, 
                   BaselinePosition -> Baseline, ContentPadding -> False, 
                   FrameMargins -> 0, StripOnInput -> True], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  CompiledFunction[{11, 12.1, 5852}, {{
     Blank[Real], 1}}, {{3, 1, 0}, {3, 1, 1}}, {}, {0, 0, 0, 0, 2}, {{42, 
     LibraryFunction[
     "/media/imorozov/Data/SOFT/PROPAGANDA/PROJECT/line_lat.so", 
      "TRACK_line_lat_sub", {{Real, 1}}, {Real, 1}], 3, 1, 0, 3, 1, 1}, {1}}, 
   
   Function[{$CellContext`STATE}, 
    LibraryFunction[
    "/media/imorozov/Data/SOFT/PROPAGANDA/PROJECT/line_lat.so", 
     "TRACK_line_lat_sub", {{Real, 1}}, {Real, 1}][$CellContext`STATE], 
    Listable], Evaluate],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[31]=",ExpressionUUID->"e59bfd4f-da16-4639-852d-00b17b4887af"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Test", " ", "library", " ", "and", " ", "compare", " ", "with", " ", 
    RowBox[{"I$NDSOLVE", "[", "]"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{
       RowBox[{"List", "[", "0.001", "]"}], ",", 
       RowBox[{"List", "[", 
        RowBox[{"0.1", ",", "0.0"}], "]"}]}], "]"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "I$NDSOLVE", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", 
       RowBox[{
        RowBox[{"P1", "^", "2"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "+", "K1"}], ")"}]}]}], "+", 
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
       RowBox[{"Q1", "^", "2"}]}], "+", 
      RowBox[{
       RowBox[{"1", "/", "6"}], "*", "KS", "*", 
       RowBox[{"Q1", "^", "3"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"NDSOLVE", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{
       RowBox[{"ReplaceAll", "[", 
        RowBox[{"HAMILTONIAN", ",", 
         RowBox[{"List", "[", 
          RowBox[{
           RowBox[{"Rule", "[", 
            RowBox[{"KQ", ",", "1.0"}], "]"}], ",", 
           RowBox[{"Rule", "[", 
            RowBox[{"KS", ",", "5.0"}], "]"}]}], "]"}]}], "]"}], ",", "100", 
       ",", 
       RowBox[{"2", "*", "0.1"}], ",", "1"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"NDSOLVE", "[", "INITIAL", "]"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"FORTRAN", " ", "library"}], " ", "*)"}], "\n", 
   RowBox[{"MAP", "[", "INITIAL", "]"}]}]}]], "Code",
 CellLabel->"In[32]:=",ExpressionUUID->"4535299b-ecff-42f0-a34f-d82d8f2ccc25"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", "0.001`", ",", "0.09751492700338171`", ",", 
   RowBox[{"-", "0.024751615621605088`"}], ",", "0.00247021865463259`", ",", 
   RowBox[{"-", "0.00024677808526039473`"}]}], "}"}]], "Output",
 CellLabel->"Out[35]=",ExpressionUUID->"131390c8-8b25-4c00-9292-600903985521"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", "0.001`", ",", "0.09751489612490244`", ",", 
   RowBox[{"-", "0.024752228177172177`"}], ",", "0.0024702800430363644`", ",", 
   RowBox[{"-", "0.00024617783692357`"}]}], "}"}]], "Output",
 CellLabel->"Out[36]=",ExpressionUUID->"b425cd7c-6e39-41d9-8083-6118630680d8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Test", " ", "listability"}], " ", "*)"}], "\n", 
  RowBox[{"MAP", "[", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"INITIAL", ",", "10"}], "]"}], "]"}]}]], "Code",
 CellLabel->"In[37]:=",ExpressionUUID->"cbb73834-fae5-49c2-83a0-0e58d0379e0d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0.001`", ",", "0.09751489612490244`", ",", 
     RowBox[{"-", "0.024752228177172177`"}], ",", "0.0024702800430363644`", 
     ",", 
     RowBox[{"-", "0.00024617783692357`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0.001`", ",", "0.09751489612490244`", ",", 
     RowBox[{"-", "0.024752228177172177`"}], ",", "0.0024702800430363644`", 
     ",", 
     RowBox[{"-", "0.00024617783692357`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0.001`", ",", "0.09751489612490244`", ",", 
     RowBox[{"-", "0.024752228177172177`"}], ",", "0.0024702800430363644`", 
     ",", 
     RowBox[{"-", "0.00024617783692357`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0.001`", ",", "0.09751489612490244`", ",", 
     RowBox[{"-", "0.024752228177172177`"}], ",", "0.0024702800430363644`", 
     ",", 
     RowBox[{"-", "0.00024617783692357`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0.001`", ",", "0.09751489612490244`", ",", 
     RowBox[{"-", "0.024752228177172177`"}], ",", "0.0024702800430363644`", 
     ",", 
     RowBox[{"-", "0.00024617783692357`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0.001`", ",", "0.09751489612490244`", ",", 
     RowBox[{"-", "0.024752228177172177`"}], ",", "0.0024702800430363644`", 
     ",", 
     RowBox[{"-", "0.00024617783692357`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0.001`", ",", "0.09751489612490244`", ",", 
     RowBox[{"-", "0.024752228177172177`"}], ",", "0.0024702800430363644`", 
     ",", 
     RowBox[{"-", "0.00024617783692357`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0.001`", ",", "0.09751489612490244`", ",", 
     RowBox[{"-", "0.024752228177172177`"}], ",", "0.0024702800430363644`", 
     ",", 
     RowBox[{"-", "0.00024617783692357`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0.001`", ",", "0.09751489612490244`", ",", 
     RowBox[{"-", "0.024752228177172177`"}], ",", "0.0024702800430363644`", 
     ",", 
     RowBox[{"-", "0.00024617783692357`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0.001`", ",", "0.09751489612490244`", ",", 
     RowBox[{"-", "0.024752228177172177`"}], ",", "0.0024702800430363644`", 
     ",", 
     RowBox[{"-", "0.00024617783692357`"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[37]=",ExpressionUUID->"0a5e3cc6-a536-4123-8432-ff1434286600"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Clean", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"LibraryFunctionUnload", "[", "LIBRARY", "]"}], "\n", 
   RowBox[{
   "Run", "[", "\"\<rm -f *.f90 *.o *.mod *.so *.cc\>\"", "]"}]}]}]], "Code",
 CellLabel->"In[38]:=",ExpressionUUID->"396c4391-1789-41ab-8d0a-ee7171f31e66"],

Cell[BoxData["0"], "Output",
 CellLabel->"Out[39]=",ExpressionUUID->"af1fc740-8429-4a70-ab50-f9149ee54881"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-14:  (FORTRAN) Standalone program", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"899c736d-916a-4082-82ae-3a57680dc7f4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[1]:=",ExpressionUUID->"d31f6947-b360-4af5-acf8-a541ebf8ee2d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", 
   RowBox[{"\"\<PROJECT\>\"", ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "0", ",", "0", ",", "0", ",", 
    RowBox[{"List", "[", "]"}]}], "]"}]}]], "Code",
 CellLabel->"In[2]:=",ExpressionUUID->"a0fa093c-e1bb-4c3a-853f-968c8b4c5c15"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "2", ",", "0", ",", "0", ",", "0", ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"1f8625c6-506f-4b5a-a7cd-ead7b5c8059a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "tables"}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"P1", "^", "2"}], "+", 
           RowBox[{"P2", "^", "2"}]}], ")"}]}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Q1", "^", "2"}], "-", 
           RowBox[{"Q2", "^", "2"}]}], ")"}]}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "6"}], "*", "KS", "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Q1", "^", "3"}], "-", 
           RowBox[{"3", "*", "Q1", "*", 
            RowBox[{"Q2", "^", "2"}]}]}], ")"}]}], "}"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"1", "/", "2"}], "*", 
          RowBox[{
           RowBox[{"Q1", "^", "2"}], "/", 
           RowBox[{"R", "^", "2"}]}]}], "+", 
         RowBox[{
          RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Q1", "^", "2"}], "-", 
            RowBox[{"Q2", "^", "2"}]}], ")"}]}], "+", 
         RowBox[{
          RowBox[{"1", "/", "6"}], "*", "KS", "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Q1", "^", "3"}], "-", 
            RowBox[{"3", "*", "Q1", "*", 
             RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], "}"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", "0"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<BEND\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<ELEMENT\>\"", "]"}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"{", "}"}], "}"}], "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", "\"\<QUAD\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KQ", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "\"\<SEXT\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KS", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", "\"\<BEND\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}]}], "}"}], "}"}]}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   
   RowBox[{"(*", " ", 
    RowBox[{"Generate", " ", "code"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$CODE", "[", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<LEVEL\>\"", ",", 
       RowBox[{"Plus", "[", "1", "]"}]}], "]"}], "]"}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->"In[3]:=",ExpressionUUID->"83b9fee9-32c5-4175-bd7b-f2d40f9bae06"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Covert", " ", "to", " ", "FORTRAN", " ", "and", " ", "compile"}], 
   " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$MAP", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}], "]"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"Echo", "[", 
        RowBox[{
         RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
         RowBox[{
          RowBox[{"Run", "[", 
           RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
          RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$SEQUENCE", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<SEQUENCE\>\"", "]"}], "]"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"Echo", "[", 
        RowBox[{
         RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
         RowBox[{
          RowBox[{"Run", "[", 
           RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
          RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$ELEMENT", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<ELEMENT\>\"", "]"}], "]"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"Echo", "[", 
        RowBox[{
         RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
         RowBox[{
          RowBox[{"Run", "[", 
           RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
          RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->"In[31]:=",ExpressionUUID->"7691b8d7-e36d-4ef9-b9e9-ab8e7ad8fc33"],

Cell[CellGroupData[{

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
drif_map.f90\"\>"], "Echo",ExpressionUUID->"e389110e-c5d0-45e7-a307-\
e02d938683c9"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
quad_map.f90\"\>"], "Echo",ExpressionUUID->"3bfa1d9a-a7a7-484d-a2f3-\
76873341bca7"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
sext_map.f90\"\>"], "Echo",ExpressionUUID->"5f73a5eb-27ee-4a77-a66b-\
14e4d5082e99"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
bend_map.f90\"\>"], "Echo",ExpressionUUID->"2d7a3c76-badd-4436-baae-\
67606c2a6328"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
drif_seq.f90\"\>"], "Echo",ExpressionUUID->"e6f8ba50-cfc7-4efd-abaa-\
da0b9dfdf717"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
quad_seq.f90\"\>"], "Echo",ExpressionUUID->"53c8f8e5-3f25-408c-a917-\
f57c7bad6be2"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
sext_seq.f90\"\>"], "Echo",ExpressionUUID->"1751a3df-7787-4466-b27d-\
41beb20fd03e"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
bend_seq.f90\"\>"], "Echo",ExpressionUUID->"7b74a311-dd33-4f65-b283-\
7467e7296d50"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
drif_ele.f90\"\>"], "Echo",ExpressionUUID->"81029128-7c21-4b92-8636-\
fe9d7477db8a"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
quad_ele.f90\"\>"], "Echo",ExpressionUUID->"e2529f53-a689-4238-9958-\
3b6c5ac76731"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
sext_ele.f90\"\>"], "Echo",ExpressionUUID->"c86c9b26-9278-4540-be5e-\
5d2a33128b85"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
bend_ele.f90\"\>"], "Echo",ExpressionUUID->"e27e42f7-03c9-49aa-8aef-\
60cd89c03984"]
}, Open  ]]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "element", " ", "parameters"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"RAD", " ", "=", " ", "22.918"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KBM", " ", "=", " ", "0.015"}], "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KQF", " ", "=", " ", "0.19"}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KQD", " ", "=", " ", 
     RowBox[{"-", "0.21"}]}], "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GSF", " ", "=", "  ", "1.5"}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GSD", " ", "=", " ", 
     RowBox[{"-", "1.5"}]}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GBM", " ", "=", "  ", "0.01"}], "  ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Create", " ", "FORTRAN", " ", "lattice"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"LATTICE", " ", "=", " ", 
     RowBox[{"I$FORTRAN$LATTICE", "[", "\n", "\t", 
      RowBox[{"\"\<FODO\>\"", ",", "\n", "\t", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{"(*", " ", 
         RowBox[{
         "\"\<FORTRAN\>\"", " ", "is", " ", "a", " ", "special", " ", 
          "element", " ", "name", " ", "that", " ", "can", " ", "be", " ", 
          "used", " ", "to", " ", "insert", " ", "FORTRAN", " ", "code"}], 
         " ", "*)"}], "\n", "\t\t", 
        RowBox[{"(*", " ", 
         RowBox[{"Here", ",", " ", 
          RowBox[{
          "\"\<FORTRAN\>\"", " ", "is", " ", "used", " ", "to", " ", 
           "generate", " ", "loop", " ", "and", " ", "write", " ", 
           "STATE"}]}], " ", "*)"}], "\n", "\t\t", 
        RowBox[{"(*", " ", "FC", " ", "*)"}], "   ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<FORTRAN\>\"", ",", "\"\< LOOP: DO I = 1, 2**11, 1\\n\>\""}], 
          "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLB\>\"", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLB\>\"", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "FC", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<FORTRAN\>\"", ",", "\"\< WRITE(10,*) STATE\\n\>\""}], 
          "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "FC", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<FORTRAN\>\"", ",", "\"\< END DO LOOP\\n\>\""}], 
          "}"}]}], "\n", "\t", "}"}], ",", "\n", "\t", 
       RowBox[{"\"\<DEFINITIONS\>\"", " ", "\[Rule]", " ", 
        RowBox[{
         RowBox[{
         "StringTemplate", "[", 
          "\"\< INTEGER :: I\\n REAL(RK), PARAMETER :: DLS = `1`\\n REAL(RK), \
PARAMETER :: DLQ = `2`\\n REAL(RK), PARAMETER :: DLB = `3`\\n\>\"", "]"}], 
         "[", "\n", "\t\t", 
         RowBox[{
          RowBox[{"I$FORTRAN$REAL", "[", "0.05", "]"}], ",", "\n", "\t\t", 
          RowBox[{"I$FORTRAN$REAL", "[", "0.10", "]"}], ",", "\n", "\t\t", 
          RowBox[{"I$FORTRAN$REAL", "[", "0.10", "]"}]}], "\n", "\t", 
         "]"}]}]}], "\n", "]"}]}], " ", ";"}]}]}]], "Code",
 CellLabel->"In[37]:=",ExpressionUUID->"86f139d4-7181-4bb8-9761-7a43ba7e7be4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Standalone", " ", "program", " ", "can", " ", "be", " ", "generated", " ",
     "with", " ", 
    RowBox[{"I$FORTRAN$PROGRAM", "[", "]"}], " ", "function"}], " ", "*)"}], 
  "\n", 
  RowBox[{"TableForm", "[", 
   RowBox[{"Options", "[", "I$FORTRAN$PROGRAM", "]"}], "]"}]}]], "Code",
 CellLabel->"In[45]:=",ExpressionUUID->"bebdee65-8216-41e4-b4cb-d03735e946ab"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"\<\"DEFINITIONS\"\>", "\[Rule]", "\<\"\"\>"}]},
     {
      RowBox[{"\<\"PROLOG\"\>", "\[Rule]", "\<\"\"\>"}]},
     {
      RowBox[{"\<\"EPILOG\"\>", "\[Rule]", "\<\"\"\>"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[45]//TableForm=",ExpressionUUID->"118fe450-fde4-4c4e-83c3-\
519dc5240d2b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"\"\<DEFINITIONS\>\"", "   ", "--"}], " ", "extra", " ", 
    "definitions", " ", 
    RowBox[{"(", 
     RowBox[{"FORTRAN", " ", "code"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"\"\<PROLOG\>\"", "        ", "--"}], " ", "FORTRAN", " ", "code",
     " ", "to", " ", "execute", " ", "before", " ", "lattice", " ", "call"}], 
   " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"\"\<EPILOG\>\"", "        ", "--"}], " ", "FORTRAN", " ", "code",
     " ", "to", " ", "execute", " ", "after", " ", "lattice", " ", "call"}], 
   " ", "*)"}]}]], "Code",
 CellLabel->"In[46]:=",ExpressionUUID->"6ea56666-3816-4bbf-b377-79a4cd56cbde"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Create", " ", "FORTRAN", " ", "program"}], " ", "*)"}], "\n", 
  RowBox[{"PROGRAM", " ", "=", " ", 
   RowBox[{"I$FORTRAN$PROGRAM", "[", "\n", "\t", 
    RowBox[{"\"\<test\>\"", ",", "     ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", 
        RowBox[{"(", "incomplete", ")"}]}], " ", "program", " ", "name", " ", 
       
       RowBox[{"(", "string", ")"}]}], " ", "*)"}], "\n", "\t", "LATTICE", 
     ",", "     ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "lattice"}], " ", "to", " ", "use", " ", 
       RowBox[{"(", "association", ")"}]}], " ", "*)"}], "\n", "\t", "Null"}],
     "         ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"--", " ", "initial"}], " ", "state"}], ",", " ", 
      RowBox[{
      "\"\<Null\>\"", " ", "corresponds", " ", "to", " ", "command", " ", 
       "line", " ", "input", " ", "or", " ", 
       RowBox[{"I$MAKE$INITIAL", "[", "]"}], " ", "output", " ", "can", " ", 
       "be", " ", "used"}]}], " ", "*)"}], "\n", "]"}]}]}]], "Code",
 CellLabel->"In[46]:=",ExpressionUUID->"1da988ac-236a-4972-bfb9-de1b2c17f189"],

Cell[BoxData["\<\"gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value test.f90 && \
gfortran-10 -o test -std=f2018 -Wall -pedantic -fPIC -O3 -ffast-math \
-frecursive -march=native -Wno-unused-dummy-argument -Wno-unused-variable \
-Wno-unused-function -Wno-unused-value drif_map.o quad_map.o sext_map.o \
bend_map.o quad_seq.o drif_seq.o sext_seq.o bend_seq.o quad_ele.o drif_ele.o \
sext_ele.o bend_ele.o test.o \"\>"], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"0c6f3b51-342a-4667-8e2e-d38a9ff0f57d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Uncomment", " ", "IO", " ", "in", " ", "program"}], " ", "*)"}], 
  "\n", 
  RowBox[{
  "Run", "[", "\"\<sed -i 's/!IO_DATA//g' test.f90\>\"", "]"}]}]], "Code",
 CellLabel->"In[47]:=",ExpressionUUID->"8d22089f-1ba1-4d2e-98c1-61e123d16c81"],

Cell[BoxData["0"], "Output",
 CellLabel->"Out[47]=",ExpressionUUID->"d594f0bd-5590-4d83-93a7-bf83c15e22c0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Lattice", " ", "procedure", " ", "is", " ", "included", " ", "into", " ",
      "program"}], ",", " ", 
    RowBox[{"default", " ", "IO", " ", "unit", " ", "is", " ", "10"}], ",", 
    " ", 
    RowBox[{
    "output", " ", "file", " ", "name", " ", "is", " ", "\"\<OUTPUT\>\""}]}], 
   " ", "*)"}], "\n", 
  RowBox[{"FilePrint", "[", "\"\<test.f90\>\"", "]"}]}]], "Code",
 CellLabel->"In[48]:=",ExpressionUUID->"92085ced-c029-4c35-a9ba-c3fd1063f354"],

Cell["\<\
MODULE LATTICE
 IMPLICIT NONE
 PRIVATE
 PUBLIC :: FODO_LAT_SUB
CONTAINS
 INCLUDE \"fodo_lat.f90\"
END MODULE LATTICE
PROGRAM TEST
 USE ISO_C_BINDING
 USE LATTICE, ONLY: FODO_LAT_SUB
 IMPLICIT NONE
 INTEGER,PARAMETER :: RK=C_DOUBLE
 REAL(RK),DIMENSION(5) :: STATE
 INTEGER::ARG_IND,ARG_NUM
 CHARACTER(LEN=100),DIMENSION(5)::ARG_VAL
 INTEGER::I
 ARG_NUM = COMMAND_ARGUMENT_COUNT()
 IF(ARG_NUM.NE.5) STOP
 DO ARG_IND=1,ARG_NUM,1
  CALL GET_COMMAND_ARGUMENT(ARG_IND,ARG_VAL(ARG_IND))
  READ(ARG_VAL(ARG_IND),*) STATE(ARG_IND)
 END DO
  OPEN(UNIT=10,FILE='OUTPUT',STATUS='UNKNOWN',FORM='FORMATTED')
  CALL FODO_LAT_SUB(STATE)
  CLOSE(10)
END PROGRAM TEST \
\>", "Print",
 CellLabel->
  "During evaluation of \
In[48]:=",ExpressionUUID->"6dfe1f9b-5cf6-453e-a2c9-471152afc3d8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Compile", " ", "*)"}], "\n", 
  RowBox[{"Run", "[", "PROGRAM", "]"}]}]], "Code",
 CellLabel->"In[49]:=",ExpressionUUID->"451472dd-16b4-4aa2-a429-f776d9f7a4bd"],

Cell[BoxData["0"], "Output",
 CellLabel->"Out[49]=",ExpressionUUID->"8f5fad19-d195-4581-9b10-ef0b81d793d8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Run", " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "initial", " ", "condition"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"INITIAL", " ", "=", " ", 
    RowBox[{"I$MAKE$INITIAL", "[", 
     RowBox[{
      RowBox[{"List", "[", "]"}], ",", 
      RowBox[{"List", "[", 
       RowBox[{"0.05", ",", "0.0", ",", 
        RowBox[{"-", "0.01"}], ",", "0.0"}], "]"}]}], "]"}]}], "\n", 
   RowBox[{"(*", " ", "Execute", " ", "*)"}], "\n", 
   RowBox[{"RunProcess", "[", 
    RowBox[{"Flatten", "[", 
     RowBox[{"List", "[", 
      RowBox[{"\"\<./test\>\"", ",", "INITIAL"}], "]"}], "]"}], 
    "]"}]}]}]], "Code",
 CellLabel->"In[50]:=",ExpressionUUID->"5608c9c0-9087-4be2-8efa-f74dd7a9b14a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", "0.05`", ",", "0.`", ",", 
   RowBox[{"-", "0.01`"}], ",", "0.`"}], "}"}]], "Output",
 CellLabel->"Out[50]=",ExpressionUUID->"a1e9e7b3-7aff-4a32-8c9e-ae546da84cf2"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"ExitCode\"\>", "\[Rule]", "0"}], ",", 
   RowBox[{"\<\"StandardOutput\"\>", "\[Rule]", "\<\"\"\>"}], ",", 
   RowBox[{"\<\"StandardError\"\>", "\[Rule]", "\<\"\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[51]=",ExpressionUUID->"9ca0c064-4f6a-41cf-839e-24b2ba78c15e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Import", " ", "trajectory"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ORBIT", " ", "=", " ", 
     RowBox[{"Import", "[", 
      RowBox[{"\"\<OUTPUT\>\"", ",", "\"\<Table\>\""}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"Grid", "[", "\n", "\t", 
     RowBox[{"List", "[", "\n", "\t\t", 
      RowBox[{"List", "[", "\n", "\t\t\t", 
       RowBox[{
        RowBox[{"ListPlot", "[", "\n", "\t\t\t\t", 
         RowBox[{
          RowBox[{"Part", "[", 
           RowBox[{"ORBIT", ",", "All", ",", 
            RowBox[{"List", "[", 
             RowBox[{"2", ",", "3"}], "]"}]}], "]"}], ",", "\n", "\t\t\t\t", 
          RowBox[{"Rule", "[", 
           RowBox[{"PlotTheme", ",", "\"\<Detailed\>\""}], "]"}], ",", "\n", 
          "\t\t\t\t", 
          RowBox[{"Rule", "[", 
           RowBox[{"AspectRatio", ",", "1"}], "]"}], ",", "\n", "\t\t\t\t", 
          RowBox[{"Rule", "[", 
           RowBox[{"PlotStyle", ",", "Black"}], "]"}], ",", "\n", "\t\t\t\t", 
          
          RowBox[{"Rule", "[", 
           RowBox[{"ImagePadding", ",", "40"}], "]"}], ",", "\n", "\t\t\t\t", 
          
          RowBox[{"Rule", "[", 
           RowBox[{"ImageSize", ",", "Medium"}], "]"}]}], "\n", "\t\t\t", 
         "]"}], ",", "\n", "\t\t\t", 
        RowBox[{"ListPlot", "[", "\n", "\t\t\t\t", 
         RowBox[{
          RowBox[{"Part", "[", 
           RowBox[{"ORBIT", ",", "All", ",", 
            RowBox[{"List", "[", 
             RowBox[{"4", ",", "5"}], "]"}]}], "]"}], ",", "\n", "\t\t\t\t", 
          RowBox[{"Rule", "[", 
           RowBox[{"PlotTheme", ",", "\"\<Detailed\>\""}], "]"}], ",", "\n", 
          "\t\t\t\t", 
          RowBox[{"Rule", "[", 
           RowBox[{"AspectRatio", ",", "1"}], "]"}], ",", "\n", "\t\t\t\t", 
          RowBox[{"Rule", "[", 
           RowBox[{"PlotStyle", ",", "Black"}], "]"}], ",", "\n", "\t\t\t\t", 
          
          RowBox[{"Rule", "[", 
           RowBox[{"ImagePadding", ",", "40"}], "]"}], ",", "\n", "\t\t\t\t", 
          
          RowBox[{"Rule", "[", 
           RowBox[{"ImageSize", ",", "Medium"}], "]"}]}], "\n", "\t\t\t", 
         "]"}]}], "\t\t", "\n", "\t\t", "]"}], "\n", "\t", "]"}], "\n", "]"}],
     " ", "//", " ", "Rasterize"}]}]}]], "Code",
 CellLabel->"In[52]:=",ExpressionUUID->"f160b97f-d0cd-4cc6-8979-d066b7b5200f"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3d9zFUea8Hnt7s1e7r+w/8Xe7uXevhv7B7xvvGP3WpZeqTGIgdGoZwiw
sfjVE02jmA6rhzHRjRkzOGyk6DaN3f5BhMIR5kc0AkTg9ozdDQgRGGSwDGo4
m0tFV5RPVWVlZWVlPZn1/VwQpXMqqyqfU/nUcypL4n//b//jv7zwP4+MjGz5
X9U//+W/Tv2fP/7xf/3b//t/Uz/8P+Nb/t8Xx//mv/9f46/8zYt/8+P/47/9
L+rFr/+nkZHzauH/Xx4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAQH0vAEBrus5w8ev6EwYQs64zXAzKwmgXXuGt
hB+ez1bCD89nK9Xk3Xff9bAjn61UjyScFWRpD9zGX/iJbddKyHCQ0IpQdNJK
+OFpWpHDnaDS7mcr4Yfns5Xww/PZiko7RFTaLbUSfng+Wwk/PPmthB+ephU5
3Akq7X62En54PlsJPzyfrai0Q0Sl3VIr4Yfns5Xww5PfSvjhaVqRw52QEEYJ
x+AcnQqF3dMjwtnNETsn4RiixzedSkKGgwSEIotQpKi0WyUhjBKOwTk6FYoo
OzWQ0S8JxxA9Km0ThCJFKFKEIkWl3SrCCKAlpBcPCDKAlpBenJAQxvjm7gd0
KhzvPtf1UTgmpFMS0kv0CHIlIcNBAkKRRSgqkV6cIIwAWkJ68YAgA2gJ6cUJ
wgigJaQXDwgygJaQXpx4IaOrY4hyBodOhSLK6dRuOyUhq/QHQa4U5Ri3Qyiy
CEUl0osThBFAS0gvHvC9BoBzZBWHCCOAlpBePCDIAFpCenFCQhijnMGhU6GI
cjpVSKckpJfoEeRKQoaDBIQii1BUIr04QRgBtIT04gFBBtAS0osThBFAS0gv
HhBkAC0hvTghIYxRzuDQqVBEOZ0qpFMS0kv0CHIlIcNBAkKRRSgqkV6cIIwA
WkJ68YAgA2gJ6cUJwthPI3+VXU5+zK9W2AqoRHrxgCD3hITcmz0GCceDtpFe
nJAQxihncLrq1FDZXFZRl2m4Wv4A5ItyOlVIpySkl+gR5EpChkND+SpXk+TL
NlI3FEMbLMz54YrgrGgb6cUJwhiWWvWwSW1st1oTHUcQHpFePCDI8jnJgYUp
emA8QenksB3m86HmXB1kIr04wf8vJlllljPn9mCyx9P8OJsfG0Qhq/hEkEUx
SYMNN67Jt0PH4GRHg5Jb5U76Uvgj1wU5SC9OSAhjlDM4Fp0ySdEOk7YF605J
7lccM8tDhHRKQnqJHkGu1PZwKExfbSS0oU1Z5M+yUJRtWfOj8x6VdaS9K4KE
JCkc6cUJwiiBJmHWyqJh6WGX+6Yn6eXixYvT09Ojo6MHDhy4e/dufoWFhYUt
W7aMj48fPXp0c3OzstXKyop6K/3x1q1br7/+ulpzZmbm6tWrQxvvSZAlKysO
R0ruOTvZ3aC8HrbY0VCrsi0Xrtx8R/m95JftdoeGSC9OEEb/KmpKpzk5IIUX
JoITtD6kl7W1tbGxsStXrjx+/Pj48eOqbB5aYWlpaefOnWq19fX1vXv3nj59
WtPq2bNnH330karJVZPkladPn6qqe3FxUZXon3322cTExMbGRnb7fQiyWGXp
KJ+p9D9a77RsueGOho6/ci91t+xqNbSN9OKEhDBGOYOT7ZRJ6RhEDdnJJ9V2
0IQ8aOGWkE5JSC9tUzXw4cOHk+UnT56Mjo6urq5mVzh06NCZM2eS5WvXrm3b
tk3T6p133tmzZ8/777+fVtpffPGFqq5VBZ78ODs7+8knn2S334cgN9TecDCs
n/OvN0lcaduyzWoOSRMKzUFm3ypbbq4spbd3ZZSQJIUjvThBGNvTdonYN8Qz
OH1IL/Pz8ydPnkx/nJ6ePn/+fHaF7du3X758OVl+8OCBismjR4/KWt2/f1/9
q9ZPK+1z5869+uqr6ZrHjh07fvx4dvt9CHIoyrJQGxVp4WabZELDErd5pT3U
aqg7hocBP+JOLw4f/Ltw4cLMzEzyjN/nn38+tJ24w9gh6kAPqLqF60N6mZub
Sx4ISezatWtpaSm7wuTk5PXr15PljY0NFZN79+7pW2Ur7Q8++CD7RMqJEydU
zs9u/4Wc9E4dC90uFJbETjaYfSt9sbBV8m7+LX2rwn1ls2utgx/a19CWCzfo
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
56dr5Qb1g9QhcrgTVNpA31Bpx6TtStvkrcLV8i9WttJsARCr4e0L6/Fi0bAu
crgT3rK0RpSTWXQqFFFOp1Z2iko7Gu3dLRn60fCcKVy5VuXgvNKOcozbIRRZ
bkPhpNKutZH8YKHSlklCpQ3AMz9DlSztgfNfZs+/Ylgn132lcCNcRNArJt9J
9eu0OnDI4U60VGk73CaANngoacjSHrgKcuHJYFgwm5xF5rU3FxGEq25StRg7
mkrbfJuGyOFOtPHH/eo2jHIyi06FIsrpVJNOUWnHwXmlra9+8wsN99hkC4ai
HON2CEVWG6EYycm/q3/FZPuFP2r2a40c7oSEShtAV1odtmRpD9qYlzR5vfK0
MTmvuGQgMkNfRZ2PGirtELU68whAOCrt0In9f35NLvrZFbiCIBp1T2bDUdDk
XTvkcCechLHhxTrKySw6FYoop1PNO0Wl3dzFixenp6dHR0cPHDhw9+7d/AoL
CwtbtmwZHx8/evTo5uamptWtW7def/119eLMzMzVq1eTF3/7299m/9vNy5cv
ZzcurdKuvOdWtn5752GUY9wOochqLxT6Uz37Y62Tf2h9zVhzpSc5vG1O/t/k
Vi/WANrmdvz26n9jX1tbGxsbu3LlyuPHj48fP67K5qEVlpaWdu7cqVZbX1/f
u3fv6dOny1o9ffpU1d6Li4uqGv/ss88mJiY2NjbU6z//+c/fe++9e3+V1uoJ
n0HW36bWvzvQnmZcQRAZTV1d9op+C/m3Kkdcc33I4R5IuKcNoFstDeE+ZGlV
GB8+fDhZfvLkyejo6OrqanaFQ4cOnTlzJlm+du3atm3bylp98cUXqrp+9uxZ
8vrs7Ownn3yiFl555ZW5uTlVhKtCXRXnQwfgIcj6O2n51Uw2ZdEWCEjzG86G
Tai05ZNQaUc5mUWnQhHldGrdTlFpW5ufnz958mT6o6qHz58/n11h+/bt6fMe
Dx48UDF59OhRYatz5869+uqr6YvHjh07fvz43bt3X3zxxd/85jdra2u///3v
X3rppa+//jq7fZ+VdpOGhVW6nwI7yjFuh1BktR2KWqe39f3tVvUhh3vQPIzc
0AYiQKVtZ25uLnkgJLFr166lpaXsCpOTk9evX0+WNzY2VEzu3btX2OqDDz7I
Pnxy4sSJo0ePDp7f9M7u7te//nV2+y/kpPVD5wvJSZW8kj3B0nXSFzs/VBZY
cL5QeM4PvZVfKNxgdqQMfWl1e8z5fDJAYw3DWHibAkBw2hjLfcjS8/Pzp06d
Sn+cnp6+cOFCdoWpqanl5eVkOXtPO9/q008/fe2119IXjx079tZbbw3tTrU6
cuRI9hWxQea6AAyc/iLwSI7jY80Rm17CIqHSjnIyi06FIsrpVItOUWnbWVxc
TEvf5Inr27dvZ1c4ePDg2bNnk+WVlZWtW7eWtbpx48bk5GT6nPa+ffs+/vjj
y5cv79mzJ93a3Nzc22+/nd2+tyDXPTf06/usw6Mc43YIRZafUJif6pXlt/9v
r33I4R44qbRdHQyADlFpW1hdXR0bG1teXt7c3Dxx4kRSFT99+vTzzz9fX19X
y+fOndu5c+edO3cePnw4OzubPJ5d2ErV2Dt27FhYWFAvqubj4+Prz01MTHz4
4Ydqm+fPn3/55ZfX1tayB+C50nZ1hnDtQN9UnvN2N7pb1Ycc7gF/3A9Ayu2g
7kmWvnTp0szMjKqc9+/fn/xl7O+//171fWVlZfC8flbF89TUlCqYs39PO99q
8Pzvae/bt0/V2Oqt9M+M3LhxQ5Xiak314tAf0x54D3LD04NLBvop0HqpJzm8
bRIq7Sgns+hUKKKcTrXulNv7lmRpD8IKcifFRpRj3A6hyPIZCrdnvttErRFW
ehFLQqUNQA4q7bD4D3Ld04PLBJBw+/AVlXYorP+WC2U2EKuGQ5u/EOVTKJU2
FwugbCCYDxDPQ4kc7oR1GB0mzygns+hUKKKcTm3YKVejmyztgcAg50+ebivt
KMe4HUKR1W0osoOCSjtuEiptAKJQaQfEZ5ANz4rC1bheAFlBjAhyuBOEEUAe
lXYoBFbaha2CqCsAn+QPCnK4ExZhdJ42o5zMolOhiHI6tXmnqLRDUSvInVzZ
Oy8nohzjdghFVuehqFVN2T1t0hA53AkJlTYAaZwMc7K0B9aVdpMb1IarcY0A
NDqptGu1JYc70aTSbuN4AEhApR0KuyBbf7j6Vum7XCaASkNjxKLkrruvugOT
HO6EdaXt8Bg6n8FpA50KRZTTqU46RaUdBPMg5++JOa+EZVbXUY5xO4QiS04o
rG9uW+yiVityuBP8GW0AZRqOd7K0B3Ur7VYTeH7jXC+ASp6HifnuyOFOUGkD
KNOwNiNLe2D+/wSVfZrOK/D8zXMnmwX6oKWROPRi5S7438ccklBpy5nBcYhO
hSLK6VRXnaLSlq/5E4AWn7LmCl72boeiHON2CEWWnFAYfjmtO7L049QEOdyJ
Wv9vMje0gR6qO+r539h9Mk/dZT9aGMkZCK60AeEMh4z1yDKs5PPI4U5Y/IUo
UijQK9zTlqzWTZJ8JVz24Wruhg21pdIGmnA4XsyHs+FOyeFOSKi05czgOESn
QhHldKrbTlkPfLK0B3Z/e6TsRX21HOjNlijHuB1CkSUkFBZlcK0vyHa7SJDD
nbB7TrulgwEgEJW2ZE3+nrZmuWGq50oBWBsahtZ18tD6ZVvTIIc7YfEXolo9
HgDSWA98srQHhn9yJP+KeXWdX7nyfOBiATRnURtnGzbfGjncCQmVtpAZHLfo
VCiinE5t6emRusOfLO2BxR/3M6moy143vDkmqtKOcozbIRRZ0kKhHzVl34g1
RXWT3SXizuEXL16cnp4eHR09cODA3bt38yssLCxs2bJlfHz86NGjm5ubla1W
VlbUW/ntSKi0AQhHpS2WYZBdZW/DShtAXd4qbfPxG3EOX1tbGxsbu3LlyuPH
j48fP67K5qEVlpaWdu7cqVZbX1/fu3fv6dOnNa2ePXv20UcfqZpcNcnvq+Fv
0wDoAyptsZoHOX/LOr88yNXYDXcKIMt8WNW6X104YM33FXEOX1xcPHz4cLL8
5MmT0dHR1dXV7AqHDh06c+ZMsnzt2rVt27ZpWr3zzjt79ux5//33m1TarWZX
aTM4TtCpUEQ5ndpGpyySQMRZWg4/lXbQBXaUY9wOocgSFYrKIVb5PVdzczv/
ldnwqCLO4fPz8ydPnkx/nJ6ePn/+fHaF7du3X758OVl+8OCBCsWjR4/KWt2/
f1/9q9YXW2kDkI9KWya3f3vEZH1XawLIsqi06w5k89USEefwubm55IGQxK5d
u5aWlrIrTE5OXr9+PVne2NhQobh3756+labSHpJ+y8suDH2+heuwwAILES9k
83zZOvl8MkDLmlfahm+ZF+RU2oAf5pW23cCMOIfPz8+fOnUq/XF6evrChQvZ
FaamppaXl5Pl7D1tTSsn97Rr9cKcqBkcV+hUKKKcTm2jU4V3VPQiztJyOA+y
SaXdpBr3L8oxbodQZEUWinT0DSVqi9SdijiHLy4uHjlyJFlOnri+fft2doWD
Bw+ePXs2WV5ZWdm6dWtlK8mVNoAgUGkL5DbIIzma1fSvAHBraJTpv/Aa3uvW
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
954+fbqs1dOnT1UyX1xcVOn9s88+m5iY2NjYyG6qLIw8PdIQnQpFlNOpPD3i
Tdvp2jqHD8zSeB8q7SjHuB1CkRVBKKi0ramkevjw4WT5yZMno6Ojq6ur2RUO
HTp05syZZPnatWvbtm0ra/XFF1+ozPzs2bPk9dnZ2U8++SS7Ke5pA2ii55V2
2+naLocnGs4mcyEA4lY5wCPO4fPz8ydPnkx/nJ6ePn/+fHaF7du3X758OVl+
8OCBCsWjR48KW507d+7VV19NXzx27Njx48ezm6LSBtBEzyvtttO1XQ4fOPp/
mbkQAPJZf6ceyShcIeIcPjc3l8wwJnbt2rW0tJRdYXJy8vr168nyxsaGCsW9
e/cKW33wwQfZ2cwTJ04cPXo0u6kXct59992hyKczLC0tZOezollIuybkeJws
7Nu3T8JhOD/94utXysO+sukin08GsWs7Xdvl8MEPr7mdn5DdLvgcDsIXVK5L
856E4+k8GhIOw1USzi4MSr5r65sP+pTD5+fnT506lf44PT194cKF7ApTU1PL
y8vJcvYmSb7Vp59++tprr6UvHjt27K233spuSnNP20lfAPRWxFk61Xa6tsvh
qYbJnPlNQDLNCNXMapkP6ohz+OLi4pEjR5Ll5BG+27dvZ1c4ePDg2bNnk+WV
lZWtW7eWtbpx48bk5GT6jJ/6Bvfxxx9nN8XTIwCa6PnTI22na7scPiiaFx7J
GVpZs5EaEQHgi90INS+8I87hq6urY2Njy8vLm5ubJ06c2LNnT/L61atXb968
qRbOnTu3c+fOO3fuPHz4cHZ2Nnner7CVys87duxYWFhQL37++efj4+Pr6+vZ
fUmotNNZjJjQqVBkp5Wj4bNTPa+0CxPv06dPVb5Nkm3DdG2Xwwe5zyVfZlde
aqOpsaMc43YIRVbooWg4QsuyQVbcOfzSpUszMzMqFe/fvz/9U6u7d+9OTgyV
e1XinZqampiYyP6B1sJWt27d2rdvn8rP6q0rV64M7UhCpQ0gXD2vtAdFiff7
779XfV9ZWRm4SNcWOXzQYL64SRMA3jistMvW6UkObxthBNBQzyvtbpk8PWJ9
ReauCxCcwsmsobfyC4XI4U5IuKcd+gxOIToViiinU3l6pD+otCtFOcbtEIqs
0ENRNrrNK+3K/EAOd0JCpQ0gXFTa3apbaRveywIgmd336HxaoNL2gEobQBNU
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
2XwL2Ve4TABZhoWx4Rg036N1c3K4E9ZhJIUCEaPSDkXzSttknbq1AZU2kFd3
3DVvTqUtgfXfYnWYRaOczKJToYhyOrVJp5rXSPwfkT5Zp+58FW13iS+8smtO
Hv/ld5Rj3A6hyPIfipYqbZOvt3bjjhzuRMN72tyyACLjcGiTpT2wq7QLX/GT
1blqoLfKvpbmX7TYbBvfcMnhTlBpA8hyOK7J0h40z+GVLxY2rLsj6+ZAfEZy
Ktes3E7Zu/llc+RwJxqG0UnOjHIyi06FIsrpVOtOuf36TJb2oOFvtVdeoDXv
Gp4tQ/vyX2lHOcbtEIqsDkNh/vXTpNIufMVJMieHO+Gk0uYGBRABkxsstfQk
S1+8eHF6enp0dPTAgQN3797Nr7CwsLBly5bx8fGjR49ubm5qWt26dev1119X
L87MzFy9ejV58be//W320ffLly9nN+6k0ja/7hduxGKPQH9UnvaagrnulvOD
usm460kObxuVNoAElbaFtbW1sbGxK1euPH78+Pjx46psHlphaWlp586darX1
9fW9e/eePn26rNXTp09V7b24uKiq8c8++2xiYmJjY0O9/vOf//y9996791dp
rZ5wEuRaN82ar8ZVA72SPeENz//KIWn+1ZhKu3MSKu0oJ7PoVCiinE6165Tz
+qcPWVoVxocPH06Wnzx5Mjo6urq6ml3h0KFDZ86cSZavXbu2bdu2slZffPGF
qq6fPXuWvD47O/vJJ5+ohVdeeWVubk4V4apQV8X50AE0CXL+9pdmHcNN1dqv
H1GOcTuEIstbKCwq7cqtlVXaJoPaXB9yuAeu/n8xblAAQWtjIPchS8/Pz588
eTL9UdXD58+fz66wffv29HmPBw8eqJg8evSosNW5c+deffXV9MVjx44dP378
7t27L7744m9+85u1tbXf//73L7300tdff53dfhrktGwwX8h+4nWbJ20tdupk
7yywENBCNrv62dfgh/NH1hvsQw73gEobwIBK29bc3FzyQEhi165dS0tL2RUm
JyevX7+eLG9sbKiY3Lt3r7DVBx98kH345MSJE0ePHh08v+md3d2vf/3r7PZf
yGlS65pXvw2v4EPnm4RyiAUW2luwK3rN6/PCutpip/l8MkBjbT/jZyL9oGNC
p0Lx7nNdH4VjFp1q4/tyTFl6ZWVl7Iemp6cHz+9pnzp1Kl1NvXjhwoVsw6mp
qeXl5WQ5e0873+rTTz997bXX0hePHTv21ltvDR2GanXkyJHsK26D7O22ic/7
M1GOcTuEIstDKLLnucU5b94kW2lbNC8TUw7vkIRKG0CHClO0EzFl6SdPntz9
oXv37g2eP3Gdlr7JE9e3b9/ONjx48ODZs2eTZVWub926tazVjRs3Jicn0+e0
9+3b9/HHH1++fHnPnj3p1ubm5t5+++3s9l3NS3puzlUDfWCXWtMm1sPE1fiK
KYd3yMkcQXtXagBtcz5+ezXzuLq6OjY2try8vLm5eeLEiaQqfvr06eeff76+
vq6Wz507t3Pnzjt37jx8+HB2djZ5PLuwlaqxd+zYsbCwoF5UzcfHx9efm5iY
+PDDD9U2z58///LLL6+trWUPIPRKmwsHItaw0m640+Yjqw853AOH97StP9Yo
J7PoVCiinE6t1an2vib3JEtfunRpZmZGVc779+9P/jL2999/r/q+srIyeF4/
q+J5ampKFczZv6edbzV4/ve09+3bp2ps9Vb6Z0Zu3LihSnG1pnpx6I9pD8IP
sodKO8oxbodQZLUaig5vP1JpS+MqjNzTBoLT9rAlS3vQYZCdnzxcRBCNOIoi
crgTgf42DYDmqLQjEFalXdbE4V04QJpwT2xyuBNtVNp1z6goJ7PoVCiinE41
7BSVdgQ6CbL1aaOvtBsfV7Eox7gdQpHVRigKz2S701tCfU4Od0JCpQ3APw93
EcnSHgiptF3VElxBEDSHJ7CEsUAOd8J5GCm2Afn8jFOytAdCgkyljZ7LnrrR
1NtC0kvoJFTaUU5m0alQRDmdWtkpKu1ohBhkz8VDlGPcDqHIchsKKm2UkVBp
A/DMzyAlS3vgP8hDJ4/FuWTShOsIwhLlWU0Od6KNMAZ3LgH9MZLR9r7I0h50
WGlbn0tR1iToJ82Jav1wlJyTnxzuREv/m1ut9BvlZBadCkWU06maTnkos3v1
f0R2Tvhf+Stcp/Ku+FAx3/A4oxzjdghFlpNQ1Kq0m2/TM3K4Ey2F0dtNMwC1
+BybZGkPhAfZrhp3W2kD3jg8YyWc/MLTSyjaC6OEkwRAyv/3X7K0B0L+yl9L
DbmOQKaRjPzr+lca7sIncrgTrYbR8CSJcjKLToUiyunUfKc6SdpkaQ86eVZn
6EQyPLsMz8DCdZqculGOcTuEIqtJKMwzaqCVNk8AOiSh0gbQNirtWHkO8tCJ
NJJT2Vb/imY1riaQxvCcbH7qdlhv+99pfKi0geh1NRLJ0h5IqLTLVjPcWt2d
Ah3Knoear4ojuUkfzXZq7dQncrgTHsJYeYZEOZlFp0IR5XRqtlMdVilkaQ+8
BbmywChbueFqIz9kfsCpKMe4HUKRVTcUhueh4bmqWSf/TbarNB53Dr948eL0
9PTo6OiBAwfu3r2bX2FhYWHLli3j4+NHjx7d3NzUtFpZWdm9e/fY2NiOHTs+
/PDDoe14q7S5FwF0osMBGHeWFsJnDh86i8zPqyZrFlbaXFPgmabWdfi9cmjN
oSaFY6FVEefwtbU1VRhfuXLl8ePHx48fV2Xz0ApLS0s7d+5Uq62vr+/du/f0
6dNlrb799ltVjav1nz59+uWXX05MTFy+fDm7KSptIGJd3QlJRJyl5egkh48U
qdyC+b4q3+KyAs9cVdp1B4tm6NXsgY2Ic/ji4uLhw4eT5SdPnoyOjq6urmZX
OHTo0JkzZ5Lla9eubdu2razVV1999eabb6YNjxw5kpTlKT9h1J8YUU5m0alQ
RDmdmnSq2zJ7EHWWlqPb57QH9YteJ6dlrS1EOcbtEIqsWqGwOGMLz9KGlbb1
wdiJOIfPz8+fPHky/XF6evr8+fPZFbZv357emn7w4IEKxaNHjypbfffdd1u2
bCm7p52ecm0sDKXWVvfFAgssJAvpoOvqMCLO0nL4/+N+mkrApABw9QWw8y+S
iF72BHNVaZetpnlx5IdqHUNDEefwubm57J3nXbt2LS0tZVeYnJy8fv16sryx
saFCce/ePX0rtdrs7Owbb7wxtK8Xclq68lJps8CCz4VORlw+nwzQsq7+jHbh
1d9nJUCljVY5OcGotDv39OnTsZy1tbX5+flTp06lq01PT1+4cCHbcGpqanl5
OVnO3tMua6W2+ZOf/ORXv/qV2uPQMXRyP2To9fRiHRM6FYp3n+v6KFySU4FE
kKXl6/D/iKw8x9o7CfNb1uwrvjFujVBk6UPRXhY1L7+H1qTStnM3RxXDi4uL
R44cSVZInri+fft2ttXBgwfPnj2bLK+srGzdunXw/DntwlZffvmlWiH/V0cS
XT3j53OnQK9QafeK/yCb32ETUmkDdoRU2h3m84hz+Orq6tjY2PLy8ubm5okT
J/bs2ZO8fvXq1Zs3b6qFc+fO7dy5886dOw8fPpydnU0ezy5sdf/+/R//+Me/
+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
a9u2bcu+W9brkydPpt8x//SnP/3oRz9KO94VTfwTasyqsZYsP3nyRH0RXl1d
rWzVrcrDK1xBpaYjR458++23yYsffPCBqNqjcihpVpA8lFCLXeZRX+1VJbmw
sLB79+600i4c2p664YJdKApb3bx5U3X/F7/4hSozVExUNeKvG7YqP77CnoaY
zytVhqJWr1VJOTc3p+pV9fVEVaQe++GA3QVdLb/zzjt79ux5//3300q78ooD
OVTKys7EqS9Z//iP/5hd4dy5c6+++mr647Fjx9T3rMHzb1ivv/76+fPnVXUq
sDzYvn17Oqn04MED1cdHjx6l71b2evD8hJdwT7ss/qn5+Xn1EaQ/qvyjPpTK
Vt2qPDyT4//pT38q6p525UlVtoLwoYRa7DKPumiur6+rBXXap5V24dD20wsn
7EJR2EolhPHx8UuXLt2+fVtlg7/927+V//RI5cdX2NMQ83mlylCY9/ru3bsv
vvjib37zG3X+/P73v3/ppZe+/vprD11wxe6Crhbu37+v/lUnTFppm5QxEOLP
f/6zOm/THy9evJidmxjk7hyeOHEiKQZUIfrLX/5y8Pw+sMDyYHJyMp1J2djY
UCdkdsKxsteff/65+uL5n//5n36OVqMs/in17T47Lbtr1y51pa5s1a3Kw9Ov
oErTt956a2Zm5rvvvvNwtIYqT6qyFYQPJdTSMPNkK+3Cod3iobtmF4qyVmlF
ob6VbN26VaVoP72wVvnxFfY0xHxeqTIUtXqd/ZKlGv76179u8dBds7ugpz9m
K+3KZIJOqI9v7IfUR5x8LUqfdMp/Lfr000+zt3bVVzBV5Hz11Vd/93d/lzxf
1G15sLKyMtSp5PcFpqamlpeXk3XKbqeU9Vp9X1bN/+M//sNjP0oVxj+7gvoK
fOrUqfRH1f0LFy5UtupW5eFpVnj8+LHKRXv37k0fIxGicigVriBnKKGWwnQ6
aJZ5Brl72vmh3Wqn7LhNwvpWCTX8VcXSdr8aqvz4CnsaYj6vVBkK616rVkeO
HGnnqFthd0FPf8zf09YkE3RCjeK7P6RqleRRn3T+5d133/3FL36RbXXjxg31
1Tt9rGjfvn0ff/yxOjdeeuml//HcS8/9wz/8g+/+PKe+3g51KrkBcvDgwbNn
zybrqAvB1q1bs63Keq26qS6Xu3fv/uabb/z2o1Rh/LMrLC4upqkmeazr9u3b
la26VXl4ZSs8fPhQfTr/8i//IvC3YCqHUuEKcoYSailMpwPbzJPKVtqFQ7vV
Ttlxm4QLW6l300l21fCVV175wx/+4KVz9io/vsKehpjPK1WGwrzXqtTcs2dP
2nBubu7tt9/20gk37C7o6bvZSrsymUCUX/7ylz/72c82Njb+/Oc/pxlMfcVO
pufUKbFjx46FhQVV26hXxsfH19fXVcGTJlX1peyf//mfpf0y+Llz59QJeefO
HXWos7OzyYNP6sxUXUiehyzstfou+fd///fqxE5/r7nz34gsjL96/erVqzdv
3lQLq6urY2Njy8vLaoUTJ04kWaislRBlh/enP/1JXXHKVkieZ05OtoSoTg2q
hlLhCvKHEmqxyzypbKVdOLQDYheKwlZXrlxRofjjH/+oQqFeUVlabafb3lUq
+/jS1F3Y0xDzeaXKUJj3WpmYmPjwww/VCXD+/HlVagbx67Epuwt6KltpD6qS
CUT57rvv5ufn1fcs9Z06/ZOMly5deuGFF5LlW7duqW9e6pSYmZnJ/6qvzClv
dT6rk3lqakqNyvRPlX7//feqU0ktl++1Wuell1564YfyE5f+FcZ/9+7d6jts
sqw+LPWWGp779+/P/iVSzafWucLD+7d/+zf1YtkK169fH/p0pE2WVQ6lwhVS
MocSarHIPFnZSntQMrRDYReKwlbKJ598okoUVVkdOHBAVadddaqWwo8vTd1l
PQ0xn1fSh6JshcJe37hxQ9Wfak31YnB/THtge0FPDFXa+mQCAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAA2Pn/AEw7z1U=
    "], {{0, 362.25}, {730.5, 0}}, {
    0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{730.5, 362.25},
  PlotRange->{{0, 730.5}, {0, 362.25}}]], "Output",
 CellLabel->"Out[53]=",ExpressionUUID->"94f47606-a96e-4bc5-9afd-87cea9514467"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Clean", " ", "*)"}], "\n", 
  RowBox[{
  "Run", "[", "\"\<rm -f *.f90 *.mod *.o test OUTPUT\>\"", "]"}]}]], "Code",
 CellLabel->"In[54]:=",ExpressionUUID->"87e5b9d5-60b0-48ba-a9a9-c40364ca2c8a"],

Cell[BoxData["0"], "Output",
 CellLabel->"Out[54]=",ExpressionUUID->"f7f1b0b1-3c2a-4e61-8233-00a2642828c4"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-15:  (FORTRAN) State extension", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"3dc03641-feb6-4e72-9e38-f2760ed63500"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Extra", " ", "state", " ", "dimensions", " ", "can", " ", "be", " ", 
    "used", " ", "to", " ", "store", " ", "observables"}], " ", "*)"}], "\n", 
  
  RowBox[{"(*", " ", 
   RowBox[{
   "In", " ", "this", " ", "example", " ", "extra", " ", "state", " ", 
    "dimensions", " ", "are", " ", "used", " ", "to", " ", "store", " ", 
    "canonical", " ", "coordinates", " ", "at", " ", "several", " ", 
    "locations"}], " ", "*)"}]}]], "Code",ExpressionUUID->"50db9177-b50b-45c7-\
9138-e010a54d7bab"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[1]:=",ExpressionUUID->"18494557-d865-4e52-9130-e33803dcc570"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", 
   RowBox[{"\"\<PROJECT\>\"", ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "0", ",", "0", ",", "0", ",", 
    RowBox[{"List", "[", "]"}]}], "]"}]}]], "Code",
 CellLabel->"In[2]:=",ExpressionUUID->"72b050aa-0cc9-4098-a635-e7e99f316eb3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "2", ",", "0", ",", "0", ",", "0", ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"c9c9afb8-42bf-482a-8f4c-969b595df6b0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "tables"}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"P1", "^", "2"}], "+", 
           RowBox[{"P2", "^", "2"}]}], ")"}]}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Q1", "^", "2"}], "-", 
           RowBox[{"Q2", "^", "2"}]}], ")"}]}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "6"}], "*", "KS", "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Q1", "^", "3"}], "-", 
           RowBox[{"3", "*", "Q1", "*", 
            RowBox[{"Q2", "^", "2"}]}]}], ")"}]}], "}"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"1", "/", "2"}], "*", 
          RowBox[{
           RowBox[{"Q1", "^", "2"}], "/", 
           RowBox[{"R", "^", "2"}]}]}], "+", 
         RowBox[{
          RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Q1", "^", "2"}], "-", 
            RowBox[{"Q2", "^", "2"}]}], ")"}]}], "+", 
         RowBox[{
          RowBox[{"1", "/", "6"}], "*", "KS", "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Q1", "^", "3"}], "-", 
            RowBox[{"3", "*", "Q1", "*", 
             RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], "}"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", "0"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<BEND\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<ELEMENT\>\"", "]"}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"{", "}"}], "}"}], "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", "\"\<QUAD\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KQ", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "\"\<SEXT\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KS", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", "\"\<BEND\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}]}], "}"}], "}"}]}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   
   RowBox[{"(*", " ", 
    RowBox[{"Generate", " ", "code"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$CODE", "[", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<LEVEL\>\"", ",", 
       RowBox[{"Plus", "[", "1", "]"}]}], "]"}], "]"}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->"In[3]:=",ExpressionUUID->"ac091aca-a6cf-4e2c-bf5c-81c8c1e55726"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Covert", " ", "to", " ", "FORTRAN", " ", "and", " ", "compile"}], 
   " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Add", " ", "extra", " ", "dimensions"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"EXTEND", " ", "=", " ", 
     RowBox[{"2", "*", "5"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SetOptions", "[", 
     RowBox[{"I$FORTRAN$MAP", ",", 
      RowBox[{"Rule", "[", 
       RowBox[{"\"\<EXTEND\>\"", ",", "EXTEND"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SetOptions", "[", 
     RowBox[{"I$FORTRAN$SEQUENCE", ",", 
      RowBox[{"Rule", "[", 
       RowBox[{"\"\<EXTEND\>\"", ",", "EXTEND"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SetOptions", "[", 
     RowBox[{"I$FORTRAN$ELEMENT", ",", 
      RowBox[{"Rule", "[", 
       RowBox[{"\"\<EXTEND\>\"", ",", "EXTEND"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$MAP", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}], "]"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"Echo", "[", 
        RowBox[{
         RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
         RowBox[{
          RowBox[{"Run", "[", 
           RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
          RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$SEQUENCE", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<SEQUENCE\>\"", "]"}], "]"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"Echo", "[", 
        RowBox[{
         RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
         RowBox[{
          RowBox[{"Run", "[", 
           RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
          RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$ELEMENT", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<ELEMENT\>\"", "]"}], "]"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"Echo", "[", 
        RowBox[{
         RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
         RowBox[{
          RowBox[{"Run", "[", 
           RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
          RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->"In[31]:=",ExpressionUUID->"53c91f25-489b-47ba-938f-e0cf122cc84f"],

Cell[CellGroupData[{

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
drif_map.f90\"\>"], "Echo",ExpressionUUID->"33e2e65a-72d3-47f8-ae4a-\
aceabc8e5a04"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
quad_map.f90\"\>"], "Echo",ExpressionUUID->"bc47d612-fa30-4c8e-a4ce-\
c5516c4041ac"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
sext_map.f90\"\>"], "Echo",ExpressionUUID->"496805fc-9748-4d04-96b2-\
032e39dc288b"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
bend_map.f90\"\>"], "Echo",ExpressionUUID->"ce0ac77f-62d8-4de2-98db-\
ef89b71b7cb4"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
drif_seq.f90\"\>"], "Echo",ExpressionUUID->"b2bef10a-c445-4c85-b6c5-\
efe08bb4fb86"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
quad_seq.f90\"\>"], "Echo",ExpressionUUID->"aef5d51b-431b-4d63-83d6-\
6bbe60858649"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
sext_seq.f90\"\>"], "Echo",ExpressionUUID->"529e1efc-4037-42fb-b287-\
67644d792059"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
bend_seq.f90\"\>"], "Echo",ExpressionUUID->"2e7e420c-c65d-4633-a678-\
4fde983ca433"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
drif_ele.f90\"\>"], "Echo",ExpressionUUID->"ef03201e-64a5-4ab8-98c6-\
893d74f97203"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
quad_ele.f90\"\>"], "Echo",ExpressionUUID->"28de747b-8116-45d8-863a-\
b2ba1301712c"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
sext_ele.f90\"\>"], "Echo",ExpressionUUID->"2a6ba204-e4cb-4980-8508-\
fb410715fbfc"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
bend_ele.f90\"\>"], "Echo",ExpressionUUID->"080d601f-3e6c-4479-8927-\
5c69b546a331"]
}, Open  ]]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "element", " ", "parameters"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"RAD", " ", "=", " ", "22.918"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KBM", " ", "=", " ", "0.015"}], "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KQF", " ", "=", " ", "0.19"}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KQD", " ", "=", " ", 
     RowBox[{"-", "0.21"}]}], "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GSF", " ", "=", "  ", "1.5"}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GSD", " ", "=", " ", 
     RowBox[{"-", "1.5"}]}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GBM", " ", "=", "  ", "0.01"}], "  ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Extend", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"SetOptions", "[", 
     RowBox[{"I$FORTRAN$LATTICE", ",", 
      RowBox[{"Rule", "[", 
       RowBox[{"\"\<EXTEND\>\"", ",", "EXTEND"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Create", " ", "FORTRAN", " ", "lattice"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"LATTICE", " ", "=", " ", 
     RowBox[{"I$FORTRAN$LATTICE", "[", "\n", "\t", 
      RowBox[{"\"\<FODO\>\"", ",", "\n", "\t", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{"(*", " ", "FC", " ", "*)"}], "   ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<FORTRAN\>\"", ",", 
           "\"\< STATE(6) = STATE(2) ; STATE(7) = STATE(3) \\n\>\""}], "}"}], 
         ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLB\>\"", "]"}], ",", 
           RowBox[{"List", "[", "1.5", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "FC", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{
          "\"\<FORTRAN\>\"", ",", 
           "\"\< STATE(8) = STATE(2) ; STATE(9) = STATE(3) \\n\>\""}], "}"}], 
         ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLB\>\"", "]"}], ",", 
           RowBox[{"List", "[", "1.5", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "FC", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{
          "\"\<FORTRAN\>\"", ",", 
           "\"\< STATE(10) = STATE(2) ; STATE(11) = STATE(3) \\n\>\""}], 
          "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLB\>\"", "]"}], ",", 
           RowBox[{"List", "[", "1.5", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "FC", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{
          "\"\<FORTRAN\>\"", ",", 
           "\"\< STATE(12) = STATE(2) ; STATE(13) = STATE(3) \\n\>\""}], 
          "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLB\>\"", "]"}], ",", 
           RowBox[{"List", "[", "1.5", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "FC", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{
          "\"\<FORTRAN\>\"", ",", 
           "\"\< STATE(14) = STATE(2) ; STATE(15) = STATE(3) \\n\>\""}], 
          "}"}]}], "\n", "\t", "}"}], ",", "\n", "\t", 
       RowBox[{"\"\<DEFINITIONS\>\"", " ", "\[Rule]", " ", 
        RowBox[{
         RowBox[{
         "StringTemplate", "[", 
          "\"\< INTEGER :: I\\n REAL(RK), PARAMETER :: DLS = `1`\\n REAL(RK), \
PARAMETER :: DLQ = `2`\\n REAL(RK), PARAMETER :: DLB = `3`\\n\>\"", "]"}], 
         "[", "\n", "\t\t", 
         RowBox[{
          RowBox[{"I$FORTRAN$REAL", "[", "0.05", "]"}], ",", "\n", "\t\t", 
          RowBox[{"I$FORTRAN$REAL", "[", "0.10", "]"}], ",", "\n", "\t\t", 
          RowBox[{"I$FORTRAN$REAL", "[", "0.10", "]"}]}], "\n", "\t", 
         "]"}]}]}], "\n", "]"}]}], " ", ";"}]}]}]], "Code",
 CellLabel->"In[41]:=",ExpressionUUID->"e47fac54-4c39-4f99-8e3a-51b28bf87acc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compile", " ", "lattice"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"Echo", "[", 
       RowBox[{
        RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
        RowBox[{
         RowBox[{"Run", "[", 
          RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
         RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"LATTICE", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[50]:=",ExpressionUUID->"80e2b9ab-ee0f-4295-a9b7-c41ed06ca8d5"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
fodo_lat.f90\"\>"], "Echo",ExpressionUUID->"de8b1f25-1be8-40a2-b42f-\
d5df8b7b280e"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Create", " ", "library"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"I$FORTRAN$LIBRARY", "[", "LATTICE", "]"}], "\n", 
   RowBox[{"FileNames", "[", "\"\<fodo_*.so\>\"", "]"}]}]}]], "Code",
 CellLabel->"In[51]:=",ExpressionUUID->"7797c19a-16a6-4a8c-8548-7db2cd144edb"],

Cell[BoxData[
 RowBox[{"{", "\<\"fodo_lat.so\"\>", "}"}]], "Output",
 CellLabel->"Out[52]=",ExpressionUUID->"76160801-53fc-425e-be82-8b83bc3db191"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "library"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ClearAll", "[", "LIBRARY", "]"}], " ", ";"}], "\n", 
   RowBox[{"LIBRARY", " ", "=", " ", 
    RowBox[{"I$FORTRAN$LOAD", "[", "\n", "\t", 
     RowBox[{"\"\<fodo_lat\>\"", ",", "       ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", 
         RowBox[{"(", "incomplete", ")"}]}], " ", "library", " ", "name"}], 
       " ", "*)"}], "\n", "\t", "LIBRARY"}], "           ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "variable"}], " ", "name", " ", 
       RowBox[{"(", 
        RowBox[{
        "passed", " ", "as", " ", "input", " ", "to", " ", "clean", " ", 
         "existing", " ", "definitions"}], ")"}]}], " ", "*)"}], "\n", "]"}], 
    " "}]}]}]], "Code",
 CellLabel->"In[53]:=",ExpressionUUID->"e0952044-7981-4209-a7c4-cbdadf9efe3d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["LibraryFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.038461538461538464`], {
               FaceForm[{
                 GrayLevel[0.93], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                25.499999999999996`, 2.5}, {25.499999999999996`, 
                1.3953100000000003`}, {24.604699999999998`, 
                0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                0.49999999999999994`}, {1.3953100000000003`, 
                0.49999999999999994`}, {0.49999999999999994`, 
                1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                24.604699999999998`}, {1.3953100000000003`, 
                25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                25.499999999999996`}, {24.604699999999998`, 
                25.499999999999996`}, {25.499999999999996`, 
                24.604699999999998`}, {25.499999999999996`, 23.5}, {
                25.499999999999996`, 2.5}}}]}, {
               FaceForm[{
                 RGBColor[0.5, 0.5, 0.5], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                16.3832, 20.021499999999996`}, {6.930469999999999, 
                20.021499999999996`}, {6.930469999999999, 
                18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                16.3832, 16.357399999999995`}, {20.5426, 
                19.116799999999998`}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {
                9.46445, 11.079700000000003`}, {9.46445, 
                12.933999999999997`}, {18.917199999999998`, 
                12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                
                "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Function name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"TRACK_fodo_lat_sub\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.038461538461538464`], {
               FaceForm[{
                 GrayLevel[0.93], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                25.499999999999996`, 2.5}, {25.499999999999996`, 
                1.3953100000000003`}, {24.604699999999998`, 
                0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                0.49999999999999994`}, {1.3953100000000003`, 
                0.49999999999999994`}, {0.49999999999999994`, 
                1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                24.604699999999998`}, {1.3953100000000003`, 
                25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                25.499999999999996`}, {24.604699999999998`, 
                25.499999999999996`}, {25.499999999999996`, 
                24.604699999999998`}, {25.499999999999996`, 23.5}, {
                25.499999999999996`, 2.5}}}]}, {
               FaceForm[{
                 RGBColor[0.5, 0.5, 0.5], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                16.3832, 20.021499999999996`}, {6.930469999999999, 
                20.021499999999996`}, {6.930469999999999, 
                18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                16.3832, 16.357399999999995`}, {20.5426, 
                19.116799999999998`}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {
                9.46445, 11.079700000000003`}, {9.46445, 
                12.933999999999997`}, {18.917199999999998`, 
                12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                
                "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Function name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"TRACK_fodo_lat_sub\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"Real", ",", "1"}], "}"}], "}"}], 
                   ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                   Baseline, ContentPadding -> False, FrameMargins -> 0, 
                   StripOnInput -> True], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Return type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   RowBox[{"{", 
                    RowBox[{"Real", ",", "1"}], "}"}], 
                   ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                   Baseline, ContentPadding -> False, FrameMargins -> 0, 
                   StripOnInput -> True], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Library: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"fodo_lat.so\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  LibraryFunction[
  "/media/imorozov/Data/SOFT/PROPAGANDA/PROJECT/fodo_lat.so", 
   "TRACK_fodo_lat_sub", {{Real, 1}}, {Real, 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[54]=",ExpressionUUID->"f57b24b7-7d49-48d2-8312-9a725bc9d3cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compile", " ", "wrapper"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ClearAll", "[", "MAP", "]"}], " ", ";"}], "\n", 
   RowBox[{"MAP", " ", "=", " ", 
    RowBox[{"With", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"FUNCTION", " ", "=", " ", "LIBRARY"}], "}"}], ",", "\n", "\t", 
      RowBox[{"Compile", "[", "\n", "\t\t", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"STATE", ",", "_Real", ",", "1"}], "}"}], "}"}], ",", "\n", 
        "\t\t", 
        RowBox[{"FUNCTION", "[", "STATE", "]"}], ",", "\n", "\t\t", 
        RowBox[{"RuntimeAttributes", " ", "\[Rule]", " ", 
         RowBox[{"{", "Listable", "}"}]}], ",", "\n", "\t\t", 
        RowBox[{"Parallelization", " ", "\[Rule]", " ", "True"}]}], "\t\t", 
       "\n", "\t", "]"}]}], "\n", "]"}]}]}]}]], "Code",
 CellLabel->"In[55]:=",ExpressionUUID->"46b93c4d-6373-4def-80e9-52e83a9db4b0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["CompiledFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.038461538461538464`], {
               FaceForm[{
                 GrayLevel[0.93], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                25.499999999999996`, 2.5}, {25.499999999999996`, 
                1.3953100000000003`}, {24.604699999999998`, 
                0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                0.49999999999999994`}, {1.3953100000000003`, 
                0.49999999999999994`}, {0.49999999999999994`, 
                1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                24.604699999999998`}, {1.3953100000000003`, 
                25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                25.499999999999996`}, {24.604699999999998`, 
                25.499999999999996`}, {25.499999999999996`, 
                24.604699999999998`}, {25.499999999999996`, 23.5}, {
                25.499999999999996`, 2.5}}}]}, {
               FaceForm[{
                 RGBColor[0.5, 0.5, 0.5], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                16.3832, 20.021499999999996`}, {6.930469999999999, 
                20.021499999999996`}, {6.930469999999999, 
                18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                16.3832, 16.357399999999995`}, {20.5426, 
                19.116799999999998`}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {
                9.46445, 11.079700000000003`}, {9.46445, 
                12.933999999999997`}, {18.917199999999998`, 
                12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                
                "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  StyleBox[
                   PaneBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"_Real", ",", "1"}], "}"}], "}"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                   False], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.038461538461538464`], {
               FaceForm[{
                 GrayLevel[0.93], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                25.499999999999996`, 2.5}, {25.499999999999996`, 
                1.3953100000000003`}, {24.604699999999998`, 
                0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                0.49999999999999994`}, {1.3953100000000003`, 
                0.49999999999999994`}, {0.49999999999999994`, 
                1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                24.604699999999998`}, {1.3953100000000003`, 
                25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                25.499999999999996`}, {24.604699999999998`, 
                25.499999999999996`}, {25.499999999999996`, 
                24.604699999999998`}, {25.499999999999996`, 23.5}, {
                25.499999999999996`, 2.5}}}]}, {
               FaceForm[{
                 RGBColor[0.5, 0.5, 0.5], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                16.3832, 20.021499999999996`}, {6.930469999999999, 
                20.021499999999996`}, {6.930469999999999, 
                18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                16.3832, 16.357399999999995`}, {20.5426, 
                19.116799999999998`}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {
                9.46445, 11.079700000000003`}, {9.46445, 
                12.933999999999997`}, {18.917199999999998`, 
                12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                
                "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"_Real", ",", "1"}], "}"}], "}"}], 
                   ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                   Baseline, ContentPadding -> False, FrameMargins -> 0, 
                   StripOnInput -> True], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Variables: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "STATE", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Expression: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["LibraryFunction", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    GraphicsBox[{
                    Thickness[0.038461538461538464`], {
                    FaceForm[{
                    GrayLevel[0.93], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                    25.499999999999996`, 2.5}, {25.499999999999996`, 
                    1.3953100000000003`}, {24.604699999999998`, 
                    0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5,
                     0.49999999999999994`}, {1.3953100000000003`, 
                    0.49999999999999994`}, {0.49999999999999994`, 
                    1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                    0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                    24.604699999999998`}, {1.3953100000000003`, 
                    25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                    25.499999999999996`}, {24.604699999999998`, 
                    25.499999999999996`}, {25.499999999999996`, 
                    24.604699999999998`}, {25.499999999999996`, 23.5}, {
                    25.499999999999996`, 2.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.5, 0.5, 0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                    19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                    16.3832, 20.021499999999996`}, {6.930469999999999, 
                    20.021499999999996`}, {6.930469999999999, 
                    18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                    16.3832, 16.357399999999995`}, {20.5426, 
                    19.116799999999998`}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 
                    13.8391}, {9.46445, 11.079700000000003`}, {9.46445, 
                    12.933999999999997`}, {18.917199999999998`, 
                    12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                    9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
                    13.8391}}}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                    
                    "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
                    AspectRatio -> 1, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                    FrameTicks -> None, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Function name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"TRACK_fodo_lat_sub\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    GraphicsBox[{
                    Thickness[0.038461538461538464`], {
                    FaceForm[{
                    GrayLevel[0.93], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                    25.499999999999996`, 2.5}, {25.499999999999996`, 
                    1.3953100000000003`}, {24.604699999999998`, 
                    0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5,
                     0.49999999999999994`}, {1.3953100000000003`, 
                    0.49999999999999994`}, {0.49999999999999994`, 
                    1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                    0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                    24.604699999999998`}, {1.3953100000000003`, 
                    25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                    25.499999999999996`}, {24.604699999999998`, 
                    25.499999999999996`}, {25.499999999999996`, 
                    24.604699999999998`}, {25.499999999999996`, 23.5}, {
                    25.499999999999996`, 2.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.5, 0.5, 0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                    19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                    16.3832, 20.021499999999996`}, {6.930469999999999, 
                    20.021499999999996`}, {6.930469999999999, 
                    18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                    16.3832, 16.357399999999995`}, {20.5426, 
                    19.116799999999998`}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 
                    13.8391}, {9.46445, 11.079700000000003`}, {9.46445, 
                    12.933999999999997`}, {18.917199999999998`, 
                    12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                    9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
                    13.8391}}}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                    
                    "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
                    AspectRatio -> 1, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                    FrameTicks -> None, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Function name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"TRACK_fodo_lat_sub\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"Real", ",", "1"}], "}"}], "}"}], 
                    ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Return type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    RowBox[{"{", 
                    RowBox[{"Real", ",", "1"}], "}"}], 
                    ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Library: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"fodo_lat.so\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    LibraryFunction[
                    "/media/imorozov/Data/SOFT/PROPAGANDA/PROJECT/fodo_lat.\
so", "TRACK_fodo_lat_sub", {{Real, 1}}, {Real, 1}], Selectable -> False, 
                    Editable -> False, SelectWithContents -> True], "[", 
                    "STATE", "]"}], ImageSize -> {{1, 500}, Automatic}, 
                   BaselinePosition -> Baseline, ContentPadding -> False, 
                   FrameMargins -> 0, StripOnInput -> True], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  CompiledFunction[{11, 12.1, 5852}, {{
     Blank[Real], 1}}, {{3, 1, 0}, {3, 1, 1}}, {}, {0, 0, 0, 0, 2}, {{42, 
     LibraryFunction[
     "/media/imorozov/Data/SOFT/PROPAGANDA/PROJECT/fodo_lat.so", 
      "TRACK_fodo_lat_sub", {{Real, 1}}, {Real, 1}], 3, 1, 0, 3, 1, 1}, {1}}, 
   
   Function[{$CellContext`STATE}, 
    LibraryFunction[
    "/media/imorozov/Data/SOFT/PROPAGANDA/PROJECT/fodo_lat.so", 
     "TRACK_fodo_lat_sub", {{Real, 1}}, {Real, 1}][$CellContext`STATE], 
    Listable], Evaluate],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[56]=",ExpressionUUID->"3b65c071-3f02-4c90-9037-178c3fd78a7f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "initial", " ", "condition"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{"List", "[", 
       RowBox[{"0.01", ",", "0.0", ",", "0.01", ",", "0.0"}], "]"}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Extra", " ", "places", " ", "must", " ", "be", " ", "added", " ", "for", 
     " ", "aditional", " ", "state", " ", "elements"}], " ", "*)"}], "\n", 
   RowBox[{"INITIAL", " ", "=", " ", 
    RowBox[{"Flatten", "[", 
     RowBox[{"List", "[", 
      RowBox[{"INITIAL", ",", 
       RowBox[{"ConstantArray", "[", 
        RowBox[{"0.0", ",", "EXTEND"}], "]"}]}], "]"}], "]"}]}]}]}]], "Code",
 CellLabel->"In[57]:=",ExpressionUUID->"7de678b2-48eb-4e96-b65b-521580b2a5e8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "0.01`", ",", "0.`", ",", "0.01`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`"}], "}"}]], "Output",
 CellLabel->"Out[58]=",ExpressionUUID->"6fd509d2-6ff1-46ac-bb1e-48ab59e6fcfa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Test", " ", "map"}], " ", "*)"}], "\n", 
  RowBox[{"MAP", "[", "INITIAL", "]"}]}]], "Code",
 CellLabel->"In[59]:=",ExpressionUUID->"9e790923-b712-4c6e-af8b-10d884209c4b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"-", "0.0003179754639551224`"}], ",", 
   RowBox[{"-", "0.0006497563851396406`"}], ",", "0.007300317642509394`", ",", 
   RowBox[{"-", "0.0007239221289398682`"}], ",", "0.01`", ",", "0.`", ",", 
   "0.00725354275812975`", ",", 
   RowBox[{"-", "0.001144216822946738`"}], ",", "0.0035405319872953943`", ",", 
   RowBox[{"-", "0.0009216998670566102`"}], ",", "0.001665047745386047`", ",", 
   RowBox[{"-", "0.0006408375735626808`"}], ",", 
   RowBox[{"-", "0.0003179754639551224`"}], ",", 
   RowBox[{"-", "0.0006497563851396406`"}]}], "}"}]], "Output",
 CellLabel->"Out[59]=",ExpressionUUID->"2fb607a8-1cf9-4fba-aa80-ffe940a49610"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Generate", " ", "phase", " ", "space", " ", "trajectories", " ", "using", 
    " ", "extra", " ", "dimensions"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ORBIT", " ", "=", " ", 
     RowBox[{"Rest", "[", 
      RowBox[{"NestList", "[", 
       RowBox[{"MAP", ",", "INITIAL", ",", 
        RowBox[{"2", "^", "10"}]}], "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"ORBIT", " ", "=", " ", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Part", "[", 
        RowBox[{"ORBIT", ",", "All", ",", 
         RowBox[{"List", "[", 
          RowBox[{"LOOP", ",", 
           RowBox[{"LOOP", "+", "1"}]}], "]"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"LOOP", ",", "6", ",", "14", ",", "2"}], "}"}]}], "]"}]}], 
    "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Table", "[", "\n", "\t", 
       RowBox[{
        RowBox[{"ListPlot", "[", 
         RowBox[{
          RowBox[{"Part", "[", 
           RowBox[{"ORBIT", ",", "LOOP"}], "]"}], ",", 
          RowBox[{"Rule", "[", 
           RowBox[{"PlotTheme", ",", "\"\<Detailed\>\""}], "]"}], ",", 
          RowBox[{"Rule", "[", 
           RowBox[{"AspectRatio", ",", "1"}], "]"}], ",", 
          RowBox[{"Rule", "[", 
           RowBox[{"PlotStyle", ",", 
            RowBox[{"Directive", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"PointSize", "[", "Small", "]"}], ",", "Black"}], 
              "}"}], "]"}]}], "]"}], ",", 
          RowBox[{"Rule", "[", 
           RowBox[{"ImagePadding", ",", "40"}], "]"}], ",", 
          RowBox[{"Rule", "[", 
           RowBox[{"ImageSize", ",", "200"}], "]"}]}], "]"}], ",", "\n", "\t", 
        RowBox[{"{", 
         RowBox[{"LOOP", ",", "1", ",", "5"}], "}"}]}], "\n", "]"}], " ", "//",
       " ", "List"}], " ", "//", " ", "Grid"}], " ", "//", " ", 
    "Rasterize"}]}]}]], "Code",
 CellLabel->"In[60]:=",ExpressionUUID->"5df476e6-f896-4e9e-9be1-4c6c81234016"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztvW1THEe696ndjY3YVxv7FfZb7Nt9uW/vjf0A9x17jI9Rt2jTgES73SNx
g3gSSA4xYBNqjIeRAYVGPozhxBw92COEg2AGCUIChEayfJAAIWTJICRAuOm9
VhWTUa6u54fMrKz/7wVRXZVZmXVl/ivzSjKz/vf/duy/fPA/HjlypPZ/oT//
5b82/J8ff/xfT/zf/xv9+H/Stf9alf6X//f/Smf/pepfPv4//tv/RCf/1//h
yJGq//nIkf//uAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAC+7O3t9ff3p9PpbDZ77do1lwFsYpVKpXPn
zk1PT7Mzn3322Qc63r17F+kTAQAAAAAAAAAAIBQGBwd7enp2d3dXVlay2eyD
Bw/cBLCKtbm52d3d/cEHH7BBg8PDw0wms7Cw8PKf8Hw6AAAAAAAAAAAA+KNU
Kh09epQcf+3n2NjYhQsXHANYxdrb28tkMuPj483NzWzQYG1trbq6ur+/P5fL
9fT0bG5ucno2AAAAAAAAAAAABIBceP16gZmZmVOnTjkGsIpVKpW2t7fp4PTp
02zQYGpqKp1Oz8/PP3v2bGho6MSJE1ieAAAAAAAAAEgIHwDVEV3FomV1dbWq
qor9nJuby+VyjgEcY+kHDQg2SlAqlerq6mZnZ/WBRZcwiJwwqiqwRHTxgsgR
XcXUR3QJg8gRXcXUR3QJg8gRXcViT6UNraxqet79Sc53QHL20ZVBmzNwcHCg
/bSaaWAI4BjLMGigp62t7caNG/ozju8i31fHxsZsrkaUaByv0iWyVUSJKi8i
4cjwUjU9aSVAaZsGKyGIfQooiAPRNUNyXkXjCEJHTocIyYV1B4goOMKtiuQi
TU55jWi7Ezx58kT7SR2J/v5+xwCOsfSDBnR1eHiY3S2bzd69e1cfOFIjS1iC
ScuShM+rGMEtHF0ZRXTneN024J2hIA4k8B0oYa7kFCBwifAuNJKLNDmIKDiw
odokoXwHBgbOnz+/u7u7urrKPPqtrS22iMA0gOlJhn7QYHFxMZVK/fjjjwcH
B5cvX/70009LpZI+cBKMnGRQvlEDC6sNypcDMLLaoHw5ACOrDco3OMIn39pM
KkZyARFeuHx4+/ZtsVjMZDJ1dXXXrl3TTs7Pz7NnNw1gepJhWJ4wOTnZ2Nh4
9OjRrq6u58+fGwJHZ+Sx90R0c9/ImaXocpUEEYnlg3/i+w4RlX509So5GU5I
MyScSI2ctHe+b9AMxRrhLyu1PRQ4RAoAG6oNypcDeBcpDAqXA7Cw2qB8OYA3
lcKgcPkAI6sNyjc4sKHaoHw5ACOrDco3amBhtUH5cgBGVhuULwdgZLVB+QZH
uA05zFc58k+05PQ/o0b49Dnh5ZsEAhr5SAXsUtJmYPoGyxNiTXALyz/b36Bu
/c8QmyQJlyeUoSAuYHmCDBiyFKLGISIOCDcynyrNaqOWHDefSLhghZevAihj
Q9M+mCOGwGWO8uGDMuUrM56M7L5yqlQPYw1EFDVKWtir0hWWv5LlKxswslii
1jjKlwPKGNlQu9xXRaufIh8mPJQpX4HE14a+X9HuKcdfMvEt3xjh0siokDEF
Ioqa4BshykBwgTvKP44oULKxAEbmD091o3w5EF8jG+pSiDXT9LaiH9cn8S1f
eRDeoLufrxKFCtyjz0MUTxcFwgs3IdgbOeo6yR/hc8wqwfKEWBPT5QnRSdu3
/LE8IbFE2twn7Z3vCE9Rl9GX44VwO/tziMoiGqOy9zEEOEShMD4+Xltbm06n
BwcHDw4ODFf39vb6+/vpajab1X8YzjTW3NxcPp+vrq7u6up68eKFdvLVq1fn
z59PpVL19fVXr1413F9yG4Zbw0O8p0CbeELy8lUDq3dRKDVNsQoZO5RpaGQm
LhbmqWiviLaNHXEp31gDI3NAoJYTUr6mXowe977P+vp6e3s7nSwUCktLS9pJ
ivL1119nMpmampovv/zS4HNJbmR9DQmxmoV4K8mRvHzdMD09ncvlNjc3t7e3
29ravv32W0MA0kVPT8/u7u7Kyko2m33w4IFVLPqZSqUWFxf39/eHh4dJO3Ty
8PCwubl5ZGSEpLG6ukpKWV5e1t9fZhsKrLfK6EXm8lUGKyN7rcBhwfnxlQci
ihqZLayXFQc9BlG9tG8AmctXGWDkiPAtySN+Xxqm2UhC+Zp6MXrc+z6lUimf
z09MTJDvMzMzU1NTQ24UnR8dHW1vb6for1+/pjsY/vctuZGD1yIO6YabdLhI
Xr5uOHv2LPvv//379+vr6/VXqdofPXp0ZWVF+0nV+8KFC1axSB09PT3ayXfv
3lVXV29sbDx69Ki2tvbXX3/Vzj958mRra0ufhHAbmm42G1219Dc9xndmhE/q
E16+SaDSyGFVYP0MzKil4R7htboSLE+INTIvT3CvO0/qi3Rdnt/HDSfDlUBB
HMDXEyLCk+5C1LUhfBJEZOrF6AN48n1qamoODw+18x0dHZOTk+QKpVIp8oO0
ky9evHj27Jn+/sKNDIcoUoSXb3COHz9+79497ZjceXqiN2/esKubm5t0hlSg
/ZyZmTl16pRVrGKxePnyZRY3n8/fvn37u+++++yzz8bHx+lnS0vL3/72N0MG
ZLNhFLrgkzdJMmlAtvJVEk+DBsGTc1kPJayNMQUiihrZLOxJYpxV5jI/Ur0B
ZCtfJYGRQ4Sb9t3fOQnla+rF6AO4932mpqZOnz7NTg4NDQ0PD6+traVSKbra
3NxcKBTIhy2VSvr7y2bkSOtepHmTJJMGZCtfH2QyGW3FAbG7u0tP9PLlS3Z1
dXW1qqqK/Zybm8vlclax+vr69Ksbmpqapqenx8fHq6urR0dHNzY2/v73vx89
epRF1GDbVrMhIP4HLmudwBwaDhxzKzyHZVU2JI8FBiPzfH/G640dUyCiqJHq
ZeWoKXmUFYt8ylOyagMjhwJ/QblMKwnla+rF6AO4931u3LihX91ATtDg4OA/
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
nj59ys5ggU+scdNb458rzjiKqFgsXrlyhf3M5/N37txxryxDcu5FJAPoUlrh
3iYyl68ywCGKL8lxiEw3XmN42q7NdG/e5eXl5ubmVCrV2Nj43XffGe4vfJoB
66XzQaXkkqMRGxz7V55cm4aGhoWFBe0km2lgSLGtre3GjRv6M45G9q2msfd4
isKBELMU1qsmUkMpL6KHDx9mMhm2sLqzs/PmzZuOAbQ1Pk+ePNFOkv2pqTI9
SQfd3d2kMu3k6urqhx9+qN8mLvigQUSlH129UizDGDRwFNHExERvb692rO1p
8OzZM/fKKvsVUSgErFRR9CfVaBzdmyUJIipbeDF63Ps+pt8loavnz5+vqakh
l+rixYtuZo3CIYpFcglxiEw3XtPjfrs20715X79+TeKi8NQMPX78mJTCZl9r
CNcICIJjSSmgEXus+lf2AWx6ZdevX9dOLi8v19XVaVfZ6lSKSDK8e/euPgk3
RoagTDlSgegcmaC8iMhnaWxspM4Y9cFmZ2epydA2Zn/69CmpwCbAwMAAdcCo
eSIXhunC9OQ333xz8uTJV69e7ezsUNv01Vdf6TOAGaFxJ+HNUNlaI+StrK2t
0cHGxgb10BYWFijA6OhoS0uLTawQRSQcqNgGDBroMfVi9Lj3fay+S9La2nrx
4kUKSToiDf7pT3/S3x8OUaxx7E8qICLTjdcYnrZrM92bl+L+4Q9/YDfs7e01
jEtAI7EGgwZli/7V1tYWW0Tg3rWZmpqiJun58+fUK+vo6ND2raLGiJqkH3/8
kVofOvPpp5+SMPUZwKBBEOQfN0iCiNbX1zs7O8lnKRQKVOG1k5cuXaKTNgHe
vn1bLBYzmUxdXR2bCGd6krQzMjJCQjt27Njg4CD12fSpoxlSgIQ3Q2ULjTQ3
N7P/r83Pz9Mlak3OnDmj/3+oS2X5EJFY5H+3C8SrZSQs39Ax9WL0Adz7Pqbf
JSEFkRP0+vVr7aRhR5EyWqKY4/jCUUBEphuvsauetmsz3ZtXnxY1Q7W1tVYz
DVi7VmnzSBcOa8fcVivrp7RxOGBdblGrwhXQiCOm/SvqnrFnd+/aUBMzPj7e
0NBAzY1+8hs1N42NjUePHqUm5vnz54YMuDSyj3ZHjRmYbgjYLmN5Qqyp3DvC
a31QbLZ/kNuKyrBVkSVhVxAZiNTOPiqVYwc+eJZi3Th6Mk5CROToxbj3fRy/
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
t7fX399PV7PZ7LVr1+xjzc3N5fP56urqrq6uFy9eaCeXl5ebm5tTqVRjY+N3
331nuL/wQQMQHOU1IjnCjQzlusG3lYSXr/IEHzQAMoBmSCCRDhokE6leRAkR
kakXo8e977O+vt7e3k4nC4XC0tKSdpKunj9/vqamhlyqixcvvnv3Tn9z4YMG
IDhqO0TT09O5XG5zc3N7e7utre3bb781BCBd9PT07O7urqysUCV/8OCBVSz6
mUqlFhcX9/f3h4eHSTt08vXr1yQuCl8qlR4/fkxKuXfvnv7+6K0pgNoakR8Z
jAzlOoJBA2lBM6QGaIYE4nttQnRZijWymSgJIjL1YvS4933I5cnn8xMTEwcH
BzMzM+T7kBtF51tbWy9evEghX7161dLS8qc//Ul//0ojy1YNgCNqO0Rnz569
evWqdnz//v36+nr9Var2R48eXVlZ0X6OjY1duHDBKhapo6enRzv57t276urq
jY0NivuHP/yB3bC3t9cwLmHfW+MgEyWnx3BOzqa8FNCI/Aj5ekIl3JQb66mq
GDSQEFMLeyopJWf7+7utqAyr3VWTH/dG9tFSxPqd7wPfjSmWJwTB1IvRB3Dv
+zx69Kimpubw8FA739HRMTk5eXBwQE7Q69evtZM3btwwjEvYDxrAIYpFcmo7
RMePH2f/+t/a2qInevPmDbu6ublJZ9j8mZmZmVOnTlnFKhaLly9fZnHz+fzt
27f1ab19+7a2ttbTTAMOGgEBsS8vBTQiP1IZGeK1B4MGEmI/aICaHAswaCAW
l7uvoIPniIQmSsjWOo5ejHvfZ2pq6vTp0+zk0NDQ8PCwIblz5855mmkgSWUA
NijvEGUyGW3FAbG7u0tP9PLlS3Z1dXW1qqqK/Zybm8vlclax+vr69LMImpqa
pqen2U8K1tHRoU1U0MO2rdaGgEwHDdjoEA5kO7Apr8oNyUFEyGZntHE2eO0D
yFa4SmL6skI1jhE2soKC+ODSyJCVPdI6iUkQkb0XU/bi+xhmEYyOjg4ODrKf
h4eHIyMjhULh7du3+vvrWyLTPrYWTIbOPw5MD6zKK3YO0fLycuq35PN5Ot/Q
0LCwsKCFsZppwPb6YDMNTGMVi8UrV66wuHT/O3fusPv87ne/u3jxYqlUMmTM
8V88Ub82lZwewy0500EDPTHSiG+sNgu1D+Bpi9HPPvvsAx02m+eEi78ZmI61
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
OcpXeWDksOCpLPepoHyjRjYLu2ySxL7qHTMmQyY1ZCtfJXE/aBBurZBcJsqg
kohKpVKqAvJ3TL0YfUT3vs+tW7daW1vZyaGhoZGRkcePH1MUtiRhenr65MmT
+vvLYGQ3gpJHUzHKalmO8nXJu3fvXvwWbUZBd3f39evXtTDLy8vk4OtjaXsa
sAU4Y2Nj/f39VrEmJiZ6e3tZctXV1SSN+fn5TCbDBg1IOBcvXtQnIaENZZOM
VJnxioTlqx4wcoi4lH8Q3Xm9Lco3amS2cNS1MaL88MmMS2QuX2UwNXIUVUU2
RSQExUT0ogLyd0y9GH0s977Pw4cP9b5PZ2fnzZs337x5U1VVxVyqmZmZQqGg
v7+ERpZNbvLkxAcSlq9Xpqamcrnc8+fPd3Z2Ojo6tIU5pJ3Z2dnt7W06HhgY
OH/+/O7u7urqajabvXv3rlWsjY2NVCq1sLBwcHAwOjra0tJSfq+ghoaGb775
hg4eP3587NixyuUJAh5bR+VsLn3FC10vocyyc5+68Olzwss3CeDrCRERlhID
RoeIokbI1xNc3tZx7qX7iuQ+wz5S9JS6D4JYGArigO9BAzd1RpJKqCdpjWMS
RGTqxRBLS0tra2tlL77P4eFhY2Pj+Pg4nSR/Kp1Oay5VX1/fuXPnXr9+/csv
vzQ1NRm+WCfcyHCIIkV4+QaHKjbVavLra2pq2FdH9/b26NG0byO+ffu2WCxm
Mpm6urpr167ZxCLm5+cLhQLJ58yZM+xbpZubm6QRCnn8+PGbN28aMiC5DX3U
VU/a8SEHl3eWBMnLVw1g5KgJotPgokb5Rk2MLMytKnpFtGHsiFH5xhebFbuo
hHEnXsuxg2DqxTQ3N2v+piffZ319vbOzM51O06XFxUXtJLlXQ0ND2WyWvKrh
4WH2aTkNyY0ctUKV177k5RsL4vUuCi6ZgKLQH8tPvAo3vsDOHOCgblNQuByI
kYVNmwNRiDaGW2JUvvHF0cioh7EGIuJAvJr76BTtFdGWcEW8CldahNvQ03wV
fRXlI4SAusBsnCSA5QmcCV3m9kBEUSPV1xMMt410HYGPumpfb6N7Y+DrCZIj
atCAz9NVkrTGESLigHAj+3aIyiIao0ifLgqEl68CxNqG+tprqMxBVBBEFLIR
6/KNCzCyQPwp3ZO6Ub5Ro4yFAzZAprXUR42VDWXKV2bcGzl4nQT8gYg4EGsj
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
ojeh+2z4q2am2XPzWnCJJMYBwgn3rUv8+uuvzc3Nly5dogBh1TG6SnWM5eFf
//VfDf9j9S0iqrSU21AySd0k1nRS40uZ1PpU+rae4al1JmZnZzs7O6mfgEGD
eMGhn+YSq/4nw7RWe62ongixcSy76PIBnvhrWcp+O9h83IcQO06OenR8Ik/J
OarDd3JwiHwzNTWln/IxNDQ0PDysD1AsFvVdHSq727dv08Evv/xSfv9/CjZo
QB1v/SxfKg5qI0JJzirWiRMnqNv/7Nmzu3fvZrPZ7777zk02TO9mFev48eP0
jNrJra0tCvPmzRv93cJNbmBg4OTJkz/99BNV8tbW1s8//9yrAa0C7OzsHBwc
GD7Y5Ph0gDP2JeKpllJNSKfT8/PzJBCqBiQW9zPw/VUz0+y5eS24RBLjAOGE
+9Ylrly5QgGonnz44Ych1jGWB+r70Z0pG/4yaTj58ccfNzY2hpJJfX4+++wz
yiQ7ydp6hqfWmXoIlMkXL17QVQwaxAsO/TSXWPU/Gaa12lP2vBJi41h20eUD
PPHXspT9drD5uA8hdpwc9ej4RJ6Sc1SH7+TgEPnmxo0b+hkmo6Ojg4OD+gB9
fX36SRpNTU36DoB+0GB1dbWqqopdmpub069cCJKcVSwqdDYERy3R7373OzfZ
ML2bVaxMJsNms+zu7uormMun9pQcPQ5bR0NhKDmq2453cx/AoBHHpwOcsS8R
r7WUvSpLpVJdXd3s7KzLbPirZqbZc/NacIkkxgHCCfet+49//IPaDqoP2qBB
WHWM5WFtbY0qWHd3d1giSqfT7J8gwYWgoc29Yf9FKle09WWPrfO5c+eox0sH
GDSIHRz6aS6x73+WLWq1p+x5JcTGseyiywd44q9lYT+9drD5uA8hdpwc9ej4
RJ6Sc1SH7+Q04BDZQ52W1G/54Ycfbt261draysIMDQ2NjIzoYxWLxStXrrCf
+Xz+zp077GflTANWxCdPnqTCCiU5x1jE4uIilXhlNiqHnkzvZhWroaFhYWFB
O2kzVBhWcnp+/fVXCvP06VPHu7kPYNCI49OBiKAXr0GMWtNjXyK+aynR1tZG
DZDL7PmrZqbZc1PVXSKJcQBPTJut4G/d5eXljz76iFqoo0eP0l/yl6mt0QYN
wqpjWh7ofG1tLbnPIYqIWjrHmQaehKBlklRg09aXvbTOpKbf//732hkMGshM
iN1CT/00l9j3P8sWtdp39twQYuNouLNplw9EhGkfzF/Lwn7adLA7OzvpEjU3
4TZkprHKv61LIXacHPXomDff/TRTdfhOTgMOkT1khBe/ZW9v7+HDh/QOZ+PA
VLFv3rypjzUxMdHb26sda2tYnj17xq7qBw20xSNPnjzRfl66dOn8+fOhJGca
a2dn5/jx46y4v/vuu5aWlspsjI2N9ff365MwvZtVLGpSr1+/rp2kfmZdXZ3B
qqEnR7VaO7m6uko9WMMeO44GtA9g0Ijj04GIoHeRQYyvX78uO5WIp1pKV9m0
SYqYzWbv3r3rMnv+qplp9hwF4h5JjAN4YtpsBX/r0puQKgC1UJOTk1VVVen3
UEfug/dfOvj555/LgesY5YFuWF9fTwflUEVEbe5//+//3ZCcv0wSZAEtk/Zt
fdlL69zU1ER5OPYeasXo+I9//GNl4QLhhNgt9NRPc4ljnTSt1e6z5z4njBAb
x7KLLh+ICNM+mL+WhV216WDfvn27trY29Ias7KIuhdhxctSj4xN5Ss5RHb6T
Y48Ah8grVBsbGxvHx8cPDg5mZ2ep46RtUPn06VMyGh1sbGxQz2dhYYECjI6O
Gl74+kGD8vs1NdQNo2Kl8jXth/tLzipWW1vbhQsXqNwpuYaGBvbvDNNsUOOo
zUC2uptprKmpKXrA58+fU9vX0dFh+rUg04jsiTwl980335w8efLVq1eUXFdX
11dffeXVgFYBNAwacfN0gCemJULvPSpKr7V0cXGRpPTjjz9STaAzn376Kd3H
ZTZ8VzPT7Dm+FuJlHCADYb119/f3WS/uhx9++Pjjj8nHoY5Q8DpGl6qqqugd
vrm5+de//pXqm/biDS4i8sSpPxOKEKgFp4xRfihvDx48oP7V/Py8oa1fWlpa
W1sre2mdqQljVm1qarp27Zo2KApiAZ9+mhus+p+sTprWak/ZC9044Xb5AGf8
uQ8aPjrYIXorVnXJNBssCau7uVeWpyfylJwbdfhLznd5gfL7z4B2dnZSbSwU
CtSX1k5eunSJTmrH1IugS1RVzpw5Y/holGHQ4O3bt8ViMZPJUJfGaptcf8mZ
xqKy7unpqampoeT+8pe/2GeDbkvVw+ZuprFIsyRYaukoFasPd5pG1D+R++To
/iMjI1SxqVtIyVGH1ocBTQNoGDTi5ukAT0xLZG9vj0pN65B4qqWTk5PU4pAj
QO9behN6yom/amaaPTevhXgZBwgnxLcuQ2vOwqpj1H598Fu0mZyhiCi6TFIA
Q+Pb3Nw8NjamHbtvnRlYnhBHOPTTXGKaEKuTVq93HxXVPSE2jm66fIAn/twH
DR8d7BC9Fau6ZJoNfRKeOk42/qDLJ3KfnBt1+EvOd3kBAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAOTn/wMLB6E0
    "], {{0, 202.5}, {1037.25, 0}}, {0, 
    255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{1037.25, 202.5},
  PlotRange->{{0, 1037.25}, {0, 202.5}}]], "Output",
 CellLabel->"Out[62]=",ExpressionUUID->"853d325d-120b-49e8-b0ef-7577f9bd7327"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Clean", " ", "*)"}], "\n", 
  RowBox[{
  "Run", "[", "\"\<rm -f *.f90 *.mod *.o *.so *.cc\>\"", "]"}]}]], "Code",
 CellLabel->"In[63]:=",ExpressionUUID->"42df45a3-9de2-41f7-bbcd-a63c5aa671f8"],

Cell[BoxData["0"], "Output",
 CellLabel->"Out[63]=",ExpressionUUID->"3ffb5402-e47f-425c-b255-4eda55a40ee5"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-16:  (FORTRAN) Adaptive integration mode", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"937683f3-963d-4303-b6ef-cf1f99316889"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "Integrate", " ", "sextupole", " ", "using", " ", "adaptive", " ", 
   "integration", " ", "mode"}], " ", "*)"}]], "Code",ExpressionUUID->\
"12b27ee8-573f-4e94-85fc-13290f57cf25"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[1]:=",ExpressionUUID->"b5b92941-87e0-4469-9157-d8e9fdf86b6f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", 
   RowBox[{"\"\<PROJECT\>\"", ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "0", ",", "0", ",", "0", ",", 
    RowBox[{"List", "[", "]"}]}], "]"}]}]], "Code",
 CellLabel->"In[2]:=",ExpressionUUID->"8788e035-402a-4168-a137-79e611d4c0d5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "2", ",", "0", ",", "0", ",", "0", ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"759d3acb-697b-44ab-a438-698a40553408"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "tables"}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "2"}], "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"P1", "^", "2"}], "+", 
           RowBox[{"P2", "^", "2"}]}], ")"}]}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "/", "6"}], "*", "KS", "*", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Q1", "^", "3"}], "-", 
           RowBox[{"3", "*", "Q1", "*", 
            RowBox[{"Q2", "^", "2"}]}]}], ")"}]}], "}"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", "0"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<ELEMENT\>\"", "]"}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "\"\<SEXT\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KS", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", "\n", 
   
   RowBox[{"(*", " ", 
    RowBox[{"Generate", " ", "code"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$CODE", "[", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<LEVEL\>\"", ",", 
       RowBox[{"Plus", "[", "1", "]"}]}], "]"}], "]"}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->"In[3]:=",ExpressionUUID->"8aa8c52d-b731-4505-aa93-90be5356fdf9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Covert", " ", "to", " ", "FORTRAN", " ", "and", " ", "compile"}], 
   " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Add", " ", "extra", " ", "dimensions"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"EXTEND", " ", "=", " ", 
     RowBox[{"2", "*", "1"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"SetOptions", "[", 
     RowBox[{"I$FORTRAN$MAP", ",", 
      RowBox[{"Rule", "[", 
       RowBox[{"\"\<EXTEND\>\"", ",", "EXTEND"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$MAP", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}], "]"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"Echo", "[", 
        RowBox[{
         RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
         RowBox[{
          RowBox[{"Run", "[", 
           RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
          RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"SetOptions", "[", 
     RowBox[{"I$FORTRAN$SEQUENCE", ",", 
      RowBox[{"Rule", "[", 
       RowBox[{"\"\<EXTEND\>\"", ",", "EXTEND"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$SEQUENCE", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<SEQUENCE\>\"", "]"}], "]"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"Echo", "[", 
        RowBox[{
         RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
         RowBox[{
          RowBox[{"Run", "[", 
           RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
          RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Note", ",", " ", 
     RowBox[{
     "this", " ", "sets", " ", "options", " ", "for", " ", "all", " ", 
      "elements"}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"SetOptions", "[", "\n", "\t", 
     RowBox[{"I$FORTRAN$ELEMENT", ",", "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"\"\<EXTEND\>\"", ",", "EXTEND"}], "]"}], ",", "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"\"\<MODE\>\"", ",", "\"\<ADAPTIVE\>\""}], "]"}], ",", 
      "                                         ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", "set"}], " ", "ADAPTIVE", " ", "integration", " ", 
        "mode"}], " ", "*)"}], "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"\"\<EXPRESSION\>\"", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"1", "/", "2"}], "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"P1", "^", "2"}], "+", 
             RowBox[{"P2", "^", "2"}]}], ")"}]}], "+", 
          RowBox[{
           RowBox[{"1", "/", "6"}], "*", "KS", "*", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Q1", "^", "3"}], "-", 
             RowBox[{"3", "*", "Q1", "*", 
              RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], "}"}]}], "]"}], ",", 
      "    ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", "list"}], " ", "of", " ", "invariants", " ", "for",
         " ", "each", " ", "sequence", " ", "of", " ", "\"\<Null\>\"", " ", 
        RowBox[{"(", 
         RowBox[{"norm", " ", "test"}], ")"}]}], " ", "*)"}], "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"\"\<TOLERANCE\>\"", ",", 
        RowBox[{"10.0", "^", 
         RowBox[{"-", "10"}]}]}], "]"}]}], 
     "                                       ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "convergence"}], " ", "tolerance"}], " ", "*)"}], 
     "\n", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$ELEMENT", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<ELEMENT\>\"", "]"}], "]"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"Echo", "[", 
        RowBox[{
         RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
         RowBox[{
          RowBox[{"Run", "[", 
           RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
          RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->"In[15]:=",ExpressionUUID->"e2f32c1b-4a75-4632-acd2-1de411ed27a6"],

Cell[CellGroupData[{

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
drif_map.f90\"\>"], "Echo",ExpressionUUID->"8eabc0cc-ef78-4a83-9a0c-\
f149d53336ec"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
sext_map.f90\"\>"], "Echo",ExpressionUUID->"98400168-87fe-4591-bb21-\
39656ca1c4ad"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
sext_seq.f90\"\>"], "Echo",ExpressionUUID->"37f5cf8d-b77d-46ee-840a-\
920abca1e478"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
sext_ele.f90\"\>"], "Echo",ExpressionUUID->"b198b474-53b7-4cf3-a0be-\
23c19d47b5be"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "lattice"}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Extend", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"SetOptions", "[", 
     RowBox[{"I$FORTRAN$LATTICE", ",", 
      RowBox[{"Rule", "[", 
       RowBox[{"\"\<EXTEND\>\"", ",", "EXTEND"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Hamiltonian", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{"I$FORTRAN$TEST", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"1", "/", "2"}], "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"P1", "^", "2"}], "+", 
            RowBox[{"P2", "^", "2"}]}], ")"}]}], "+", 
         RowBox[{
          RowBox[{"1", "/", "6"}], "*", "1.0", "*", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Q1", "^", "3"}], "-", 
            RowBox[{"3", "*", "Q1", "*", 
             RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], " ", ">", " ", "0"}], 
       ",", 
       RowBox[{"{", "KS", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"HAMILTONIAN", " ", "=", " ", 
     RowBox[{"StringDelete", "[", 
      RowBox[{"HAMILTONIAN", ",", "\"\<.GT.(0)\>\""}], "]"}]}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Create", " ", "FORTRAN", " ", "lattice"}], " ", "*)"}], "\n", 
   RowBox[{"LATTICE", " ", "=", " ", 
    RowBox[{"I$FORTRAN$LATTICE", "[", "\n", "\t", 
     RowBox[{"\"\<SEXT\>\"", ",", "\n", "\t", 
      RowBox[{"{", "\n", "\t\t", 
       RowBox[{"(*", " ", "FC", " ", "*)"}], "   ", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<FORTRAN\>\"", ",", 
          RowBox[{
           RowBox[{"StringTemplate", "[", "\"\< STATE(6) = ``\\n\>\"", "]"}], 
           "[", "HAMILTONIAN", "]"}]}], "}"}], ",", "   ", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"--", " ", "save"}], " ", "hamiltonian", " ", "value", " ", 
          "on", " ", "entrance"}], " ", "*)"}], "\n", "\t\t", 
        RowBox[{"(*", " ", "SD", " ", "*)"}], "   ", 
        RowBox[{"{", 
         RowBox[{"\"\<SEXT\>\"", ",", 
          RowBox[{"List", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "1.0", "]"}], ",", 
          RowBox[{"List", "[", "1.0", "]"}], ",", 
          RowBox[{"List", "[", "1.0", "]"}], ",", 
          RowBox[{"List", "[", "]"}]}], "}"}], ",", "         ", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"--", " ", "track"}], " ", "with", " ", "initial", " ", 
          "step", " ", "size", " ", "equal", " ", "to", " ", "length"}], " ", 
         "*)"}], "\n", "\t\t", 
        RowBox[{"(*", " ", "FC", " ", "*)"}], "   ", 
        RowBox[{"{", 
         RowBox[{"\"\<FORTRAN\>\"", ",", 
          RowBox[{
           RowBox[{"StringTemplate", "[", "\"\< STATE(7) = ``\\n\>\"", "]"}], 
           "[", "HAMILTONIAN", "]"}]}], "}"}]}], "    ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"--", " ", "save"}], " ", "hamiltonian", " ", "value", " ", 
         "on", " ", "exit"}], " ", "*)"}], "\n", "\t", "}"}]}], "\n", "]"}], 
    " "}]}]}]], "Code",
 CellLabel->"In[25]:=",ExpressionUUID->"1d4c2c1f-e962-4dd2-8919-5876d7380fb8"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"NAME\"\>", "\[Rule]", "\<\"SEXT\"\>"}], ",", 
   RowBox[{"\<\"TYPE\"\>", "\[Rule]", "\<\"LATTICE\"\>"}], ",", 
   RowBox[{"\<\"LENGTH\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"SRC\"\>", "\[Rule]", "\<\"sext_lat\"\>"}], ",", 
   RowBox[{"\<\"OBJ\"\>", 
    "\[Rule]", "\<\"gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
sext_lat.f90\"\>"}], ",", 
   RowBox[{"\<\"USE\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"drif_map\"\>", ",", "\<\"sext_map\"\>", 
      ",", "\<\"sext_seq\"\>", ",", "\<\"sext_ele\"\>"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[28]=",ExpressionUUID->"19c93b17-0520-4f3b-9476-8afcf4e88eff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compile", " ", "lattice"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"Echo", "[", 
       RowBox[{
        RowBox[{"StringTemplate", "[", "\"\<`1` <- `2`\>\"", "]"}], "[", 
        RowBox[{
         RowBox[{"Run", "[", 
          RowBox[{"Slot", "[", "1", "]"}], "]"}], ",", 
         RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"LATTICE", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[29]:=",ExpressionUUID->"789ffc25-5ffc-4f23-be39-d920a425f479"],

Cell[BoxData["\<\"0 <- gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value \
sext_lat.f90\"\>"], "Echo",ExpressionUUID->"d5d8ab6a-661e-438f-a540-\
98003ad57a39"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Create", " ", "library"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"I$FORTRAN$LIBRARY", "[", "LATTICE", "]"}], "\n", 
   RowBox[{"FileNames", "[", "\"\<sext_*.so\>\"", "]"}]}]}]], "Code",
 CellLabel->"In[30]:=",ExpressionUUID->"84f52d49-de48-435a-9572-072a3ecda406"],

Cell[BoxData[
 RowBox[{"{", "\<\"sext_lat.so\"\>", "}"}]], "Output",
 CellLabel->"Out[31]=",ExpressionUUID->"0e9d4cf6-605c-4f95-aa42-000e7f99933c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "library"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ClearAll", "[", "LIBRARY", "]"}], " ", ";"}], "\n", 
   RowBox[{"LIBRARY", " ", "=", " ", 
    RowBox[{"I$FORTRAN$LOAD", "[", "\n", "\t", 
     RowBox[{"\"\<sext_lat\>\"", ",", "       ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", 
         RowBox[{"(", "incomplete", ")"}]}], " ", "library", " ", "name"}], 
       " ", "*)"}], "\n", "\t", "LIBRARY"}], "           ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "variable"}], " ", "name", " ", 
       RowBox[{"(", 
        RowBox[{
        "passed", " ", "as", " ", "input", " ", "to", " ", "clean", " ", 
         "existing", " ", "definitions"}], ")"}]}], " ", "*)"}], "\n", "]"}], 
    " "}]}]}]], "Code",
 CellLabel->"In[32]:=",ExpressionUUID->"0ddd939f-d927-4665-ae90-f9e61c8c9851"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["LibraryFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.038461538461538464`], {
               FaceForm[{
                 GrayLevel[0.93], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                25.499999999999996`, 2.5}, {25.499999999999996`, 
                1.3953100000000003`}, {24.604699999999998`, 
                0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                0.49999999999999994`}, {1.3953100000000003`, 
                0.49999999999999994`}, {0.49999999999999994`, 
                1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                24.604699999999998`}, {1.3953100000000003`, 
                25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                25.499999999999996`}, {24.604699999999998`, 
                25.499999999999996`}, {25.499999999999996`, 
                24.604699999999998`}, {25.499999999999996`, 23.5}, {
                25.499999999999996`, 2.5}}}]}, {
               FaceForm[{
                 RGBColor[0.5, 0.5, 0.5], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                16.3832, 20.021499999999996`}, {6.930469999999999, 
                20.021499999999996`}, {6.930469999999999, 
                18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                16.3832, 16.357399999999995`}, {20.5426, 
                19.116799999999998`}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {
                9.46445, 11.079700000000003`}, {9.46445, 
                12.933999999999997`}, {18.917199999999998`, 
                12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                
                "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Function name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"TRACK_sext_lat_sub\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.038461538461538464`], {
               FaceForm[{
                 GrayLevel[0.93], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                25.499999999999996`, 2.5}, {25.499999999999996`, 
                1.3953100000000003`}, {24.604699999999998`, 
                0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                0.49999999999999994`}, {1.3953100000000003`, 
                0.49999999999999994`}, {0.49999999999999994`, 
                1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                24.604699999999998`}, {1.3953100000000003`, 
                25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                25.499999999999996`}, {24.604699999999998`, 
                25.499999999999996`}, {25.499999999999996`, 
                24.604699999999998`}, {25.499999999999996`, 23.5}, {
                25.499999999999996`, 2.5}}}]}, {
               FaceForm[{
                 RGBColor[0.5, 0.5, 0.5], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                16.3832, 20.021499999999996`}, {6.930469999999999, 
                20.021499999999996`}, {6.930469999999999, 
                18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                16.3832, 16.357399999999995`}, {20.5426, 
                19.116799999999998`}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {
                9.46445, 11.079700000000003`}, {9.46445, 
                12.933999999999997`}, {18.917199999999998`, 
                12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                
                "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Function name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"TRACK_sext_lat_sub\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"Real", ",", "1"}], "}"}], "}"}], 
                   ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                   Baseline, ContentPadding -> False, FrameMargins -> 0, 
                   StripOnInput -> True], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Return type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   RowBox[{"{", 
                    RowBox[{"Real", ",", "1"}], "}"}], 
                   ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                   Baseline, ContentPadding -> False, FrameMargins -> 0, 
                   StripOnInput -> True], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Library: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"sext_lat.so\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  LibraryFunction[
  "/media/imorozov/Data/SOFT/PROPAGANDA/PROJECT/sext_lat.so", 
   "TRACK_sext_lat_sub", {{Real, 1}}, {Real, 1}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[33]=",ExpressionUUID->"36a6c01d-3a2b-4fa6-9f4c-e9dd407beced"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compile", " ", "wrapper"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ClearAll", "[", "MAP", "]"}], " ", ";"}], "\n", 
   RowBox[{"MAP", " ", "=", " ", 
    RowBox[{"With", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"FUNCTION", " ", "=", " ", "LIBRARY"}], "}"}], ",", "\n", "\t", 
      RowBox[{"Compile", "[", "\n", "\t\t", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"STATE", ",", "_Real", ",", "1"}], "}"}], "}"}], ",", "\n", 
        "\t\t", 
        RowBox[{"FUNCTION", "[", "STATE", "]"}], ",", "\n", "\t\t", 
        RowBox[{"RuntimeAttributes", " ", "\[Rule]", " ", 
         RowBox[{"{", "Listable", "}"}]}], ",", "\n", "\t\t", 
        RowBox[{"Parallelization", " ", "\[Rule]", " ", "True"}]}], "\t\t", 
       "\n", "\t", "]"}]}], "\n", "]"}]}]}]}]], "Code",
 CellLabel->"In[34]:=",ExpressionUUID->"7d6e65da-cd8d-4946-a471-e28e4a4744e9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["CompiledFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.038461538461538464`], {
               FaceForm[{
                 GrayLevel[0.93], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                25.499999999999996`, 2.5}, {25.499999999999996`, 
                1.3953100000000003`}, {24.604699999999998`, 
                0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                0.49999999999999994`}, {1.3953100000000003`, 
                0.49999999999999994`}, {0.49999999999999994`, 
                1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                24.604699999999998`}, {1.3953100000000003`, 
                25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                25.499999999999996`}, {24.604699999999998`, 
                25.499999999999996`}, {25.499999999999996`, 
                24.604699999999998`}, {25.499999999999996`, 23.5}, {
                25.499999999999996`, 2.5}}}]}, {
               FaceForm[{
                 RGBColor[0.5, 0.5, 0.5], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                16.3832, 20.021499999999996`}, {6.930469999999999, 
                20.021499999999996`}, {6.930469999999999, 
                18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                16.3832, 16.357399999999995`}, {20.5426, 
                19.116799999999998`}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {
                9.46445, 11.079700000000003`}, {9.46445, 
                12.933999999999997`}, {18.917199999999998`, 
                12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                
                "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  StyleBox[
                   PaneBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"_Real", ",", "1"}], "}"}], "}"}], ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                   False], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.038461538461538464`], {
               FaceForm[{
                 GrayLevel[0.93], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                25.499999999999996`, 2.5}, {25.499999999999996`, 
                1.3953100000000003`}, {24.604699999999998`, 
                0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                0.49999999999999994`}, {1.3953100000000003`, 
                0.49999999999999994`}, {0.49999999999999994`, 
                1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                24.604699999999998`}, {1.3953100000000003`, 
                25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                25.499999999999996`}, {24.604699999999998`, 
                25.499999999999996`}, {25.499999999999996`, 
                24.604699999999998`}, {25.499999999999996`, 23.5}, {
                25.499999999999996`, 2.5}}}]}, {
               FaceForm[{
                 RGBColor[0.5, 0.5, 0.5], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                16.3832, 20.021499999999996`}, {6.930469999999999, 
                20.021499999999996`}, {6.930469999999999, 
                18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                16.3832, 16.357399999999995`}, {20.5426, 
                19.116799999999998`}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {
                9.46445, 11.079700000000003`}, {9.46445, 
                12.933999999999997`}, {18.917199999999998`, 
                12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                
                "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
             AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"_Real", ",", "1"}], "}"}], "}"}], 
                   ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                   Baseline, ContentPadding -> False, FrameMargins -> 0, 
                   StripOnInput -> True], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Variables: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "STATE", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Expression: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   RowBox[{
                    InterpretationBox[
                    RowBox[{
                    TagBox["LibraryFunction", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    GraphicsBox[{
                    Thickness[0.038461538461538464`], {
                    FaceForm[{
                    GrayLevel[0.93], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                    25.499999999999996`, 2.5}, {25.499999999999996`, 
                    1.3953100000000003`}, {24.604699999999998`, 
                    0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5,
                     0.49999999999999994`}, {1.3953100000000003`, 
                    0.49999999999999994`}, {0.49999999999999994`, 
                    1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                    0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                    24.604699999999998`}, {1.3953100000000003`, 
                    25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                    25.499999999999996`}, {24.604699999999998`, 
                    25.499999999999996`}, {25.499999999999996`, 
                    24.604699999999998`}, {25.499999999999996`, 23.5}, {
                    25.499999999999996`, 2.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.5, 0.5, 0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                    19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                    16.3832, 20.021499999999996`}, {6.930469999999999, 
                    20.021499999999996`}, {6.930469999999999, 
                    18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                    16.3832, 16.357399999999995`}, {20.5426, 
                    19.116799999999998`}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 
                    13.8391}, {9.46445, 11.079700000000003`}, {9.46445, 
                    12.933999999999997`}, {18.917199999999998`, 
                    12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                    9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
                    13.8391}}}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                    
                    "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
                    AspectRatio -> 1, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                    FrameTicks -> None, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Function name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"TRACK_sext_lat_sub\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    GraphicsBox[{
                    Thickness[0.038461538461538464`], {
                    FaceForm[{
                    GrayLevel[0.93], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                    25.499999999999996`, 2.5}, {25.499999999999996`, 
                    1.3953100000000003`}, {24.604699999999998`, 
                    0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5,
                     0.49999999999999994`}, {1.3953100000000003`, 
                    0.49999999999999994`}, {0.49999999999999994`, 
                    1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                    0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                    24.604699999999998`}, {1.3953100000000003`, 
                    25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                    25.499999999999996`}, {24.604699999999998`, 
                    25.499999999999996`}, {25.499999999999996`, 
                    24.604699999999998`}, {25.499999999999996`, 23.5}, {
                    25.499999999999996`, 2.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.5, 0.5, 0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                    19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                    16.3832, 20.021499999999996`}, {6.930469999999999, 
                    20.021499999999996`}, {6.930469999999999, 
                    18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                    16.3832, 16.357399999999995`}, {20.5426, 
                    19.116799999999998`}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 
                    13.8391}, {9.46445, 11.079700000000003`}, {9.46445, 
                    12.933999999999997`}, {18.917199999999998`, 
                    12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                    9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
                    13.8391}}}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYCYq4u+eR3VWoOxhkv5j+Qk3SA8fu/r5rKOVHM
Yd2vmNyjZ9Qcrt9QXbW9S8RBg59767IidQcPMYPGaHFhB+Nn61SfiGo4xBwp
T7o2V9Dh0Iolfg6/NBxEHv/x1Xgi4FB1XNNqkqQWnP+axUTQjFkbzn+oO2HB
j/3aDg/Xn5T6WiDoYLs3aJpiqI7DrHN+bO6tQg4zfUR7vF7pQOyfIQyRd9d1
WLL0U1kLoyjEPdm6DpoTXfQX7xBzKPjQejLkhDacL5J4+LL2Gm2HtNnSl4Vf
iELM69J2qPZM3tLnJerQX1oozZugDfHPUxGI/4W1HQ5p3TthoyDi4D7lG1v8
Mi2HgqL9zoEHhB1inOxe3BRG8MH62zXhfIbN1Z82CGhC/GMg4nCm3mN/7TYN
iHlCUPdGakDc/1kUEr46GhD/eYnD+d9iBf/kC0vC+TuCrSL+X5Vy2HGR4R5T
uAbEfxYykPBYp+HQqsCuesZAFhL+rJoQ/2rIQdxTpwkJ7yVycPfD+GDzVqLx
xbUd5HYt2JfqBdWfpA2Jj9mykPDpgYaXtaxDy7yzq86vg8qvlIHE5ylY/Eo7
XAt7o787TxfOB5ufqesQ9PbyxxkPZSDhZ6nrMAGU3u7LQtLLEx2HN2253UbX
ofZ76jis/Pay4oynAsT8QG0HKZMv/gW7FCDyTFpwPsz/MD44/Mw1HFjb1uR9
TVVwWKy880/7FHWIexrkIfLX1RzOMDZZVjHIOaDkh3vSDuj5AwCF11Vc
                    
                    "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
                    AspectRatio -> 1, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                    FrameTicks -> None, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Function name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"TRACK_sext_lat_sub\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"Real", ",", "1"}], "}"}], "}"}], 
                    ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Return type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    RowBox[{"{", 
                    RowBox[{"Real", ",", "1"}], "}"}], 
                    ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Library: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"sext_lat.so\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    LibraryFunction[
                    "/media/imorozov/Data/SOFT/PROPAGANDA/PROJECT/sext_lat.\
so", "TRACK_sext_lat_sub", {{Real, 1}}, {Real, 1}], Selectable -> False, 
                    Editable -> False, SelectWithContents -> True], "[", 
                    "STATE", "]"}], ImageSize -> {{1, 500}, Automatic}, 
                   BaselinePosition -> Baseline, ContentPadding -> False, 
                   FrameMargins -> 0, StripOnInput -> True], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  CompiledFunction[{11, 12.1, 5852}, {{
     Blank[Real], 1}}, {{3, 1, 0}, {3, 1, 1}}, {}, {0, 0, 0, 0, 2}, {{42, 
     LibraryFunction[
     "/media/imorozov/Data/SOFT/PROPAGANDA/PROJECT/sext_lat.so", 
      "TRACK_sext_lat_sub", {{Real, 1}}, {Real, 1}], 3, 1, 0, 3, 1, 1}, {1}}, 
   
   Function[{$CellContext`STATE}, 
    LibraryFunction[
    "/media/imorozov/Data/SOFT/PROPAGANDA/PROJECT/sext_lat.so", 
     "TRACK_sext_lat_sub", {{Real, 1}}, {Real, 1}][$CellContext`STATE], 
    Listable], Evaluate],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[35]=",ExpressionUUID->"05b12570-2f8a-4852-add5-39623960b202"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "initial", " ", "condition"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{"List", "[", 
       RowBox[{"0.01", ",", "0.001", ",", "0.01", ",", "0.001"}], "]"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Extra", " ", "places", " ", "must", " ", "be", " ", "added", " ", "for", 
     " ", "aditional", " ", "state", " ", "elements"}], " ", "*)"}], "\n", 
   RowBox[{"INITIAL", " ", "=", " ", 
    RowBox[{"Flatten", "[", 
     RowBox[{"List", "[", 
      RowBox[{"INITIAL", ",", 
       RowBox[{"ConstantArray", "[", 
        RowBox[{"0.0", ",", "EXTEND"}], "]"}]}], "]"}], "]"}]}]}]}]], "Code",
 CellLabel->"In[36]:=",ExpressionUUID->"a48aa5bf-80a5-4433-8af2-23c80ce59ca1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "0.01`", ",", "0.001`", ",", "0.01`", ",", "0.001`", ",", "0.`",
    ",", "0.`"}], "}"}]], "Output",
 CellLabel->"Out[37]=",ExpressionUUID->"dcb5875a-688d-4526-a4db-d7625d1385ae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Test", " ", "map"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"RESULT", " ", "=", " ", 
    RowBox[{"Drop", "[", 
     RowBox[{
      RowBox[{"MAP", "[", "INITIAL", "]"}], ",", "I$DIMENSION$VARIABLES"}], 
     "]"}]}], "\n", 
   RowBox[{"Abs", "[", 
    RowBox[{"Apply", "[", 
     RowBox[{"Subtract", ",", "RESULT"}], "]"}], "]"}]}]}]], "Code",
 CellLabel->"In[38]:=",ExpressionUUID->"ca8f98b3-4b83-4dee-aeff-45825e765a99"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6.666666666666667`*^-7", ",", "6.666558047753939`*^-7"}], 
  "}"}]], "Output",
 CellLabel->"Out[38]=",ExpressionUUID->"9b151621-9b7d-4d43-ab07-3c58c72126a7"],

Cell[BoxData["1.0861891272853992`*^-11"], "Output",
 CellLabel->"Out[39]=",ExpressionUUID->"cf0eef17-dde6-4150-86f2-2b9f7be99764"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Clean", " ", "*)"}], "\n", 
  RowBox[{
  "Run", "[", "\"\<rm -f *.f90 *.mod *.o *.so *.cc\>\"", "]"}]}]], "Code",
 CellLabel->"In[40]:=",ExpressionUUID->"59a19b31-44f1-4951-a8c4-e0a27a2f7c9b"],

Cell[BoxData["0"], "Output",
 CellLabel->"Out[40]=",ExpressionUUID->"02f2f3b9-b2ed-4624-8f6d-ba2e3d5d0501"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-17:  Tracking comparison", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"56b64f2d-e23e-498f-94a2-250c30683fc8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "In", " ", "this", " ", "example", " ", "we", " ", "compare", " ", 
    "tracking", " ", "for", " ", "simple", " ", "FODO", " ", "ring"}], " ", 
   "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "FODO", " ", "ring", " ", "map", " ", "is", " ", "generated", " ", "by", 
     " ", "I$NDSOLVE"}], ",", " ", 
    RowBox[{"COMPILED", " ", "and", " ", "FORTRAN", " ", "elements"}]}], " ", 
   "*)"}]}]], "Code",
 CellLabel->"In[1]:=",ExpressionUUID->"b801b95c-6c8a-45d2-ae6b-fc1ce8b405e1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[1]:=",ExpressionUUID->"48335d91-d9da-4016-a322-6ab141f66b38"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", 
   RowBox[{"\"\<PROJECT\>\"", ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "0", ",", "0", ",", "0", ",", 
    RowBox[{"List", "[", "]"}]}], "]"}]}]], "Code",
 CellLabel->"In[2]:=",ExpressionUUID->"cf601838-b851-41ba-9359-611f2af49296"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "2", ",", "0", ",", "0", ",", "0", ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"e4404e61-2ddb-4611-888c-86e6cac1ac6f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "global", " ", "parameters"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"RAD", " ", "=", " ", "22.918"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KBM", " ", "=", " ", "0.015"}], "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KQF", " ", "=", " ", "0.19"}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KQD", " ", "=", " ", 
     RowBox[{"-", "0.21"}]}], "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GSF", " ", "=", "  ", "1.5"}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GSD", " ", "=", " ", 
     RowBox[{"-", "1.5"}]}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GBM", " ", "=", "  ", "0.01"}], "  ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "Hamiltonian", " ", "functions"}], " ", "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"H$DRIF", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "2"}], "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"P1", "^", "2"}], "+", 
        RowBox[{"P2", "^", "2"}]}], ")"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"H$QUAD", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Q1", "^", "2"}], "-", 
        RowBox[{"Q2", "^", "2"}]}], ")"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"H$SEXT", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "6"}], "*", "KS", "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Q1", "^", "3"}], "-", 
        RowBox[{"3", "*", "Q1", "*", 
         RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"H$BEND", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", 
       RowBox[{
        RowBox[{"Q1", "^", "2"}], "/", 
        RowBox[{"R", "^", "2"}]}]}], "+", 
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Q1", "^", "2"}], "-", 
         RowBox[{"Q2", "^", "2"}]}], ")"}]}], "+", 
      RowBox[{
       RowBox[{"1", "/", "6"}], "*", "KS", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Q1", "^", "3"}], "-", 
         RowBox[{"3", "*", "Q1", "*", 
          RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}]}], " ", ";"}]}]}]], "Code",
 CellLabel->"In[3]:=",ExpressionUUID->"a151469c-c2b2-4295-a023-818a46fb9170"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "I$NDSOLVE", " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"DR", " ", "=", " ", "H$DRIF"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QF", " ", "=", " ", 
     RowBox[{
      RowBox[{"H$DRIF", " ", "+", " ", "H$QUAD"}], " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{"KQ", " ", "\[Rule]", " ", "KQF"}], "}"}]}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QD", " ", "=", " ", 
     RowBox[{
      RowBox[{"H$DRIF", " ", "+", " ", "H$QUAD"}], " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{"KQ", " ", "\[Rule]", " ", "KQD"}], "}"}]}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SF", " ", "=", " ", 
     RowBox[{
      RowBox[{"H$DRIF", " ", "+", " ", "H$SEXT"}], " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{"KS", " ", "\[Rule]", " ", "GSF"}], "}"}]}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SD", " ", "=", " ", 
     RowBox[{
      RowBox[{"H$DRIF", " ", "+", " ", "H$SEXT"}], " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{"KS", " ", "\[Rule]", " ", "GSD"}], "}"}]}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"BM", " ", "=", " ", 
     RowBox[{
      RowBox[{"H$DRIF", " ", "+", " ", "H$BEND"}], " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"R", " ", "\[Rule]", " ", "RAD"}], ",", " ", 
        RowBox[{"KQ", " ", "\[Rule]", " ", "KBM"}], ",", " ", 
        RowBox[{"KS", " ", "\[Rule]", " ", "GBM"}]}], "}"}]}]}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{
    RowBox[{"DR", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"DR", ",", "10", ",", "0.45", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QF", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"QF", ",", "10", ",", "0.50", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QD", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"QD", ",", "10", ",", "0.50", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SF", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"SF", ",", "10", ",", "0.10", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SD", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"SD", ",", "10", ",", "0.10", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"BM", " ", "=", " ", 
     RowBox[{"I$NDSOLVE", "[", 
      RowBox[{"BM", ",", "50", ",", "3.00", ",", "1"}], "]"}]}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"APERTURE", "[", 
      RowBox[{"{", 
       RowBox[{"FLAG_", ",", "Q1_", ",", "P1_", ",", "Q2_", ",", "P2_"}], 
       "}"}], "]"}], " ", ":=", " ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Q1", "^", "2"}], "+", 
         RowBox[{"Q2", "^", "2"}]}], " ", ">", " ", "1.0"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.0", ",", "Q1", ",", "P1", ",", "Q2", ",", "P2"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"FLAG", ",", "Q1", ",", "P1", ",", "Q2", ",", "P2"}], "}"}]}],
       "]"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"NDSOLVE", " ", "=", " ", 
     RowBox[{"Composition", "[", 
      RowBox[{
      "QF", ",", "DR", ",", "SF", ",", "DR", ",", "BM", ",", "DR", ",", "SD", 
       ",", "DR", ",", "QD", ",", "QD", ",", "DR", ",", "SD", ",", "DR", ",", 
       "BM", ",", "DR", ",", "SF", ",", "DR", ",", "QF", ",", "APERTURE"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{"List", "[", 
       RowBox[{"0.05", ",", "0.0", ",", "0.05", ",", "0.0"}], "]"}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{"NDSOLVE", "[", "INITIAL", "]"}]}]}]], "Code",
 CellLabel->"In[14]:=",ExpressionUUID->"0c94734f-7afc-403c-98d6-eb53e8a02f4d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"-", "0.004625838871040593`"}], ",", 
   RowBox[{"-", "0.003377559400204912`"}], ",", "0.0365730858073359`", ",", 
   RowBox[{"-", "0.0038552219167154447`"}]}], "}"}]], "Output",
 CellLabel->"Out[29]=",ExpressionUUID->"d2ea85a0-526a-491a-9873-3f0d0a28c748"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "tables"}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "H$DRIF", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", "H$QUAD", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "H$SEXT", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", "H$BEND", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", "0"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<BEND\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<ELEMENT\>\"", "]"}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"{", "}"}], "}"}], "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", "\"\<QUAD\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KQ", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "\"\<SEXT\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KS", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", "\"\<BEND\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}]}], "}"}], "}"}]}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   
   RowBox[{"(*", " ", 
    RowBox[{"Generate", " ", "code"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$CODE", "[", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<LEVEL\>\"", ",", 
       RowBox[{"Plus", "[", "1", "]"}]}], "]"}], "]"}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->"In[30]:=",ExpressionUUID->"31bdcf7a-d762-4f52-b027-4879193e0305"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "COMPILE", " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"CDR", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<DRIF\>\"", ",", 
        RowBox[{"{", "0.45", "}"}], ",", 
        RowBox[{"{", "0.45", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"CQF", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<QUAD\>\"", ",", 
        RowBox[{"{", "0.05", "}"}], ",", 
        RowBox[{"{", "0.50", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"CQD", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<QUAD\>\"", ",", 
        RowBox[{"{", "0.05", "}"}], ",", 
        RowBox[{"{", "0.50", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"CSF", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<SEXT\>\"", ",", 
        RowBox[{"{", "0.01", "}"}], ",", 
        RowBox[{"{", "0.10", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"CSD", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<SEXT\>\"", ",", 
        RowBox[{"{", "0.01", "}"}], ",", 
        RowBox[{"{", "0.10", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"CBM", " ", "=", " ", 
     RowBox[{"ReleaseHold", "[", 
      RowBox[{"I$COMPILE$ELEMENT", "[", 
       RowBox[{"\"\<BEND\>\"", ",", 
        RowBox[{"{", "0.05", "}"}], ",", 
        RowBox[{"{", "3.00", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], "]"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "COMPILE", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"COMPILE", " ", "=", " ", 
     RowBox[{"Compile", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"STATE", ",", "_Real", ",", "1"}], "}"}], "}"}], ",", "\n", 
       "\t", 
       RowBox[{"Block", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"{", "RESULT", "}"}], ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"RESULT", " ", "=", " ", "STATE"}], " ", ";", "\n", "\t\t", 
          
          RowBox[{"If", "[", "\n", "\t\t\t", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"RESULT", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "^", "2"}], " ", "+", " ", 
              RowBox[{
               RowBox[{"RESULT", "[", 
                RowBox[{"[", "4", "]"}], "]"}], "^", "2"}]}], " ", ">", " ", 
             "1.0"}], ",", "\n", "\t\t\t", 
            RowBox[{
             RowBox[{
              RowBox[{"RESULT", "[", 
               RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", "0.0"}], " ", 
             ";"}]}], " ", "\n", "\t\t", "]"}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CQF", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "KQF", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CDR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CSF", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "GSF", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CDR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CBM", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", 
              RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}]}], "]"}]}], " ", 
          ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CDR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CSD", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "GSD", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CDR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CQD", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "KQD", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CQD", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "KQD", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CDR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CSD", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "GSD", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CDR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CBM", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", 
              RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}]}], "]"}]}], " ", 
          ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CDR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CSF", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "GSF", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CDR", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "]"}]}], "]"}]}], " ", ";", "\n", "\t\t", 
          RowBox[{"RESULT", " ", "=", " ", 
           RowBox[{"CQF", "[", 
            RowBox[{"RESULT", ",", 
             RowBox[{"List", "[", "KQF", "]"}]}], "]"}]}], " ", ";", "\n", 
          "\t\t", "RESULT"}]}], "\n", "\t", "]"}], ",", "\n", "\t", 
       RowBox[{"Rule", "[", 
        RowBox[{"CompilationTarget", ",", "\"\<C\>\""}], "]"}], ",", "\n", 
       "    ", 
       RowBox[{"Rule", "[", 
        RowBox[{"RuntimeOptions", ",", 
         RowBox[{"List", "[", 
          RowBox[{"\"\<Speed\>\"", ",", 
           RowBox[{"Rule", "[", 
            RowBox[{"\"\<EvaluateSymbolically\>\"", ",", "False"}], "]"}]}], 
          "]"}]}], "]"}], ",", "\n", "    ", 
       RowBox[{"Rule", "[", 
        RowBox[{"CompilationOptions", ",", 
         RowBox[{"List", "[", 
          RowBox[{
           RowBox[{"Rule", "[", 
            RowBox[{"\"\<ExpressionOptimization\>\"", ",", "True"}], "]"}], 
           ",", 
           RowBox[{"Rule", "[", 
            RowBox[{"\"\<InlineExternalDefinitions\>\"", ",", "True"}], 
            "]"}]}], "]"}]}], "]"}], ",", "\n", "    ", 
       RowBox[{"Rule", "[", 
        RowBox[{"RuntimeAttributes", ",", 
         RowBox[{"List", "[", "Listable", "]"}]}], "]"}], ",", "\n", "    ", 
       RowBox[{"Rule", "[", 
        RowBox[{"Parallelization", ",", "True"}], "]"}]}], "\n", "]"}]}], " ",
     ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{"List", "[", 
       RowBox[{"0.05", ",", "0.0", ",", "0.05", ",", "0.0"}], "]"}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{"NDSOLVE", "[", "INITIAL", "]"}], "\n", 
   RowBox[{"COMPILE", "[", "INITIAL", "]"}]}]}]], "Code",
 CellLabel->"In[58]:=",ExpressionUUID->"5a1de97d-39af-4191-ae6e-997e09b487cd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"-", "0.004625838871040593`"}], ",", 
   RowBox[{"-", "0.003377559400204912`"}], ",", "0.0365730858073359`", ",", 
   RowBox[{"-", "0.0038552219167154447`"}]}], "}"}]], "Output",
 CellLabel->"Out[67]=",ExpressionUUID->"4ae02920-9b73-411f-b3ce-264d30095ac9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"-", "0.004625837627355254`"}], ",", 
   RowBox[{"-", "0.0033775594348136977`"}], ",", "0.03657308826995234`", ",", 
   
   RowBox[{"-", "0.0038552212386205155`"}]}], "}"}]], "Output",
 CellLabel->"Out[68]=",ExpressionUUID->"4fa466a3-4cf4-426f-abb8-9594d602853a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"FORTRAN", " ", 
    RowBox[{"(", "ADAPTIVE", ")"}]}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$MAP", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}], "]"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$SEQUENCE", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<SEQUENCE\>\"", "]"}], "]"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"List", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"I$FORTRAN$ELEMENT", "[", 
        RowBox[{"\"\<DRIF\>\"", ",", 
         RowBox[{"\"\<MODE\>\"", "\[Rule]", "\"\<NORMAL\>\""}]}], "]"}], ",", 
       "\n", "\t", 
       RowBox[{"I$FORTRAN$ELEMENT", "[", 
        RowBox[{"\"\<QUAD\>\"", ",", 
         RowBox[{"\"\<MODE\>\"", "\[Rule]", "\"\<ADAPTIVE\>\""}], ",", 
         RowBox[{"\"\<TOLERANCE\>\"", "\[Rule]", 
          RowBox[{"10.0", "^", 
           RowBox[{"-", "12"}]}]}], ",", 
         RowBox[{"\"\<EXPRESSION\>\"", "\[Rule]", 
          RowBox[{"H$DRIF", "+", "H$QUAD"}]}]}], "]"}], ",", "\n", "\t", 
       RowBox[{"I$FORTRAN$ELEMENT", "[", 
        RowBox[{"\"\<SEXT\>\"", ",", 
         RowBox[{"\"\<MODE\>\"", "\[Rule]", "\"\<ADAPTIVE\>\""}], ",", 
         RowBox[{"\"\<TOLERANCE\>\"", "\[Rule]", 
          RowBox[{"10.0", "^", 
           RowBox[{"-", "12"}]}]}], ",", 
         RowBox[{"\"\<EXPRESSION\>\"", "\[Rule]", 
          RowBox[{"H$DRIF", "+", "H$SEXT"}]}]}], "]"}], ",", "\n", "\t", 
       RowBox[{"I$FORTRAN$ELEMENT", "[", 
        RowBox[{"\"\<BEND\>\"", ",", 
         RowBox[{"\"\<MODE\>\"", "\[Rule]", "\"\<ADAPTIVE\>\""}], ",", 
         RowBox[{"\"\<TOLERANCE\>\"", "\[Rule]", 
          RowBox[{"10.0", "^", 
           RowBox[{"-", "12"}]}]}], ",", 
         RowBox[{"\"\<EXPRESSION\>\"", "\[Rule]", 
          RowBox[{"H$DRIF", "+", "H$BEND"}]}]}], "]"}]}], "\n", "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Create", " ", "FORTRAN", " ", "lattice"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"LATTICE", " ", "=", " ", 
     RowBox[{"I$FORTRAN$LATTICE", "[", "\n", "\t", 
      RowBox[{"\"\<FODO_ADAPTIVE\>\"", ",", "\n", "\t", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{"(*", " ", "QF", " ", "*)"}], "   ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}]}], "\n", "\t", "}"}]}], "\n", 
      "]"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compile", " ", "lattice"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"List", "[", 
       RowBox[{"LATTICE", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
    ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Create", " ", "library"}], " ", "*)"}], "\n", 
   RowBox[{"I$FORTRAN$LIBRARY", "[", "LATTICE", "]"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Load", " ", "library"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "LIBRARY$ADAPTIVE", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"LIBRARY$ADAPTIVE", " ", "=", " ", 
     RowBox[{"I$FORTRAN$LOAD", "[", 
      RowBox[{"\"\<fodo_adaptive_lat\>\"", ",", "LIBRARY$ADAPTIVE"}], "]"}]}],
     " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compile", " ", "wrapper"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "FORTRAN$ADAPTIVE", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"FORTRAN$ADAPTIVE", " ", "=", " ", 
     RowBox[{"With", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"FUNCTION", " ", "=", " ", "LIBRARY$ADAPTIVE"}], "}"}], ",", 
       "\n", "\t", 
       RowBox[{"Compile", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"STATE", ",", "_Real", ",", "1"}], "}"}], "}"}], ",", "\n",
          "\t\t", 
         RowBox[{"FUNCTION", "[", "STATE", "]"}], ",", "\n", "\t\t", 
         RowBox[{"RuntimeAttributes", " ", "\[Rule]", " ", 
          RowBox[{"{", "Listable", "}"}]}], ",", "\n", "\t\t", 
         RowBox[{"Parallelization", " ", "\[Rule]", " ", "True"}]}], "\t\t", 
        "\n", "\t", "]"}]}], "\n", "]"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{"List", "[", 
       RowBox[{"0.05", ",", "0.0", ",", "0.05", ",", "0.0"}], "]"}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{"NDSOLVE", "[", "INITIAL", "]"}], "\n", 
   RowBox[{"COMPILE", "[", "INITIAL", "]"}], "\n", 
   RowBox[{"FORTRAN$ADAPTIVE", "[", "INITIAL", "]"}]}]}]], "Code",
 CellLabel->"In[69]:=",ExpressionUUID->"c903d3ac-2727-45a2-9069-0307183d508c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"-", "0.004625838871040593`"}], ",", 
   RowBox[{"-", "0.003377559400204912`"}], ",", "0.0365730858073359`", ",", 
   RowBox[{"-", "0.0038552219167154447`"}]}], "}"}]], "Output",
 CellLabel->"Out[83]=",ExpressionUUID->"8ee18e36-3809-477e-be97-f720f304a0e3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"-", "0.004625837627355254`"}], ",", 
   RowBox[{"-", "0.0033775594348136977`"}], ",", "0.03657308826995234`", ",", 
   
   RowBox[{"-", "0.0038552212386205155`"}]}], "}"}]], "Output",
 CellLabel->"Out[84]=",ExpressionUUID->"2dc5dcd6-d614-436f-8595-948835072c59"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"-", "0.0046258384775889495`"}], ",", 
   RowBox[{"-", "0.003377559399597651`"}], ",", "0.0365730857080854`", ",", 
   RowBox[{"-", "0.0038552219349883474`"}]}], "}"}]], "Output",
 CellLabel->"Out[85]=",ExpressionUUID->"4c2071d6-55c1-423a-9aa9-018a2b076bc5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"FORTRAN", " ", 
    RowBox[{"(", "NORMAL", ")"}]}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$MAP", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}], "]"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$SEQUENCE", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<SEQUENCE\>\"", "]"}], "]"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$ELEMENT", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<ELEMENT\>\"", "]"}], "]"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Create", " ", "FORTRAN", " ", "lattice"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"LATTICE", " ", "=", " ", 
     RowBox[{"I$FORTRAN$LATTICE", "[", "\n", "\t", 
      RowBox[{"\"\<FODO_NORMAL\>\"", ",", "\n", "\t", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{"(*", " ", "QF", " ", "*)"}], "   ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLB\>\"", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLB\>\"", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}]}], "\n", "\t", "}"}], ",", 
       "\n", "\t", 
       RowBox[{"\"\<DEFINITIONS\>\"", " ", "\[Rule]", " ", 
        RowBox[{
         RowBox[{
         "StringTemplate", "[", 
          "\"\< INTEGER :: I\\n REAL(RK), PARAMETER :: DLS = `1`\\n REAL(RK), \
PARAMETER :: DLQ = `2`\\n REAL(RK), PARAMETER :: DLB = `3`\\n\>\"", "]"}], 
         "[", "\n", "\t\t", 
         RowBox[{
          RowBox[{"I$FORTRAN$REAL", "[", "0.01", "]"}], ",", "\n", "\t\t", 
          RowBox[{"I$FORTRAN$REAL", "[", "0.05", "]"}], ",", "\n", "\t\t", 
          RowBox[{"I$FORTRAN$REAL", "[", "0.05", "]"}]}], "\n", "\t", 
         "]"}]}]}], "\n", "]"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compile", " ", "lattice"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"List", "[", 
       RowBox[{"LATTICE", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
    ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Create", " ", "library"}], " ", "*)"}], "\n", 
   RowBox[{"I$FORTRAN$LIBRARY", "[", "LATTICE", "]"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Load", " ", "library"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "LIBRARY$NORMAL", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"LIBRARY$NORMAL", " ", "=", " ", 
     RowBox[{"I$FORTRAN$LOAD", "[", 
      RowBox[{"\"\<fodo_normal_lat\>\"", ",", "LIBRARY$NORMAL"}], "]"}]}], 
    " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compile", " ", "wrapper"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "FORTRAN$NORMAL", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"FORTRAN$NORMAL", " ", "=", " ", 
     RowBox[{"With", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"FUNCTION", " ", "=", " ", "LIBRARY$NORMAL"}], "}"}], ",", 
       "\n", "\t", 
       RowBox[{"Compile", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"STATE", ",", "_Real", ",", "1"}], "}"}], "}"}], ",", "\n",
          "\t\t", 
         RowBox[{"FUNCTION", "[", "STATE", "]"}], ",", "\n", "\t\t", 
         RowBox[{"RuntimeAttributes", " ", "\[Rule]", " ", 
          RowBox[{"{", "Listable", "}"}]}], ",", "\n", "\t\t", 
         RowBox[{"Parallelization", " ", "\[Rule]", " ", "True"}]}], "\t\t", 
        "\n", "\t", "]"}]}], "\n", "]"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$INITIAL", "[", 
      RowBox[{"List", "[", 
       RowBox[{"0.05", ",", "0.0", ",", "0.05", ",", "0.0"}], "]"}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{"NDSOLVE", "[", "INITIAL", "]"}], "\n", 
   RowBox[{"COMPILE", "[", "INITIAL", "]"}], "\n", 
   RowBox[{"FORTRAN$ADAPTIVE", "[", "INITIAL", "]"}], "\n", 
   RowBox[{"FORTRAN$NORMAL", "[", "INITIAL", "]"}]}]}]], "Code",
 CellLabel->"In[86]:=",ExpressionUUID->"ddc38487-7bf7-48d1-aeba-f91add4b9d23"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"-", "0.004625838871040593`"}], ",", 
   RowBox[{"-", "0.003377559400204912`"}], ",", "0.0365730858073359`", ",", 
   RowBox[{"-", "0.0038552219167154447`"}]}], "}"}]], "Output",
 CellLabel->
  "Out[100]=",ExpressionUUID->"78a34710-9e56-4455-82c0-678e2eaf60cb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"-", "0.004625837627355254`"}], ",", 
   RowBox[{"-", "0.0033775594348136977`"}], ",", "0.03657308826995234`", ",", 
   
   RowBox[{"-", "0.0038552212386205155`"}]}], "}"}]], "Output",
 CellLabel->
  "Out[101]=",ExpressionUUID->"80e33954-1de5-4a12-aa65-3fd966c7715f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"-", "0.0046258384775889495`"}], ",", 
   RowBox[{"-", "0.003377559399597651`"}], ",", "0.0365730857080854`", ",", 
   RowBox[{"-", "0.0038552219349883474`"}]}], "}"}]], "Output",
 CellLabel->
  "Out[102]=",ExpressionUUID->"dac51e21-b499-4650-a776-a613ee582f57"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"-", "0.0046258387933302385`"}], ",", 
   RowBox[{"-", "0.0033775594023683453`"}], ",", "0.03657308596121407`", ",", 
   
   RowBox[{"-", "0.003855221874343651`"}]}], "}"}]], "Output",
 CellLabel->
  "Out[103]=",ExpressionUUID->"4575c1cd-5112-45bb-a327-f88b9a770141"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"INITIAL", " ", "=", " ", 
   RowBox[{"I$MAKE$INITIAL", "[", 
    RowBox[{"List", "[", 
     RowBox[{"0.05", ",", "0.0", ",", "0.05", ",", "0.0"}], "]"}], "]"}]}], 
  " ", ";"}], "\n", 
 RowBox[{"NDSOLVE", "[", "INITIAL", "]"}], "\n", 
 RowBox[{"COMPILE", "[", "INITIAL", "]"}], "\n", 
 RowBox[{"FORTRAN$ADAPTIVE", "[", "INITIAL", "]"}], "\n", 
 RowBox[{"FORTRAN$NORMAL", "[", "INITIAL", "]"}]}], "Code",
 CellLabel->
  "In[104]:=",ExpressionUUID->"f48abd25-b8e4-46e1-8315-7ba59d503173"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"-", "0.004625838871040593`"}], ",", 
   RowBox[{"-", "0.003377559400204912`"}], ",", "0.0365730858073359`", ",", 
   RowBox[{"-", "0.0038552219167154447`"}]}], "}"}]], "Output",
 CellLabel->
  "Out[105]=",ExpressionUUID->"6558c12b-2477-4097-b9f2-ff0de5b35c71"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"-", "0.004625837627355254`"}], ",", 
   RowBox[{"-", "0.0033775594348136977`"}], ",", "0.03657308826995234`", ",", 
   
   RowBox[{"-", "0.0038552212386205155`"}]}], "}"}]], "Output",
 CellLabel->
  "Out[106]=",ExpressionUUID->"5d621dcd-7ef4-4e2d-8009-7d3601be969d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"-", "0.0046258384775889495`"}], ",", 
   RowBox[{"-", "0.003377559399597651`"}], ",", "0.0365730857080854`", ",", 
   RowBox[{"-", "0.0038552219349883474`"}]}], "}"}]], "Output",
 CellLabel->
  "Out[107]=",ExpressionUUID->"46c3bc8e-bb57-4af0-b4d1-426e015c3e08"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"-", "0.0046258387933302385`"}], ",", 
   RowBox[{"-", "0.0033775594023683453`"}], ",", "0.03657308596121407`", ",", 
   
   RowBox[{"-", "0.003855221874343651`"}]}], "}"}]], "Output",
 CellLabel->
  "Out[108]=",ExpressionUUID->"12110b91-53c3-48f6-87d7-3caeeafab80c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Grid", "[", "\n", "\t", 
   RowBox[{"List", "[", "\n", "\t\t", 
    RowBox[{"Table", "[", "\n", "\t\t\t", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"Part", "[", 
         RowBox[{
          RowBox[{"NestList", "[", 
           RowBox[{"FUNCTION", ",", "INITIAL", ",", 
            RowBox[{"2", "^", "8"}]}], "]"}], ",", "All", ",", 
          RowBox[{"List", "[", 
           RowBox[{"2", ",", "3"}], "]"}]}], "]"}], ",", 
        RowBox[{"AspectRatio", "\[Rule]", "1"}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Small"}], ",", 
        RowBox[{"PlotStyle", "\[Rule]", "Black"}], ",", 
        RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}], ",", 
        RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", "\n", "\t\t\t", 
      RowBox[{"{", 
       RowBox[{"FUNCTION", ",", 
        RowBox[{"{", 
         RowBox[{
         "NDSOLVE", ",", "COMPILE", ",", "FORTRAN$ADAPTIVE", ",", 
          "FORTRAN$NORMAL"}], "}"}]}], "}"}]}], "\n", "\t\t", "]"}], "\n", 
    "\t", "]"}], "\n", "]"}], " ", "//", " ", "Rasterize"}]], "Code",
 CellLabel->
  "In[109]:=",ExpressionUUID->"e02d8af9-fd41-411f-ae2e-7027af1c947b"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnVtTHEmW52W7L/u4X2G/xb7u477O2n6AGdsRtcVFIG4qmJysEQa6kLqU
mTRgQ5MMI6YM6NaoWxLYWAuprASU0TJDIBMkoJZaU1IDQmJ0QYjkIhR7Vr7l
G8qM8LhHHo/4/8yqLDLCPc7xiB+eHhGeof/yV8f+4uh/OHLkSON/ov/9xV+2
/rfjx//ym//xn+nD/6xr/N9VdX/9v/57XdNfV/318f/6V/+RVv6R/lujhf+7
bAAAAAAAAACAkqMAhESlXQYAAAAASCYlAy27cZdiPBZilYongGb63ptGI/bY
LmFA4qm0y26p9HECyaHSLrul0scJJIdKu/z/OYoRe+xVKp5AFDmzslpNdM6H
uze2VSqeAJOck+e8YhPbKhVPIFXNhPOhV6l4AmimRs5Hlwzt+fr16xHtvCQQ
oniNEvqpYWW1muhSpaOaME8SEyWKUwPnY9h5UqNo+uUI52PYeSKj6PvlyMr5
o5+pdBZAb/SySK9sAU/0skivbAFP9LJIr2wBT7hZxCoZoC8aiaRRqoAzGomk
UaqAMxqJpFGqgDOsRIp0hkA8D/4QxUcUzIqJAjjPOQqcj4iEeRJPFE2bA+cF
mp6+ykbRtDmsnGeVDNAXjUTSKFXAGY1E0ihVwBmNRNIoVcAZViKxSgboi0Yi
aZQq4IxGImmUKuCMRiJplCrgDCuRoptXr+9DkDRECTcQt19nqIHz6YwC5yPa
ecI8iSeKjs2B8xIdT1/Fo+jYHG7Os0pGU44cORJ8vV1hXdBIJI1SZQucN7QS
SaNU2XLkM57Wu1ypERqJpFGqbIHzBjORWCUTG3a++avidb3Lwnp5rpFIGqUa
Ij6cN0Iambvfub8kK4VGImmUaoiE7ryn0YvLncP5iNAo1XCB8+HCSqQEvzcj
3O46/rZEN4bHezMi2nPFnTdC7a4r4nxJMmH17XA+up1r6rxlrfhnCETnvJH0
92aogfPlVeC8D1g5zyqZcPFxV9zfpqhvvwesFQ8aiaRRqj4I0dJw9+bbebba
aySSRqn6wJ+l4f45eN2VAjgfChql6gM4HxusROI2r94H8fjpe5P78u5Xyk1M
JNfLIr2ytaTi3bV6k/vyllnB+dDRK1tL/F0kxvbn4L68V+d9xI0IvSzSK1tL
4nQ+rBG4J+dD/FuLCG4WJWCGgA8JfaBui9cc7NaXR4li9IIZAhHtGc6rc4Dz
lSIBMwTi+XKPzfmSQBGN2OF8RMTmfFgDaQX+nFdscu98FH/UyXaeVTIK4lE3
NryO5EvKeFofD7qIZOiTasKcN7zcfnFZJtwrFK/oIpKhVarxXI3GBpyvFBql
mgbnFevNBeC8GlbJKNBUXa9YNtOx7WIrRuwu0SjV1DpvuLvriJ7cJRqlCucV
tRR140EjkTRKNT3DG5crS7bCeQm3GQJHfsFTIK9RfFDBKC5H7J6iJPvJkRo4
r0UUOB8i3GYIwHm7rl5Ry8egBc5HhL8DC+fL18N5T1R2Xn25wCm52AyO+kDF
fBi5/TpDDZzXFDjvm4pnC+f9EfrtmiBU3CJPVDxby8flFclEL3R0fmxsrLGx
sa6ubnBw8ODgoGTr7u5uX18fbW1qapqYmFDXopUtLS01NTW5XO758+fl+QRr
kH983GYBCszPj+I/sMFFUjtvV2B+fj6TyVRXV58/f35zc1OWhPNpQB5MTZ23
tNeMe+fn5uay2SytpP/Pzs6Gnqpv5AmqVAIJw+y8EfuBjcF5ywLr6+tnz54V
ei8tLYmVcD4lMHd+Zmamvb391atXW1tbZ86cuXnzZkkB6r0vX75cLBafPXtG
g/ZHjx7Z1ZIrDw8Pb9y4QWJ7TcY3jj+HD+sbNmFPjnzXdX8wGc4QcHTesgB9
rK2tLRQKe3t7w8PD1MMb/Jw3nxc4H24U98eTofOW9ppx7zwNbGjcQiOZT58+
0f+/+uqrN2/ehJiqGjjvI4rvQJ6Op3bOWxagnpzG8OPj43TReu/evfr6ehr8
wPmwgPNqHEW6ePHirVu3xPLy8nJLS4t5K9lbU1NDY3WZXn9/v12tjx8/fvjw
gRZI9atXr3Z3d3tNJkRwyRk/sR3zgCKpnbcrQH04XbqKlfv7+9SBb2xscHMe
2seMLs5b2msu4N55GrS8f/+e1tDC/Pw8DWm2t7dDTNUTcD5+YjvmUTtvWeDJ
kyekNLkt1lOXPjk5CedTDh/nT5w4sbCwIJbfvXtH5cUIREAXobSGZBYf6ZLz
5MmT6lpUhsynS1cy3y4ZeWES4kLJA+soQmDBbuHIl0QdNGD3qHberkA+n6cx
uSyTyWTu378vlivrvFiA8zEv6OW8wl6BV+dfv35NwlOxO3fulMSC8wleSJLz
lgWmp6dPnTolVw4NDQ0PD4tlOJ/OBVbONzQ0iIkuRLFYpPKkpdy6urpaVVUl
P9LVZXt7u7rW4eEhXYeS0seOHdva2jLHOvoLoTczl8tJq8Pdc8nC9c9EGkI0
J+oQsiExHLGwmnPUhBEAtfN2BXp7e83zZzo6OmZmZsQynA+lOVGH0NF5WgjF
eYW9Aq/Of/oMXaLSGEYO9QXROX/dNHoJfc/mhYQ5r11z4nHesgB14+b5M6Oj
o4ODg2IZzgdfgPN2Cy6db21tXVxcFMt299jlr5DkPXZ1LbnnP/zhD+Y1ET05
whMibkR9RgKK5GivZYF8Pn/t2jVZJpPJzM3Nle8ZzqcT5s472uvb+f7+/itX
roSYqh1wnhtRTxWI2nnLAlNTU6dPn5Yrh4aGRkZGSvYM51NLxZ2/cOHC7du3
xfLKykpzc7N5q5jHLt+AQRcCfX19drV+97vfSbfpUrSxsfHhw4eekvEEZnOx
peJWq1E7b1dgfHy8p6dHrBSTHl+8eFER56E9Q5g7b2mvuYB758lw87SB3t7e
3/zmNyGmWgKcZ4vuzlsWePz4cUNDg5zHnsvl7t69C+eBoOLOT09Pt7e3v3z5
cnt7u7u7W0zrooH67OyseL4/MDBw6dKlYrG4urra1NQkBiSWtZaXl+vq6p4+
fUry06VrW1vb3t6ep2R8Y34CEimI4h75LC/0QAFFcnTessDGxkZtbe3i4uLB
wcHo6GhXV5cB5xHlS9g6b2kvsbS0tLa2Znhx/v379zSk+fHHHz9+/Dg3N2e+
pRNKqmqS4UnMUSINVD65Nyyidt6yAI3VqRsfGxujlfSNQN07fSnAee2iRO18
yVSlsHAUifwkOVtbW+vr6+VreHd3d6niysoKLe/s7OTzedK1ublZvo/dshbx
008/Ubd/7Nix7777ruR32UZI/8oArj114Ug0rzMNbpGj83Z6P3jwIJvNUid/
7tw5+fJeOA8kbJ03bOzt7OwUXzqenP/Tn/5Ewxta2dHRUSgUosjWwJQATdDX
ebsC6+vruVyOxuq0SeoN54Gk/LeooRCWRWERMBmMW3QkilPGymo1cD6FwPmA
e4Dz2gHnA+4BXb12RHHKWDmPGQIpjGJ+G1VYsLJaDZxPYZTE9+RqMEOAW5QY
AsH56HaeMBvjiQLng+M7GVx7AjOsrFYTxHloDyRwHqQNOA/SBivnvSYT0WQh
EDOhT3RkZbUaH6lGNC8UxEnofRecB8yB856A8wkg2c5HN68eMwQ4Rwm3a+L2
6ww1cD6dUcLtyeG8JGGexBMlzslgcD50EmZjPFHgfHA8JYNb6wkD99gdgfMJ
A867Ac4niaTeb1QD59NMUp13k4xsO0YvCQOjFzvgfFKB8wrkwYHzSSKpoxc1
cD7NJNV5T6MXw4vVmCHAOUpJoOBus7JaDZxPZxQ474jZeU/a+0zLCwmLUpHm
BB/GwHlBwmyMJwqcDw6rZEClwOgFpA04D9JGwkYvajRKFURHwpx3M68eEwMS
TCJ/naHGZbZwPqmE0qHBeaARcN4OOJ9UEum8IpmAjcUMAc5RzIHCEjvgHmJD
7XyQQwHnOUfBrBhLgv/5J8yTeKJUaoZAwB3CeUHCbIwnCpwPjvsROy5FkwpG
7JKSQwHnEwycF5Q7D+2TCpwXwPn0kDDn3ScDpRNPkI6LldVq4DyQwPkSMHpJ
PHC+BDifBpLhvDqZICZjhgDnKJaB0JMbcD65UeC8goCTwXzXTW2UCjYHzgvg
fMxRKtucZDivnlePa0/gBm6/zlAD50FwkuS8gcdJwAVwHqQNl86PjY01NjbW
1dUNDg4eHByUbN3d3e3r66OtTU1NExMT6lo//PBDW1tbbW1tZ2fnyspKeT7l
0WFyCqn4G5DUztsVmJ+fz2Qy1dXV58+f39zcFCvhPHBDxZ23tNeMe+fJc7Kd
nCfzyX83qcL5FBLwjkQMzlsWWF9fP3v2LK3MZrNLS0tiJZwHboja+ZmZmfb2
9levXm1tbZ05c+bmzZslBaj3vnz5crFYfPbsGQ3aHz16ZFdrYWHh+PHjP//8
8+Hh4dTUFPX879+/95SM4be9FX8IgiiKKHZPS33vM2BP7ui8ZQH6SN11oVDY
29sbHh6mHt4IyXnD19GA85yjcHPe0l4z7p0nw8lzKk/OP336tL6+nv4KfKTq
72gkzJN4oqRzVoyj85YFyGoaw4+Pj9NF671790hvGvzAee2iJNX5ixcv3rp1
SywvLy+3tLSYt5KfNTU1NFaX6fX399vVIp/NN+EbGhrE8N59MgbmCaSGCo5e
1M7bFaA+nC5dxcr9/f3q6uqNjY1QnDdwNyYdVNB5S3vNBdw7T18HV65ckRV7
enpKrnnhPJBUcMTu6LxlgSdPntCA/NOnT2J9d3f35OQknAfuidT5EydOyKvF
d+/eUfkPHz7IrXQRSmtIZvGRLjlPnjzpWIsg7cn/kpXRvY8daIo/twP25I72
WhbI5/NXr16VZTKZzP3798214DxwQ0Wcd7TXn/M7OzuNjY3u7zfC+XTC03nL
AtPT06dOnZIrh4aGhoeHzbV8OA/t00kUzpvvChaLRSr/+vVruXV1dbWqqkp+
nJ+fb29vd6y1trbW3Nx89+7d8mQE8lGCXJBNK9/kZiGXy4llf9XdL5iftkS3
QM2JOoRsSAxHLKzmHDVhBEBtr12B3t5e832Vjo6OmZkZ+RHOw3m5EKLztBCK
82p7DV/OU7Hu7m7x1NVMdM7HeQaT5Lx2zYnHecsCd+7cMc+fGR0dHRwclB/9
OS+0h/MGnLdfcOl8a2vr4uKiWLa7xy5/hSTvsStq0Xq6AqUL1fJYMhmRJ2kc
wyHFQvIWAvbkauftCuTz+WvXrskymUxmbm5OLMN5LES9EPx+o529Aq/O01fD
t99++/333x8eHpbEKnc++EAdCylciNp5ywJTU1OnT5+WK4eGhkZGRsQynMdC
1AuOzl+4cOH27dtieWVlpbm52bxVzGN//vy53G1fX5+i1uTkZEtLy+PHjy1j
afSyJsCZgCKpnbcrMD4+3tPTI1aKSY8vXrww4DyIheBzei3tlXhy/unTp1Sg
/I0ZoaQKgCBq5y0LUE/e0NAg57Hncjnx5BTOgxhwFGl6erq9vf3ly5fb29vd
3d1iWhcN1GdnZ7e2tmh5YGDg0qVLxWJxdXW1qanp4cOHdrUWFhZqa2upt3/9
C3ICvMtkfM/4uv4ZHxV9BEIUr1EUgfyd7oDdo6PzlgU2NjZI78XFxYODg9HR
0a6uLiMM540ALxBImCdJisLNeUt7iaWlpbW1NcOL82/fvj1+/PjExIR0fmdn
x2uqQf7hMH8V0xyl4s3h6bxlARqrt7W1jY2N0Ur6Rqirq6MvBTivXZSKNyci
58lPkrO1tbW+vl6+hnd3d5cqipdLk5n5fJ6uOukCU74Ww7LWuXPnjn5JyUMo
XIeCEirSkzs6b1mAePDgQTabpU6eVBcv74XzwCsV+RWeYWUv0dnZKb503Dt/
48aNEufltIGwUgUJg6fzdgXW19dzuRyN1WlToVAw4DzwTqWcDxG7efX4JXXK
8SRA8F8kxQmcB5bAeZA20uk8tE8zngTg5rw5mXA15vAQBFHsooQeiJXVauB8
OqPAeUHow5WEeRJPFE2bo6/zoXf1Ie4tJVE0bQ4r51klA/RFI5E0ShVwRiOR
NEoVcEYjkTRKFXCGlUiskgH6opFIGqUKOKORSBqlCjijkUgapQo4w0okN++K
8bdnfR+CpCFKsp8cqYHz6YwC5xUEmTOQME/iiaJpcxLmPN4VE2cUTZvDynnL
efX4aQbQ+tcZauA8sCRtzhv45WnqgfMgbWjtPH5MDSw58gsuy7OyWg2cB5ak
zXkDo5fUA+dB2tDaeZlMFD+m1vQhSBqiuAmkr9Vq4Hw6o8B5Ad4VwyEKn+bA
eR/wOX0aRWHVHE2dZ5UM0BeNRNIoVcAZjUTSKFXAGY1E0ihVwBlWIrFKBuiL
RiJplCrgjEYiaZQq4IxGImmUKuAMK5Gim1fP7SEIopijhBuI268z1MD5dEaB
8xHtPGGexBNFx+bAeYmOp6/iUXRsDjfn1cng53jAJaysVhPpm+5AeoDzIG3A
eZA2WDmP92YANS5NYGW1GjgP1MB5kDZS4ryBgTr4BZcdICvn8d6MdEZx/3vq
BPfkcD5VUeC8AO/N4BCFVXPgvFdYnT5dorBqjvt3PLJynlUygBuJ78kBKAHO
gxQC50Ha0NF5bvPqgY7oZZFe2QKe6GWRXtkCnuhlkV7ZAp64tGhsbKyxsbGu
rm5wcPDg4KBk6+7ubl9fH21tamqamJhwU4s20UrLfHy1wxluD0EQxRwl9EDB
RVI7b1dgfn4+k8lUV1efP39+c3OzpDycRxQZhaHzCnsFXp1fWVmhTVGkqiBh
nsQTRdPmxOC8ZYH19fWzZ8/Symw2u7S0ZC4P53WJomlzHEWamZlpb29/9erV
1tbWmTNnbt68WVKAeu/Lly8Xi8Vnz57RoP3Ro0eKWlRsZGSEgsY8egGpIqBI
js5bFqCPtbW1hUJhb29veHiYenhRGM6DGAgokp29Ek/Of/r06ccff6SxPVUJ
PVUABFE7b1ng8PCQxuTj4+N00Xrv3r36+nrq4Q04D2LBUaSLFy/eunVLLC8v
L7e0tJi3kr01NTU0Vhcf6YKiv79fUau7u/tXv/rVlStXfIxe8DIB4JKA3aPa
ebsC1IfTpatYub+/X11dvbGxYcB5EAsBnbezV+LJ+d/+9rddXV2///3vfYxe
4DxwSdTOWxZ48uQJjdJpfC7WU/c+OTlpBHPewEtjgDscRTpx4sTCwoJYfvfu
HZX/8OGD3EoXobSGZBYf6ZLz5MmTilpv3ryh/1+9etVx9CIFDqUD1/chSBqi
cHtaqnberkA+nyexZZlMJnP//n3Dl/NGGB04nOcchZvzdvZKPDn/9u1b+j+V
dxy9hOu8kThP4omiaXOidt6ywPT09KlTp+TKoaGh4eFhw6Pz5uFNkCYIND19
lY2iaXMcnW9oaBATXYzPz/ep/OvXr+XW1dXVqqoq+XF+fl7oqq6lGL0IqJnC
ZNleLGBBLMj3IJVvOmrCCIDaXrsCvb295vkzHR0dMzMz8iOcx4LvBYXztBCK
82p7DV/OK0YvcB4L6gUOzlsWuHPnjnn+zOjoqLljd+m8XbuwkOYF0RkGdL61
tXVxcVEs291jl79CkvfY1bXc3G8EoJx43lmqtteuQD6fv3btmiyTyWTm5ubk
RzgPfBOD82p7DV/Ou7nfCIAlHJy3LDA1NXX69Gm5cmhoaGRkRH6E88A3oTh/
4cKF27dvi+WVlZXm5mbzVjGP/fnz5+IjXQj09fU51op/9HL9MxHtvCQQoniN
EnqggCKp7bUrMD4+3tPTI1aKSY8vXryQVeA8opijcHNeba/hy/mKjF4S5kk8
UTRtTtTOWxZ4/PhxQ0ODnMeey+Xu3r0rq8B5XaJo2hxHkaanp8nAly9fbm9v
d3d3i2ldNFCfnZ3d2tqi5YGBgUuXLhWLxdXV1aampocPH9rVkuB+I4iUgCI5
Om9ZYGNjo7a2dnFx8eDgYHR0tKury7xPOA8iJaBIdvYuLS2tra0ZvpzH/UYQ
KVE7b1mAxuptbW1jY2O0kr4R6urqxJeCAM6DSHEUifwkOVtbW+vr6+VreHd3
d6niysoKLe/s7OTzebrqbG5ulu9jt6wlwegFREpAkRydt9P7wYMH2WyWOvlz
586VvN0XzoNICS6Spb2dnZ3iNpEP5zF6AZEStfN2BdbX13O5HI3VaVOhUDDv
EM6DSGElknpefZCXxuj7ECQNUcINFPwXSXEC59MZBc7bbQ34crCEeRJPFB2b
A+clOp6+ikfRsTncnLdLRv6EFu8sBW5gZbUaOA9CIRnOS2JOCegInAdpg5Xz
5mTgMPANK6vVlKQK54E/4DxIG3AepA1WzuO9GemM4imQ+Y6EXb/Hymo1cD6d
UbwGgvMuSZgn8UTh2Rw47xKep495FJ7N0ct5VskAnrh5+KKRSBqlCioInAdp
A86DtKGX89zm1QMd0csivbIFPNHLIr2yBTzRyyK9sgU84WYRZgikMwq3f1kj
TuB8OqPA+YhImCfxRNG0OXBeoOnpq2wUTZvDynlWyQB90UgkjVIFnNFIJI1S
BZzRSCSNUgWcYSWS4xuQYs4HaAorq9XgrV8gFBLgvIGuHngBzoO0wcr58jcg
hfVWan0fgqQhSrKfHKkpTxXOpyEKnDcjVQ8+bkmYJ/FE0bQ5cF6g6emrbBRN
m8PKeW7z6oGO6GWRXtkCnuhlkV7ZAp7oZZFe2QKecLOIVTKALY6PETUSSaNU
QQWB8yCFqLXXSCSNUgWVRSPn8d6MdEbx/a8M2MHKajVwPp1R4HxEJMyTeKKw
bQ6cdwPb08c5CtvmaOQ8q2SAvmgkkkapAs5oJJJGqQLOaCSSRqkCzrASiVUy
QF80EkmjVAFnNBJJo1QBZzQSSaNUAWdYiRTdvHrOD0EQJdxA3H6doQbOpzMK
nI9o5wnzJJ4oOjYHzkt0PH0Vj6Jjc1xaNDY21tjYWFdXNzg4eHBwULJ1d3e3
r6+PtjY1NU1MTKhrzc/PZzKZ6urq8+fPb25uludjlwNeWArcE7xvVDtvV8BS
74DOQ3vghuDOq0U1vDi/vr5+9uxZWpnNZpeWltynCueBe2Jw3r3ecB7EgKPz
MzMz7e3tr1692traOnPmzM2bN0sKUO99+fLlYrH47NkzGrQ/evTIrhZ9rK2t
LRQKe3t7w8PD9CfgJhn5emrfbQRpI2BP7ui8e70DOg/tgUsCOu8oqnvnDw8P
aZAzPj5Oo/p79+7V19fTt4NjqnAeeCVq593rDedBPDg6f/HixVu3bonl5eXl
lpYW81YStaamhsbq4uP169f7+/vtapHPNLYXK/f39+lqdGNjw1MyvtH0IUhK
onD7VwbUztsVsNQbziOKZRRuzjuK6t75J0+e0Ijl06dPYn13d/fk5GSIqapJ
mCfxRNG0OVE7715vOK9dFE2b4yjSiRMnFhYWxPK7d++o/IcPH+RWugilNSSz
+EhXlydPnrSrlc/nr169KuvSNen9+/c9JQOA4IiJ8q0BRVI7b1fAUm84D8Ii
UucdRXXv/PT09KlTp+TKoaGh4eHhEFMF6cH8756Xb43aefd6w3kQFgGdb2ho
EBNdiGKxSOVfv34tt66urlZVVcmP8/Pz7e3tdrV6e3vNEww6OjpmZmZKkhHI
CxMsYKF8oWTcIjcdNWEEQO28XQFLveE8FkJZsHOeFkJx3lFU987fuXPHPMFg
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
G3AepI0kOR/8yREeHulLiKePldVqgqcK5/UFzvsDzusLnPcHnNeaRDof3Ygd
MwQ4RxGBjvxC8H2yslpNdD05nOccBc4HQXHEEuZJPFHibA6c9wecDzdKzM1J
pPOhWI1LUR0J96yxslpNWM5De+2A876B85oS7lmD84A/CXY+lHn1UDrlcPt1
hpqwnIf2aQbOg7QB50HacGnR2NhYY2NjXV3d4ODgwcFBydbd3d2+vj7a2tTU
NDExoa5FK1taWmpqanK53PPnz8vzCdag/0e51ZghwDCK6H+iODXBRVI7b1dg
fn4+k8lUV1efP39+c3NTlozH+RLt4TzDKPJGGUPnLe014975ubm5bDZLK+n/
s7OzoacqsBzAJMOTmKNEGkhr5y0LrK+vnz17Vui9tLQkVsJ5vaLENrwJd7eO
Is3MzLS3t7969Wpra+vMmTM3b94sKUC99+XLl4vF4rNnz2jQ/ujRI7tacuXh
4eGNGzdIbK/JuASXosyJ+gQFFMnRecsC9LG2trZQKOzt7Q0PD1MPb8B5YIKz
85b2mnHvPA1saNxCI5lPnz7R/7/66qs3b96EmKoEzvNHa+ctC1BPTmP48fFx
umi9d+9efX09DX7gPJBU1vmLFy/eunVLLC8vL7e0tJi3kr01NTU0Vhcf6YKi
v7/frtbHjx8/fPhAC6T61atXu7u7vSbjHljNk3jOS0CR1M7bFaA+nC5dxcr9
/X3qwDc2NuA8iOdLNqBIlvaaC7h3ngYt79+/pzW0MD8/T0Oa7e3tEFM1A+d5
kgznLQs8efKElCa3xXrq0icnJ+E8YOL8iRMnFhYWxPK7d++ovBiBCOgilNaQ
zOIjXXKePHlSXYvKkPl06Urme03GE+ajhxkCFYxi/slMPBOWAoqkdt6uQD6f
pzG5LJPJZO7fvy+W4XzaopQ4H8OEpYAiKewVeHX+9evXJDwVu3PnTripllB+
bEPcuR0JixJKILXzRgTNidp5ywLT09OnTp2SK4eGhoaHh8VynM6XdPUh7tyO
hEUJt6s32Djf0NAgJroQxWKRypOWcuvq6mpVVZX8SFeX7e3t6lqHh4d0HUpK
Hzt2bGtrqyQZgWxmwIXyGXRYiH8htlNw1IQRALXzdgV6e3vN82c6OjpmZmbE
MpxP20KcpyAU5xX2Crw6/+kzdIlKYxg51BfA+UQuJM95ywLUjZvnz4yOjg4O
DoplOJ/ChUo5XygUar9EzLltbW1dXFwUZezusctfIcl77OpaAirzhz/8wbwm
9J9+m6/6QQyUHO1KHXyXIq2srJQ4n8lkDBf2WhbI5/PXrl2TZWhXc3NzJRHh
fPLQy3m6eKwtg7pxR3t9O9/f33/lyhUfqboHzsdPufbx5xC185YFpqamTp8+
LVcODQ2NjIyURITziYSV8/v7+5tfIu4rXrhw4fbt26IMjXCam5vN1cU8dvkG
DLoQ6Ovrs6v1u9/9TrpNl6KNjY0PHz60TCZ0rn8mop2XBEpzFB99SBSnxqVI
/py3KzA+Pt7T0yP3XF1d/eLFCzif+Ch6OW98/mVoCdSNW9prruXeeTLcPG2g
t7f3N7/5jb9UfcDWE85RYtPeaxQ1UTtvWeDx48cNDQ1yHnsul7t79y6c1y5K
Up2fnp5ub29/+fLl9vZ2d3e3mNZFts/Ozorn+wMDA5cuXSoWi6urq01NTWJA
YllreXm5rq7u6dOnJD9dura1te3t7XlKxh9HTDOocU0aFuVHks+xDSiSo/OW
BTY2NmpraxcXFw8ODkZHR7u6ugw4nywS7LylvcTS0tLa2prhxfn379/TkObH
H3/8+PHj3Nyc+ZZOKKnaYb7ryOe86I6l80wOb9TOWxagsTp142NjY7SSvhGo
e6cvBTifJLR2nvwkOVtbW+vr6+VreHd3d6niysoKLe/s7OTzedK1ublZvo/d
shbx008/Ubd/7Nix7777ruR32W6SCQKTA54M+AhsSUCRHJ230/vBgwfZbJY6
+XPnzsmX98L5ZJBs5w0bezs7O8VtIk/O/+lPf6LhDa3s6OgoFAqhp6qA8znS
DuZTL6J23q7A+vp6LpejsTptknrD+WSQeOdDJPhvSeywewgS+nlJ2JMjw+YQ
hXjcQp8hEJ1FUQDnGUaB85ESabZw3keU659/N1q+KdyhC5yPaOd2zoerPZz3
FyisXRn8nI86GTfPj9heW1UEzhebClhZrSaGVOG8J+B81MB5bsD5qInTebtT
qeMpjhQdDwgr52MbsavL+KilO4q/cR3bzspqNbH15J4KaHrePZGwrzY4bwbO
WwLnKwVP593U0h04Hx2Vem+G+sRZnnE7DTg/OfKqLudfbathZbUajZy3qwXn
vQLno9s5nDeUd2AsozBvjh1wXuDbebsCcD4sku18nMkEvPJSdO+e1qvD+bgG
VAdK0sWmAlZWq4k51YAPU8JyO3QV4TyctwPOBwzEFjhvRxTO+1sfMBOXgXzk
pimsnOc2r17izy6Xe/A3Ykd3bQdbiyxhm21w542wLYXzdrC1yBK22cJ5jWBr
kSWcs62U8+H+OTjlmAS4WVTBf00mrMs9Hz9ADre7VuC1CmYIxEBlnfeqhGUV
O+cNXx0snPcHnBdwdj7EKgp8OI8ZAlED511WUURRAOcrAp9kQrnZEl0Odps4
pM0BPiI5widVDvKEfk8mPfARyRFWqXKQB877g5VIalilykEe3Ej3ByuR+CRT
3lVGN54J9wYLMDiJ5AifVOG81vARyRFWqVbcefUmoICVSGpYpVruW3TOY/gd
LqxEquAMAUcs3QvlyZEPNH2gYxcl2U+O1MB5l8B5NXBeEKfzdg86gyRQEiWs
XamjaPrHBecFwQ+spfMlK+G8v0Dh7pCV89zm1QMd0csivbIFPNHLIr2yBTzR
yyK9sgU84WYRq2SAvmgkkkapAs5oJJJGqQLOaCSSRqkCzrASifMMAfeBEMVr
lGQ/OVID59MZBc5HRMI8iSeKps2B8wJNT19lo2jaHFbOs0oG6ItGImmUKuCM
RiJplCrgjEYiaZQq4AwrkVglA/RFI5E0ShVwRiORNEoVcEYjkTRKFXCGlUjR
zavX9yFIGqKEG4jbrzPUwPl0RoHzEe08YZ7EE0XH5sB5iY6nr+JRdGwON+ej
Sya2ZsYTCFHi32dERJqqvmcw2VGiCATnY9g5orAKBOdj2Hkio8QWKNnOY8SO
KGz3GRHoyVMYJYpAcD6GnSMKq0BwPoadJzJKbIGS7XxJMna5KXJWVLF7POFv
b4mpUvEEojg1rKxWE53zdFQrfmZjqFLxBJicmuQ5r9jEtkrFE2DSA8dTBc6H
XqXiCejbA8dThZXzRwEIiUq77JZKHyeQHCrtslsqfZxAcqi0y26p9HECyaHS
LgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABI
Hevr62fPnq2urs5ms0tLS+UF5ufnM5kMFTh//vzm5qZ5U7FY/Oabb2ZmZhyj
7O7u9vX11dXVNTU1TUxMuEyDwl26dKm+vp5qff/99/v7+5Y7V2QoGBsba2xs
pOiDg4MHBwcua7nJ0DGNlZWVzs7O2tratra2H374wTGKvwMl6enpoTY6Rkk5
jqcylIPseCotC5CfpDqtIe1JfjszHe21LADnU0tsB9mys1Wn4dJ5fzY61nKT
oWMaLr+qzPg4UJLbt2+3t7c7hgDxHGR1FLsC1DdSD0n9JPWW1Gda7tnfV1Xo
zlsWgPPxc3h4SF3c+Pg4Hb179+7RwadBuLnAq1evyKhCobC3tzc8PEw9oXnr
wMBAVVWVmxE7naDLly/Tzp89e0an49GjR27SOH36NJlAod+8edPV1fUv//Iv
5XtWZ0hQenSiqdjW1taZM2du3rzpplYoB+r9+/ekHyVA1Z8+fUq1FhYWojhQ
gunpaTodGL2ocTyVYR1k9am0K0CSk6Vv376l7uuf/umf6E+gfM+O9loWgPNp
Jp6DbNnZOqbhxnl/NjrWCutAufmqCn6gBGtra9RSjF4ciecgO0axLEC94vHj
x3/++WcyampqivpM6jlLKvr7qgrdebsCcD5+njx5Qif006dP4mN3d/fk5KS5
AJ13OoZima6h6KptY2NDfJydnc3lcnSmHEfspFBNTQ2dBfHx+vXr/f39jmmQ
bz09PVLjO3fuWI4xFBkKLl68eOvWLbG8vLzc0tLiplYJ/g4UNfnKlSuyDDWn
3FIz/g6UWKYLXrpgp2sojF7UOJ7KUA6y46m0K3D16lV5V+TPf/7zV199JTOR
ONprWQDOp5bYDrJlZ+uYhhvn/dnoWKuESL+qzPg7UMTHjx87Ozt//etfY/Ti
SDwHWR3FrgCNmsy3kRsaGsrHyf6+qkJ33rIAnK8I09PTp06dkh+HhoaGh4fN
BfL5PHWn8iNdu92/f58W3r59S904deZU3XHETldVR48elQ9N6Lrv5MmTntIg
vvvuO8uLOLsMJSdOnJB3+d69e0eZfPjwwbFWCb4PlGRnZ6exsVF9v9H3gaI/
z7Nnz1JEygGjFzWOpzKUg+x4Kh0LGJ8HIZb3Gx1lsywA51NLbAfZsrN1n4Zh
77w/G918s5iJ9KvKjO8Dde3aNYpIdTF6cSSeg6yO4qYAjbHpArNkpeH3qyp0
59382cL5eCi5MhodHS3plnt7e823yDo6OsT4nE4QiUELbkbsq6urVVVV8uP8
/HzJkVenQd8aIyMj2WyWBgDlO7fLUGK+ei0Wi2TF69evHWuV4PtAybh0qVty
6VqO7wNFX3MDAwPG57tVGL2ocTyVoRxkx1PpWGB2dra+vv7nn38u37mjvZYF
4Hxqie0gW3a27tNQOO/PRsdaJUT6VWXG34H64x//+O2339KoBqMXN8RzkNVR
HAusra01NzffvXu3fM/+vqpCd15dAM5HxIULF2q/5KeffpqamjLf0KDLMTr4
5lr5fJ4ucOTHTCYzNzdHSvz93/+9WFMyYqc+syQK2SKunuQPDcqv0RRp7O3t
UVd85syZ8lleigzNBVpbWxcXF8Wy+R67ulYJ/g6UWKbmk3Lff//94eGhIoTx
y2Wm1wP17Nmzv/mbvxFz1TB6MePPea8H2Z/z6gL/+q//St7+27/9m2W7HO21
LADn00CIPbDiIK+srJREobNv2HS2slYQ5/3Z6FirhEi/qsz4OFB0IqhR4vik
bfSixtJ5I+yD7M95dQFa39jYKG5+luPvqyp05xUF4Hx00CHa/JLd3d3Hjx/T
hY+c8pTL5Uqu9cbHx3t6esSymBz44sWLjo6OmpqaY5/56quvaPmf//mfRRk6
BSVR6FSKGUrPnz8XZa5fv97X12eOYpfG9vZ2Z2fnP/7jP1r+/lqRobkADdtu
374tlumPjq5n3dQqwd+BouWnT59SRDdvzDB+mcrl9UDR3+PXX38tTsfXn/m7
v/s7N+ESjz/nvR5kf87bFaC49HVD2r9588auXY72WhaA82kgxB5YcZDpdJdE
EbfLLDtbSRDn/dnoWKuESL+qzPg4UPPz81VVVeJ00HBRLP/7v/+7m3DJxtJ5
I+yD7M95RYHJycmWlhYyyq5d/r6qQnfergCcjx86rW1tbWNjY3TMZ2dn6+rq
tra2jM8//xGvG9rY2KADRVdGVGB0dLSrq4tWUr8qpaXR+8TEhOMV1sDAwKVL
l+iKaXV1tamp6eHDh8bnARUFtUtDTKH8h3/4h9e/IHIrwTJDYmlpaW1tzfg8
14suzV6+fEmCdXd3i7mOdrW8HigZxXKHb9++PX78OB0f2QTHJ0eWB0qeDss0
qF3ydNAFtThi6ihpxtH5sA6y2nm7AteuXfvbv/1bGmxIZ8p/hefovGWBsJxX
dw5hOa/uHOC8V+I5yJadLX0X0z6FPL6d92ejXa1wD5TLryrHA6XuHPb29uTp
+Omnn7755htacHyGlWbiOciOzlsWWFhYIF1JXelM+dsR/X1Vhe68ZYGwnFd3
DnC+nPX1dboKo9OazWYLhYJY+etf/5pWiuUHDx7QJrLr3Llzm2VvynUzj934
/Bu0fD5Pl350YSV/Ik17Pnr0qF0ajx49Ovol5b93UGRIV390mWZ8tprsbW1t
ra+vN78FVN0ulwdKRrHc4Y0bN0qaoH4+ZXegzKfDMg0JZgi4wdH5UA6yo/Pl
BUjOr7/+usSZ8l8kGU7O2xUIxXl15xCW8+rOwQycd0M8B9mys93d3aUoYowR
xHl/X1XqdoVyoNx/VakPlLpzMJO2GQL+iOcgOzpvWYAULXHGco6iv6+q0J0v
LxCW8+rOwQycBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAgMTzfwCGE8nv
    "], {{0, 164.25}, {748.5, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{748.5, 164.25},
  PlotRange->{{0, 748.5}, {0, 164.25}}]], "Output",
 CellLabel->
  "Out[109]=",ExpressionUUID->"95db4c64-2cc7-4b99-88c1-01b3ca7d52f8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Sequential", " ", "execution"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"NDSOLVE", "[", "INITIAL", "]"}], ",", "100"}], "]"}], " ", 
     ";"}], " ", "//", " ", "RepeatedTiming"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"COMPILE", "[", "INITIAL", "]"}], ",", "100"}], "]"}], " ", 
     ";"}], " ", "//", " ", "RepeatedTiming"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"FORTRAN$ADAPTIVE", "[", "INITIAL", "]"}], ",", "100"}], "]"}],
      " ", ";"}], " ", "//", " ", "RepeatedTiming"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"FORTRAN$NORMAL", "[", "INITIAL", "]"}], ",", "100"}], "]"}], 
     " ", ";"}], " ", "//", " ", "RepeatedTiming"}]}]}]], "Code",
 CellLabel->
  "In[110]:=",ExpressionUUID->"36df1f02-b9a2-40c8-8ccf-d01cd695fb8d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4.658716499999999705`4.", ",", "Null"}], "}"}]], "Output",
 CellLabel->
  "Out[110]=",ExpressionUUID->"bfaef45f-6b87-406e-bc00-e4945b009208"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0241290999999999936`4.", ",", "Null"}], "}"}]], "Output",
 CellLabel->
  "Out[111]=",ExpressionUUID->"60b84afd-dcff-41a9-8225-1a9452e3372d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.001170940898345154`4.", ",", "Null"}], "}"}]], "Output",
 CellLabel->
  "Out[112]=",ExpressionUUID->"603da4d1-1972-4987-9e3d-94023274f994"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.002454630000000001`4.", ",", "Null"}], "}"}]], "Output",
 CellLabel->
  "Out[113]=",ExpressionUUID->"c93ca92c-d4a7-4125-9f89-6edb5e91fb6b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Parallel", " ", "execution"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{"INITIAL", ",", "100"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"ParallelMap", "[", 
      RowBox[{"NDSOLVE", ",", "DATA"}], "]"}], " ", ";"}], " ", "//", " ", 
    "RepeatedTiming"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"COMPILE", "[", "DATA", "]"}], " ", ";"}], " ", "//", " ", 
    "RepeatedTiming"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"FORTRAN$ADAPTIVE", "[", "DATA", "]"}], " ", ";"}], " ", "//", 
    " ", "RepeatedTiming"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"FORTRAN$NORMAL", "[", "DATA", "]"}], " ", ";"}], " ", "//", " ",
     "RepeatedTiming"}]}]}]], "Code",
 CellLabel->
  "In[114]:=",ExpressionUUID->"2dc99e48-b474-454b-87cc-6c1c07faad58"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.8721959999999999713`2.", ",", "Null"}], "}"}]], "Output",
 CellLabel->
  "Out[115]=",ExpressionUUID->"d4c69f0a-0d40-42fe-9d93-b56b1eca040d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.004373471153846154`1.", ",", "Null"}], "}"}]], "Output",
 CellLabel->
  "Out[116]=",ExpressionUUID->"c313f79c-7c8c-45c8-bcd9-3f554512301d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0002557040169133193`2.", ",", "Null"}], "}"}]], "Output",
 CellLabel->
  "Out[117]=",ExpressionUUID->"2da0a607-ce8c-46b4-a963-6a3d2c382ac5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0005413478260869565`2.", ",", "Null"}], "}"}]], "Output",
 CellLabel->
  "Out[118]=",ExpressionUUID->"62801899-0202-4ac3-8561-a477eb619f66"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Clean", " ", "*)"}], "\n", 
  RowBox[{
  "Run", "[", "\"\<rm -f *.f90 *.mod *.o *.so *.cc\>\"", "]"}]}]], "Code",
 CellLabel->
  "In[120]:=",ExpressionUUID->"856438f8-552a-4cd4-8907-4f0c83b95a27"],

Cell[BoxData["0"], "Output",
 CellLabel->
  "Out[120]=",ExpressionUUID->"be4be298-1ec9-4b73-9076-a2278600ac2f"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-18:  (FORTRAN) FODO ring chromatic optics ", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"2c2e247e-0940-4d02-a120-047a3faa6b45"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[1]:=",ExpressionUUID->"d14046aa-c524-4d67-a83c-cd27973b7e17"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", 
   RowBox[{"\"\<PROJECT\>\"", ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "1", ",", "1", ",", "1", ",", 
    RowBox[{"List", "[", "1", "]"}]}], "]"}]}]], "Code",
 CellLabel->"In[2]:=",ExpressionUUID->"0e9397ab-f578-450a-92ac-8c9f6dcca00b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "2", ",", "1", ",", "1", ",", "1", ",", 
   RowBox[{"{", "1", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"3a85fb01-3ea1-406d-b527-aef863390218"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "global", " ", "parameters"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"RAD", " ", "=", " ", "22.918"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KBM", " ", "=", " ", "0.015"}], "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KQF", " ", "=", " ", "0.19"}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KQD", " ", "=", " ", 
     RowBox[{"-", "0.21"}]}], "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GSF", " ", "=", "  ", "0.0"}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GSD", " ", "=", "  ", "0.0"}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GBM", " ", "=", "  ", "0.0"}], "   ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "Hamiltonian", " ", "functions"}], " ", "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"H$DRIF", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "2"}], "*", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"P1", "^", "2"}], "+", 
         RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"1", "+", "K1"}], ")"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"H$QUAD", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Q1", "^", "2"}], "-", 
        RowBox[{"Q2", "^", "2"}]}], ")"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"H$SEXT", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "6"}], "*", "KS", "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Q1", "^", "3"}], "-", 
        RowBox[{"3", "*", "Q1", "*", 
         RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"H$BEND", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", 
       RowBox[{
        RowBox[{"Q1", "^", "2"}], "/", 
        RowBox[{"R", "^", "2"}]}]}], "-", 
      RowBox[{
       RowBox[{"1", "/", "R"}], "*", "Q1", "*", "K1"}], "+", 
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Q1", "^", "2"}], "-", 
         RowBox[{"Q2", "^", "2"}]}], ")"}]}], "+", 
      RowBox[{
       RowBox[{"1", "/", "6"}], "*", "KS", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Q1", "^", "3"}], "-", 
         RowBox[{"3", "*", "Q1", "*", 
          RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}]}], " ", ";"}]}]}]], "Code",
 CellLabel->"In[3]:=",ExpressionUUID->"e835b9a3-78d9-4f9b-a750-b8bf95b0b72a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "tables"}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "H$DRIF", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", "H$QUAD", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "H$SEXT", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", "H$BEND", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", "0"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<BEND\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<ELEMENT\>\"", "]"}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"{", "}"}], "}"}], "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", "\"\<QUAD\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KQ", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "\"\<SEXT\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KS", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", "\"\<BEND\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}]}], "}"}], "}"}]}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   
   RowBox[{"(*", " ", 
    RowBox[{"Generate", " ", "code"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$CODE", "[", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<LEVEL\>\"", ",", 
       RowBox[{"Plus", "[", "1", "]"}]}], "]"}], "]"}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->"In[14]:=",ExpressionUUID->"9233cd3a-450f-4deb-b196-ce6162c1e46d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"FORTRAN", " ", 
    RowBox[{"(", "NORMAL", ")"}]}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$MAP", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}], "]"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$SEQUENCE", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<SEQUENCE\>\"", "]"}], "]"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$ELEMENT", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<ELEMENT\>\"", "]"}], "]"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Create", " ", "FORTRAN", " ", "lattice"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"LATTICE", " ", "=", " ", 
     RowBox[{"I$FORTRAN$LATTICE", "[", "\n", "\t", 
      RowBox[{"\"\<FODO\>\"", ",", "\n", "\t", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{"(*", " ", "QF", " ", "*)"}], "   ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQF", "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLD\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSF", "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLD\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLB\>\"", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLD\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSD", "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLD\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQD", "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQD", "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLD\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSD", "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLD\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLB\>\"", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLD\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSF", "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLD\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQF", "]"}], ",", 
           RowBox[{"List", "[", "1", "]"}]}], "}"}]}], "\n", "\t", "}"}], ",",
        "\n", "\t", 
       RowBox[{"\"\<DEFINITIONS\>\"", " ", "\[Rule]", " ", 
        RowBox[{
         RowBox[{
         "StringTemplate", "[", 
          "\"\< INTEGER :: I\\n REAL(RK), PARAMETER :: DLS = `1`\\n REAL(RK), \
PARAMETER :: DLQ = `2`\\n REAL(RK), PARAMETER :: DLB = `3`\\n REAL(RK), \
PARAMETER :: DLD = `4`\\n\>\"", "]"}], "[", "\n", "\t\t", 
         RowBox[{
          RowBox[{"I$FORTRAN$REAL", "[", "0.01", "]"}], ",", "\n", "\t\t", 
          RowBox[{"I$FORTRAN$REAL", "[", "0.01", "]"}], ",", "\n", "\t\t", 
          RowBox[{"I$FORTRAN$REAL", "[", "0.01", "]"}], ",", "\n", "\t\t", 
          RowBox[{"I$FORTRAN$REAL", "[", "0.01", "]"}]}], "\n", "\t", 
         "]"}]}]}], "\n", "]"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compile", " ", "lattice"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"List", "[", 
       RowBox[{"LATTICE", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
    ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Create", " ", "library"}], " ", "*)"}], "\n", 
   RowBox[{"I$FORTRAN$LIBRARY", "[", "LATTICE", "]"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Load", " ", "library"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "LIBRARY", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"LIBRARY", " ", "=", " ", 
     RowBox[{"I$FORTRAN$LOAD", "[", 
      RowBox[{"\"\<fodo_lat\>\"", ",", "LIBRARY"}], "]"}]}], " ", ";"}], "\n",
    "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compile", " ", "wrapper"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "MAP", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MAP", " ", "=", " ", 
     RowBox[{"With", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"FUNCTION", " ", "=", " ", "LIBRARY"}], "}"}], ",", "\n", 
       "\t", 
       RowBox[{"Compile", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"STATE", ",", "_Real", ",", "1"}], "}"}], "}"}], ",", "\n",
          "\t\t", 
         RowBox[{"FUNCTION", "[", "STATE", "]"}], ",", "\n", "\t\t", 
         RowBox[{"RuntimeAttributes", " ", "\[Rule]", " ", 
          RowBox[{"{", "Listable", "}"}]}], ",", "\n", "\t\t", 
         RowBox[{"Parallelization", " ", "\[Rule]", " ", "True"}]}], "\t\t", 
        "\n", "\t", "]"}]}], "\n", "]"}]}], " ", ";"}]}]}]], "Code",
 CellLabel->"In[42]:=",ExpressionUUID->"33717e0a-3866-4ffe-8012-25a7556348d3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Compute", " ", "parameter", " ", "dependent", " ", "transverse", " ", 
    "closed", " ", "orbit"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ORBIT", " ", "=", " ", 
     RowBox[{"I$ORBIT", "[", 
      RowBox[{"I$ORDER", ",", "MAP"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"ORBIT", " ", "//", " ", "Chop"}], " ", "//", " ", 
    "N"}]}]}]], "Code",
 CellLabel->"In[55]:=",ExpressionUUID->"4f0ccb28-3b33-4a07-b470-743842d8116c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1.8162752634670918`", " ", "K1"}], ",", "0.`", ",", "0.`", ",", 
   "0.`"}], "}"}]], "Output",
 CellLabel->"Out[56]=",ExpressionUUID->"a404f549-f509-46b9-8fd4-7ba38291437a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Test", " ", "closed", " ", "orbit"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$MAKE$COMPONENTS", "[", 
     RowBox[{"MAP", "[", 
      RowBox[{"I$MAKE$STATE", "[", "ORBIT", "]"}], "]"}], "]"}], " ", "//", 
    " ", "Chop"}], " ", "//", " ", "N"}]}]], "Code",
 CellLabel->"In[57]:=",ExpressionUUID->"03eade4a-51df-4b6a-b7fc-1d893a77fd11"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1.8162752634671158`", " ", "K1"}], ",", "0.`", ",", "0.`", ",", 
   "0.`"}], "}"}]], "Output",
 CellLabel->"Out[57]=",ExpressionUUID->"6a17b574-10be-427f-b38b-794aca50ce09"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Compute", " ", "one", " ", "turn", " ", "matrix", " ", "on", " ", 
    "closed", " ", "orbit"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"I$MATRIX", "[", 
      RowBox[{"ORBIT", ",", "MAP"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"TableForm", "[", 
    RowBox[{"Take", "[", 
     RowBox[{
      RowBox[{"Collect", "[", 
       RowBox[{"MATRIX", ",", "K1"}], "]"}], ",", 
      RowBox[{"List", "[", 
       RowBox[{"1", ",", "2"}], "]"}], ",", 
      RowBox[{"List", "[", 
       RowBox[{"1", ",", "2"}], "]"}]}], "]"}], "]"}], "\n", 
   RowBox[{"TableForm", "[", 
    RowBox[{"Take", "[", 
     RowBox[{
      RowBox[{"Collect", "[", 
       RowBox[{"MATRIX", ",", "K1"}], "]"}], ",", 
      RowBox[{"List", "[", 
       RowBox[{"3", ",", "4"}], "]"}], ",", 
      RowBox[{"List", "[", 
       RowBox[{"3", ",", "4"}], "]"}]}], "]"}], "]"}]}]}]], "Code",
 CellLabel->"In[58]:=",ExpressionUUID->"33422b2e-06f5-4df7-b3a0-ed8a39d437ba"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{
      RowBox[{"-", "0.017464970155741593`"}], "+", 
      RowBox[{"1.4719719623127065`", " ", "K1"}]}], 
     RowBox[{"15.529162220919336`", "\[VeryThinSpace]", "-", 
      RowBox[{"18.307897099345347`", " ", "K1"}]}]},
    {
     RowBox[{
      RowBox[{"-", "0.0643753320749508`"}], "-", 
      RowBox[{"0.07920535767803402`", " ", "K1"}]}], 
     RowBox[{
      RowBox[{"-", "0.017464970155749437`"}], "+", 
      RowBox[{"1.4719719623127263`", " ", "K1"}]}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[59]//TableForm=",ExpressionUUID->"709647c0-4663-4867-b10b-\
65ee05297bc5"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"0.7293707114826427`", "\[VeryThinSpace]", "+", 
      RowBox[{"1.038568530072761`", " ", "K1"}]}], 
     RowBox[{"6.558056974134911`", "\[VeryThinSpace]", "-", 
      RowBox[{"0.25958416044995936`", " ", "K1"}]}]},
    {
     RowBox[{
      RowBox[{"-", "0.07136540092243723`"}], "+", 
      RowBox[{"0.22818917457164622`", " ", "K1"}]}], 
     RowBox[{"0.7293707114826293`", "\[VeryThinSpace]", "+", 
      RowBox[{"1.0385685300727676`", " ", "K1"}]}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[60]//TableForm=",ExpressionUUID->"438f089d-cf7f-48c1-9d6b-\
b878673e7073"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compute", " ", "parameter", " ", "dependent", " ", "tunes"}], " ",
    "*)"}], "\n", 
  RowBox[{
   RowBox[{"QX", " ", "=", " ", 
    RowBox[{
     RowBox[{"Collect", "[", 
      RowBox[{
       RowBox[{"I$EXPAND", "[", 
        RowBox[{"Divide", "[", 
         RowBox[{
          RowBox[{"ArcCos", "[", 
           RowBox[{"Divide", "[", 
            RowBox[{
             RowBox[{"Tr", "[", 
              RowBox[{"Take", "[", 
               RowBox[{"MATRIX", ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1", ",", "2"}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1", ",", "2"}], "]"}]}], "]"}], "]"}], ",", "2"}], 
            "]"}], "]"}], ",", 
          RowBox[{"Times", "[", 
           RowBox[{"2", ",", "Pi"}], "]"}]}], "]"}], "]"}], ",", "K1", ",", 
       "Expand"}], "]"}], " ", "//", " ", "N"}]}], "\n", 
   RowBox[{"QY", " ", "=", " ", 
    RowBox[{
     RowBox[{"Collect", "[", 
      RowBox[{
       RowBox[{"I$EXPAND", "[", 
        RowBox[{"Divide", "[", 
         RowBox[{
          RowBox[{"ArcCos", "[", 
           RowBox[{"Divide", "[", 
            RowBox[{
             RowBox[{"Tr", "[", 
              RowBox[{"Take", "[", 
               RowBox[{"MATRIX", ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3", ",", "4"}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3", ",", "4"}], "]"}]}], "]"}], "]"}], ",", "2"}], 
            "]"}], "]"}], ",", 
          RowBox[{"Times", "[", 
           RowBox[{"2", ",", "Pi"}], "]"}]}], "]"}], "]"}], ",", "K1", ",", 
       "Expand"}], "]"}], " ", "//", " ", "N"}]}]}]}]], "Code",
 CellLabel->"In[61]:=",ExpressionUUID->"7352b41d-0cc3-4261-aa67-665832482ea6"],

Cell[BoxData[
 RowBox[{"0.25277977766048576`", "\[VeryThinSpace]", "-", 
  RowBox[{"0.23430735144148876`", " ", "K1"}]}]], "Output",
 CellLabel->"Out[61]=",ExpressionUUID->"bfff9601-40a2-49b8-a593-11a24d5b869b"],

Cell[BoxData[
 RowBox[{"0.11990648752265898`", "\[VeryThinSpace]", "-", 
  RowBox[{"0.2416149721961451`", " ", "K1"}]}]], "Output",
 CellLabel->"Out[62]=",ExpressionUUID->"3757d61b-5b8b-4115-a4d3-2d1281b61de7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Uncomment", " ", "step", " ", "IO", " ", "in", " ", "all", " ", 
    "elements"}], " ", "*)"}], "\n", 
  RowBox[{
  "Run", "[", "\"\<sed -i 's/ !IO_STEP//g' *_ele.f90\>\"", "]"}]}]], "Code",
 CellLabel->"In[63]:=",ExpressionUUID->"71190b83-d869-4c38-8cd6-ce4b28ff1b85"],

Cell[BoxData["0"], "Output",
 CellLabel->"Out[63]=",ExpressionUUID->"ffb19594-d050-458b-8ae7-20e383de8ead"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Re", "-", 
    RowBox[{"compile", " ", "Elements"}]}], " ", "*)"}], "\n", 
  RowBox[{"Map", "[", 
   RowBox[{"Run", ",", 
    RowBox[{"Through", "[", 
     RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " "}]], "Code",\

 CellLabel->"In[64]:=",ExpressionUUID->"e317fefb-35a8-434a-a0e3-8a7e8db3b897"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]], "Output",
 CellLabel->"Out[64]=",ExpressionUUID->"bc9f41c0-6afe-4233-a386-e7c3eee20199"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "initial", " ", "condition"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"INITIAL", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"I$MAKE$STATE", "[", 
       RowBox[{
        RowBox[{"List", "[", "0.0", "]"}], ",", 
        RowBox[{"ORBIT", " ", "+", " ", "I$VARIABLES$CANONICAL"}]}], "]"}], 
      " ", "//", " ", "Chop"}], " ", "//", " ", "N"}]}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Create", " ", "FORTRAN", " ", "program"}], " ", "*)"}], "\n", 
   RowBox[{"PROGRAM", " ", "=", " ", 
    RowBox[{"I$FORTRAN$PROGRAM", "[", "\n", "\t", 
     RowBox[{"\"\<optics\>\"", ",", "    ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", 
         RowBox[{"(", "incomplete", ")"}]}], " ", "program", " ", "name", " ", 
        RowBox[{"(", "string", ")"}]}], " ", "*)"}], "\n", "\t", "LATTICE", 
      ",", "     ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"--", " ", "lattice"}], " ", "to", " ", "use", " ", 
        RowBox[{"(", "association", ")"}]}], " ", "*)"}], "\n", "\t", 
      "INITIAL"}], "         ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"--", " ", "initial"}], " ", "state"}], ",", " ", 
       RowBox[{
       "\"\<Null\>\"", " ", "corresponds", " ", "to", " ", "command", " ", 
        "line", " ", "input", " ", "or", " ", 
        RowBox[{"I$MAKE$INITIAL", "[", "]"}], " ", "output", " ", "can", " ", 
        "be", " ", "used"}]}], " ", "*)"}], "\n", "]"}]}]}]}]], "Code",
 CellLabel->"In[65]:=",ExpressionUUID->"862f7b88-b769-45c1-909f-e01776c7f550"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "1.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "1.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "1.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "1.`", ",", "1.8162752634670918`", ",",
    "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
   "0.`"}], "}"}]], "Output",
 CellLabel->"Out[65]=",ExpressionUUID->"0fa5bb3a-c2d5-4be8-be8f-31abafb3cce1"],

Cell[BoxData["\<\"gfortran-10 -c -std=f2018 -Wall -pedantic -fPIC -O3 \
-ffast-math -frecursive -march=native -Wno-unused-dummy-argument \
-Wno-unused-variable -Wno-unused-function -Wno-unused-value optics.f90 && \
gfortran-10 -o optics -std=f2018 -Wall -pedantic -fPIC -O3 -ffast-math \
-frecursive -march=native -Wno-unused-dummy-argument -Wno-unused-variable \
-Wno-unused-function -Wno-unused-value drif_map.o quad_map.o sext_map.o \
bend_map.o quad_seq.o drif_seq.o sext_seq.o bend_seq.o quad_ele.o drif_ele.o \
sext_ele.o bend_ele.o optics.o \"\>"], "Output",
 CellLabel->"Out[66]=",ExpressionUUID->"ae4944da-9ea5-42c4-aa1d-8946a5efdc38"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Compile", " ", "*)"}], "\n", 
  RowBox[{"Run", "[", "PROGRAM", "]"}]}]], "Code",
 CellLabel->"In[67]:=",ExpressionUUID->"3f7540e3-549a-4f03-9ec4-a197d94810dc"],

Cell[BoxData["0"], "Output",
 CellLabel->"Out[67]=",ExpressionUUID->"664badc1-d0e3-4b9f-acd0-7464264e1a3d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Execute", " ", "*)"}], "\n", 
  RowBox[{"Run", "[", "\"\<./optics > output\>\"", "]"}]}]], "Code",
 CellLabel->"In[68]:=",ExpressionUUID->"a3ced474-26a9-4421-9461-77e3da00976c"],

Cell[BoxData["0"], "Output",
 CellLabel->"Out[68]=",ExpressionUUID->"07c2aed7-26fa-4714-8c1b-65a72e64020e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "optics", " ", "data"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"DATA", " ", "=", " ", 
    RowBox[{"Import", "[", 
     RowBox[{"\"\<output\>\"", ",", "\"\<Table\>\""}], "]"}]}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[69]:=",ExpressionUUID->"766aab75-816a-473a-bc59-2ba0a552acab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Beta", " ", "functions"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "positions"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"POSITION", " ", "=", " ", 
     RowBox[{"Range", "[", 
      RowBox[{"0.01", ",", "12.", ",", "0.01"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Convert", " ", "state", " ", "to", " ", "components"}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"LOCAL", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$MAKE$COMPONENTS", ",", "DATA"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Remove", " ", "parameters"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"LOCAL", " ", "=", " ", 
     RowBox[{"ReplaceAll", "[", 
      RowBox[{"LOCAL", ",", 
       RowBox[{"Thread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"I$VARIABLES$PARAMETRIC", ",", "0"}], "]"}], "]"}]}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compute", " ", "matrices"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"LOCAL", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"D", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "I$VARIABLES$CANONICAL", "]"}]}], "]"}], "]"}],
        ",", "LOCAL"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"LOCAL", " ", "=", " ", 
     RowBox[{"ReplaceAll", "[", 
      RowBox[{"LOCAL", ",", 
       RowBox[{"Thread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"I$VARIABLES$CANONICAL", ",", "0"}], "]"}], "]"}]}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compute", " ", "tunes"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"NUX", " ", "=", " ", 
     RowBox[{"Chop", "[", 
      RowBox[{"N", "[", 
       RowBox[{"Divide", "[", 
        RowBox[{
         RowBox[{"ArcCos", "[", 
          RowBox[{"Divide", "[", 
           RowBox[{
            RowBox[{"Tr", "[", 
             RowBox[{"Take", "[", 
              RowBox[{
               RowBox[{"Last", "[", "LOCAL", "]"}], ",", 
               RowBox[{"List", "[", 
                RowBox[{"1", ",", "2"}], "]"}], ",", 
               RowBox[{"List", "[", 
                RowBox[{"1", ",", "2"}], "]"}]}], "]"}], "]"}], ",", "2"}], 
           "]"}], "]"}], ",", 
         RowBox[{"Times", "[", 
          RowBox[{"2", ",", "Pi"}], "]"}]}], "]"}], "]"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"NUY", " ", "=", " ", 
     RowBox[{"Chop", "[", 
      RowBox[{"N", "[", 
       RowBox[{"Divide", "[", 
        RowBox[{
         RowBox[{"ArcCos", "[", 
          RowBox[{"Divide", "[", 
           RowBox[{
            RowBox[{"Tr", "[", 
             RowBox[{"Take", "[", 
              RowBox[{
               RowBox[{"Last", "[", "LOCAL", "]"}], ",", 
               RowBox[{"List", "[", 
                RowBox[{"3", ",", "4"}], "]"}], ",", 
               RowBox[{"List", "[", 
                RowBox[{"3", ",", "4"}], "]"}]}], "]"}], "]"}], ",", "2"}], 
           "]"}], "]"}], ",", 
         RowBox[{"Times", "[", 
          RowBox[{"2", ",", "Pi"}], "]"}]}], "]"}], "]"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Set", " ", "one", " ", "turn", " ", "matrix"}], " ", "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"TURN", " ", "=", " ", 
     RowBox[{"Last", "[", "LOCAL", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Compute", " ", "position", " ", "dependent", " ", "one", " ", "turn", 
     " ", "matrices"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"Inverse", ",", "LOCAL"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"List", "[", 
      RowBox[{"LOCAL", ",", 
       RowBox[{"ConstantArray", "[", 
        RowBox[{"TURN", ",", 
         RowBox[{"Length", "[", "MATRIX", "]"}]}], "]"}], ",", "MATRIX"}], 
      "]"}]}], " ", ";"}], " ", "\n", 
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"Transpose", "[", "MATRIX", "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Apply", "[", "Dot", "]"}], ",", "MATRIX"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Compute", " ", "beta", " ", "functions", " ", "from", " ", "matrices"}], 
    " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"BETAX", " ", "=", " ", 
     RowBox[{
      RowBox[{"Divide", "[", 
       RowBox[{
        RowBox[{"Part", "[", 
         RowBox[{"MATRIX", ",", "All", ",", "1", ",", "2"}], "]"}], ",", 
        RowBox[{"Sin", "[", 
         RowBox[{"2", "*", "Pi", "*", "NUX"}], "]"}]}], "]"}], " ", "//", " ",
       "Abs"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BETAY", " ", "=", " ", 
     RowBox[{
      RowBox[{"Divide", "[", 
       RowBox[{
        RowBox[{"Part", "[", 
         RowBox[{"MATRIX", ",", "All", ",", "3", ",", "4"}], "]"}], ",", 
        RowBox[{"Sin", "[", 
         RowBox[{"2", "*", "Pi", "*", "NUY"}], "]"}]}], "]"}], " ", "//", " ",
       "Abs"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Add", " ", "positions", " ", "to", " ", "beta", " ", "functions"}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"BETAX", " ", "=", " ", 
     RowBox[{"Transpose", "[", 
      RowBox[{"List", "[", 
       RowBox[{"POSITION", ",", "BETAX"}], "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BETAY", " ", "=", " ", 
     RowBox[{"Transpose", "[", 
      RowBox[{"List", "[", 
       RowBox[{"POSITION", ",", "BETAY"}], "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Plot", " ", "beta", " ", "functions"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"ListPlot", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"List", "[", 
       RowBox[{"BETAX", ",", "BETAY"}], "]"}], ",", "\n", "\t", 
      RowBox[{"AspectRatio", " ", "\[Rule]", " ", 
       RowBox[{"1", "/", "2"}]}], ",", "\n", "\t", 
      RowBox[{"PlotTheme", " ", "\[Rule]", " ", "\"\<Detailed\>\""}], ",", 
      "\n", "\t", 
      RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
       RowBox[{"List", "[", 
        RowBox[{"Blue", ",", "Red"}], "]"}]}], ",", "\n", "\t", 
      RowBox[{"ImageSize", " ", "\[Rule]", " ", "Large"}], ",", "\n", "\t", 
      RowBox[{"ImagePadding", " ", "\[Rule]", " ", "20"}]}], "\n", "]"}], " ",
     "//", " ", "Rasterize"}], "\n", 
   RowBox[{"{", 
    RowBox[{"NUX", ",", "QX"}], "}"}], "\n", 
   RowBox[{"{", 
    RowBox[{"NUY", ",", "QY"}], "}"}]}]}]], "Code",
 CellLabel->"In[70]:=",ExpressionUUID->"580e7ef7-bbce-4898-862b-41c216b06763"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3QeYVOXVB3B6b3YFxYJGNGosSbBGjTGxRP0s+WKMSdSooAHchV0BkeKi
iEExfIGArICIQTGiBkVF1yBGEyQWEhAFCwgsovS2s2w73//uhHHm7r2zbd55
z733/3vmSYbddebMuW8589525E13XHVrsyZNmgxsg/+56sZB5w8YcOOQq7vg
Hz/rP/C23v1vufni/nm39L5lwOk3NccPC5vif5pXP5oIERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
EREREREREREREREREZFVtxIREREZYLvGSafu4Rn6IAF6WYYaoJdlqAF6WYYa
8VANvSxDtf6yrH9C87IMNUAvy1AD9LIMNeKhGnpZhmr9ZVn/hOZlGWqAXpah
mnjZuXPnRjwDDDVAL8tQrb8s6x9Kj4k1gVk1hIk1gVk1gVk1JDRlQ2g+SHAx
sSYwq4YwsSYwqyYwq4aEpmxQHl4UzJ0713YIIcSsmjC3mu0oQohZNYFZtU55
gaE8PCIiIgoi5QWG8vCIiIgoiJQXGEG5TlGIcZHWBGbVBO7/MoRZNYFZtSUo
dYXy8IiIiCiIlBcYysMjIiKiIFJeYCgPLwq4SGsCs2oC938ZwqyawKxap7zA
UB4eERERBZHyAkN5eERERBREygsM5eFFARdpTWBWTeD+L0OYVROYVeuUFxjK
wyMi+yoqZM0aeeMNefxx54En+Cd+SETkT3mBoTw8IrJgxw6ZMEFOPVXatJGm
TaVJE+8HftW6tZxyivPH+E+IiJIoLzCUhxcFXKQ1gVltiJISmTRJevRIV/Ok
qYWOOkomT3ZehOqJzdUEZtU65QWG8vCIKBu2b5ecHGe1p75lT81H27aSm+u8
IBFFm/ICIyjXqSYiI3btkqFDpV27dAs7qIsOO0xOP10uucR54An+mX7XWPv2
zsvixYkoYoJSVygPLwq4SGsCs1q7qip57TU5+GDfZZxrr5X33kv+LzzO/8If
4M/8yie8ON4Cb0RpsbmawKxap7zAUB4eERmxdav86lfeqz0nnyzz59f7BfGf
4D/0XBG6/nrn7YgoYpQXGMrDI6LMe/dd6d7do/I54wz58MNGvTL+c7xIzSro
8MOdNyWiKFFeYCgPLwq4SGsCs+qtslIeeURatHDXJyiHXnqp1v+6rtc/xEvV
rK/wpnhrBEA1sLmawKxap7zAUB4eEWXM7t3Sr5/Hss+QIc6vMv5eeNmaC0EI
IOPvRUQqKS8wlIdHRJmxdatceqm7Gjn0UFmyxOCb4sXxFq43RRg8HIgoArJZ
YHzwwQcjRoz43e9+h/99b++JG6WlpYWFhf3798/LyysqKrIYHnniIq0JzGqK
bducw3JcdchPfyobN9brZRpy/y+8Bd7I9dYIBiHRXmyuJjCr1mWtwNi0aRMq
n48++qiqqgr/26dPn63VX7JmzJgxceLEWCy2Zs0alEArV660Eh4R2bFrl/Tq
5a5ACgpkz54sBYA3wtu5AkBIvDoQUahlrcBA2bNz5874kyVLluTk5Ozatauy
srJv376ofOJ/g3p46tSpVsIjIgu+/NI5LT258GjZUp58MtvX5MHb4U1btUqJ
BIEhPCIKqSwXGFu2bOnXrx/e9G9/+5s4a88b8bysrCz+28WLFxfgi1hqeIlF
Qj6x8iR5nwKfZOoJs+r831dfbe3RI6Xk6NLln/fc0+AXxP8++OCDDY9n/vyy
9u1T4jn11PkzZ9pPlO0njcoqn/g8YVatP8ly/VNV7bPPPkMVtGzZsuLi4t69
eyd+u2TJkqFDhyb//a01iO2M8Qmf8ElmnlxwQUqxcdBBsnCh3cDeuv9+J4yk
qDZ+5zv2E8UnfMInmXjiWVFk39SpU2fOnBlf/ykvL4//0HP9x0Z0RGRSaalc
eWVK8dO5s/zrX7bDqoYwEExybAgVARNRuGStwFi6dOn9+G611+TJk5955pn4
8T9r166N/xDlWWFhoZXwyE+ieKYMinRWKyuda++4bua1eHHjX3hutca/jhMM
QkqOEAFH+NKIkW6uxjCr1mWtwNi5c2dubu7ChQsrKio++OCDRNkzffr0CRMm
xGKx4uLivLw8lElWwiOiLBk71nXMj7z5pu2YakBICCw5ToRNRCGSzQLj888/
Hz16dL9+/UaNGrV8+fL4D0tKSqZNm4bSKD8/n9f/IQq5l1+WDh2+KSpatZJZ
s2zH5AOBJZ8RhrARPBGFhfICQ3l4UcBFWhMimtUPPnCfYz5tWgZfPmP7vxIQ
XnK0CB4fIXoi2lwNY1atU15gKA+PiOpq40Y5+uhvaolmzSQnRyoqbIeVFsJD
kMm3CcNHqOdVqYlIJ+UFhvLwiKhOvv5aTjstZS3l6qttx1RnCDU58u9+1/k4
RBRwygsM5eFFARdpTYhWVsvL5ZprUkqIU04xsYqS+f1fcQjVdZFqfJy9V+2I
gmg112xhVq1TXmAoD4+IatenT0rxcOyxsveSF4GBgBF28qfAhyKiIFNeYFi/
TiMRNVxVlUyeLM2bf1M2tGsn//637bAaBGEj+MQHwYfCR8vyfcqIqNGCUlco
Dy8KuEhrQlSyOmdOyppJ69by6qvm3s3U/q8EBI+PkPyJ8AEjICrNNbuYVeuU
FxjKwyMiX4sWyf77f1MqtGgh48bZjqnR8BHwQRIfCh8QH5OIAkh5gaE8PCLy
9vHHrhuJyqBBtmPKEHwQ121b8WGJKGiUFxjKw4sCLtKaEPKs7tghxx2XUiRc
e63s3m36bY3v/4rDB8HHSf50PXs6Hzm8Qt5cLWFWrVNeYCgPj4jcUB5ceGFK
efCDH8iePbbDyih8HHyo5M+Ij2y+wCOiDFJeYCgPj4hSxGJyww0phcHhh8uX
X9oOywB8qCOOSPmk+OD4+EQUEMoLDOXhRQEXaU0IbVaHDEkpCQ45RJYty9qb
Z2n/VwI+2sEHp3xefPwwCm1ztYpZtU55gaE8PCL6xv/9n7Rs+U0x0KmTFBXZ
jskwfMCOHVNukIokEFEQKC8wlIdHRP/16qspJ4bj8cwztmPKCnzM5E+NJJi8
xhERZYryAkN5eFHARVoTwpbVRYukQ4eUayOPHZv9ayNne/9XHD4mPmzyNa6R
inBdFChszVUHZtU65QVGUK5TTRRdn30mRx2VsgbSu7ftmLIOHzk5A0ce6aSF
iPQJSl2hPDyiqFu3Tnr0SJn6r7pKSktth5V1+Mj44Ml5QFqQHCLSSnmBoTy8
KOAirQnhyeq556ZM+meeKZs324rFzv6vBHxwfPzkbCA5oRCe5qoJs2qd8gJD
eXhE0RWLyZVXpkz3xx4r27fbDssqfPyePVNyghTxokBEKikvMJSHRxRRFRWS
l5cy0XfsKMuX2w5LASQh+Yx4PPLznXQRkTLKCwzl4UUBF2lNCHxWCwpSpvj9
9pPFi23HZHv/VwJSgYQk5wfpCjIVWQ0dZtU65QWG8vCIomjqVGnT5pvJvWVL
efJJ2zEpg4QkXwqydWsnaUSkifICQ3l4RJHz+uvu6xxOn247JpWQFtd1EZE6
IlJDeYGhPLwo4CKtCUHN6jvvOHe1SMzpzZo5d7yqrLQd1n9p2f8Vh7QgOUhR
8g1BkMAAUpTVEGFWrVNeYCgPjyhCPv3Uuayf647nlB5S5LouItJIRAooLzCU
h0cUFWvWyBFHpEzll14qu3bZDks9pAiJcpVASCYR2aa8wAjKdapDjIu0JgQs
q+Xl0qtXyiR++umyaZPtsNx07f9KQKKQruTsIZlIaXBozGrwMau2BKWuUB4e
UfiVlMjFF6dM3z17Rv06h/VV87qISCkSS0T2KC8wlIdHFHKxmNx4Y8rE3bmz
fPyx7bACCEnr0iUlk0gsLw1NZI/yAkN5eFHARVoTApPVgQNTpuwDDpD337cd
ky+l+78SkDokMDmfSG8QqM5qYDGr1ikvMJSHRxRmo0alXOqnbVvhiN1ISGC7
dikXBUKSicgG5QWG8vCIQmvOHGnePGWx4i9/sR1TKCCNyVlFkpFqIso65QWG
8vCigIu0JmjP6vPPS9OmKXP0Qw9JVZXtsGqhff9XHNKIZCYvrCHVSLhiAchq
ADGr1ikvMJSHRxRCb7zhvn1nTo7tmEIHKXXdQBZpJ6IsUl5gKA+PKGyWLHEX
P71767nDRXggpUisqwRC8okoW5QXGMrDiwIu0pqgNKurV8uBB6ZMyldcITt2
2A6rroKx/ysBib388pRsI/nYBPoEKavBwaxap7zACMp1GokCb9s2+c53Uqbj
c88N1mWKgwfpRZKTc45NgA1BRMYEpa5QHh5RSHz1lZx6aspE/O1vK7zDRQgh
yUh1cuaxIbA5iMgw5QWG8vCigIu0JujK6s6d8sMfpkzBRxwhn31mO6x6C9j+
rwSk+vDDU/KPzYGNokYgs6oes2qd8gJDeXhEYXDlle7i59NPbccUMUg40p68
FbBRiMgk5QWG8vCIgq20VG66KeVSP23bynvv2Q4rkpB2JD/5okDYNNhARGSG
8gJDeXhRwEVaE1RktbJShg5NWXPA/Ltwoe2wGi6o+78SkPzku2PggQ2k4OID
wc6qVsyqdcoLDOXhEQXY8OEpU2379jJ7tu2YIg+bABsiebtgMxGRAdksMFas
WHHffff169fvrrvuWrBgQfyHq1atSj4ZbU7qrXBY/xAZMW6ctGyZMs9OmmQ7
JqqGDZG8XVq1cjYWEWVa1gqMnTt39u/ff9GiRZWVlah5cnJyli1bhp8XFRWN
Hz9+y16xWMxKeOSHi7QmWM7q889Ls2Ypk+yjj9qMJ0MCv/8rAZvDdY9UqzcI
C0lWlWFWrctagbFmzZqZM2cm/jlp0qQXX3wRT6ZMmTJu3LhRo0YVFBSgFrIV
HlFUPPtsSvGD54MG6b+3abRgc2CjJG8mlEDYcESUOVYKjJKSkoEDB8bXf4YM
GVJYWLhhw4alS5fm5eUl9otZDI8otF55Rbp0cd/ei3Ry3SAMGw6bj4gyJPsF
RiwWGzt27NSpU+P/LC8vr9r73RPFz8iRI13huUjSsiGfZOFJ8j4FPsnUEztZ
Xby4zHVs7Q03vLh3VUFDWhr5BP/74IMPWg8jY0/27FlzwQWuEujNhx7Kfjyh
yqqaJ8xq9p94VhRZs3HjRlQ4s2bNqvQ6qXP58uW5ubnJP+H6D1FmLFsmHToE
996mEYUNhM2UvNWwEatXzomokbJZYKxatSo/Pz95D9euXbsGDx68ZcuW+D/x
q9GjR9sKjyi0PvnEfYeFCy6QigrbYVEdYDO5VoGwKbFBiahxslZgbNu2bcCA
AUVFRYlTvUpKSvDzBx54YOrUqWVlZcXFxYMGDVq0aJGV8MhPYvGQMiirWV29
Wr71rZQJ9HvfC+VNxudWsx2FAdhY3/1uyhY85hhns2ZLOLNqG7NqXdYKjBde
eMG132129cXWUAhNnDgxJycnPz9//vz5tsIjCqc1a+Too1Omzp49Zd0622FR
PWGTYcMlb0dsVmxcImoo5QWG8vCIVNu5U04+OWXSPOEE+fJL22FRg2DDYfMl
b01sXE23iScKFuUFhvLwooCLtCZkI6s7dsg556RMl926yRdfGH9fe0K7/ysB
m69r15Rtik1s/iD2kGfVEmbVOuUFhvLwiJTavFnOOy9louzUiecNhQE2IjZl
8pbFhsbmJqJ6Ul5gKA+PSKOSEvnpT1OmyIMOkn//23ZYlCHYlNigydsXm7v6
dBIiqjvlBYby8KKAi7QmmM3qlVemTI777itvvGHw7dQI//6vBGxQbNbkrYyN
bkxUsppdzKp1ygsM5eER6RKLyfXXS9Om30yLeL5woe2wyABsVteGxqZPvX80
EaWhvMCwdZ1qouApLZU+fVLWBNq2lRr3FKbwwMbFJk7e4rfd5jQDIvIXlLpC
eXhRwEVaE4xktV+/lKmwfXuZOTPz76JYhPZ/JWATt2uXst3RDDItclnNCmbV
OuUFhvLwiLTArJe8N6RZM3n0UdsxUVZgQ2NzJ296AyUQUfgoLzCUh0dkX3m5
jByZUvzg8eSTtsOiLMLmTt76aAxoEmgYRORPeYGhPLwo4CKtCZnM6u9/nzL3
tWgh48Zl7MUDJYr7vxKw0Vu2TGkJaBgZEt2smsSsWqe8wFAeHpFlI0akrPw0
b+78hKIJmx4NIHkViI2ByJ/yAkN5eEQ23Xuvs9qT/JUfP6EoQwNIbg8tW7JJ
EPlRXmAoDy8KuEhrQmOzWlkpEye6j/kZNSrih3xEev9XHBoAmkFyq2jWzGkq
aDCNEPWsmsGsWqe8wFAeHpEdf/yje4674w6pqrIdFimAZoDGkHxGGB5oMESU
SnmBoTw8IgvGjEk5zAOPvn1tx0TKoEkktxA0GDQbIkqivMAIynUaQ4yLtCY0
PKuYxVyn+Qwc2Mi9G6HB/V/fQJPIy3MfC9TQEohZNYFZtSUodYXy8IiyBzPa
pEnuY35yc3m/A/KGhpGT474uEJoQq2WiasoLDOXhEWXP+PHuueyWW3jMD6WD
5oFG4qqZ0ZCISH2BoTy8KOAirQn1zmpBgfuI1j59zIQWYNz/5c11V1w0JDSn
+mBWTWBWrVNeYCgPjygbhg1zX+cnJyfip7pTPaCpuHaEoTmhURFFm/ICQ3l4
RGZh5rr3Xvf+iwEDeMwP1Q8azMCB7v2naFqsoinClBcYysOLAi7SmlCnrFZU
OF/SXXsubr+dx/z44f6vdNBs0Hhce1HRwNDMasOsmsCsWqe8wFAeHpFBd9yR
MlXh0b+/7Zgo4NCEXI0KzYwokpQXGMrDIzLlhhvcu73uucd2TBQKaEiuHWFo
bETRo7zAUB5eFHCR1oR0WS0pkd/8xl38jBnDQzVqxf1fdYKGdP/97hIITQ4N
zwezagKzap3yAkN5eEQZtn27XHON+1Sdep6tTFQ7NCrXSYVoeGh+RJGhvMAI
ynWqiTJgxw656KJM3bOAqBY176WC5odGSBRqQakrlIcXBVykNcEjq6WlcvbZ
7rO9Jk2yEV1Qcf9XvaGBuc4IQyOscXUFZtUEZtU65QWG8vCIMmPrVunVy31i
DodHygI0M1fDQ1NEgyQKO+UFhvLwiDLgiy+kZ8+UCahtW/nrX22HRZGBxoYm
l9wCjz3WaZZEoaa8wFAeXhRwkdaEb7L60UfStWvK1NOli7zwgtXogor7vxoO
TQ4NL7kdolmicVZjVk1gVq1TXmAoD4+oUf79b9lnn5RJZ//9ZcEC22FRJKHh
ofm5SnE0UaKQUl5gKA+PqOFefdVd/Oy7ryxdajssijA0PzTC5DaJJoqGShRG
ygsM5eFFARdpTXhv4EDp2DFlounWTT7+2HZcwcb9XxmARoimmNwyO3Z0mitl
GtuqdcoLDOXhETXEhAnSunXKFNOzp6xebTssompoiq4D8tFc0WiJwkV5gaE8
PKL6KStzLjrnurfFGWfI5s22IyNKggaJZum6RwZvwkLhorzACMp1GkOMi7QZ
E4tJv37ua61ceKHtsMKD+78yDI3T1VzRgNGMKRPYVm0JSl2hPDyiutq9W666
yj2b/OIXzooQkU5onGiirkZ75ZVOYyYKPuUFhvLwiOpk1y4580z3PJKTI3v2
2I6MKC000dxcd9NFY0aTJgo45QWG8vCigIu0jbV2rZx0kmsGWXbTTTyUIuO4
/8uI8vJlv/2tuwRCk0bDpkZgW7VOeYGhPDyiWrz/vhx6aMrE0aaNFBbaDouo
ntBoXSctduvmNG+iwFJeYCgPjyidV1+VDh3cF9R99lnbYRE1CJqu6x4ZaN68
OiIFlvICQ3l4UcBF2oaoqpJZs9znuXftKv/4R/z3zKoJ3P9lyDdZRQN23a4O
jRxNHQ2e6olt1bpsFhgrVqy47777+vXrd9dddy3Ye5Oj0tLSwsLC/v375+Xl
FRUVWQyPKDPKy2X4cPfxEkceyRtqUxigGaMxu5r3iBE8no0CJ2sFxs6dO1Hk
LFq0qLKyctWqVTk5OcuWLcPPZ8yYMXHixFgstmbNGpRAK1eutBIeUWbEYh6n
DPfqJRs22I6MKEPQmNGka17MgZcGokDJWoGB8mbmzJmJf06aNOnFF19ELdS3
b1/8Kv7DuXPnTp061Up45IeLtPWwY4f7qrl4XH21bN3q+kNm1QTu/zLEI6to
0mjYrqaOxo8uQHXDtmqdlQKjpKRk4MCBy5Yt27hxIwIo23sJuMWLFxcUFFgP
j6ghPv5Yjj3WPSPceaeUltqOjMgANGw0b1eDRxfgbXwpILJfYMRisbFjx8bX
eYqLi3v37p341ZIlS4YOHeoKz0WSymY+4RMtT+bPlwMOSJkIWrWScePsB8Yn
fGLyiXNpIDT1pJa/p3NnpzvYDoxP+KTmE8+KIms2btw4cuTIWbNmVVZWxv+J
AMr3HjjH9R+FEo2HfE2a5FzVx3We+9NPp/kvmFUT5lazHUUI1ZJVNHXXefGt
WzudgtJiW7UumwXGqlWr8vPzE2d+Qfz4n7V7ryOK9lCYemk41j+kWmmpDBni
3gXQvTtKeduREWURGjyavasjoGtw5y8plrUCY9u2bQMGDCgqKtqyV0lJCX4+
ffr0CRMmxGKx4uLivLy8pUuXWgmPqN42b5bLLnOP+SeeKF99ZTsyoqxDs0fj
d3UHdBB0EyKVslZgvPDCC679brNnz5bqY6GnTZuWm5ubn5/P6/8oxEVab59/
Lscf7zHa1+38F2bVBO7/MqSuWUXjr/mNAN0EnYVqYFu1TnmBoTw8iqjFi90H
PMRP9eL93Cni0AVqnhTWuTP3CJNCygsM5eFRFD36qPtGkHjMns1bABA50BHQ
HVw3f0GXQcch0kR5gaE8vCjgIu03Kivl9tvdA/s++8g779T3lZhVE7j/y5CG
ZBWdAl0juac0aya33SbVZ/6ScBBQQHmBoTw8ipDt2+WsszyOdl692nZkRCqh
a9Q8IhqdCF2JSAHlBYby8Cgq3nvP456PV1/Nq/0TpYMOUvM2GehK6FBEtikv
MJSHFwVcpJXp06VTp5QBvEULyc9vzEsyqyZw/5chjc0qOgu6THIP6tjR6VbR
xrZqnfICw9Z1qon+64473EM3aqHHH7cdFlGgoMu4vkQ0b+50LqKsC0pdoTw8
CrNt2+QnP3Ev3R91lLz/vu3IiAIIHQfdx9Wh0MXQ0YhsUF5gKA8vCiK6SLt4
sRx6qHusPvvsTB26GdGsGsb9X4ZkLKvoPuhErm6FjhbJqwOxrVqnvMBQHh6F
0+TJ7vuZNm8uOTm8wg9RY6ET5eY6HSq5f6G7odMRZZfyAkN5eBQ2u3dLnz7u
76ft28usWbYjIwoRdCh0K1dHQ9dDByTKFuUFhvLwoiBCi7RffCGnneaxOL98
ecbfKkJZzSLu/zLESFbRrWruYkYHRDeMBrZV65QXGMrDo/B48UX3+Sl4XHih
bNxoOzKikELnQhdzdTp0Q3RGIvOUFxjKw6MwiMVk+HD3INy0qYwcyfuZEpmF
LoaO5rqnDB7okuiYRCYpLzCUhxcFIV+kXb9ezj3XPfZ27Ch//7vRtw15Vi3h
/i9DjGcV3Q2dztUNzzvP6Z7hxbZqnfICQ3l4FGxvvCH77ecedU8+WVatsh0Z
UcSg06HruTojuic6KZEZyguMoFynkQKmtFRGjXIPtnj07i07d9oOjiiS0PUw
ztfslffe63RYogwJSl2hPLwoCOEi7fr1cv757jG2dWt59tmsXeEnhFlVgPu/
DMleVtEB0Q1btXJ3T3TY0O0LY1u1TnmBoTw8Cp6iItl3X/fo2rOnrFhhOzIi
qobOiC7p6qTotui8RJmjvMBQHh4FSSwmQ4d6rK7/5je8AxGRLuiSv/61R29F
F+Z5YZQhygsM5eFFQUgWadeskV693GNpq1by1FNSWZn9cEKSVWW4/8sQO1lF
x0T3bNnS3W3RkdGdg49t1TrlBYby8CgYPC+2f/zxsnKl7ciIKC10UnRVV+dt
1463pKHGU15gKA+PtNu5U377W49V9JtvztSd3InILHTVW27x7sU8W5MaQXmB
oTy8KAjwIu3ixdKjh8c3x3nzrN/JPcBZVYz7vwyxn1V0WHRbdF5Xd0YHRzcP
JvtZjTzlBYby8EivggKPs2i/9z1Zvdp2ZETUIOi86MI1j+JDZyeqP+UFhvLw
SKO1az1uadGsGc8cIQo8dOG77nK6s6uDo8uj4xPVh/ICQ3l4URCwRdrp06Vz
Z/fYeNBB8u67tiNLEbCsBgT3fxmiLqvozujUrm6Ojo/uHxzqsho9yguMoFyn
muzbvVv+5388biR92WWyaZPt4Igoo9Cp0bVrLvNeeaUzFBD5C0pdoTw80uKV
V6RrV/dg2LGjPPmk7ciIyBh08Jo3jsdQgAGBqDbKCwzl4UWB9kVafNe7+WZp
3tw9Bp58suaLpGnPajBx/5chqrOKbl7zxvEtWjgXvtC9EKQ6q9GgvMBQHh5Z
9sEH0r27e+hr08Y5H8T2Ge5ElCXo7Pfc43R811CAwQFDBJEP5QWG8vDIml27
ZMAAj2WfHj3kX/+yHRwRZR06/tFHuwcEDBEYKDBcENWgvMBQHl4UaFykXbZM
jjnGY8X7d7+zHVldacxq8HH/lyFByioGAQwFrsEBwwUGDWWClNWQUl5gKA+P
sq2kxLmMT82TvLp1k1dftR0cESmAoQADQs37ZWDowABCtJfyAkN5eJRV77wj
xx7rHtNQC918s/IDHYkoq+KnRdT8ooQBBMMIUTXlBYby8KJAxSJtVZWzE7/m
svYBB4iG8OpPRVZDh/u/DAlqVhE2hoiaO8oxmCg4PyKoWQ0R5QWG8vAoG958
U446ymM1+7rrZPNm28ERkWIYIjBQ1Bw9MKRgYKFoU15gKA+PzNq5U266yWPZ
Z7/9pKhIwzc4ItIOAwWGCwwaNReCMLxgkKGoUl5gBOU61SFmbZH273/3uMVP
s2by85+HYNmHS98mcP+XIWHIKgaN//1fjxunYpDBUGNDGLIaTEGpK5SHR0Z8
/bVcdZXHknXXrvLaa7aDI6LAwgBS80Y5eGDAwbBDEaO8wFAeHmVYVZU8+qh0
6OCxUn3jjVJaajs+Igo4DCMYTGruVe/Y0Rl8uFc9SpQXGHUMr6RExoyRCy6Q
b31LevaUs8927v3yxBPy6adSUWE6xpDL3iLtxx87W67mV7MePWTBgizFkC1c
+jaB+78MCWFWMaR4nlWBIQgDUVaEMKvZhcn9s89k5kxnusd2w9Tfvbt8+9ty
7bV13VEQjvpn3TqPhpx8hZhWrZzMIEv//CcLfH3Ky+Wuuzxu34MtN3Qol32I
KPMwsHheTBUDEX6OQYk0wcSN6RuTOKbyli09tlvy45JL6vSaUah/ak6qnTvL
lVfKW2+xFlLgnXfksMM8ttOpp8onn9gOjohCDYMMhpqa4w8GJV4p0TZM0Jim
MVl36lRLwROU+mfFihXDhg1L/HPVqlXJB2PPmTOnAeGtXy/t2tUjOcnHlfTq
Jc8+K5WVGf6YoWFwkfarr7yPc+7QQSZOlLIyU++rAJe+TeD+L0NCnlUMNRhw
ah52iBkXAxSGKTNCntVGwHSMSfn73/c4SquOSxw//3md3iib9U9VVdXChQv7
9+8/dOjQxA+LiorGjx+/Za9YLNaY8JC3DRtk/nzJz5dzznGO9G/Tpk51Y8uW
ctll8v77mfmkVAuU9Q8/7FGzNmsmP/6xuQGHiMgbhh0MPjVPkMcwhcGKuwqy
AlPw5Zc703FdipzWreWQQ5yJPi/PmfQx9dd3HSOb9c/zzz8/evToV199Nbn+
mTJlyrhx40aNGlVQUIBayFB427bJn/8s558vbdumK4fwK+Rz8mQuB5n09tty
/PEe2e/WTf76V9vBEVGEYQjyvHcqhiwMXGQGJlxMu55XJkienVGKnneeM5Vj
Qs+IbNY/26qDXrZsWXL9M2TIkMLCwg0bNixdujQvL29B6pk+JsIrKZEZM+Tk
kz0q/cSjfXsZOFC2bs34mwdPJhdpN26Uq6+W5s09ln0GDYrUcc5c+jaB+78M
iVZWMRBhOKo5PWDguuYaZxDLkGhl1QcmWUy1Nfc9Jmf9O9+Rxx93Ju6My/7x
P676p7y8vGrv0iKKn5EjRyb/8a01SFKzaeST5557cc4cOe003xWhVq3k4otX
b9+egfeK+hMMKX/8Y0Xr1h5Z7tVLPvvMfoR8wid8wid7nxRNmeIMTTXHq3bt
/tO7d/zLmpJQA/oEE+ttt0mLFpWeky/Kz6OP3ooJuqwsk2/qWVFkk6v+SbZ8
+fLc3NzknyC8LGyL2bNfGjbM4/4w8UfbtoKgnnrqZdNhhPXJPwoK0JQ9Mrvf
fu/ie1b1vkYlofIJn/AJn/z3CYam2bP3dOrkMXZhQHvtNfsRBvPJtm1yxRWf
YWL1nHA7dSrDdLxjRzbisVv/7Nq1a/DgwVu2bIn/c8GCBaNHj07+42yGh8b+
+uty0kney0Ht2gmm8QheTTHRVBpi3TrnkMKaCW3ZUm65xciCZkA0KqvkY241
21GEUKSzimEK01DNQ3KbNZOf/MQZ4hoqglnFBIpp1PNkbcwSmHyLirJ68K31
9Z8HHnhg6tSpZWVlxcXFgwYNWrRokd3wpPoQ9HPO8T46qHNn50LTEZ6362zn
TrnzTo9LGuJx+unyn//Yjo+IqM4wZGHgqjmaYYjLz+dN5GsVv0cDJlDPXV1n
n23n5Gvr9c+WLVsmTpyYk5OTn58/f/581x9bvDzjsmXygx94rwV16SITJvAc
MR9VVc7Bap57E/HDZ56J4iIaEQUdBi4MX34jGwY9niPvBRMlpktMmp5rPuec
40y1toTj+s/mLFokp5zivZvywAPlkUfCfZU+R/0Wad9+W0480ftb0oAB/JaU
EMGl7yzg/i9DmNVvYBDDUOZ5KsdJJ9XrHPnQZxWTI6ZITJSelc+pp0rq3h4L
rBcY6SkJ75//lBNO8F4LwsadPp1rQSJr13pfPQxZu+giWb3adnxERBmCAQ3D
Ws0pIX4FVwyG0YYJEdPiAQd4Lx1gMsWUqoGSAsOPqvBefFGOOcZ7g3br5txu
PqI7duJfiGpe1adJ9VkSr79uOz4iIgMwuHme2dqiRWSXuzEJYir0vIQkHphA
MY3qoarAqElbeChrX3pJjjjCe+MecohzacqQrQWlW6StqpIHHxTP80O7dHGW
PvfsyWKkQRL6pW8ruP/LEGbVF4Y4DHSeR7dgYHzooTQHBYUsq5j4MP1hEvSc
HI88Ul5+Wd3kqK3AcFEb3pNPet+0vEn1fYPxW20bOsNQ5T/3nBx0kMfnb9VK
+vblOXJEFBUY7jDoYeirOR5ikMRQGep9A5jsnnpKundPNyHqpLbAiNMcXnm5
s9H9blkSyrWg/yoqkuOO8/7YV1zBfd9EFEUY+jAAeg6Mxx8vNe5uGQLp13ww
OWKKxESpluYCQ1Lvf2E7Fl+PPeZbBXXr5pwWGejaP2WR9uOPnYtg1DzqL37t
quXL7YUZMCFb+laC+78MYVbrAcOg51V08RMMnhhC9wp0VjGpYWo79FDfr/+Y
FtUKRF0h6suzhLIymTlTDj7YuzEceKBMmxbwtaA1a+SnP/W+KGT37s4CLxER
xWFIPPxwj9ESQ+hllznDaWBhIsN05nlWe3x3H6bCoFwWRnmBoTy8mqZP910M
RIP5058CeETw11/LL37hfXpXp04yaZLq9U0iIiswMGJ49Dw9BMMpBlUMrYGC
yQtTmOdRn/E1H0x/waK8wFAenieUvk884VsF7bOPjB8fkD1imzdLnz6VNW98
06T6dmiDB0fzBM+MCPTSt1rc/2UIs9pwGCQxVHrd8soZWvv0cYZZ9TBhYdrC
5OVX+WDKC8qaTzLlBYby8NKbOdP3Mghdusi998quXbZD9FNSInl53tc4xTeX
225z7uBLRER1gQETw6bnKjqGWQy2Wk+YxSSFqcrz/P74Aa6Y5oJLeYGhPLxa
lZc7d4zxOzGwfXu5+26JxWxHmWzHDufbCiKrGW6LFnLNNbJ+ve0QiYgCCIMn
hlAMpJ6TAQZeDL9qYGIaNsx7Kogf9TlnTuCPfVBeYCgPr+5QBR11lHdDatvW
uXSE/UVQNOV77vFu7k2bOhd1/+QT2yGGB3comMD9X4Ywq5mEgfQnP/G+nRKG
XwzCtqsKTEaYkjAxeU5YmMgwnYWD8gJDeXj1UlXlXC69Z0/vho/vBL/+tXz5
pY3I8KXj7rulQwfvyuess2TpUhthERGFFAZVDK2ek0HHjs7Ki421IExAmIY8
D/lEpJi8MIWF6S73ygsM5eE1TFGRc30Iz9IaVdAVV8jnn2crlD17ZPhwz2Pz
nOb+/e/LBx9kKxQioojBAIth1rMKwrCMKihbJwxj0vmf//HeNRe/ulsYL9+o
vcBQHl5joOF7XkqwSfUlIs49Vz780OTbb93qHHTnV/mcfLK89Vb8D7n0bQKz
agL3fxnCrJrwTVYx2GLI9TtIFAM1hmtjMNFguvGcieKXbAzxl2DlBYby8Bpv
6VK54ALvywqi7X3nO/Laa5l+S3Sl22/3PrcLb3nKKbJ4cabfkoiI0sLAi+HX
sxBp1coZtDNdBWFywRTj+YbNm8sPfxj+Ax+UFxhBuU51I61e7aw9ep4cicZ5
5JHy7LOZOCbuq6+cnbueN+mLr/m88UYGPgwRETUMBmG/tSAM3RjAMYw3DqYS
TChHHOH9JpiGMBlhSgqxoNQVysPLrK+/lhtv9F6YaVJ9+ejx4xtaBX3+ue/d
K1D5fO978t57fv8pl75NYFZN4P4vQ5hVE9JlFQMyhmW/wyMwmDfoIFFMH5hE
DjjAe4rB1IMJKGgXpW4U5QWG8vBM2LFD7rzT+8Cc+N7g+p0Z8M47zlkGfpXP
mWfKv/5l8MMQEVHDYHDGEO1XBZ19tjO81w2mjDQX88F0g0lH08WHskR5gaE8
PHN275b775f99vNdB7322rQny1dWOmcqHnecb9+58EL56KPsfR4iImoADNQY
rv0OUMYgj6He/+7amCYwWXge9YAHppgxY5zpJpqUFxjKwzOtokIef1y6dvVu
uqhiLrigxp6rqip59FHfG2+0aCFXX12vuw9z6dsEZtUE7v8yhFk1oX5ZxaCN
odvz0jxNqm9EUVjoujQPpga/k2vwwLSCySUYd6I0RnmBoTy8rJk/X0480bsZ
4xvAscfKSy9J5fadMnKk92UM8UDHueUW2bDB9kchIqIGwQB+882+qzkY/EeO
xESA6QCTgueKER6YSjChkKgvMJSHl2VLl8o553jU892arPtLk2vKmvp0io4d
nTvL8I6lREQhgMEcQzoGdq8Bv6xpS0wHmBRcv2ne3Jk+Qn9Ke70oLzCUh2fF
6tVy/fX/XQc9p8mb/2xyelUTn0J///1l0qRGnjnPpW8TmFUTuP/LEGbVhMZm
FQM7hnefs7kwKWBqwAQRX/v/5S9Dfkp7wygvMJSHZ01FRcnEadvb+xwY1KTJ
h02Pv6fXPB7gTEQUYhjk7/n+vA+bftuvCtre4RBMFlE/0MeH8gJDeXgWbN4s
d9zhd5BPRZPmC5v84IQmSxOHBp18srz5ZqjuWEdEFHEY0hcuTLlcNIb9N5uc
U9nE53BnTBmYODB9UBLlBUZQrtOYDcuXy49/7H2R6CZNKlu1+cu+t3Ztut6z
7R96aM2TA+qKS98mMKsmcP+XIcyqCQ3LKobxKVN8T/DFFPDMfrdWtvS5im6z
Zs4kgqkk2oJSVygPL0tmzZIePfx2dTn7f8eMkVgMf/jJJ3LJJX4lkvMN4O67
o3iRKyKioItfw9DvBF+UNhj8MQU4MB1gUth/f+8/bdrUmVAwrUSe8gJDeXhm
bd0qQ4b4Nne04eOPl5dfrrljd9Mm6dvX9wrSLVvKVVfJ2rVWPhIREdUPhmsM
2n7X/sFQjwEfw74bpoaXXnKmCb8z4TG5YIoxeXN55ZQXGMrDM+Xf/5bzzvNd
x0E3uOyyWtcw0fb/+Md03wBOP905NKhWXPo2gVk1gfu/DGFWTahLVjFEY6D2
W/vH8I5BvvZDmzFZYMrwq59atJDzz3cmnehRXmAoDy/DSkudPbt+9+VtUn0l
n6FDZfv2er3qvHlywgm+VdChh8oTT/DkACIiLTAgY1jG4Ow3FWBIx8BeP5g4
MH34XDXIeRx+uDMBYRqKDOUFhvLwMmbdOrnpJmnTxrdl9uwpTz/dmDLlww+d
Gt9vSalz5wYUVkRElEnxIqVLl3RLNRjMGw6TCKYSTCh+cw2mIUxGmJIiQHmB
oTy8DHjxReccdb97tKC5X3rp3mPaMuDLL6V3b2ntc3IA3u266+SLL1L+Ey59
m8CsmsD9X4Ywqya4soqBF8MvBmHPwRmDNobudPe8rq/42TJ+O8UwJWFiwvQU
asoLDOXhNRyq/BEjnGUXvyIcXwDuu0927TLx5iUlzmv73Vy+eXNnj/Nbb5l4
ZyIiSoHB9owzfL8EY6DGcI1B2whMMXh1v/Wm+L4BTFUh3TegvMBQHl69VVXJ
O+/IWWf57ohCHzjppOxU3eXl8vzzznmQficHHHGEPPWUlJVlIRYiomjB0IoB
1u94TwzLRx0lf/1rI+9fVGeYdDD1+E0GmLAwbWHyCte1dJUXGMrDq4cdO5wy
+8AD0+11/fWvrZyXvmiR/OAHvt8+2rcvGzbM0EJUdHGHggnc/2UIs5pZGE4x
qGJo9as1MCBjWLYAE9BvfuN7hAQemMIwkYXlKnLKCwzl4dXJf/4jP/mJ74JP
fJ1lypT4BQwtWr9efvUraeVzD3n8HL91HRpERER1hyG01mEWQ7FlmIzSn4mM
6QyTGqa2gFNeYATlOtUeUOLfe68cdJBvE2rZ0jn8TNk9SlHXFxTIvvv67p3r
1UvefTdki6BERAZhwMSwicHTb5kdQy4GXnXLKpieLr7Y9xhpPDDBYZoL2u6B
oNQVysPz9s9/yoUX+i74NG3qLCE+/LDs3m07UF+VlTJ7drry/6ijeNWgRuEO
BRO4/8sQZrXB4lfywYDpNxtgmMVgiyFXL0xVf/hDuoM3MNn96EfOxBc0ygsM
5eGl2LbNOU7eb+mkSfXp5T/8YbAayaJFcu65vsfEdeok99yjuY4jIrIDA2NB
ge/lBjGoYmi1c5BPg2HywhTmd4p+fBlr5EhnKgwI5QWG8vD+6+WX5fvfT3eE
T/wMxsAWCuvXyy9/6XtMHH7+85/z0CAiIgcGQwyJfgf5YMC8/noFB/k0GCYy
TGd+t1aKHyfxve8506J6ygsM1eGtWSO33+57f9L4quCPfyyLF9sOtFESS99o
9Q884HuhCHyd6dUrWItbNnGHggnc/2UIs1pHGAAxDPotmGPwxBCa+B4c+Kxi
asMEl+aLf/v2zhSJiVIr1QWGzvDKy+Xxx50dun6tHI9DDpExYwJ3VFgdPf20
HH2070c/9FCZOtV2iEREWYRBL83tuo45xhk2wwnTHCa7gw/2/fDxKxlh0szS
lYzqQWOBkURXeO+845z0l+Zg+Fat5PLLZeVK24Fmw4cfOvuv/U5n6NBBBg0K
0H5gIqJ6wxCHga59e98dQRgkG3W7rgDBxIfpL838iF9hAsU0qkb2C4wVK1YM
GzYs8c/S0tLCwsL+/fvn5eUVFRW5/lhF/fP11zJ4sOyzj+9mxaNHDw3X8DEh
/SLtV1/JLbdI27beWWnRwjl78vPPsxZsYAR+6Vsl7v8yhFmtCcPaRRf5Hgvc
po0zMGJ4TCOcWY1fOwgTYprpEpPpkCHOxGpbNguMqqqqhQsXotQZOnRo4ocz
ZsyYOHFiLBZbs2YNSqCVqYsnNuuf8nKZNcvZ0+O3xhHfv/nb3wb5ULbMQKrG
jfO9oRgeJ5wg8+bZjpKIqNEwlGFA8xvrMAw+9JDCXT1Zh2kRk6Pf0lh8dQzT
KyZZe8nKZoHx/PPPjx49+tVXX03UP5WVlX379l2z9/go1MNTU48dsVP/oH2f
eWa6dbz48e2vv84r4CSrqqplZEDV//DDsmeP7UCJiOoJAxeGrzT7AU480RkA
eW3YFJgiMVF+97vplhFatHAmXBvfkLNZYGyrPhxk2bJlifpn48aNCKBs7y02
Fy9eXFBQYCe8nTvlkUecG8ClOZodj27dnGO91F2m06AGLNKuXFnLyvCvfy1f
fmki2MAI59K3bdz/ZUjEs4rB6le/8r0ACAY6DHcNOOozWlnFpImps2vXdNMr
Jl9MwZMnO9NxVmR/gSW5/ikuLu7du3fiV0uWLEneNSap16lOXK060Wwa+eTF
Z56R555D263AlJxmo+DRrt26H/xAVq3K4LuH/smTT74yaBAy553Rpk3ljDNk
7Ni/awiVT/iET/ik5pN//EN69tzid6Zv69YVgwfLli0qQg3ME0yjv/hFRZpb
rO49tuSrU091JuhYLIPv7llRZFPN9Z/yvbv/jK//xGLy0ktOKX/ooel2byVX
9r16yWuvcW9ug1VUyKOPymGHpVtRQ72v+vLvRBQlGI4mTUq3VoEBDcMaD39o
OEypmFgxvabf4RJ/YLJGxjFxv/xyZk8yslv/xI//Wbt2bfyfKM8KCwsbFV5J
iVNezpvn3JTt2mud3Y6HHOKcnlSXJCeXPd//vjz1lJSWZuITB1uieG6MxO3/
/L5JYRP97neyYUPj3yoYMpJVcplbzXYUIRSdrGIIwkDkd0Jr/CqvmboBdHSy
mg4m2dmza7mBQs3NgD9u186pUDHFY6IfNcpZ2Vi92ikA6sNu/QPTp0+fMGFC
LBYrLi7Oy8tbunRpQ8IrLq5fheOZ0i5dnKuWB+yOLAGzbp3ceKP47W/ENjzz
TPngAx5DSETZgwEHw85ZZ/kepYshCwMXhi8yCJMvpmBMxGmuLVzHx+WX1+UN
rdc/JSUl06ZNy83Nzc/Pb/j1f9AuG1bz7LefXHWVs6q29xhsyoKKCucU0TQ3
kDn8cCks5JliRGQWBhkMNd27+45FBxzgDFbc1ZVVmI4xKWNq3nffdCeOpXlc
ckld3kfFBQb9ZbL+QbXTurXT0H/1K3nhhawdYR50RhdpUfCedprvFsN3rv79
w7lTjEvfJnD/lyGhzCoGFgwvfru68MDQ9PrrBgMIZVaNwGSNXGHixvSNWaEu
FVGk6p9YzDmI9ppr5NRT5ZRT5Lzz5Lrr5Pe/lzfekE2bDMdIjbV2rbPp/G6X
3Ly5nHOOcyIGEVHjYTDBkOJ3xAQGIgxHew9KJcUwuWOKx0SP6R6TPmb/4493
9mL+7nfy9tt1eYGQ1D8UfCUlMnas7/3lm1SfcxHSe4wQkXHxOzOkuUspBh/M
pfU8hJYCTHmBoTy8KMj+Ii3e8MQT050pduONtdxYRz8ufZvA/V+GBD2rGC4w
aKQ5q+uEEyT7HzHoWQ0B5QWG8vDInNWr5corfa/S1KyZnH66/O1vtqMkIsUw
RGCg8PsyheEFgwyGGoom5QWGxes0kgY7djhXcvI7Uyx+At///R/PFCOib2BA
wLCQ5gxT/AoDS5RuZETfCEpdoTy8KFCySDtvnrNTzO/A/9atnUMWP/3UdpR1
piSrIcP9X4YEKKsYBNKcTIEBJH6XUg0ClNWwUl5gKA+Psuyzz+Q3v/Ed3PA4
7jh55hlezIkoWtDl0fHR/f1GhpYtndsuYwAhSlBeYCgPj6woKXGuSHbwwb5j
XceO0revbN5sO1AiMgzdHJ0dXd5vNDjkEGe44FldVJPyAkN5eFGgdpG2qkr+
9S/n4Ea/nWL4+dlny8KFtgP1ojargcb9X4bozCq6Njp4mu6PwQFDhNqb6ejM
aqQoLzCUh0ca4AtgTo7vF8D4MdIPP8yb2RKFAToyujM6td+CT4cOkpvL5V+q
nfICQ3l4pMqTT8rRR6c71/WSS+Q//7EdJRE1CDrvxRf7XhMDHR/dH4MAUR0p
LzCUhxcFgVuk/egj+dnPpEUL36+H3bvLI49YPh4gcFkNBO7/MsRuVtFV0WHT
3KIUnR1dHh0/WNhWrVNeYCgPj9Tavdu5m8Yhh/iOmfG7/KxZYztQIvKB7olO
2rp1umOb0c3R2YkaQHmBoTw8Uq6qSt5/3zlI0u9eh3gcfbQ89hhPmSfSAp0R
XRId06/PNmvm3MAUXVvtsc0UCMoLDOXhRUE4Fmm3bZO775Z99/UdUfEd84Yb
5PPPsxRPOLKqDfd/GZK1rKIDohumucDXPvs4HRndOQTYVq1TXmAE5TrVFBSv
vCKnnuq7HBQ/hHLmTNtREkUMOl2akxfQYdFt0XmJGi8odYXy8CigvvpK8vKk
fXvfr5lt2sgvfykrV9oOlCjU0MXQ0dDd/Hpiu3ZOV0WHJco45QWG8vCiINyL
tC+8IKec4vutEz/v3l1mzMj8/VXDnVVbuP/LkIxnFR0K3Qqdy6/rNWsmJ5/s
dM8QY1u1TnmBoTw8Coevv0ZLS7cc1Lq1XHGFfPih7UCJAg6d6PLL053ShW6I
zoguSWSa8gJDeXgUJuXl+EaWbjkIj27dZNw42bXLdqxEgYIug47Ttatvz8ID
Xe+FF5xuSJQdygsM5eFFQQQXafHds29f6dTJd6Bu0cI5p37xYqmsbOBbRDCr
WcD9X4Y0OKvoIOgm55yT7nqknTs73S2CCz5sq9YpLzCUh0chVlEhr7/ufCf1
u8EiHl26yIABsmmT7ViJlEGnQNfYZ5901/BB50IXQ0cjskJ5gaE8PIqCbdtk
+PB091ts2lROPFFmz878YdJEwYIugI5wwgnpdiKjKw0bFpJr+FCgKS8wlIcX
BVykTXj7bTnvvHQr+a1by5VX1ukiisyqCdz/ZUhdsopmj8af5sBmdJxzz3U6
EcWxrVqnvMBQHh5FUGmpTJ7s3HgozTfcAw+UESNk61bbsRIZhkY+fLjT4NOs
jqKzoMug4xCporzAUB4eRdlHH8l110nbtulG/lNOkTlzeHMxChs0aTTs9CdL
omuggwTutuwUHcoLjKBcpzrEuEhbq2efdY7/SXOYdOvW8tOfyscff/OfMKsm
cP+XIclZRTNGY05ziy50hJNOcjoFpce2aktQ6grl4RElbN4s99yT7hareOC3
AwbIxo22YyWqJzRaNN00zbtpU+dsL3QBdASiQFBeYCgPj6imDz6o5UBQPHr0
kD/9SXbvth0rUVpoomioaK5pGnP8sH80e6JgUV5gKA8vCrhI22DPPOPsCEiz
X6x5czntNOeu1rzmbUZw/1emoEGiWZ56qtNE0+/nQiOnhmFbtU55gaE8PKJa
bdsmDzzgnCCT5khRfIO+5BLnSrlEdqERoimmWb1EMz7gABkzhhfwocBTXmAo
D4+o7laskBtuSHeXVTw6dpSbbnL+kiib0OTQ8ND80jTODh2cBszGSaGhvMBQ
Hl4UcJE24954Q048cVPLlrUcSjp4sKxfbzvWQOH+r/pCAxsyJN1dKvBAQz3h
hI1otJRZbKvWKS8wlIdH1GBlZfKXv8hxx6XbLxa/dlxBgezYYTtcChE0JzSq
9NfwbNbMaZxoorx6FYWV8gJDeXhEjbdzp4wbJ927p/sOjnnqyCPloYecPyZq
GDQeNCE0pDRlDx5oig8/zJZG4ae8wFAeXhRwkdYEz6xu2iR33in7719LIfSt
bzmnJO/alf2oteP+L09oKmgwxx5bS9mDhofmh0ZYE7NqArNqnfICIyjXaSTK
oOJiufHGWg5GbdZMjjlGHnuMt1Uib2gYM2Y4jSR92dOpk9PY0OSIIiIodYXy
8IiM+vBD+cUv0t1iLFEITZwoJSW2wyUF0AzQGI4+Ot2Fp5pU35wLTQsNjCiy
lBcYysOLAi7SmlDfrL7zjlxxhbRpU0shdNRR8uCD0T1YOsr7v7DRsel79Khl
tQdNCA0JzaleIptVo5hV65QXGMrDI8qyv/9dLrqolkIIM+Chhzp3Yvr6a9vh
kmHYxAUFcthhtZc9aDZoPESUoLzAUB4ekRWVlfKPf8iFF9ZylzHMifvuK3fc
IZ99Zjtiyihs0P79nev2pC970DzQSNBU0GCIyEV5gaE8vCjgIq0Jmcoq5rV3
3pHLLqulEMKjXTvnzxYvDvNUGO79X4ltjU2ZflujMeDP8MeZ2tYhzqpFzKp1
ygsM5eER6fHee/K//1v75NiypZxyisycKXv22I6Y6gCbCRsLm6xFi1q2bPv2
TgNAMyCiurBeYKxatSr5ZLQ5c+Yk/9Z6eESB89FHzhnNXbrUMl02bSoHHywD
BsjatbYjphqwUbBp0l+iOf7AhsbmxkYnonqxXmAUFRWNHz9+y16xWCz5t9bD
Iy7SmpCdrG7c6NxErC5zaNu2cv758te/BvtmB0Hf/4XkYxNgQ6S/4kG8du3a
1dm42MRZEOisqsWsWme9wJgyZcq4ceNGjRpVUFCAWsj1W+vhEYXA7t0ybZoc
f7w0b16niTUnR1autB10ZCDVublO2mstU7H5sBGnTnU2KBE1kvUCY8iQIYWF
hRs2bFi6dGleXt6CBQuSf2s9PKIwKS937j5/6aW1nEEff7RoIaedJo8+yltB
ZR5SisQivS1b1r4hsLGwybDhsPmIKFOsFxjl5eVVVVXx5yh+Ro4cmfzbW2uQ
pGVDPsnCk+R9CnySqScasvrFF/j2IfvtV1LrskP89LGLLpLhwxfFj5q2Hrxf
Vh988EHrYfg9QermzUPN81Wtx6g32XsRp5/97BNsJuvBa85qcJ8wq9l/4llR
KLF8+fLc3Nzkn6gKjyiUMC8/95z88Id1WhTCvNy5s/z85/Lmm1yOqB1ShERd
e62TtLrUmdgE55/vbA6enUdkmt0CY9euXYMHD96yZUv8nwsWLBg9enTyH7D+
Icqm9etl+HA58sha7h6VqIW6dHFuI8VaKFm85rnuOic5dal5kGokfMQIJ/lE
lDXWC4wHHnhg6tSpZWVlxcXFgwYNWrRoUfJvrYdHicVDyqBAZBV9EZP4PvvU
PoPHa6FOnZx7S82bZ+2W9HOrWXlrfGR8cHz8jh3rVPPgb5BYlI6pA55SgWiu
gcOsWme9wNiyZcvEiRNzcnLy8/Pnz5/v+q318IiorMzZI/OjHzlX2KtLLRTf
j3PGGTJ5smzebDt6Y/DR8AFPP71O+w3jNQ8SiDQimYG+zgBROCgvMJSHRxQ1
u3fLjBly5pl1nfSbVJ+13b273H67vP++7egbDR8BH+Sww2q/kkDi0batky4k
jSetE6mivMBQHl4UcJHWhHBkNV4LnXNO7TfdSH7gj7/7XRk3TjZsyHA8JvZ/
IUiEioARdl12bMXXefDHSEtoap5wNFdtmFXrlBcYysMjorg9e5xrF196aV1P
dEreJXTyyTJqlHMZQOv3ZkUACAPBnHKKE1i9PkinTnLJJU4SeOoWUSAoLzCU
h0dEnj74QG67zbmCTd33E8UfzZo5e9aOPFKuusq5QmD86jeG4MXxFnijI45w
9lLVvdpJ7NfDB8THxIclosBRXmAoDy8KuEhrQqSyumWLTJkiZ51Vj11Ingss
qDdat3aWWQ45RL71LecFL79cbrpJ7rxTxoyRiROlX78lffsuwRP8Ez/Ery67
zDn2Bn988MHOf4jKCi/SmBjwEc4+Wx55RPZetCMSItVcs4ZZtU55gaE8PCKq
r48+cq47jZqkVauGlyLZeSA8BIlQEfDy5bYTR0QZpbzA0HmdaiLKiKoqWb3a
OcD4jDOcqwW2aGGzIsJbI4B99nGWjBDSF1/I3jvzEFF4BKWuUB5eFHCR1gRm
NY09e5yrAo4Y4expOvhgZ5dTZuui+K40vOxBBzlnaY0c6bwdD1pOg83VBGbV
OuUFhvLwiCj7KiqcW0W89ZZMny7Dhknv3nL99XL11c7hQJdd5jz55S+lTx/n
Rh7Tpjl/hj/Gf0JElEx5gaE8PCIiIgoi5QWG8vCigIu0JjCrJli8/1e4Masm
MKvWKS8wlIdHREREQaS8wFAeHhEREQWR8gJDeXhRwEVaE5hVE7j/yxBm1QRm
1TrlBYby8IiIiCiIlBcYysMjIiKiIFJeYATlOo0hxkVaE5hVE7j/yxBm1QRm
1Zag1BXKwyMiIqIgUl5gKA+PiIiIgkh5gaE8vCjgIq0JzKoJ3P9lCLNqArNq
nfICQ3l4REREFETKCwzl4REREVEQKS8wlIcXBVykNYFZNYH7vwxhVk1gVq1T
XmAoD4+IiIiCSHmBoTw8IiIiCiLlBYby8KKAi7QmMKsmcP+XIcyqCcyqdcoL
DOXhERERURApLzCCcp1qIiIi0i8odYXy8KKAi7QmMKsmcP+XIcyqCcyqdcoL
DOXhERERURApLzCUh0dERERBpLzAUB5eFHCR1gRm1QTu/zKEWTWBWbVOeYGh
PDwiIiIKIuUFhvLwiIiIKIiUFxjKw4sCLtKawKyawP1fhjCrJjCr1ikvMJSH
R0REREGkvMBQHh4REREFkfICQ3l4UcBFWhOYVRO4/8sQZtUEZtU65QVGUK5T
TURERPoFpa5QHh4REREFkfICQ3l4UcBFWhOYVRO4/8sQZtUEZtU65QWG8vCI
iIgoiJQXGMrDIyIioiBSXmAoDy8KuEhrArNqAvd/GcKsmsCsWme9wCgtLS0s
LOzfv39eXl5RUZHrt9bDIyIiovCxXmDMmDFj4sSJsVhszZo1KIFWrlyZ/Fvr
4REREVH42C0wKisr+/bti8on/s+5c+dOnTo1+Q9Y/1jHRVoTmFUTuP/LEGbV
BGbVOrsFxsaNGxFAWVlZ/J+LFy8uKChI/gPWP0RERJRxdguM4uLi3r17J/65
ZMmSoUOHJv/BrTVkPUYiIiIKPFUVRXz9p7y8PP5Prv8oxEVaE5hVE7j/yxBm
1QRm1ToNx/+sXbs2/k+0h8LCwuQ/YP1DREREGWe9wJg+ffqECRNisVhxcXFe
Xt7SpUuTf1v38Kx/kLBiYk1gVg1hYk1gVk1gVg0JUNlQUlIybdq03Nzc/Pz8
xlz/x/oHCSsm1gRm1YS5c+cysSYwqyYwq4aEpmyw/kEC9LIMNUAvy1AD9LIM
NeKhGnpZhmr9ZVn/hOZlGWqAXpahBuhlGWrEQzX0sgzV+suy/gnNyzLUAL0s
QzXxsob2fwUoAww1QC/LUK2/rP76h4iIiCjjbNc4RERERERERERERERERERE
REREREREREREREQUTqWlpYWFhf3798/Ly6t5Bw1qmPLy8lmzZiGlOTk5EyZM
2LRpk+2IQiUWiw0ZMmTRokW2AwkJNNcnn3wyNzcXzfWxxx7DP21HFAZVVVXP
PPMMBoE77rhj4sSJ27Ztsx1R4G3fvv3OO+/csmVL4ifz5s0bOHAg5q8ZM2aw
3TYY0ogEJv65YsWK++67r1+/fnfdddeCBQvsxWUcPjX6JiaUNWvWoKuuXLnS
dkRh8Oyzzz7wwAMY8VBePv7442PGjLEdUahMnz69d+/erH8y5emnn/7973+/
Y8eOnTt3ot3OnTvXdkRh8Pbbb2MSQVb37NmD75iPPPKI7YiC7eOPP7777rtv
vfXWRP2DEWDo0KEbN25EktFuX3zxRbsRBhGm/tmzZyOrifoHgwDqSeS2srJy
1apV+E60bNkyu0Eagg/Yt29fVD7xf2Lcmzp1qt2QwmHOnDkfffRR/Pm6dev6
9OmDL4N2QwqN995778EHHxw9ejTrn4yoqKjAF721a9fG/7lp06YNGzbYDSkc
8CUoXv+UlZVhXJ02bZrtiAIMw+mdd965ePHi5PrnD3/4w2uvvRZ/juoIf2Av
wKAaO3bso48+OnPmzET9g3oA/0z8waRJk8JaWKJyRnNC94z/E62roKDAbkjh
89JLL3H9J1O2bdt21113YY6+//77Wf9kxPr161H/vP/++5isR4wYgS9B+Fpk
O6gwQBk5aNAgDLC9e/ceNmzYrl27bEcUYMheeXk5pqrk+mfw4MGJpYnt27fj
V7t377YXYyBt3bpVqr+wJ+//SigpKRk4cGBY13+Ki4vRNxP/XLJkydChQy3G
Ez7vvfdeTk7OF198YTuQkBg/fvzbb7+NJ6x/MuWTTz65/fbb8VV63bp1n376
KWbqefPm2Q4qDJBPzCmYrDEpT548ecKECbYjCjxX/ZObm5s4YCMWiyX/iurF
s/5BSseOHRviXULx9Z/EYWNc/8msV155BV8AV69ebTuQkPjb3/72pz/9Kf6c
9U+mrFq1CoNAYp8XsnrPPffYDSkc0ETxjTL+HN+ykWQeAt1IrvoHo+uHH34Y
f871n8aoWf+gNhg5cuSsWbNCvBocP/4nset/7ty5hYWFdkMKh6qqKjSn++67
L766SBkxatQoNNc7qvXp0wfP//znP9sOKvAwZfTu3TsxCOBL0IgRI6xGFBL5
+fnvvvtu/PmOHTswO+/cudNuSEHnqn8efvjh119/Pf58xYoVSLi90ILNVf/g
OxGSGe4zv+KmT58+YcKEWCxWXFycl5e3dOlS2xGFwXPPPTd8+HB8p96yF49/
bjwUk5v2Qi1UVFTECSUjJk+ePH78eCRz27ZtSGxYD3fMsscffxzfoJHSPXv2
PPbYY+PGjbMdUeC56p+333576NChX3/99a5du8aOHYtJ3G54wZVc/6DFDhgw
AKNrYvIqKSmxG545+GjTpk3Lzc1Fvcfr/2REeXn57bfffmsqLsxmFvd/ZVBp
aekTTzyBrz8YB5566qmKigrbEYVBIquYTaZMmbJjxw7bEQWeq/7Bl8p58+YN
GjQoJyeH1/9pjOT654UXXnBNXrNnz7YbHhERERERERERERERERERERERERER
EREREREREREREREREREREREREREREREREREREVFd/D8CDyzN
    
    "], {{0, 308.25}, {576., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Large,
  ImageSizeRaw->{576., 308.25},
  PlotRange->{{0, 576.}, {0, 308.25}}]], "Output",
 CellLabel->"Out[86]=",ExpressionUUID->"5ba85579-4397-41f3-90ac-e86de30cf237"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.2527797776604858`", ",", 
   RowBox[{"0.25277977766048576`", "\[VeryThinSpace]", "-", 
    RowBox[{"0.23430735144148876`", " ", "K1"}]}]}], "}"}]], "Output",
 CellLabel->"Out[87]=",ExpressionUUID->"e8387dcd-ffee-4931-8337-5d01bdb21c5b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.11990648752265898`", ",", 
   RowBox[{"0.11990648752265898`", "\[VeryThinSpace]", "-", 
    RowBox[{"0.2416149721961451`", " ", "K1"}]}]}], "}"}]], "Output",
 CellLabel->"Out[88]=",ExpressionUUID->"d0843a29-1ce8-4372-83b8-4e2d3a8d34c7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Horizontal", " ", "dispersion", " ", 
    RowBox[{"(", 
     RowBox[{"1", "sr", " ", "order"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "positions"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"POSITION", " ", "=", " ", 
     RowBox[{"Range", "[", 
      RowBox[{"0.01", ",", "12.", ",", "0.01"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compute", " ", "dispersion"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"LOCAL", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$MAKE$COMPONENTS", ",", "DATA"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"LOCAL", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"First", ",", "LOCAL"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"LOCAL", " ", "=", " ", 
     RowBox[{"D", "[", 
      RowBox[{"LOCAL", ",", "K1"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"LOCAL", " ", "=", " ", 
     RowBox[{"ReplaceAll", "[", 
      RowBox[{"LOCAL", ",", 
       RowBox[{"Thread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"I$VARIABLES$CANONICAL", ",", "0"}], "]"}], "]"}]}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Add", " ", "positions"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"LOCAL", " ", "=", " ", 
     RowBox[{"Transpose", "[", 
      RowBox[{"List", "[", 
       RowBox[{"POSITION", ",", "LOCAL"}], "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Plot", " ", "dispersion"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"ListPlot", "[", "\n", "\t", 
     RowBox[{"LOCAL", ",", "\n", "\t", 
      RowBox[{"AspectRatio", " ", "\[Rule]", " ", 
       RowBox[{"1", "/", "2"}]}], ",", "\n", "\t", 
      RowBox[{"PlotTheme", " ", "\[Rule]", " ", "\"\<Detailed\>\""}], ",", 
      "\n", "\t", 
      RowBox[{"PlotStyle", " ", "\[Rule]", " ", "Black"}], ",", "\n", "\t", 
      RowBox[{"ImageSize", " ", "\[Rule]", " ", "Large"}], ",", "\n", "\t", 
      RowBox[{"ImagePadding", " ", "\[Rule]", " ", "20"}]}], "\n", "]"}], " ",
     "//", " ", "Rasterize"}]}]}]], "Code",
 CellLabel->"In[89]:=",ExpressionUUID->"e8ed3448-81e1-4685-bba0-c47470f51301"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3QeYVPW5x/FsY1mKF1RAOoIFYomKLeSxCxY0xpobe0xkvYrCKqKRJupK
U2F9IBCRYqM9lkhcY+caLkrABRQpSxGkSV2WpWxf7yt77+SfM8uy7M5//u85
5/t57nOfIcLMb9855/2/c/6zM8ff0+eGXok/+9nPHqkv/++G3z92ycMP//5P
NzaRP9z80CP/lf7QvX+86qF+96bf+/D59yTJ/zgxQf5f0sH/+9mPAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATvUCAACwwPWM
U52ax7P0g/jobonqo7slqo/ulqghj2rpbonq/G6ZfwJzt0T10d0S1Ud3S9SQ
R7V0t0R1frfMP4G5W6L66G6JauNuZ8+eHfIKENVHd0tU53fL/IPqUVgbqKol
FNYGqmoDVbUkMGNDzd+npPwH8S8KawNVtYTC2kBVbaCqltRkWgjY+59hyezZ
s11HCCCqasPsg1ynCCCqagNVdU75gKE8HgAA8CPlA4byeAAAwI+UDxjK44UB
F2ltoKo2sP9lCVW1gao6p3zAUB4PAAD4kfIBQ3k8AADgR8oHDOXxwoCLtDZQ
VRvY/7KEqtpAVZ1TPmAojwcAAPxI+YChPB4AAPAj5QOG8nhhwEVaG6iqDex/
WUJVbaCqzikfMGoYr7y8/Lvvvlu0aFFOTs7GjRvLyspsBwMAABrIoi9L/+ef
f/7hhx9++eWXO3bsqMm/Csb8s2nTpp/9u4SEhNTU1F/84hdjxozJz8+3nRMA
AMSHLOujR4+WJb5+/fqy3HsGgKuvvromdxLU+cejbdu2zz///N69e20HDh4u
0tpAVW1g/8sSqmoDVa0FWcRlKZcFPXrmYf6pXr169e64445t27bZjg0AAGJF
Fu7bb789JSWlJmu9qvmnvLw8Kytr/vz50f+poKBg/Pjxffv2feSRR2bOnCl/
sxbxSktLP/300/79+19wwQVt2rRJS0urZjiUAqanp+fl5cXmZwMAAHbIYi1L
dr169Q61pstyL4t+27ZtzzvvvHvuuWfSpEnfffddTe45DvPPjh07Ro8eLQ9U
5fwzefLk1157raSkJD8/f8iQIXPmzIlVvK+//vrOO+9s3LhxlRU76qijXn75
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

    "], {{0, 308.25}, {576., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{576., 308.25},
  PlotRange->{{0, 576.}, {0, 308.25}}]], "Output",
 CellLabel->"Out[95]=",ExpressionUUID->"44fa371f-da25-4beb-938e-1882b8e06d15"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Chromatic", " ", "beta", " ", "functions", " ", 
    RowBox[{"(", 
     RowBox[{"1", "st", " ", "order"}], ")"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "positions"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"POSITION", " ", "=", " ", 
     RowBox[{"Range", "[", 
      RowBox[{"0.01", ",", "12.", ",", "0.01"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"LOCAL", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$MAKE$COMPONENTS", ",", "DATA"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"LOCAL", " ", "=", " ", 
     RowBox[{"ReplaceAll", "[", 
      RowBox[{"LOCAL", ",", 
       RowBox[{"Rule", "[", 
        RowBox[{"K1", ",", "DELTA"}], "]"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"LOCAL", " ", "=", " ", 
     RowBox[{"ReplaceAll", "[", 
      RowBox[{"LOCAL", ",", 
       RowBox[{"Thread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"I$VARIABLES$PARAMETRIC", ",", "0"}], "]"}], "]"}]}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"LOCAL", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"D", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{"List", "[", "I$VARIABLES$CANONICAL", "]"}]}], "]"}], "]"}],
        ",", "LOCAL"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"LOCAL", " ", "=", " ", 
     RowBox[{"ReplaceAll", "[", 
      RowBox[{"LOCAL", ",", 
       RowBox[{"Thread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"I$VARIABLES$CANONICAL", ",", "0"}], "]"}], "]"}]}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{"(*", " ", "Tunes", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"NUX", " ", "=", " ", 
     RowBox[{"Chop", "[", 
      RowBox[{"Normal", "[", 
       RowBox[{"Series", "[", 
        RowBox[{
         RowBox[{"N", "[", 
          RowBox[{"Divide", "[", 
           RowBox[{
            RowBox[{"ArcCos", "[", 
             RowBox[{"Divide", "[", 
              RowBox[{
               RowBox[{"Tr", "[", 
                RowBox[{"Take", "[", 
                 RowBox[{
                  RowBox[{"Last", "[", "LOCAL", "]"}], ",", 
                  RowBox[{"List", "[", 
                   RowBox[{"1", ",", "2"}], "]"}], ",", 
                  RowBox[{"List", "[", 
                   RowBox[{"1", ",", "2"}], "]"}]}], "]"}], "]"}], ",", "2"}],
               "]"}], "]"}], ",", 
            RowBox[{"Times", "[", 
             RowBox[{"2", ",", "Pi"}], "]"}]}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"DELTA", ",", "0", ",", "1"}], "}"}]}], "]"}], "]"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"NUY", " ", "=", " ", 
     RowBox[{"Chop", "[", 
      RowBox[{"Normal", "[", 
       RowBox[{"Series", "[", 
        RowBox[{
         RowBox[{"N", "[", 
          RowBox[{"Divide", "[", 
           RowBox[{
            RowBox[{"ArcCos", "[", 
             RowBox[{"Divide", "[", 
              RowBox[{
               RowBox[{"Tr", "[", 
                RowBox[{"Take", "[", 
                 RowBox[{
                  RowBox[{"Last", "[", "LOCAL", "]"}], ",", 
                  RowBox[{"List", "[", 
                   RowBox[{"3", ",", "4"}], "]"}], ",", 
                  RowBox[{"List", "[", 
                   RowBox[{"3", ",", "4"}], "]"}]}], "]"}], "]"}], ",", "2"}],
               "]"}], "]"}], ",", 
            RowBox[{"Times", "[", 
             RowBox[{"2", ",", "Pi"}], "]"}]}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"DELTA", ",", "0", ",", "1"}], "}"}]}], "]"}], "]"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Set", " ", "one", " ", "turn", " ", "matrix"}], " ", "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"TURN", " ", "=", " ", 
     RowBox[{"Last", "[", "LOCAL", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Compute", " ", "position", " ", "dependent", " ", "one", " ", "turn", 
     " ", "matrices"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"Inverse", ",", "LOCAL"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"List", "[", 
      RowBox[{"LOCAL", ",", 
       RowBox[{"ConstantArray", "[", 
        RowBox[{"TURN", ",", 
         RowBox[{"Length", "[", "MATRIX", "]"}]}], "]"}], ",", "MATRIX"}], 
      "]"}]}], " ", ";"}], " ", "\n", 
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"Transpose", "[", "MATRIX", "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Apply", "[", "Dot", "]"}], ",", "MATRIX"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"MATRIX", " ", "=", " ", 
     RowBox[{"Normal", "[", 
      RowBox[{"Series", "[", 
       RowBox[{"MATRIX", ",", 
        RowBox[{"{", 
         RowBox[{"DELTA", ",", "0", ",", "1"}], "}"}]}], "]"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Compute", " ", "beta", " ", "functions", " ", "from", " ", "matrices"}], 
    " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"BETAX", " ", "=", " ", 
     RowBox[{"Divide", "[", 
      RowBox[{
       RowBox[{"Part", "[", 
        RowBox[{"MATRIX", ",", "All", ",", "1", ",", "2"}], "]"}], ",", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", "*", "Pi", "*", "NUX"}], "]"}]}], "]"}]}], "  ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"BETAY", " ", "=", " ", 
     RowBox[{"Divide", "[", 
      RowBox[{
       RowBox[{"Part", "[", 
        RowBox[{"MATRIX", ",", "All", ",", "3", ",", "4"}], "]"}], ",", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", "*", "Pi", "*", "NUY"}], "]"}]}], "]"}]}], "  ", ";"}], 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"1", "st", " ", "order", " ", "beta", " ", "functions"}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"BETAX", " ", "=", " ", 
     RowBox[{"Normal", "[", 
      RowBox[{"Series", "[", 
       RowBox[{"BETAX", ",", 
        RowBox[{"{", 
         RowBox[{"DELTA", ",", "0", ",", "1"}], "}"}]}], "]"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"BETAY", " ", "=", " ", 
     RowBox[{"Normal", "[", 
      RowBox[{"Series", "[", 
       RowBox[{"BETAY", ",", 
        RowBox[{"{", 
         RowBox[{"DELTA", ",", "0", ",", "1"}], "}"}]}], "]"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compute", " ", "beta", " ", "derivarives"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"BETAX", " ", "=", " ", 
     RowBox[{"D", "[", 
      RowBox[{"BETAX", ",", "DELTA"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BETAY", " ", "=", " ", 
     RowBox[{"D", "[", 
      RowBox[{"BETAY", ",", "DELTA"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Add", " ", "positions", " ", "to", " ", "beta", " ", "functions"}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"BETAX", " ", "=", " ", 
     RowBox[{"Transpose", "[", 
      RowBox[{"List", "[", 
       RowBox[{"POSITION", ",", "BETAX"}], "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BETAY", " ", "=", " ", 
     RowBox[{"Transpose", "[", 
      RowBox[{"List", "[", 
       RowBox[{"POSITION", ",", "BETAY"}], "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Plot", " ", "beta", " ", "functions"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"ListPlot", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"List", "[", 
       RowBox[{"BETAX", ",", "BETAY"}], "]"}], ",", "\n", "\t", 
      RowBox[{"AspectRatio", " ", "\[Rule]", " ", 
       RowBox[{"1", "/", "2"}]}], ",", "\n", "\t", 
      RowBox[{"PlotTheme", " ", "\[Rule]", " ", "\"\<Detailed\>\""}], ",", 
      "\n", "\t", 
      RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
       RowBox[{"List", "[", 
        RowBox[{"Blue", ",", "Red"}], "]"}]}], ",", "\n", "\t", 
      RowBox[{"ImageSize", " ", "\[Rule]", " ", "Large"}], ",", "\n", "\t", 
      RowBox[{"ImagePadding", " ", "\[Rule]", " ", "20"}]}], "\n", "]"}], " ",
     "//", " ", "Rasterize"}]}]}]], "Code",
 CellLabel->"In[96]:=",ExpressionUUID->"bbd31d8f-4422-44fc-ae3b-e39dcea8f13b"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3Ql8VNXZP/CSAGERVBRcUKl1obXWarFWa11b22rr8nGrtsW21gpVQCKJ
gIgiSBRBkLfgQgRExbeoWEWwQlHq36IUN96CbPoSBYIp0QBJyIRsz/93mZJ3
cuYmZJkz57n3/r6ffPxMSJw889yzPHPunXOPvfG2K2/O+MpXvjKsE/5z5e+G
X3D77b8bedVB+OaaIcP+OGDIH266eEjOHwb84fYzb8zEP+a3w38y9359RYiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiInLqZiIiIyALXNU5Tmh+epRcSoKdl
qAF6WoYaoKdlqBEP1dLTMlTnT8v6JzRPy1AD9LQMNUBPy1AjHqqlp2Wozp+W
9U9onpahBuhpGaqNp12wYEHEM8BQA/S0DNX50+qvf5p5nk75CwkuJtYGZtUS
JtYGZtUGZtWS5lQLvP6HmoOJtYFZtYSJtYFZtYFZtSQ0ZYPy8KJgwYIFrkMI
IWbVhgV7uY4ihJhVG5hV55QXGMrDIyIioiBSXmAoD4+IiIiCSHmBoTy8KOAi
rQ3Mqg08/2UJs2oDs+qc8gJDeXhEREQURMoLDOXhERERURApLzCUhxcFXKS1
gVm1gee/LGFWbWBWnVNeYCgPj4iIiIJIeYERlH0aiYiISL+g1BXKw4sCLtLa
wKzawPNfljCrNjCrzikvMJSHlwJ1dVJWJps3ywcfyJIl8sILMnu2PPKIPPyw
TJ4skybJxIneA/xLfr7MnSuvvipvvy2ffCIlJVJd7Tp6IiJSDNMEJouPP/Ym
jkWLvEkEUwkmlClTvMklPr/g8bRpMmuWzJ/vTUOYjD77zJuYMD2FmvICQ3l4
HrSQzz+XxYvlvvvkqqukXz/p00cOOUS6dpWOHSUzUzIypF077+srX0nfV/wv
4k+3by+dOsmBB8phh0nfvnLeeXLjjfKnP8l773nNm4iINMNA/e673qD9+997
AziGcQzmGNI7d/aGdwzy8SnG1fyCaQ6THaa8r37Vm/4wCY4b502I27bpL5+U
Fxjuw6uslA8/9Mrjyy+XE0+Ugw/2Wh2qmjS3tzS0Z7woVEpoxt/4hlx2mTz4
oPcuIBbjIq0NzKoNPP9lCbNqg5fVWEzef99bhMGQi4G3Rw9vEA7x/IIXiGkU
L3byZG9+wfTqVPoLjA0bNowePbr+24KCgsSLkebPn5/W8JD/tWu9U04orc86
y6tgu3eXDh28ytZ5m1H1hYSg9eJ9x5lnysiR8tZbUl5u99AQEYUAhkoMmBg2
v/c9OfxwbyBN/4qN5q/4UlLHjt6iVp8+3kR8443epIyp2XKBlM76p66u7s03
3xwyZMioUaPq/3Hp0qVTp04t2SeGergV4VVUeCX0hRd62UMD69nTqzMPOkgO
OEC6dPESi5ImvlSY/lZnLBWi8SOqgw+WXr2kd2/52tfkpJPktNO8uuK88+Qn
P5FLL5UrrpCrr5brrpPrr/f+e8013reXXy4//an3Gn/wA/nud+Wb35Tjj//P
68WzdevmvdKsrHSviOKv4I+iLjr/fO9qpfXrpaYmtc2GiCgAMPRt2CAPPeQN
hhgSMTCmbRCOj/nxKQYTAaYDzICYGjBBYJrAZIEp4+yzvekDUwymkquukmuv
9SaXX/7yP1MMJp3LLvN+iuAxGWFKwsSE6QmTFKYqTDGYtjB54fnrZ1JXJ90y
M70Jvf6VYqLHi8Wkj9d75JFy8snSv7+88UZzjlg665+XXnopLy9vyZIlifXP
jBkzJk+ePG7cuLFjx6IWamV4W7em9UB85Sv/d2kNko829v3vezmfMkXeeUd2
7tR43hN987PPZMECuftur52fcorXsFFvxy9SSm1LxrPhadEU8YdQxhcXu37x
6vCEgg08/2UJs+oDwxoGN7xdxUCH4S7lQ2h8SaR7d2+gxnCNPzR6tLzyivdh
GYXvMTHlYeLD9IdJ8IYbvAkR0yKqJkyRmCjTv+xwySXNiTqd9c9O5EdkzZo1
ifXPyJEj8/Pzi4qKVq9enZOTs2zZstaEl/L6J15qxlfk4ucrJ070LgRyfb7S
uvj56Pj1Tiec4DXgVL2LQZWFKh3vLzBo/Pvfrl8nEVGzYciaNcsbvg45xJvQ
2z4exssbDLAYZjG/YMjde72l69dpGSZQvMxJk7yXjIkV06ulq0301T9xRv1T
XV1dt2+1BMXPmDFjEn/55iSS8Gak/sGSOXO8OrN5VU3dvqWb6s6d5Ygj5Jvf
3H7aaTJ8uCxcuOTJJ6W21vdP8AEq/CUoXZCia68tx1uebt3atHC098TZbuT/
1lvln/985eWX3b9APuADPuADqK39f5ijBw2S446rxQTdhlGuDoMkhsoTTig8
5xxv8CwsXMCxrrEHmHy3bl1x993edPyTn5T26SN7J5raxMtXmnMs8DtXX+37
J3wrinQy6p9Ea9euzc7OTvwX95//irz6xtMoNNqNG731sfPO807CtnopGC28
d2/5zW+8RVSFC7wptf+sUsst2Mt1FCEU/qxiwMGw89vfekMQZtvWvaHD/9ir
lzcMYjDEkLj3rXQTwp9V9dzWP+Xl5SNGjCgpKYl/u2zZsry8PLfhUWpUVcmK
FZKb611E17Vra1Y4MZgcd5zcdZe32aPC66mIKLgwpHz8sWAmOv741hQ8GNC6
dPEGNwxxGOgw3FEAOV//mTBhwsyZM6uqqgoLC4cPH74CbclpeGQLBpz335fs
bG+bi86dW7ZGhF/u1s27AnDhwvBfgkVENmDowADy8597g0lLxx8MWRi4MHxh
EOPbsbBwXv+UlJRMnz596NChubm5ixcvNn6Z9Y9zFhdpv/jCOyH+4x97V8G1
aIEoK8v7hOYTT8jeK+qDiEvfNvD8lyUBziqGiJkzveECg0aLlncwKGFowgCF
YcqOAGc1LJQXGMrDo1TatUuee05+9KOWlUMdO8oZZ3gfzSgtdf0CiEgBDAUY
EDAsYHBoUcGDwWfePG8gomhQXmAoD48sKi72LiP89reb9cm++FfnznLRRXhb
xXNkRNGCLo+Oj+6PQaD5y8gYXjDIcIOyqFJeYCgPLwpULNLW1Mhf/+ptGXHQ
Qc39/OMhh3ifrP/4Y9eh+1OR1dDh+S9L9GYVHRzdHJ29OcNCRoa33w6GEQwm
Cj5hqjerkaG8wFAeHrmxcqX3MflevZo16HXoIKeeKn/+MxeFiMIAHRnd+bTT
mvW5LdQ8PXt6OxJj0CBqSHmB4XCfIgqGf/5TfvUrb2fp/dZC+IXDD5ecHO4+
TRQ86LbovOjCzenphxziDQsYHIiSBKWuUB5eFARmkbauzvtw649+5O3Lsd93
hd27e7f/+/BDV8EGJquBwvNflrjMKjopumq3bvvv1Oj46P6LFgXl8+lsq84p
LzCUh0dK7dgh99/vbZ+YmbmfMbNTJ28/kH/8w3XERJQAXRIdc7+ffUAHP/54
ycvzujxRCykvMJSHR9rV1HgD6U9/uv9PhXTo4P0afnl/u9YTkRXoem+95XXD
/V7Yg+4c760KLmOm4FJeYCgPLwrCs0j76afeZvX7/ahIVpZcfLG36m5zFT08
WdWE578ssZtVdDR0N3S6prcojF/Vk5PjdeRQYFt1TnmBoTw8CqTSUpkyxTs7
1nQhdMAB0r+/2k/QEwUeOhe6GDpa02UPuio6LDc4pVRTXmAoD4+CbfduefRR
+frX97Pd9GGHyZgxvMCAKDXQldChevVqqtOhS6JjonuikxLZobzAUB5eFERi
kXbPHnn8cTnxxKYKIfyob1+ZPz8l93qORFbTjue/LElNVtFx0H1Q1TSx7ope
hm742GNelww7tlXnlBcYysOjsCkvl0cekaOPbmqI7tRJrrxS1q51HStRQKCz
oMs08WEudDd0OnQ9dECidFFeYCgPj0Jr+3YZOVIOPbSpJfqjjpL/+i+O2ET+
0DWmTvW6SROdqGdPr6OhuxGlnfICIyj7NIZY1BdpP/pIrr66qY/Pd+ggP/uZ
bNrUomeNelbt4PkvS1qcVXSHSy5p6mPs6FDoVuhcEca26kpQ6grl4VFUVFd7
+8qefHJT58W++lXJz0/J1UFEgYTGjy5w7LFNXd6DToSuhA5F5JryAkN5eBQ5
O3fK6NHe7cYaG+GzsuSWW2TbNteBEqURGjyafRMb+KDL3HWX132I1FBeYCgP
Lwq4SOvv73+Xs85q9P4a+Hf8dPnyxv5vZtUGnv+ypKmsopE33RG+/32vs1AS
tlXnlBcYysOjqNuxQ+65x7ubamNve489Vp56Kgof5qVoQZNGw27iVFe3bl7X
4K5ZpJjyAkN5eET/sWiRnHpqo1cHHXigd9YsFnMdJVGboRmjMaNJN/ZJdnQE
dAci9ZQXGMrDiwIu0rbA1q1yzTXSsWOjGwcNGCBffCHMqh08/2XJf7KKposG
3Ng2Pmj2aPzoAtQ8bKvOKS8wlIdH5KOsTPLyvHs1NnZFxM9/Llu2uI6SqNnQ
XNFoG7vIp0cPuf9+r9kTBYryAkN5eERNee65Ru+ympEhF17o3faaSDM0UTRU
3/vCxO9MikZOFEzKC4yg7FMUYlykbat335Vzzmn0YonvfU/Wr3cdYkjw/Fcq
oVmicfpW7/hHNGk0bGoDtlVXglJXKA+PqLk+/VQuv1zat2+0CnrnHdchEu2F
pnjGGf4VOxrwZZd5jZko+JQXGMrDI2qZzz+Xm25qtAo6/XRZt851iBRhaH5o
hL5rPh06eE0XDZgoLJQXGMrDiwIu0qbel18WXHKJ/z3F4mcWVq1yHWIg8fxX
66HJNXaWtnNnr7l++aXrEMOGbdU55QWG8vCIWm/3bu+OAL6fJs7IkB/+UD77
zHWIFAFoZmhsvlc4Z2V5W/2goRKFkfICQ3l4RG21a5fcfrt06eL/Sflf/lK2
b3cdIoUUmhYamO+n2jt3lmHDvMZJFF7KCwzl4UUBF2ltMLOKt9gjR/pvnIh/
HDRIKiocRRokPP/VXGhOgwc32t7QFBuu+TCrNjCrzikvMJSHR5RKX37pXWLq
exPtbt1k4kTeQYPaCk0IDcn3jnVoeGh+vM6HIkN5gaE8PKLUKyqSX//a/zM4
Rxwhzz/vOj4KLDQeNCHfq+779/caHlGUKC8wlIcXBVyktWH/Wf3sM7noIv+r
Uvv1k/feS0uYAcPzX41Cg0Gz8a180Mz2d6U9s2oDs+qc8gIjKPs0ElmxcqV8
5zv+l0ZfeaX8+9+u4yP10EjQVHwvckbTQgMjipig1BXKwyNKhxdflKOO8r9g
48EHeVEQ+UPDQPPwvZwMzQmNiijalBcYysOLAi7S2tDirFZWypQp/petHnOM
vPKKnTADhue//g+aBBpGcmtBE3r4Ya85tQSzagOz6pzyAkN5eERpVVYmN97o
c/uMdu28m3QXFrqOjxRAM0BjSL5+vkMHr/GgCRHRXsoLDOXhETmwfr2ce67/
nnX33sudgqILhx4NwPe+KmgwaDZElCD9BcaGDRtGjx5d/21lZWV+fv6QIUNy
cnKWLl1q/DLrH+e4SGtDW7NaWyuLF8vhh/vMdF/9qrz1VorCDJhIn//CQceh
T24Phx3mNRU0mDaIblZtYladS2eBUVdX9+abb6LUGTVqVP0/zpkzZ/r06bFY
bPPmzSiBNm7c6Co8ooCJxbyten3f799wA29eEBU40DjcvuuBd97Jy+OJGpPO
AuOll17Ky8tbsmRJff1TW1s7aNAgVD7xb1EPz5w501V4RIH06afeFi7J13sc
eKA07E0UQjjEONC+u/qgYRBR49JZYOzcuRP/XbNmTX39U1xcjACqqqri365c
uXLs2LGuwiNfXKS1IfVZffFF70xH8jz4ve9FZx6M1vkvHFYc3OS69/DDU/7Z
9ghlNY2YVefSX2Ak1j+FhYUDBgyo/9GqVasST41Jw32K6ncrqm82fMAHfFD/
4NV58+S223x2uuvceV3//vGPPCsJlQ/a9ACHcvz4mqSNfeoyMrwGUFrqPkI+
4AOVD3wrinRKXv+prq6Of8v1H6K22rBBvvlNn6tBTjpJ1q1zHRy1GQ4iDmXy
8cVBx6EnomZzW//Er//ZsmVL/FuUZ/n5+W7DI0N98UwpZD2r06Z5t4xPPh12
550h/oD8gr1cR2ENDhwOX/IJLxxoHG6bwpxVd5hV59zWPzB79uxp06bFYrHC
wsKcnJzVq1e7DY8oJAoL5ac/9ZkuTzhB3n7bdXDUQjhkOHDJBS0OMfe9JGoV
5/VPRUXFrFmzsrOzc3Nzuf8PUYrNnSsHH2zOm+3bS3Z2G/eEoTTBYcLBSt70
G4cVB5eIWkt5gaE8vCjgIq0Nac3ql1/K9df7XDFy/PEhWwgK4fkvHCAcpuRj
d9113mFNl7BlVQdm1TnlBYby8IiCoa5OXn9devY0p9GOHSU3V2pqXMdHSXBQ
cGhwgIxDhoOIQ4kDSkRto7zAUB4eUZCUlHgLQRkZPlcErV3rOjhKgMNx4onm
YcKBw+HDQSSiVFBeYCgPLwq4SGuDy6z+7W9yxBHm3JqVJePHy76dSAMqDOe/
cAhwIJL29vEOGQ6cI4HPqkrMqnPKCwyH+xQRhVZ5ufziFz4LQaefLgUFroOL
MCS/Xz/zoGRmegcLh4yIUiEodYXy8IgC7MUXfa4I6tRJnn6aVwSlGxKOtCP5
yVf7pPpmFkQUp7zAUB5eFHCR1gYtWd21S666ymePoEsvlX//23VwLRbU819I
NRKevLcPDg0OkAKBzKp6zKpzygsM5eERhcGsWdK1q8/Kw7JlriOLACT50EPN
5ONw4KAQkU3KCwzl4RGFxOefywUX+Owzk5Mju3e7Di6kkFikNznnOBA4HERk
mfICQ3l4UcBFWhs0ZrWqSh56yOei6FNPlU2bXAfXLEE6/4WUIrHJn3DHIdD3
KbzAZDVQmFXnlBcYysMjCpt16+TrX/f5dPwTT3DPvdRAGpHM5E+49+3rJZ+I
0kV5gaE8PKIQKi2VgQN9zsv86leyc6fr4AIOCUQak3P7xz96aSeiNFJeYCgP
Lwq4SGuD9qzW1Xm77R14oDlNH3usvPuu6+Aapf38F1KHBBop7d7dS7XutTXV
WQ0sZtU55QWG8vCIwmzrVjn3XJ9bhj30EO8d3zJIF5LWoYOZzHPO8ZJMRC4o
LzCCsk8jUTjt2SP33+9tQWxM3FdeKTt2uA4uIJCoq67y2dU5L89LLxGlV1Dq
CuXhRQEXaW0IWFY/+MDnlmHHHCP//KfryBrQeP4LKUKikm/mhZQGh7qshgKz
6pzyAkN5eERRUVwsP/uZz7mwqVN5Lswf0oLkJJ/zQhqRTCJyTXmBoTw8ogip
qZFHHvGZ0K+7jp8LMyEhSEtyuYgE8t5qRDooLzCUhxcFXKS1IcBZ/Z//kd69
zZn9xBNlwwbXkak5/4VUICFGio46yktdMKnIaugwq84pLzCUh0cURb7nwrKy
ZO5c5Z/jtg4vH0lI3tuQ57yI9FFeYCgPjyiiqqtlyhSfz4UNGRLd+4XhhePl
J3/OC4lCuohIGeUFhvLwooCLtDaEJKvvvefdJt6Y8c86S7ZscRKOy/NfeMln
nmmmolcvL0XBF5Lmqgyz6pzyAkN5eERRt22bzx6Jhx6qeZvo1MOLxUs2koC0
IDlEpJXyAiMo+xQRRVdFhYwYYc7+7drJjBnh/6wTXiBeJl6s8fKREKSFiPQJ
Sl2hPLwo4CKtDWHLal2d/PWv0rmzWQbccEM6b+uZ7vNfeGl4gcZLRhKQinBd
Bx625qoDs+qc8gJDeXhE9H82bpS+fc164NRTXV0OZBdeFF6a8WLx8pEEIgoC
5QWG8vCIqIGSErn6arMq6NlT3nnHdWQphZeTfMEPXjhePhEFhPICQ3l4UcBF
WhvCnNXqap9bpnbuLI89Zvsvp+n8F16IcaYvI8N7yeH9kHuYm6s7zKpzygsM
5eERkb9XXpEDDzSLhD/+0XVYbYaXgBeS+LrwMvFiiSholBcYysMjokZ98omc
dJJ5kuj886WszHVkrYKwEbzxcvAC8TKJKICUFxjKw4sCLtLaEJWsVlTIFVeY
Hw8//nj56CMbf83i+S8EjLCND/jjpUXjQ+5Raa7pxaw6p7zAUB4eEe3f8OHm
XeMPOkgCNPgjVAScGD9eDl4UEQWZ8gJDeXhE1CxPPSXduzcoIdq3926MVVvr
OrImITwEaRRveCF4OUQUcMoLjKDs0xhiXKS1IYpZffddOeoo8/qZgQOlvDxV
fyHF578Q2IABZsB4CZG6tcdeUWyu9jGrrgSlrlAeHhG1QFGR9OtnVhRnnqlx
g0Tf+5kieLwEIgoF5QWG8vCIqGXKyuT66826okcPeest15ElQDAIyQjyuuuC
+sk1IvKjvMBQHl4UcJHWhkhntarK2y3QqC7wNXJkGz9OlYLzXwgAYSTHhoAR
dlRFurlaw6w6p7zAUB4eEbXSa6/53C/1lFNk3TpnIeFPI4Dk+5kiVCIKHecF
RkFBQeLFSPPnz0/8qfPwiMiWjz/22SCxfXsZPTrd95LAn8MfxZ9O3t4QQRJR
GDkvMJYuXTp16tSSfWKxWOJPnYdHXKS1gVn9j1275KabfM439ekjf/1rS5+s
lee/8Ifw55JjQGAIj9hc7WBWnXNeYMyYMWPy5Mnjxo0bO3YsaiHjp87DIyK7
6upk4ULzZmHxDZbPOEM2bLD4p/Hk+BPG9tTxW3ohJARGROHlvMAYOXJkfn5+
UVHR6tWrc3Jyli1blvhT5+ERUToUFcmll/oswuDrvPNSv+UOnvDcc/3/HMLg
h9yJIsB5gVFdXV23730Wip8xY8Yk/vTmJJKwbMgHaXiQeE6BD1L1gFn1f/D6
67HkD57H14KOPfb9YcPi+0U3kdVJkyY19Sfwv8+du/uww3zWfPDVu/fb993n
Pgn6Huwnq3zArAbkgW9FocTatWuzs7MT/0VVeERkHUqUe++VLl38F2c6dPDW
bV59tWU3zsAv43857zzzThb1X/hz+KPKb8ZBRCnltsAoLy8fMWJESUlJ/Ntl
y5bl5eUl/gLrH6Io2rlThg6VrCz/ciW+InTQQXLRRTJzphQX+zwD/nHWLO8X
8Gu+qz3xL/wJ/CH8OSKKGOcFxoQJE2bOnFlVVVVYWDh8+PAVK1Yk/tR5eFS/
eEgpxKw2S2mp5OaaN05N1ReeFk+OP0H7w+ZqA7PqnPMCo6SkZPr06UOHDs3N
zV28eLHxU+fhEZFj1dXep7H69ZPMzBSUPRkZ3lMtWpTuLYaISBnlBYby8Igo
fSor5bnnvOt/OnVqcdmTleX9j/jf8SREROoLDOXhRQEXaW1gVtuqqkreecc7
gXXaad69SlERtW9fl5GBL+8iZ3yLfzz1VLnjDlmxIsq37koJNlcbmFXnlBcY
ysMjIiKiIFJeYCgPj4iIiIJIeYGhc5+iSOEirQ3Mqg0L9nIdRQgxqzYwq64E
pa5QHh4REREFkfICQ3l4REREFETKCwzl4UUBF2ltYFZt4PkvS5hVG5hV55QX
GMrDIyIioiBSXmAoD4+IiIiCSHmBoTy8KOAirQ3Mqg08/2UJs2oDs+qc8gJD
eXhEZEN1tWzaJM8+KwMHeretOOEE6dlTunb17mLRvr13Cy98tWv3ny/fm8PX
P4h/1W8LfcABcuih3hPiafHkc+d6f4i3AiOKIOUFhvLwiKjVampk3TqZMkV+
9CM54gjp3Nm7walvPZOeL/xpBIAwjjzSC2nyZC88BElEoaS8wFAeXhRwkdaG
CGa1rAyvWq69Vo46ylvGcVjntKIuQsBHH+0Fj5eAFxI1EWyuacCsOqe8wAjK
Po1EZPj4Y7nvPvn2t70VldRWO/WntOJfmZneSbEOHf7vv/jCP8Z/1MRpsrYE
gBeFlzZunPcyiShAglJXKA+PiOpt3SqTJkm/ft5lNq2uN1C0dOwoBx4oX/ua
nH++ZGfLSy/J5s2pPA+Fp9qyxXtaPDn+BP4Q/hwKp1bHHC+H8MInTvSSQESB
oLzAUB5eFHCR1obQZPWf/5Tf/U4OO8yrW1paM6DkwP944YXy4IPelTa1tW0N
JiWf/0IYCAYhIbBevVpTFyEVeF2//a2XnHAITXNVhVl1TnmBoTw8ogj6xz/k
uuukR48WFAbxS2j69PGqgqVLpaLC9WtoIQT8xhte8Ecf7S1PtajMQ6J+8Qsv
aUSkivICQ3l4RBGxdq3ccov3Ka1m1jz4tS5dvFNC998vn33mOnoL8KIeeMB7
gXiZzcxJRoaXQKQRySQi55QXGMrDiwIu0toQiKzu3i2zZsnpp3vngJozv7dv
7+2rM3KkrF/vJmCH+x/iJeOF4+UjCc3JFVKKxCK9SLJ+gWiugcOsOqe8wFAe
HlH4FBRITo53BUtzljU6dZIf/ECefDKKnwpvDFKBhCAtSE5zFsqQaiQcaSei
dFJeYCgPjyg01q6VX//a2x55v1N2x45y9tnyzDPBWLtwCylCopCurKz9JxbJ
79+fZ8eI0kR5gaE8vCjgIq0NSrJaVycffiiXXeZ9fHu/166ccIKMHy9FRa6D
bpzy+38hdXl5Xhr3+1k5HA4cFBwaHCANNGc1uJhV55QXGEHZp4goWP71L283
465d9zMR4xeuuELeest1uKGDlF5++f5X25B/HCYcLCJKlaDUFcrDIwqWzZtl
yBBvu7+mr0g5/HC5/XbZts11uBGAJCPVSHjTV1sddJB34HD4iChVlBcYysOL
Ai7S2pDmrFZWyqOPenvXNDHJ4kf4hfvvl5070xlaKik//9U0pB3JxyFo4uxY
/Bg99ph3QNMpuFnVjFl1TnmBoTw8IuX+/nc555ymPpSNKfWYY+RPf5LSUtex
0l44EDgcOChNFKuZmXLuud7BJaJWU15gKA+PSKeSErnzTu+kSROnVI480rs/
aXBXe0IPhwYHCIep6fNio0Z5h5uIWkp5gaE8vCjgIq0NlrJaW+tdWHv66U2d
Q+neHd0qnNf2BPr8VxNwsHDIcOCa+HQeDjoOfdvvoeYrlFl1jll1TnmBoTw8
IiVKS2XsWDn00EanyPbt5bzzvDtyWpoiyTYcuJUrvYOYmdnoUe7ZU8aN46lM
omZRXmAoD4/IuY0b5eqrm7rC55hj5L/+S8rLXQdKKYJDiQOKw9rE1UFoEmgY
RNQE5QWG8vCigIu0NqQkqwsXysknN3qVbFaWt3XPhg1t/zuBEdbzX43BwcUh
bmxnaTQMNA80kraLVFbThll1TnmBoTw8ovSrqJBp07ybRjWxe8/jj0ss5jpQ
SgscaBzuJnYQQlNBg0GzIaJEyguMoOzTSJQGu3bJbbc1umlzZqZ3ccjy5a6j
JEdw6NEAGrv0Hc0GjQdNiCjiglJXKA8vCrhIa0NLs7p1q3dnzA4d/Ke2Ll1k
4ED58ktLwQZG1M5/+UIzQGNAk/BtKh07ene5RXNqEWbVBmbVOeUFhvLwiGwr
KJCLLmr0Iz9HHimPPMJTXWRCk0DD6N270c/Lo1GhaRFFmfICQ3l4RPa8+663
dbPvRR3xS1tfe811iKQeGsk3v9loKzr3XK+ZEUWT8gJDeXhRwEVaG5rO6urV
8p3vNDpn/fjHsmpV2iINEp7/agwazEUXNdqi+vXzmlwTmFUbmFXnnBcYlZWV
+fn5Q4YMycnJWbp0qfFT5+ERpdNbb3mTke85iw4d5JprpLDQdYgUWGg8aEKN
XUWGhofmRxQdzguMOXPmTJ8+PRaLbd68GSXQxoabdjkPjyg98Ab81FP936Fj
whoyRIqLXYdIoYCGNHiwfxWE5odG2PRaEFFouC0wamtrBw0ahMon/u2CBQtm
zpyZ+Ausf5zjIq0NiVl991056yz/t+SdO8vQobxFaXPx/FfzoVHddpvXwHwb
Hhpk4nVBzKoNzKpzbguM4uJiBFBVVRX/duXKlWPHjk38BdY/FGKbNjV6hXOn
TnLvvbJ7t+sQKdTQwNDM0Nh8PyOGxokmShRWbguMwsLCAQMG1H+7atWqUaNG
Jf7CzUkkoWzmAz4I6IPNm+XMM7f5blXXtatcddXGsjItofJB6B+gsQ0fjiqo
xrcKuuIKmTXrb0pC5QM+aMsD34rClfj6T3V1dfxbrv8oVN94KCV27PB2MszM
rEuea7Ky5O67uebTegv2ch1FUKHh3XOP/93E0FzRaNF0KYXYVp3TcP3Pli1b
4t+iPeTn5yf+AusfCo3SUhk50v+Ki06d5JZbOL+Qe2iEaIq+Z8TQdNGA0YyJ
wsF5gTF79uxp06bFYrHCwsKcnJzVDT974Dw8opSYNk0OOsj/KosBA3jrCtIl
fhMN3/OzaMZozEQh4LzAqKiomDVrVnZ2dm5uLvf/UYiLtG20eLEce6zvOQW5
7DLu55NKPP+VWmicaKK+915Bk0bDprZgW3VOeYGhPDyiJqxfL2ec4f/54vPP
5y4rFAxoqBdc4N+M0bzRyIkCSnmBoTw8Il/FxXLDDf4fbO/bl7vsUvCg0aLp
+m6ZiKbOzTkpiJQXGMrDiwIu0rbInj3ehipdu/rMFEccIc8/L3V13q8xqzbw
/Jcl8ayi6T73nNeMfTdtQLNH46fmY1t1TnmBoTw8onq1tbJkiRx2mM/s0KWL
jB/vOj6iFEFjRpNObudo/OgC6AhEgaC8wFCyTxFR09avl3PP9ZkR2reXG2/k
x7sobNCk0bB9L40+5xxeFESqBaWuUB5eFHCRtml79sgf/+jVOcnXRZxxRqO3
D2BWbeD5L0sayyqaNxp58nVuHTp4nYKnw5rGtuqc8gJDeXgUZXV1Mm+e9Ozp
8xb46KPl5Zddx0eUFmjqaPDJvQBdAx0kfsEbkULKCwzl4VFkffKJfPe7PmN+
x44ycaJUVrqOjyiN0ODR7H3vnYFugs5CpJDyAkN5eFHARVrD7t1yxx0+a/4Z
GXL55VJU1KwnYVZt4PkvS5qZVTR+dIHki4LQWdBleGM7A9uqc8oLDOXhUdQ8
/7z/J7y+8Q1Zvtx1cEQKoCOgOyT3kcMP97oPkR7KCwzl4VF0fP65nHeez7JP
ly4yebLr4IiUQadI3gUL3ef8872uRKSB8gJDeXhRwEXaykqZMMF/w5Nrr23l
zrfMqg08/2VJ67KKroEO4rsdFjoUr5FjW3VOeYGhPDwKvdWr5aSTfMbwPn3k
ww9dB0ekHroJOovvKWPeAo/cUl5gKA+PQmz3brn9dv93r2PHSnW16/iIAgKd
5d57/VdQ0cV4XTS5orzACMo+jSEWzUXahQuld2+f4fqHP5SCghQ8fzSzahvP
f1mSkqyi46D7JPcpdDR0twhiW3UlKHWF8vAofMrK5MorvQ+zG6P0wQfLM8+4
Do4o4NCJ0JWMzpWZ6XU6dD2idFJeYCgPj0LmhRd89nNu10769+c9vIhSA10J
HSp5IejQQ70OSJQ2ygsM5eFFQUQWaT//XC66yOfj7UcfLR98kPo/F5GsphnP
f1liI6voVsl3zUAHRDeMyAfk2VadU15gKA+PQqCmxrtLUfJeJR07Sna2xGKu
4yMKKXSu22/3OprR9dAZ0SXRMYmsUl5gKA+Pgg7vNH/yE5+l+G99y8qyDxEZ
0NFOPtmnD6JjRmQhiFxRXmAoDy8KQrxI+8QT/ss+995r/U+HOKsO8fyXJWnI
Kjpd8u1T0T3RScOKbdU55QWG8vAooLZvl0sv9XnL+d3vyvr1roMjiiR0PXTA
5F6JrooOS5RyygsM5eFREM2ZIwcdZI6x7dvLww9LVZXr4IgiDB0Q3RCd0eie
6LDotkSppbzACMo+RSEWpkXa0lL52c98PuR1+umyaVNaIwlTVvXg+S9L0pxV
dEZ0SaOTZmTIz3/udeHQYFt1JSh1hfLwKEAw2PTqZQ6qnTrJQw9x2YdIF3TJ
SZO87ml0WHRhVg2UKsoLDOXhUSDgPeOvfuXtMWuMpSefLP/7v66DI6JGoHsm
fzQsI0N++ctQLQSRK8oLDOXhRUHQF2nff9/nTl54XzlunNTVOYsq6FnViee/
LHGYVXTS++7zWQhCp0bXDjS2VeeUFxjKwyPNdu+WnByfZZ+TTpIPP3QdHBE1
Gzosum3yXcPQwXn7eGo15QWG8vBIrY0bfVbOO3SQYcNcR0ZErYLOiy6cfBYb
nZ2oFZQXGMrDi4LALdJWV8uMGT4foT3mGFm2zHVw+wQuq4HA81+W6MkqunCf
Pj6bV+Tnex0/WPRkNbKUFxjKwyNtiop87mfRrp3cdBPXyYnCAB0Z3Tl5Fwt0
fHR/ouZTXmAoD49UefVV6dHDZ+e0F15wHRkRpRQ6dfIupgcf7A0CRM2kvMAI
yj5FIRaIRVq8JRw61Gfn/J/+VOlbwkBkNXB4/ssSnVlF10YHT+71t90WjMVe
nVmNgqDUFcrDIw3WrfO51DkzUx59NHiXBBBR86GDo5snX+yHAQHDAlHTlBcY
ysMj5/70J5/bRp90kmzY4DoyIkoLdPbkT8djWMDgQNQE5QWG8vCiQO0i7c6d
cs01PqvfgwZJWZnr4PZHbVYDjee/LNGfVXT5wYN9RgMMERgodNKf1dBTXmAo
D49cWbZMjjzSHOt69JDly11HRkSOoPsffLA5LGCg0LPxBamivMBQHh6lX12d
3H23zzZoF14on3/uOjgicgqDAIaC5I1PMWg4vN8N6eS8wCgoKEi8GHv+/PmJ
P3UeHqlapN2+XS66yBzcOnaUhx8O2KXOqrIaGjz/ZUmwsoqhAAMChgVjoMDQ
gQFEj2BlNZScFxhLly6dOnVqyT6xWCzxp87DIz0wWhxyiM+uzmvWuI6MiJTB
sIDBwRguMICw6KB6zguMGTNmTJ48edy4cWPHjkUtZPzUeXikQV2dd6PD5E+5
Xnut3osbicgtDA4YIpJvloHBhOfCSBQUGCNHjszPzy8qKlq9enVOTs6yhleq
OQ+PnC/Sbtsm55xjDmIHHCDPPus2rjZxntVQ4vkvSwKdVQwUXbuaAwiGFAws
bgU6q+HgvMCorq6u21eLo/gZM2ZM4k9vTiIJzYYPQv/gL3+Rbt32GGPXUUeV
ffKJlgj5gA/4QPkDDBd9+/p8XPTOO1cqiZAP0vPAt6JIg4ULFw5uaM6cOcbv
rF27Njs7O/FfnJdn5AqK4mHDvG2cE4esdu3kxhuDsbk9EemBQQNDR0aGeS4M
gwzPhUVW2gqM3bt3f9FQWVlZeXn5iBEjSkpK4r+zbNmyvLw8J+FRY+qL53Qq
KpLzzzffr3XvLg0/HRhgTrIaegv2ch1FCIUmqxhAMIwYAwuGGid3CQxNVoPL
eYExYcKEmTNnVlVVFRYWDh8+fMWKFYk/dR4epd+iRT6f8zrpJCkocB0ZEQUc
hpHkm2VgwMGwQ1HjvMAoKSmZPn360KFDc3NzFy9ebPzUeXiUTnV1MmqU+Tmv
du3kppukosJ1cEQUChhMMKQknwvD4MNzYZGivMBQHl4UpG2RtqRELr7Y55zX
Cy+k5++nFZe+beD5L0tCmVUMLN26mQMOhqB9l2NYF8qsBovyAkN5eJQqb73l
cz+vvn3lf//XdWREFFIYXpI/F3bEEd5wRFGgvMBQHh61XV2dTJ7ss1l9//4B
uI07EQUaBhkMNcm31MGgxHNhoae8wFAeXhRYXaTdtUt+9Stz8OncWebOtfc3
VeDStw08/2VJ6LOKAQfDjjEQYWjCAGVP6LOqn/ICI/37FFHafPKJfOMb5pjT
p4+sXes6MiKKGAw7GHyM4QgDVHyrVQqToNQVysOjVnv+eenUyRxtLr1UvvzS
dWREFEkYfDAEGYMShikMVhRKygsM5eFFQcoXaSsq5I47zEEmM9M74V5Tk9o/
pReXvm3g+S9LopNVDEEYiIxt5/GFISvlW3BEJ6tqKS8wlIdHLbVtm5x7rs/m
Y+++6zoyIqK9MBwlb8GKgcv5LVMptZQXGMrDoxb54AM57DBzVDnrLNm61XVk
REQJMCh9//vmYIXhC4MYhYbyAkN5eFGQkkXamhqZPdvccBVf2dkRvZkpl75t
4PkvS6KZVQxNQ4eaQxYGsVmzUnOmPppZVUV5gaE8PGqO0lL5zW/MYSQrS156
iTtsEJFeGKAwTCXvToYBDcMaBZ3yAkN5eLRfn30m3/62OXocd5ysX+86MiKi
ZsBgdfzx5iCGYQ2DGwWa8gJDeXhR0JZF2n/8Q3r0MMeNK67gh9y59G0Fz39Z
wqxiyLr8cnMow+CGIa7VmFXnlBcYysOjJjz8sLlunJEh48dLVZXryIiIWggD
F4Yv4yJGDHEY6CiglBcYQdmnkRLFYnLttdKuXYOBont3WbjQdWRERG2AQQxD
mbEQhOEOgx4FRVDqCuXhRUFLF2m3bJFvfcscH045RT791FKAgcSlbxt4/ssS
ZjURhjIMaMYQh0EPQ1+LMKvOKS8wlIdHhtdeM3f4addOrr8+9VunEhG5ggEN
w5qxxI2hDwMgBYjyAkN5eJRo4kTzll4dO8p997kOi4jIAgxuWVnmzcIwDFJQ
KC8wlIcXBc1ZpK2pkRtuMN8N9ezJC34axaVvG3j+yxJmtTEY4jDQGZ/ywGDY
nA0SmVXnlBcYysMj2L7du4dF8gU/mza5joyIyDIMdMlXPGJIxMBIyikvMJSH
R8uXS69e5gU/V17JD7kTUVRguMOgZyyAY2DE8EiaKS8wlIcXBY0t0tbVyRNP
mDv8dOjgbZFB+8Wlbxt4/ssSZrU5MPRhADQugMQg2dhdfphV55QXGMrDi6yK
Cp87Ax54oLz6quvIiIgcwQCIYTD5Ls/8AKxOyguMoOxTFClFRXLhhT639Pr4
Y9eRERE5hWEQg6ExPGLAxLBJSgSlrlAeXhQYi7Rr18oxx5i9++KL5YsvXAUY
SFz6toHnvyxhVlsEgyGGRGOQ7NPHGzwTMavOKS8wlIcXNYsXS5cuZr8eNUoq
K11HRkSkBoZEDIzGUInBE0Mo6aG8wFAeXqRMmCCZmQ26c/v28uKLjV7dR0QU
WRgYMTxikEwcMzGEYiAlJZQXGMrDi4IFCxbs2ePd4M94L3PkkbJ6tevgAotL
3zbw/JclzGqrYZDEUJl8v1QMqsyqc8oLDOXhRUFRkXznO2b//cEPeDkfEdH+
Yag8+2xzCO3Xj0Ooe8oLDOXhhd7y5XL00eb2hr//PS/4ISJqLgyYGDaNDRKP
OoobJDqmvMBQHl64zZolBxzQoMNmZckDD7gOKxS49G0Dz39ZwqymBAZP436p
3bp5wyy5orzAUB5eWNXUyIgR5tXOhxwiL7/sOjIiosDCEIqB1LgiGoNtc+6X
SimnvMAIyj5FYbJzp1xzjXm2+sQTZd0615EREQUcBlIMp8YAiyEXAy+lR1Dq
CuXhhc+nn3q3bjf65vnny65driMLF55QsIHnvyxhVlMLw+kFF5jD7Le/7Q2/
lE7KCwzl4YXM+++ba7P4GjSIN3MnIkolDKq33moOthh+MQhT2igvMJSHFyYv
vmjevDgzU5580nVYREQhhQHWd1NZSg/lBYby8MKhtlbuusv8bGb37vLOO95P
ufRtA7NqA89/WcKs2hDPKoZZDLbGHiMYkDEsk23KCwzl4YVALCaXX+5ztTNv
5k5ElAYYbPv2NQdhDMsYnMmq9BcYGzZsGD16dP23lZWV+fn5Q4YMycnJWbp0
qfHLrH+s+vxzOe003sydiMgl31vGY3DGEE32pLPAqKure/PNN1HqjBo1qv4f
58yZM3369FgstnnzZpRAGzdudBVe1LzzjhxzjLnuOmSId2OaRFz6toFZtYHn
vyxhVm0wsoqBF8NvRkaDMfnoo/9zHQLZkM4C46WXXsrLy1uyZEl9/VNbWzto
0CBUPvFv0R5mzpzpKrxImTvX23o0saN16iQPP+w6LCKiCMMg3LmzuUc0hmuy
IZ0Fxs69GzytWbOmvv4pLi5GAFX7Pl+9cuXKsWPHugovImpqZNw480MHPXvK
okWuIyMiijwMxYcean4oDIM294hOufQXGIn1T2Fh4YABA+p/tGrVqsRTY9Jw
n8b63Rrrlw35oKUP5s179Xe/87naef36Rv+vxHMKfJCqB8yqjQf476RJk5yH
Eb4HzKqNB01k9dFH30jeI/q3v5XSUi3BB/SBb0WRWlOmTBnc0Ntvv13/0+T1
n+rq6vi3XP+xats2Oftss0+de67s2OE6MiIiSoBhGYOzMVxjAMcwTqlio8DY
tWvXFw1VVlbW/zSx/olf/7Nly5b4tyjP8vPzbYcXTevWeZfSGb3pppv4EUsi
Io0wOGOINgbtY47hrRhTxu35L5g9e/a0adNisVhhYWFOTs7q1avdhhdKS5ea
Vzvj609/atYWW/WLh5RCzKoNC/ZyHUUIMas2NCerGKIxUBtDNwbzpK1iqDWc
1z8VFRWzZs3Kzs7Ozc3l/j82oPtkZTXoPvj29dddh0VERM2A4Tp5DMfATm2k
vMBQHp5+gwaZG0ocdZR89JHrsIiIqNkwaPfu3WAkx8CO4Z3aQnmBoTw8zfbs
kZ//3Lyr15lntnhDUS5928Cs2sDzX5Ywqza0NKsYujGAGzvWYpA3dqyl5lNe
YCgPTy30lFNPNXvKtddKwnXoREQUJBjAMYwb72p5m4xWU15gKA9Pp/ffl169
zO2zcnNdh0VERG2GwRxDeuIIjwEfwz61lPICw+o+RaG0YIF5pVyXLtJwU4GW
PiGXvlOPWbWB578sYVZtaEtWMaRjYE8c5zt2FB6lZgpKXaE8PFWqq+Whh8xP
Sh5yiLz5puvIiIgopTCwY3g3BnxMAfu2E6b9U15gKA9Pj4oKufFGsy8cd5x8
8onryIiIyAIM7xjkjWEfEwGmA2oO5QWG8vCU2LFDzjvP7AXnny///ncKnpxL
3zYwqzbw/JclzKoNKckqBnkM9cbgj+mAdzVqDuUFhvLwNNi0Sb7+dbP9/+EP
UlbmOjIiIrIMQz0GfGMKwKSAqYGaprzAUB6ec3//uxx+eINmn5kpEyZITY3r
yIiIKC0w4GPYx+CfOBcccYQ3QVATlBcYysNz66mn5IADzPvCPPtsiv8Kl75t
YFZt4PkvS5hVG1KeVQz+xn0eMUFgmqDGKC8wlIfnCqr9Bx4wq/3evWX5cteR
ERGRI5gCjNtkYJrAZMEzAr6UFxjKw3Ni92659VbzbO/JJ8vmza4jIyIipzAR
YDowJohbbvEmDjIoLzCUh5d+X34pF19stu0LL5TSUlt/kUvfNjCrNvD8lyXM
qg32sorp4Ic/NKcJTByYPiiR8gIjKPs0pse2bXLKKT4f9YrFXEdGRERqYFK4
6SZzssD0gUmEglJXKA8vnT76SPr0MdvzxInc7ZOIiEyYGjBBGFMGJhFMJRSn
vMBQHl7aLFli3tK0Y0d57jmpq7P+p7n0bQOzagPPf1nCrNqQhqxigsA00aFD
g7mjZ09vQiFRX2AoDy895syRrl0bNOAePWTZMtdhERGRepgsMGUkziCYUDCt
kPICQ3l4ttXWyuTJ5ufcjztO1q51HRkREQUEpozjjzc/F4/JBVNMlCkvMJSH
Z1UsJnfcYZ697ddPiovTGgaXvm1gVm3g+S9LmFUb0pxVTByYPowJJTc30h+f
UV5gKA/PnvJyuf56s63++Mfcw4GIiFoD0wcmEWNaue46b7qJJuUFhvLwLCkr
87ml7403RrpQJyKiNsIkgqnEmFww3UTzftnKCwzl4dmwfbt85ztm+xw7Vqqq
3MTDpW8bmFUbeP7LEmbVBldZxVSCCcWYYjDpYOqJGuUFRlD2KUqVjz+WE05o
0Czbt5fHH4/6VWpERJQqmFAwrRifi8fUgwkoCoJSVygPL7VWrfJ2ZjDu5/78
867DIiKi0MHk0r27uTUQpqHoUF5gKA8vhf7f//O2NExsiocdJm+84TosLn3b
wazawPNfljCrNmjIKqYYTDTGzrqYjCJCeYGhPLxUQR1ubPJz9NGyZo3rsIiI
KNQw0WC6MbYGish5B+UFhvLwUmLyZPM8bN++snmz67CIiCgCMN1g0jGuO8XE
FHrKCwzl4bXdiBFeS0tseGedJZ9/7jqsBBoWacOHWbWB578sYVZtUJVVTDqY
eowSCNNTuCkvMJSH1xZVVTJokLRr16DJXXaZ7NjhOjIiIooYTD2YgBLnI0xP
mKRcbb2SBsoLDOXhtVpZmfTvb7a0G24Ic0sjIiLNMAFhGjLelWOqCuvuiMoL
DOXhtc7OnfKznzVoYBkZMniw67AaoWqRNjSYVRt4/ssSZtUGtVnFZIQpKXGG
uuQSb9oKH+UFRlD2KWq+0lI5+2xz5Wf8eNdhERER7YUpyVgFwrSFySscglJX
KA+vpUpK5PTTzY3Hn37adVhEREQJMDEZUxUmL0xhYaK8wFAeXots2SInnWTu
NPXyy67D2h+1i7SBxqzawPNfljCrNujPKqYnY1feb3zDm8hCQ3mBoTy85lu/
Xnr3btCQDjxQFi1yHRYREVEjMElhqkqcuTCRYToLB+UFhvLwmulf/5IePcx7
W/z9767DIiIiahKmKuMeGQcf7E1qIaC8wFAeXnMsX+61lsTGc/jh8j//4zqs
ZtO/SBtEzKoNPP9lCbNqQ4CyignLKIHwjh5TW9Clv8DYsGHD6NGj678tKChI
vBh7/vz5bsNLrVdflUMOMRcPN250HRYREVGzYdoyLuFACYQJLtDSWWDU1dW9
+eabQ4YMGTVqVP0/Ll26dOrUqSX7xGIxV+Gl3MsvS7duDRrMCSfIpk2uwyIi
ImohTF6YwhJntO7dA/ARniaks8B46aWX8vLylixZklj/zJgxY/LkyePGjRs7
dixqIYfhpRYKY+OupqedJkVFrsNquQAt0gYIs2oDz39ZwqzaEMSsYgrDRJY4
r2GaC+4qUDoLjJ17d5Bcs2ZNYv0zcuTI/Pz8oqKi1atX5+TkLFu2zFV4KTR3
rrlzwjnnSGWl67CIiIjaABMZpjNjgsOUF0TpLzCM+qe6urquri7+GMXPmDFj
En/55iSSUDbrfDB1qmRm1iW2jQsvlOefX+Q8MD7gAz7gAz7ggzY+2L1bTjml
2LhZ/B/+sNp5YPt94FtRpNaUKVMGN/T222/X/9SofxKtXbs2Ozs78V8Ct/5z
//3maa9LLw32nVPqGw+lELNqw4K9XEcRQsyqDYHOKiY1TG3Gdr6Y/oLFRoGx
a9euLxqqTDj3k1j/lJeXjxgxomTfntrLli3Ly8uzHZ4lNTUyYYJkZjZoEtdd
F557phAREcVhavvFLxrMd5j+MAliKgwK5+e/JkyYMHPmzKqqqsLCwuHDh69Y
scJteK1TW+uVvsZdTX/9a6mudh0ZERGRBZjgMM0Zd0rNy/MmxEBwXv+UlJRM
nz596NChubm5ixcvNn45KPXPiBHm9WC//73rmFIk0Iu0ajGrNvD8lyXMqg2h
ySomO2P6w4QYCMoLDOXhxd16q2RkNDj6ubmy75puIiKi0MJkl5PTYAbEhIhp
UT/lBYby8KqqZPBgc/Xv7ru9fyciIooCTHmY+IwrQDA5Kp8KlRcYmsOLxbzj
a1z9ddddgTn12UyhWaRVhVm1gee/LGFWbQhZVjHxYfozPgGEKbLhLR100Vxg
iOLw6upk4ECz+Em4rRkREVG0YBJs377BzIiJUu3VIGoLjDir+xS1xa9/bV7x
9cADrmMiIiJyClOhMTliulRFbV1hUBheZaX0729e8/PEE67DsiZki7RKMKs2
8PyXJcyqDSHOKiZE41ogTJoK7wClsMBIpC288nL5zW8aHNn27WX6dL3re0RE
ROmECRHTonErBEydmEBV0VZgGFSFV1XlFbGJBzQrS6ZMcR0WERGRMpgcO3Zs
MGPecIOuT4SpKjCSqQovea9vlLihF+JFWoeYVRt4/ssSZtWGKGQVU6TxiTBM
o3qoKjCSKQmvslKuv9685ufZZ12HRUREpBgmSuNaIEymSq4FUlJgNEZDeOXl
5mmvjh3lqadch0VERKQepkvjWiBMqRquBdJQYDTBeXjV1d4py8QD17mzPPaY
26DSKgqLtOnHrNrA81+WMKs2RCqrmDQ7dTKvBXJ+f3DnBUbTnId3/fXmp71m
zHAbERERUcBg6jS2RsT06pbzAqNpDsOrrPQ+r2dc8zNvnqtwiIiIAgwTqHEt
ECZZh9cC6a9/nOzTuHu3/O535jU/Tz+dzhC0iNQibdowqzbw/JclzKoN0cwq
plHjWiBMtZhw04n7PzchFpNf/rLBAerUSR55JP2BEBERhQomU+NaIEy4Tm6T
yvrHUF0tl1zS4NBkZERinx8iIqI0wJSKiTVxnsW0m/7LoVn/JNqxQ846y7x3
29y56QxBnWgu0trGrNrA81+WMKs2RDyrmFiNqfb73/em4HRi/VPvo4/ka19r
cDg6dJA5c3hvLyIiolTCxIrp1bhBBqZgTMRpw/on7oUXpFu3Bgeia1fv6BAR
EZENmGQx1SbOvJiIMR2nB+ufPXtk+HDzXGSPHrJoke2/HAwRX6S1hFm1gee/
LGFWbWBW4zDVYsI1PhePSRlTs20Rr382bZIzzjDPQvbuLf/6l9U/S0RERB5M
uJh2jYn4e9/zJmirolz/TJ7s3czCyDnKoW3b7P1NIiIiagDTbvJaBCZoTNP2
6K9/bOxT9OGH8q1vmanG14ABKm7KpgoXaW1gVm3g+S9LmFUbmFUDJt+BA33m
ZUzWmLJTKLL7HxYWymWXSWammeFu3eSvf03tnyIiIqIWwERsfBYpvgsfJm5M
36kVnfpn40YvgcZ1zvGvH/xAtm5N1d8hIiKiVsJ0fPbZPjN1vArCVJ4qoa9/
Kivlscfk2GPNO5nWf87rmWdSEmlocZHWBmbVBp7/soRZtYFZbRqmZuNzYfWf
Dvva17xpve03Tg1r/bNqldxyixx5pH/Zg6/27fHkvNqHiIhII0zQmKaTr1ep
L4SOOMKb6DHdt0446p/SUu8Gaj17elVNYwVPYuVz7bX8kBcREZF2mKwxZWPi
bnpmx9SPSqlLF+966dmzm/XM4ah/tm7dT2biXwccILfeKl9+aTvqUOEirQ3M
qg08/2UJs2oDs9oimLgHDfIm8ebM9Zdc0qznjEL9k5XlZePNN3knLyIioqDC
JI6pHBM6pnXWP3HFxXL88f9ZH4svgh10kFx4oXeJ1PbttmMkIiKitMLkjin+
ggu86T5+6Uv8q1MnGTq0Wc+gv/4JxD5FIcZFWhuYVRt4/ssSZtUGZtWVoNQV
ysMjIiKiIFJeYCgPj4iIiIJIeYGhPLwo4CKtDcyqDTz/ZQmzagOz6pzyAkN5
eERERBREygsM5eERERFREKWzwNiwYcP48eMHDx585513Llu2LP6PlZWV+fn5
Q4YMycnJWbp0qcPwyBcXaW1gVm3g+S9LmFUbmFXn0lZglJWVochZsWJFbW1t
QUHB0KFD16xZg3+fM2fO9OnTY7HY5s2bUQJtbHhvV9Y/RERElHJpKzBQ3jz9
9NP13z766KMLFy5ELTRo0CD8KP6PqIdnzpzpJDwiIiKKDicFRkVFxbBhw9as
WVNcXIwAqqqq4v++cuXKsWPHOg+PEnGR1gZm1Qae/7KEWbWBWXUu/QVGLBab
OHFifJ2nsLBwwIAB9T9atWrVqFGjjPAMaY6WiIiIQiANFcWUKVMGN/T222/H
f1RcXDxmzJhnn322trY2/i0CqK6ujv+0Les/LI0sYWJtYFYtYWJtYFZtYFYt
cVs27Nq164uGKisr8e8FBQW5ubn1n/yC+PU/W7ZsiX+7YMGC/Pz81oXHtmQJ
E2sDs2oDBhAm1gZm1QZm1RKFZcPOnTtvv/32pUuXluxTUVGBf589e/a0adNi
sVhhYWFOTs7q1atbF56lFxKgp2WoAXpahhqgp2WoEQ/V0tMyVOdPm7b655VX
XjHOu82bN0/2Xgs9a9as7Ozs3Nzctuz/4zyTzp+WoQboaRlqgJ6WoUY8VEtP
y1CdP63yJTjnLyRAT8tQA/S0DNXG01o6/xWgDDDUAD0tQ3X+tPrrHyIiIqKU
c13jEBERERERERERERERERERERERERERERERERFROFVWVubn5w8ZMiQnJyd5
B0Vqnerq6meffRYpHTp06LRp07744gvXEYVKLBYbOXLkihUrXAcSEmiu//3f
/52dnY3m+uSTT9bfUpDaoq6u7oUXXsAgcNttt02fPn3nzp2uIwq8Xbt23XHH
HSUlJfX/smjRomHDhmH+mjNnDtttqyGNSGD9txs2bBg/fvzgwYPvvPPOxFtu
hQ9eNfomJpTNmzejq27cuNF1RGHw4osvTpgwASMeysunnnrqgQcecB1RqMye
PXvAgAGsf1Llueeee/DBB0tLS8vKytBuFyxY4DqiMFi+fDkmEWR1z549eI/5
+OOPu44o2NavX3/XXXfdfPPN9fUPRoBRo0YVFxcjyWi3CxcudBthEGHqnzdv
HrJaX/9gEEA9idzW1tYWFBTgPdGaNWvcBmlJ/A6qqHzi32LcmzlzptuQwmH+
/Pnr1q2LP966devAgQPxZtBtSKHx/vvvT5o0KS8vj/VPStTU1OCNXv1tlL/4
4ouioiK3IYUD3gTF65+qqiqMq7NmzXIdUYBhOL3jjjtWrlyZWP88/PDDf/vb
3+KPUR3hF9wFGFQTJ0584oknnn766fr6B/UAvq3/hUcffTSshSUqZzQndM/4
t2hdY8eOdRtS+Lz66qtc/0mVnTt33nnnnZij77//ftY/KbFt2zbUPx988AEm
63vuuQdvgvC2yHVQYYAycvjw4RhgBwwYMHr06PLyctcRBRiyV11djakqsf4Z
MWJE/dLErl278KPdu3e7izGQduzYIXvfsCee/6pXUVExbNiwsK7/FBYWom/W
f7tq1apRo0Y5jCd83n///aFDh3722WeuAwmJqVOnLl++HA9Y/6TKxx9/fMst
t+Ct9NatWz/55BPM1IsWLXIdVBggn5hTMFljUn7sscemTZvmOqLAM+qf7Ozs
+gs2YrFY4o+oRXzrH6R04sSJIT4lFF//qb9sjOs/qfXaa6/hDeCnn37qOpCQ
eOONNx555JH4Y9Y/qVJQUIBBoP6cF7J67733ug0pHNBE8Y4y/hjvspFkXgLd
Rkb9g9H1o48+ij/m+k9bJNc/qA3GjBnz7LPPhng1OH79T/2p/wULFuTn57sN
KRzq6urQnMaPHx9fXaSUGDduHJrrbXsNHDgQj+fOnes6qMDDlDFgwID6QQBv
gu655x6nEYVEbm7ue++9F39cWlqK2bmsrMxtSEFn1D9Tpkx5/fXX4483bNiA
hLsLLdiM+gfviZDMcH/yK2727NnTpk2LxWKFhYU5OTmrV692HVEY/OUvf7n7
7rvxnrpkH17/3HYoJr/YB7XQ0qVLOaGkxGOPPTZ16lQkc+fOnUhsWC93TLOn
nnoK76CR0j179jz55JOTJ092HVHgGfXP8uXLR40atX379vLy8okTJ2ISdxte
cCXWP2ixt99+O0bX+smroqLCbXj24KXNmjUrOzsb9R73/0mJ6urqW2655eaG
uDCbWjz/lUKVlZXPPPMM3v5gHPjzn/9cU1PjOqIwqM8qZpMZM2aUlpa6jijw
jPoHbyoXLVo0fPjwoUOHcv+ftkisf1555RVj8po3b57b8IiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIia4/8DSU8r
OQ==
    "], {{0, 308.25}, {576., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{576., 308.25},
  PlotRange->{{0, 576.}, {0, 308.25}}]], "Output",
 CellLabel->
  "Out[118]=",ExpressionUUID->"c9da8eb7-fe89-4d2c-81c4-77a256255397"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Clean", " ", "*)"}], "\n", 
  RowBox[{
  "Run", "[", "\"\<rm -f *.f90 *.mod *.o *.so *.cc optics output\>\"", 
   "]"}]}]], "Code",
 CellLabel->
  "In[119]:=",ExpressionUUID->"36d4fd5a-6598-4e80-b24f-07c87ff3084e"],

Cell[BoxData["0"], "Output",
 CellLabel->
  "Out[119]=",ExpressionUUID->"ed4d9f61-f05d-4b03-8f71-a8fa34e87977"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
(+) EXAMPLE-19:  (FORTRAN) FODO ring tune and chromaticity correction\
\>", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"870ac6b5-31c7-4a93-b027-95ed2b3d8ef1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[1]:=",ExpressionUUID->"631764f4-94be-4149-8a80-6afef3467228"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"I$INTEGRATOR", "[", "\n", "\t", 
    RowBox[{"\"\<PROJECT\>\"", ",", "             ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "project"}], " ", "name"}], " ", "*)"}], "\n", "\t", 
     RowBox[{"Plus", "[", 
      RowBox[{"1", ",", "1"}], "]"}], ",", "             ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "configuration"}], " ", "space", " ", "dimension"}],
       " ", "*)"}], "\n", "\t", "1", ",", "                     ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "canonical"}], " ", "computation", " ", "order"}], 
      " ", "*)"}], "\n", "\t", 
     RowBox[{"1", "+", 
      RowBox[{"2", "*", "1"}], "+", 
      RowBox[{"2", "*", "1"}]}], ",", "             ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "number"}], " ", "of", " ", 
       RowBox[{"parameters", "/", "knobs"}]}], " ", "*)"}], "\n", "\t", "2", 
     ",", "                     ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"--", " ", "parametric"}], " ", "order"}], " ", "*)"}], "\n", 
     "\t", 
     RowBox[{"List", "[", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1"}], "]"}]}], 
    "        ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"--", " ", "list"}], " ", "of", " ", "individual", " ", 
      "parametric", " ", "orders"}], " ", "*)"}], "\n", "]"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"K1", " ", "--"}], " ", "deviation"}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"K2", " ", "--"}], " ", "QF"}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"K3", " ", "--"}], " ", "QD"}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"K4", " ", "--"}], " ", "SF"}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"K5", " ", "--"}], " ", "SD"}], " ", "*)"}]}]}]], "Code",
 CellLabel->"In[2]:=",ExpressionUUID->"bcdf311c-9978-4a7c-a3e7-7662b72324ff"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "2", ",", "1", ",", "5", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"8810c322-3d43-4268-9071-f8a56859e4c4"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "global", " ", "parameters"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"RAD", " ", "=", " ", "22.918"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KBM", " ", "=", " ", "0.015"}], "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KQF", " ", "=", " ", "0.19"}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KQD", " ", "=", " ", 
     RowBox[{"-", "0.21"}]}], "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GSF", " ", "=", "  ", "0.0"}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GSD", " ", "=", "  ", "0.0"}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GBM", " ", "=", "  ", "0.0"}], "   ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "Hamiltonian", " ", "functions"}], " ", "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"H$DRIF", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "2"}], "*", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"P1", "^", "2"}], "+", 
         RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"1", "+", "K1"}], ")"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"H$QUAD", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "2"}], "*", 
      RowBox[{"(", 
       RowBox[{"KQ", "+", "K2", "+", "K3"}], ")"}], "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Q1", "^", "2"}], "-", 
        RowBox[{"Q2", "^", "2"}]}], ")"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"H$SEXT", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "6"}], "*", 
      RowBox[{"(", 
       RowBox[{"KS", "+", "K4", "+", "K5"}], ")"}], "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Q1", "^", "3"}], "-", 
        RowBox[{"3", "*", "Q1", "*", 
         RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"H$BEND", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", 
       RowBox[{
        RowBox[{"Q1", "^", "2"}], "/", 
        RowBox[{"R", "^", "2"}]}]}], "-", 
      RowBox[{
       RowBox[{"1", "/", "R"}], "*", "Q1", "*", "K1"}], "+", 
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Q1", "^", "2"}], "-", 
         RowBox[{"Q2", "^", "2"}]}], ")"}]}], "+", 
      RowBox[{
       RowBox[{"1", "/", "6"}], "*", "KS", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Q1", "^", "3"}], "-", 
         RowBox[{"3", "*", "Q1", "*", 
          RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}]}], " ", ";"}]}]}]], "Code",
 CellLabel->"In[3]:=",ExpressionUUID->"a328feb4-89d5-4a33-8beb-6e98a90d0e56"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "tables"}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "H$DRIF", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", "H$QUAD", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "H$SEXT", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", "H$BEND", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", "0"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<BEND\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<ELEMENT\>\"", "]"}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"{", "}"}], "}"}], "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", "\"\<QUAD\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KQ", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "\"\<SEXT\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KS", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", "\"\<BEND\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}]}], "}"}], "}"}]}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   
   RowBox[{"(*", " ", 
    RowBox[{"Generate", " ", "code"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$CODE", "[", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<LEVEL\>\"", ",", 
       RowBox[{"Plus", "[", "1", "]"}]}], "]"}], "]"}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->"In[14]:=",ExpressionUUID->"3f200751-1fd5-4a03-986d-bec1e2d3f1b3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"FORTRAN", " ", 
    RowBox[{"(", "NORMAL", ")"}]}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$MAP", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}], "]"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$SEQUENCE", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<SEQUENCE\>\"", "]"}], "]"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$ELEMENT", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<ELEMENT\>\"", "]"}], "]"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Create", " ", "FORTRAN", " ", "lattice"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"LATTICE", " ", "=", " ", 
     RowBox[{"I$FORTRAN$LATTICE", "[", "\n", "\t", 
      RowBox[{"\"\<FODO\>\"", ",", "\n", "\t", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{"(*", " ", "QF", " ", "*)"}], "   ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQF", "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "1", ",", "0", ",", "0", ",", "0"}], "]"}]}]}],
           "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLD\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "]"}]}]}],
           "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSF", "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "0", ",", "0", ",", "1", ",", "0"}], "]"}]}]}],
           "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLD\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "]"}]}]}],
           "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLB\>\"", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "]"}]}]}],
           "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLD\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "]"}]}]}],
           "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSD", "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "1"}], "]"}]}]}],
           "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLD\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "]"}]}]}],
           "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQD", "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "0", ",", "1", ",", "0", ",", "0"}], "]"}]}]}],
           "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQD", "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "0", ",", "1", ",", "0", ",", "0"}], "]"}]}]}],
           "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLD\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "]"}]}]}],
           "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSD", "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "1"}], "]"}]}]}],
           "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLD\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "]"}]}]}],
           "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLB\>\"", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "]"}]}]}],
           "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLD\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "]"}]}]}],
           "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLS\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSF", "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "0", ",", "0", ",", "1", ",", "0"}], "]"}]}]}],
           "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLD\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "]"}]}]}],
           "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "\"\<DLQ\>\"", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQF", "]"}], ",", 
           RowBox[{"N", "@", 
            RowBox[{"List", "[", 
             RowBox[{"1", ",", "1", ",", "0", ",", "0", ",", "0"}], "]"}]}]}],
           "}"}]}], "\n", "\t", "}"}], ",", "\n", "\t", 
       RowBox[{"\"\<DEFINITIONS\>\"", " ", "\[Rule]", " ", 
        RowBox[{
         RowBox[{
         "StringTemplate", "[", 
          "\"\< INTEGER :: I\\n REAL(RK), PARAMETER :: DLS = `1`\\n REAL(RK), \
PARAMETER :: DLQ = `2`\\n REAL(RK), PARAMETER :: DLB = `3`\\n REAL(RK), \
PARAMETER :: DLD = `4`\\n\>\"", "]"}], "[", "\n", "\t\t", 
         RowBox[{
          RowBox[{"I$FORTRAN$REAL", "[", "0.01", "]"}], ",", "\n", "\t\t", 
          RowBox[{"I$FORTRAN$REAL", "[", "0.01", "]"}], ",", "\n", "\t\t", 
          RowBox[{"I$FORTRAN$REAL", "[", "0.01", "]"}], ",", "\n", "\t\t", 
          RowBox[{"I$FORTRAN$REAL", "[", "0.01", "]"}]}], "\n", "\t", 
         "]"}]}]}], "\n", "]"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compile", " ", "lattice"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"List", "[", 
       RowBox[{"LATTICE", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
    ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Create", " ", "library"}], " ", "*)"}], "\n", 
   RowBox[{"I$FORTRAN$LIBRARY", "[", "LATTICE", "]"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Load", " ", "library"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "LIBRARY", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"LIBRARY", " ", "=", " ", 
     RowBox[{"I$FORTRAN$LOAD", "[", 
      RowBox[{"\"\<fodo_lat\>\"", ",", "LIBRARY"}], "]"}]}], " ", ";"}], "\n",
    "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compile", " ", "wrapper"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "MAP", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"MAP", " ", "=", " ", 
     RowBox[{"With", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"FUNCTION", " ", "=", " ", "LIBRARY"}], "}"}], ",", "\n", 
       "\t", 
       RowBox[{"Compile", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"STATE", ",", "_Real", ",", "1"}], "}"}], "}"}], ",", "\n",
          "\t\t", 
         RowBox[{"FUNCTION", "[", "STATE", "]"}], ",", "\n", "\t\t", 
         RowBox[{"RuntimeAttributes", " ", "\[Rule]", " ", 
          RowBox[{"{", "Listable", "}"}]}], ",", "\n", "\t\t", 
         RowBox[{"Parallelization", " ", "\[Rule]", " ", "True"}]}], "\t\t", 
        "\n", "\t", "]"}]}], "\n", "]"}]}], " ", ";"}]}]}]], "Code",
 CellLabel->"In[42]:=",ExpressionUUID->"99037c03-9502-451f-b478-6900ff14b6c2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Compute", " ", "parameter", " ", "dependent", " ", "transverse", " ", 
    "closed", " ", "orbit"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ORBIT", " ", "=", " ", 
     RowBox[{"I$ORBIT", "[", 
      RowBox[{"I$ORDER", ",", "MAP"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Collect", "[", 
      RowBox[{"ORBIT", ",", "K1"}], "]"}], " ", "//", " ", "Chop"}], " ", "//",
     " ", "N"}]}]}]], "Code",
 CellLabel->"In[55]:=",ExpressionUUID->"c5bdbdcf-3d7d-4d8e-8910-454f029a65c6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"K1", " ", 
    RowBox[{"(", 
     RowBox[{"1.8162752634670918`", "\[VeryThinSpace]", "-", 
      RowBox[{"13.866621881125617`", " ", "K2"}], "-", 
      RowBox[{"5.811863168396038`", " ", "K3"}]}], ")"}]}], ",", "0.`", ",", 
   "0.`", ",", "0.`"}], "}"}]], "Output",
 CellLabel->"Out[56]=",ExpressionUUID->"df93da44-a068-4d94-ade7-9c904f945dcc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Test", " ", "closed", " ", "orbit"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"Collect", "[", 
     RowBox[{
      RowBox[{"I$MAKE$COMPONENTS", "[", 
       RowBox[{"MAP", "[", 
        RowBox[{"I$MAKE$STATE", "[", "ORBIT", "]"}], "]"}], "]"}], ",", 
      "K1"}], "]"}], " ", "//", " ", "Chop"}], " ", "//", " ", 
   "N"}]}]], "Code",
 CellLabel->"In[57]:=",ExpressionUUID->"d3e52513-817c-40f6-9d7f-a92cedb17a83"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"K1", " ", 
    RowBox[{"(", 
     RowBox[{"1.8162752634671158`", "\[VeryThinSpace]", "-", 
      RowBox[{"13.866621881125603`", " ", "K2"}], "-", 
      RowBox[{"5.811863168396018`", " ", "K3"}]}], ")"}]}], ",", "0.`", ",", 
   "0.`", ",", "0.`"}], "}"}]], "Output",
 CellLabel->"Out[57]=",ExpressionUUID->"f1225507-18b7-4e70-975e-7e6bac58f24c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Compute", " ", "one", " ", "turn", " ", "matrix", " ", "on", " ", 
    "closed", " ", "orbit"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"MATRIX", " ", "=", " ", 
    RowBox[{"I$MATRIX", "[", 
     RowBox[{"ORBIT", ",", "MAP"}], "]"}]}], " ", ";"}]}]], "Code",
 CellLabel->"In[58]:=",ExpressionUUID->"0d854808-cf5b-4c8a-8dd2-76ea9b64bf35"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compute", " ", "parameter", " ", "dependent", " ", "tunes"}], " ",
    "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"QX", " ", "=", " ", 
     RowBox[{"Collect", "[", 
      RowBox[{
       RowBox[{"I$EXPAND", "[", 
        RowBox[{"Divide", "[", 
         RowBox[{
          RowBox[{"ArcCos", "[", 
           RowBox[{"Divide", "[", 
            RowBox[{
             RowBox[{"Tr", "[", 
              RowBox[{"Take", "[", 
               RowBox[{"MATRIX", ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1", ",", "2"}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1", ",", "2"}], "]"}]}], "]"}], "]"}], ",", "2"}], 
            "]"}], "]"}], ",", 
          RowBox[{"Times", "[", 
           RowBox[{"2", ",", "Pi"}], "]"}]}], "]"}], "]"}], ",", "K1", ",", 
       "Expand"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QY", " ", "=", " ", 
     RowBox[{"Collect", "[", 
      RowBox[{
       RowBox[{"I$EXPAND", "[", 
        RowBox[{"Divide", "[", 
         RowBox[{
          RowBox[{"ArcCos", "[", 
           RowBox[{"Divide", "[", 
            RowBox[{
             RowBox[{"Tr", "[", 
              RowBox[{"Take", "[", 
               RowBox[{"MATRIX", ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3", ",", "4"}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3", ",", "4"}], "]"}]}], "]"}], "]"}], ",", "2"}], 
            "]"}], "]"}], ",", 
          RowBox[{"Times", "[", 
           RowBox[{"2", ",", "Pi"}], "]"}]}], "]"}], "]"}], ",", "K1", ",", 
       "Expand"}], "]"}]}], " ", ";"}]}]}]], "Code",
 CellLabel->"In[59]:=",ExpressionUUID->"fd73dd21-4c7f-478d-b3cf-327f55e27b6b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Correct", " ", "tunes", " ", "using", " ", "1", "st", " ", "order", " ", 
    "expressions"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"NUX", " ", "=", " ", "QX"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"NUX", " ", "=", " ", 
     RowBox[{"I$EXPAND", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", "K1", "}"}], ",", "NUX"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"NUX", " ", "=", " ", 
    RowBox[{"I$EXPAND", "[", 
     RowBox[{"1", ",", 
      RowBox[{"{", 
       RowBox[{"K2", ",", "K3"}], "}"}], ",", "NUX"}], "]"}]}], "\n", "\n", 
   RowBox[{
    RowBox[{"NUY", " ", "=", " ", "QY"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"NUY", " ", "=", " ", 
     RowBox[{"I$EXPAND", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", "K1", "}"}], ",", "NUY"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"NUY", " ", "=", " ", 
    RowBox[{"I$EXPAND", "[", 
     RowBox[{"1", ",", 
      RowBox[{"{", 
       RowBox[{"K2", ",", "K3"}], "}"}], ",", "NUY"}], "]"}]}], "\n", "\n", 
   RowBox[{"SOLUTION", " ", "=", " ", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"K2", ",", "K3"}], "}"}], " ", "/.", " ", 
     RowBox[{"First", "[", 
      RowBox[{"NSolve", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NUX", "\[Equal]", "0.252"}], ",", 
          RowBox[{"NUY", "\[Equal]", "0.120"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"K2", ",", "K3"}], "}"}]}], "]"}], "]"}]}]}]}]}]], "Code",
 CellLabel->"In[61]:=",ExpressionUUID->"9f078bb0-8d20-4ff8-98c2-6271fd03bcee"],

Cell[BoxData[
 RowBox[{"0.25277977766048576`", "\[VeryThinSpace]", "+", 
  RowBox[{"1.2169986117309974`", " ", "K2"}], "+", 
  RowBox[{"0.32301732828040064`", " ", "K3"}]}]], "Output",
 CellLabel->"Out[63]=",ExpressionUUID->"d44e9ff5-fea3-4083-a31c-affa8646f58e"],

Cell[BoxData[
 RowBox[{"0.119906487522659`", "\[VeryThinSpace]", "-", 
  RowBox[{"0.7757326840927169`", " ", "K2"}], "-", 
  RowBox[{"2.43800150095252`", " ", "K3"}]}]], "Output",
 CellLabel->"Out[66]=",ExpressionUUID->"987d8e6b-658d-468c-a7c3-7ce315796d70"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.0006887222787606582`"}], ",", "0.00018078409893688217`"}], 
  "}"}]], "Output",
 CellLabel->"Out[67]=",ExpressionUUID->"83f32bb5-27fb-40c1-bef6-e1d541d2b00f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Test", " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Original", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$STATE", "[", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"List", "[", 
         RowBox[{"0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0"}], 
         "]"}], "]"}], ",", 
       RowBox[{"ORBIT", " ", "+", " ", "I$VARIABLES$CANONICAL"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"TURN", " ", "=", " ", 
     RowBox[{"MAP", "[", "INITIAL", "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"TURN", " ", "=", " ", 
     RowBox[{"ReplaceAll", "[", 
      RowBox[{
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"I$MAKE$COMPONENTS", "[", "TURN", "]"}], ",", 
         RowBox[{"{", "I$VARIABLES$CANONICAL", "}"}]}], "]"}], ",", 
       RowBox[{"Thread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"I$VARIABLES$PARAMETRIC", ",", "0"}], "]"}], "]"}]}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{"Chop", "[", 
    RowBox[{"Divide", "[", 
     RowBox[{
      RowBox[{"Eigenvalues", "[", 
       RowBox[{"MatrixLog", "[", "TURN", "]"}], "]"}], ",", 
      RowBox[{"Times", "[", 
       RowBox[{"2", ",", "Pi"}], "]"}]}], "]"}], "]"}], "\n", "\n", 
   RowBox[{"(*", " ", "Corrected", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$STATE", "[", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"List", "[", 
         RowBox[{"0.0", ",", "SOLUTION", ",", "0.0", ",", "0.0"}], "]"}], 
        "]"}], ",", 
       RowBox[{"ORBIT", " ", "+", " ", "I$VARIABLES$CANONICAL"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"TURN", " ", "=", " ", 
     RowBox[{"MAP", "[", "INITIAL", "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"TURN", " ", "=", " ", 
     RowBox[{"ReplaceAll", "[", 
      RowBox[{
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"I$MAKE$COMPONENTS", "[", "TURN", "]"}], ",", 
         RowBox[{"{", "I$VARIABLES$CANONICAL", "}"}]}], "]"}], ",", 
       RowBox[{"Thread", "[", 
        RowBox[{"Rule", "[", 
         RowBox[{"I$VARIABLES$PARAMETRIC", ",", "0"}], "]"}], "]"}]}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{"Chop", "[", 
    RowBox[{"Divide", "[", 
     RowBox[{
      RowBox[{"Eigenvalues", "[", 
       RowBox[{"MatrixLog", "[", "TURN", "]"}], "]"}], ",", 
      RowBox[{"Times", "[", 
       RowBox[{"2", ",", "Pi"}], "]"}]}], "]"}], "]"}]}]}]], "Code",
 CellLabel->"In[68]:=",ExpressionUUID->"d6da3a28-dfe5-486c-924a-83cd40e91257"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"0.`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.25277977766048576`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.`", "\[VeryThinSpace]", "-", 
    RowBox[{"0.25277977766048576`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.11990648752265982`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.`", "\[VeryThinSpace]", "-", 
    RowBox[{"0.11990648752265982`", " ", "\[ImaginaryI]"}]}]}], 
  "}"}]], "Output",
 CellLabel->"Out[71]=",ExpressionUUID->"bd0b5d1f-8bb7-40f9-bd92-bb66bf31e00a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"0.`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.25200024300963425`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.`", "\[VeryThinSpace]", "-", 
    RowBox[{"0.25200024300963425`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.12000047995450051`", " ", "\[ImaginaryI]"}]}], ",", 
   RowBox[{"0.`", "\[VeryThinSpace]", "-", 
    RowBox[{"0.12000047995450051`", " ", "\[ImaginaryI]"}]}]}], 
  "}"}]], "Output",
 CellLabel->"Out[75]=",ExpressionUUID->"1cf664cf-36f1-4311-bcfb-3111db6c960e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Correct", " ", "chromaticity", " ", "using", " ", "1", "st", " ", "order",
     " ", "expressions"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"CHX", " ", "=", " ", 
     RowBox[{"D", "[", 
      RowBox[{"QX", ",", "K1"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"CHX", " ", "=", " ", 
    RowBox[{"I$EXPAND", "[", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{"K2", ",", "K3"}], "}"}], ",", "CHX"}], "]"}]}], "\n", "\n", 
   RowBox[{
    RowBox[{"CHY", " ", "=", " ", 
     RowBox[{"D", "[", 
      RowBox[{"QY", ",", "K1"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"CHY", " ", "=", " ", 
    RowBox[{"I$EXPAND", "[", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{"K2", ",", "K3"}], "}"}], ",", "CHY"}], "]"}]}], "\n", "\n", 
   RowBox[{"SOLUTION", " ", "=", " ", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"K4", ",", "K5"}], "}"}], " ", "/.", " ", 
     RowBox[{"First", "[", 
      RowBox[{"NSolve", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"CHX", "\[Equal]", "0."}], ",", 
          RowBox[{"CHY", "\[Equal]", "0."}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"K4", ",", "K5"}], "}"}]}], "]"}], "]"}]}]}]}]}]], "Code",
 CellLabel->"In[76]:=",ExpressionUUID->"9d4a7d92-94f5-40ac-aa4d-cc1119635e1d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "0.2343073514414888`"}], "+", 
  RowBox[{"0.3619077396607048`", " ", "K4"}], "+", 
  RowBox[{"0.08705748932599812`", " ", "K5"}]}]], "Output",
 CellLabel->"Out[77]=",ExpressionUUID->"fb4ad1ed-29fd-4cf5-88b9-623a102ef2f8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "0.2416149721961451`"}], "-", 
  RowBox[{"0.2986429172219145`", " ", "K4"}], "-", 
  RowBox[{"0.4727830661088178`", " ", "K5"}]}]], "Output",
 CellLabel->"Out[79]=",ExpressionUUID->"4df9849e-8e83-405c-b0cd-4532c6b867c8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.9083847530828993`", ",", 
   RowBox[{"-", "1.0848477485415688`"}]}], "}"}]], "Output",
 CellLabel->"Out[80]=",ExpressionUUID->"40c6b92c-d0f0-44a6-9507-77b175c60db0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Test", " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Original", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$STATE", "[", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"List", "[", 
         RowBox[{"0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0"}], 
         "]"}], "]"}], ",", 
       RowBox[{"ORBIT", " ", "+", " ", "I$VARIABLES$CANONICAL"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"TURN", " ", "=", " ", 
     RowBox[{"MAP", "[", "INITIAL", "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"TURN", " ", "=", " ", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"I$MAKE$COMPONENTS", "[", "TURN", "]"}], ",", 
       RowBox[{"{", "I$VARIABLES$CANONICAL", "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"TURN", " ", "=", " ", 
     RowBox[{"MAP", "[", "INITIAL", "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"TURN", " ", "=", " ", 
     RowBox[{"I$EXPAND", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", "K1", "}"}], ",", 
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"I$MAKE$COMPONENTS", "[", "TURN", "]"}], ",", 
         RowBox[{"{", "I$VARIABLES$CANONICAL", "}"}]}], "]"}]}], "]"}]}], " ",
     ";"}], "\n", 
   RowBox[{
    RowBox[{"TURN", " ", "=", " ", 
     RowBox[{"I$EXPAND", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"K2", ",", "K3", ",", "K4", ",", "K5"}], "}"}], ",", "TURN"}],
       "]"}]}], " ", ";"}], "\n", 
   RowBox[{"Tr", "[", "TURN", "]"}], "\n", "\n", 
   RowBox[{"(*", " ", "Corrected", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$STATE", "[", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"List", "[", 
         RowBox[{"0.0", ",", "0.0", ",", "0.0", ",", "SOLUTION"}], "]"}], 
        "]"}], ",", 
       RowBox[{"ORBIT", " ", "+", " ", "I$VARIABLES$CANONICAL"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"TURN", " ", "=", " ", 
     RowBox[{"MAP", "[", "INITIAL", "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"TURN", " ", "=", " ", 
     RowBox[{"I$EXPAND", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", "K1", "}"}], ",", 
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"I$MAKE$COMPONENTS", "[", "TURN", "]"}], ",", 
         RowBox[{"{", "I$VARIABLES$CANONICAL", "}"}]}], "]"}]}], "]"}]}], " ",
     ";"}], "\n", 
   RowBox[{
    RowBox[{"TURN", " ", "=", " ", 
     RowBox[{"I$EXPAND", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"K2", ",", "K3", ",", "K4", ",", "K5"}], "}"}], ",", "TURN"}],
       "]"}]}], " ", ";"}], "\n", 
   RowBox[{"Tr", "[", "TURN", "]"}]}]}]], "Code",
 CellLabel->"In[81]:=",ExpressionUUID->"76637d58-4b04-4043-8d05-7ce9de328ba9"],

Cell[BoxData[
 RowBox[{"1.4238114826537809`", "\[VeryThinSpace]", "+", 
  RowBox[{"5.021080984770961`", " ", "K1"}]}]], "Output",
 CellLabel->"Out[87]=",ExpressionUUID->"6277f98e-1647-4831-8eae-b8de940bf6c5"],

Cell[BoxData[
 RowBox[{"1.4238114826537809`", "\[VeryThinSpace]", "+", 
  RowBox[{"3.557920111436686`*^-14", " ", "K1"}]}]], "Output",
 CellLabel->"Out[92]=",ExpressionUUID->"696644b9-708b-41c6-8b2f-31ace5f9662c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Clean", " ", "*)"}], "\n", 
  RowBox[{
  "Run", "[", "\"\<rm -f *.f90 *.mod *.o *.so *.cc\>\"", "]"}]}]], "Code",
 CellLabel->"In[93]:=",ExpressionUUID->"7afb1760-6b42-47b4-832a-cbc923d68fd9"],

Cell[BoxData["0"], "Output",
 CellLabel->"Out[93]=",ExpressionUUID->"4892bc48-c037-46d7-a35f-e86f8023936a"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-20:  (FORTRAN) FODO ring nonlinear Taylor map", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"c477077d-3a08-430f-9a76-d97212815a35"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[1]:=",ExpressionUUID->"16e152b3-6093-4539-98b5-3bdf0f9253d0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", 
   RowBox[{"\"\<PROJECT\>\"", ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "6", ",", "0", ",", "0", ",", 
    RowBox[{"List", "[", "]"}]}], "]"}]}]], "Code",
 CellLabel->"In[2]:=",ExpressionUUID->"0036e304-5017-43f7-a49c-bf3a00e23525"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "2", ",", "6", ",", "0", ",", "0", ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"3e54f917-24da-41c3-8eda-a7639ff1b0dd"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "global", " ", "parameters"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"RAD", " ", "=", " ", "22.918"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KBM", " ", "=", " ", "0.015"}], "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KQF", " ", "=", " ", "0.19"}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KQD", " ", "=", " ", 
     RowBox[{"-", "0.21"}]}], "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GSF", " ", "=", "  ", "1.5"}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GSD", " ", "=", " ", 
     RowBox[{"-", "1.5"}]}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GBM", " ", "=", "  ", "0.01"}], "  ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "Hamiltonian", " ", "functions"}], " ", "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"H$DRIF", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "2"}], "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"P1", "^", "2"}], "+", 
        RowBox[{"P2", "^", "2"}]}], ")"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"H$QUAD", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Q1", "^", "2"}], "-", 
        RowBox[{"Q2", "^", "2"}]}], ")"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"H$SEXT", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "6"}], "*", "KS", "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Q1", "^", "3"}], "-", 
        RowBox[{"3", "*", "Q1", "*", 
         RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"H$BEND", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", 
       RowBox[{
        RowBox[{"Q1", "^", "2"}], "/", 
        RowBox[{"R", "^", "2"}]}]}], "+", 
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Q1", "^", "2"}], "-", 
         RowBox[{"Q2", "^", "2"}]}], ")"}]}], "+", 
      RowBox[{
       RowBox[{"1", "/", "6"}], "*", "KS", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Q1", "^", "3"}], "-", 
         RowBox[{"3", "*", "Q1", "*", 
          RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}]}], " ", ";"}]}]}]], "Code",
 CellLabel->"In[3]:=",ExpressionUUID->"da7d1be5-ab14-4968-9984-0cdfbd52f208"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "tables"}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "H$DRIF", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", "H$QUAD", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "H$SEXT", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", "H$BEND", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", "0"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<BEND\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<ELEMENT\>\"", "]"}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"{", "}"}], "}"}], "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", "\"\<QUAD\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KQ", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "\"\<SEXT\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KS", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", "\"\<BEND\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}]}], "}"}], "}"}]}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   
   RowBox[{"(*", " ", 
    RowBox[{"Generate", " ", "code"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$CODE", "[", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<LEVEL\>\"", ",", 
       RowBox[{"Plus", "[", 
        RowBox[{"1", ",", "1"}], "]"}]}], "]"}], "]"}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->"In[14]:=",ExpressionUUID->"d50edb86-1069-4fd6-8edb-10eda3e68183"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"FORTRAN", " ", 
    RowBox[{"(", "ADAPTIVE", ")"}]}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$MAP", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}], "]"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$SEQUENCE", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<SEQUENCE\>\"", "]"}], "]"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"List", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"I$FORTRAN$ELEMENT", "[", 
        RowBox[{"\"\<DRIF\>\"", ",", 
         RowBox[{"\"\<MODE\>\"", "\[Rule]", "\"\<NORMAL\>\""}]}], "]"}], ",", 
       "\n", "\t", 
       RowBox[{"I$FORTRAN$ELEMENT", "[", 
        RowBox[{"\"\<QUAD\>\"", ",", 
         RowBox[{"\"\<MODE\>\"", "\[Rule]", "\"\<ADAPTIVE\>\""}], ",", 
         RowBox[{"\"\<TOLERANCE\>\"", "\[Rule]", 
          RowBox[{"10.0", "^", 
           RowBox[{"-", "12"}]}]}], ",", 
         RowBox[{"\"\<EXPRESSION\>\"", "\[Rule]", 
          RowBox[{"H$DRIF", "+", "H$QUAD"}]}]}], "]"}], ",", "\n", "\t", 
       RowBox[{"I$FORTRAN$ELEMENT", "[", 
        RowBox[{"\"\<SEXT\>\"", ",", 
         RowBox[{"\"\<MODE\>\"", "\[Rule]", "\"\<ADAPTIVE\>\""}], ",", 
         RowBox[{"\"\<TOLERANCE\>\"", "\[Rule]", 
          RowBox[{"10.0", "^", 
           RowBox[{"-", "12"}]}]}], ",", 
         RowBox[{"\"\<EXPRESSION\>\"", "\[Rule]", 
          RowBox[{"H$DRIF", "+", "H$SEXT"}]}]}], "]"}], ",", "\n", "\t", 
       RowBox[{"I$FORTRAN$ELEMENT", "[", 
        RowBox[{"\"\<BEND\>\"", ",", 
         RowBox[{"\"\<MODE\>\"", "\[Rule]", "\"\<ADAPTIVE\>\""}], ",", 
         RowBox[{"\"\<TOLERANCE\>\"", "\[Rule]", 
          RowBox[{"10.0", "^", 
           RowBox[{"-", "12"}]}]}], ",", 
         RowBox[{"\"\<EXPRESSION\>\"", "\[Rule]", 
          RowBox[{"H$DRIF", "+", "H$BEND"}]}]}], "]"}]}], "\n", "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Create", " ", "FORTRAN", " ", "lattice"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"LATTICE", " ", "=", " ", 
     RowBox[{"I$FORTRAN$LATTICE", "[", "\n", "\t", 
      RowBox[{"\"\<FODO\>\"", ",", "\n", "\t", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{"(*", " ", "QF", " ", "*)"}], "   ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSD", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQF", "]"}], ",", 
           RowBox[{"List", "[", "]"}]}], "}"}]}], "\n", "\t", "}"}]}], "\n", 
      "]"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compile", " ", "lattice"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"List", "[", 
       RowBox[{"LATTICE", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
    ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Create", " ", "library"}], " ", "*)"}], "\n", 
   RowBox[{"I$FORTRAN$LIBRARY", "[", "LATTICE", "]"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Load", " ", "library"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "LIBRARY", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"LIBRARY", " ", "=", " ", 
     RowBox[{"I$FORTRAN$LOAD", "[", 
      RowBox[{"\"\<fodo_lat\>\"", ",", "LIBRARY"}], "]"}]}], " ", ";"}], "\n",
    "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compile", " ", "wrapper"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "FODO", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"FODO", " ", "=", " ", 
     RowBox[{"With", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"FUNCTION", " ", "=", " ", "LIBRARY"}], "}"}], ",", "\n", 
       "\t", 
       RowBox[{"Compile", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"STATE", ",", "_Real", ",", "1"}], "}"}], "}"}], ",", "\n",
          "\t\t", 
         RowBox[{"FUNCTION", "[", "STATE", "]"}], ",", "\n", "\t\t", 
         RowBox[{"RuntimeAttributes", " ", "\[Rule]", " ", 
          RowBox[{"{", "Listable", "}"}]}], ",", "\n", "\t\t", 
         RowBox[{"Parallelization", " ", "\[Rule]", " ", "True"}]}], "\t\t", 
        "\n", "\t", "]"}]}], "\n", "]"}]}], " ", ";"}]}]}]], "Code",
 CellLabel->"In[42]:=",ExpressionUUID->"8275f512-b316-4411-a0dc-e17e2cdd1ce4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "nonlinear", " ", "map"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$MAKE$STATE", "[", "I$VARIABLES$CANONICAL", "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "SERIES", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SERIES", " ", "=", " ", 
     RowBox[{"FODO", "[", "INITIAL", "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SERIES", " ", "=", " ", 
     RowBox[{"I$MAKE$COMPONENTS", "[", "SERIES", "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SERIES", " ", "=", " ", 
     RowBox[{"N", "[", 
      RowBox[{"Chop", "[", "SERIES", "]"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SERIES", " ", "=", " ", 
     RowBox[{"Apply", "[", 
      RowBox[{"Function", ",", 
       RowBox[{"List", "[", 
        RowBox[{"I$VARIABLES$CANONICAL", ",", "SERIES"}], "]"}]}], "]"}]}], 
    " ", ";"}]}]}]], "Code",
 CellLabel->"In[55]:=",ExpressionUUID->"05006c31-1dc9-44d7-b7f1-64de8fb50c25"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Compare", " ", "Taylor", " ", "map", " ", "tracking", " ", 
    RowBox[{"(", 
     RowBox[{"not", " ", "symplectric"}], ")"}], " ", "with", " ", "exact", 
    " ", "tracking"}], " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"I$MAKE$INITIAL", "[", 
         RowBox[{"List", "[", 
          RowBox[{
           RowBox[{"Slot", "[", "1", "]"}], ",", "0.", ",", "0.", ",", "0."}],
           "]"}], "]"}], "]"}], ",", 
       RowBox[{"Range", "[", 
        RowBox[{"0.01", ",", "0.075", ",", "0.01"}], "]"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"DATA1", " ", "=", " ", 
     RowBox[{
      RowBox[{"NestList", "[", 
       RowBox[{"FODO", ",", "INITIAL", ",", 
        RowBox[{
         RowBox[{"2", "^", "8"}], "-", "1"}]}], "]"}], " ", "//", " ", 
      "Transpose"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"ORBIT1", " ", "=", " ", 
     RowBox[{"Part", "[", 
      RowBox[{"DATA1", ",", "All", ",", "All", ",", 
       RowBox[{"List", "[", 
        RowBox[{"2", ",", "3"}], "]"}]}], "]"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"List", "[", 
         RowBox[{
          RowBox[{"Slot", "[", "1", "]"}], ",", "0.", ",", "0.", ",", "0."}], 
         "]"}], "]"}], ",", 
       RowBox[{"Range", "[", 
        RowBox[{"0.01", ",", "0.075", ",", "0.01"}], "]"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"DATA2", " ", "=", " ", 
     RowBox[{"ParallelMap", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"NestList", "[", 
         RowBox[{
          RowBox[{"Apply", "[", "SERIES", "]"}], ",", 
          RowBox[{"Slot", "[", "1", "]"}], ",", 
          RowBox[{
           RowBox[{"2", "^", "8"}], "-", "1"}]}], "]"}], "]"}], ",", 
       "INITIAL"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"ORBIT2", " ", "=", " ", 
     RowBox[{"Part", "[", 
      RowBox[{"DATA2", ",", "All", ",", "All", ",", 
       RowBox[{"List", "[", 
        RowBox[{"1", ",", "2"}], "]"}]}], "]"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"ListPlot", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"List", "[", 
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{"ORBIT1", ",", "1"}], "]"}], ",", 
        RowBox[{"Flatten", "[", 
         RowBox[{"ORBIT2", ",", "1"}], "]"}]}], "]"}], ",", "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"PlotRange", ",", "All"}], "]"}], ",", "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"PlotTheme", ",", "\"\<Detailed\>\""}], "]"}], ",", "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"AspectRatio", ",", "1"}], "]"}], ",", "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"PlotStyle", ",", 
        RowBox[{"List", "[", 
         RowBox[{
          RowBox[{"Directive", "[", 
           RowBox[{"List", "[", 
            RowBox[{"Black", ",", 
             RowBox[{"PointSize", "[", "Large", "]"}]}], "]"}], "]"}], ",", 
          RowBox[{"Directive", "[", 
           RowBox[{"List", "[", 
            RowBox[{"Red", ",", 
             RowBox[{"PointSize", "[", "Medium", "]"}]}], "]"}], "]"}]}], 
         "]"}]}], "]"}], ",", "\n", "\t", 
      RowBox[{"Rule", "[", 
       RowBox[{"ImageSize", ",", "Large"}], "]"}]}], "\n", "]"}], " ", "//", 
    " ", "Rasterize"}]}]}]], "Code",
 CellLabel->"In[61]:=",ExpressionUUID->"d9f249c5-2306-46ef-a87b-b00f58a18fbb"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
z9SFn3v8s9CEzwqpB9UxPLBMmayBME9POQ6y9/jxY8EUFFtbWyYyYWJiItRx
7du3r127NtSGQUFB0qabDpOamnrhwoVly5bt2LHjhSJsNXD69OmyZcuyn6Zr
164gojIyMlq1amWC0EKE9uP+IgZfX19B3KTlfK8QhzlCypbpBeHjgl4pI9wZ
CKIrSSZ717ZtxVKluGfLlCnzPZol5tu3b0oWHlIo+RhChAchZuQUHegA1Bgk
J9SdO3cES37G6Oml4OjHMQj15tdN+vr6WXHwLC15NZS+fj3RdJrunFZ8OkId
+Wfd3d2VGsM4FeicDRs2DB06dNCgQWvWrImLi9NwmmgFUjlVZmbm8+fPz58/
zx2eS0pKmjJlCjsHqWLFiqdOnZJnjUmGFypUiP3uBRFai1CsTJZiZLQRD26K
mSrSP6fwce5zgAX8a7aKnmNnZ5eQkHDixAk2PoCVldXq1atzcYxS9yC5pCIK
Haj+CBEehJhByYdAtSVYnlyXP/qQglB5frVy6NAheePGvBrKzm7VqlXiiqw+
QkdsbS/WqlWHf7xt27bZzzSmaCnp6ekhISHsJhoMz549a9KkCfv1GzVq9Ozp
04y0NO5BlsGDBxfiL6XPVCwlMzfnRR56ydc/cXhyuwCQ0HDvbRyd8gBWX4Cr
qytjGDjhtWvXdu/eff/+fXa6FIWSTyBEeBBiBkXHiI6OPnPmzNmzZ9mFRd85
e1Y+eHDWz9mzp0+fFlQZM0St72H8C7Zu3Sq/ckVesOD3CwwM5EePQpuau/id
oXTp0symCefOnRs+fHj9+vX79eu3a9eufDsJJz/z6dOnq1evwr/sEfDPPn36
sN6ip6fn5eWVnJwMrvIrQk+xCnqjCHdgamrapk0brncJBli/KJtKVN/AgCvm
3yquAbc/evSopaUle6Wjo2NwcLCE6UOhaBhChAchZuQUHegA1BgaTqiEhITx
48ez656Yqcvft7Dcs4e3LKtvX0GVMVKkf7rwL7h7927Wc54/l8+fL581K2uL
BwxIoFWrVtWuXdvQ0LBixYpjxoxh59OqD3Uq9dGNhAoLC/Pz84N3+fDhA3Mk
Nja2W7duXJcrXry4v7///v37uQcn8710mUj8ANdUOHOXLgKnztJFv5ibM3L9
2bNnmzZtmjFjBhimdAmeDqMbTqUBdKCkIkR4EGIGRUtJT0+/f//+jh07zp07
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
b69atSrUlQULFoRa7O65c/LeveWGhgkIreOsJbcUVYX38PEqnPlmqfr6Hfkf
wsDAwN/f/+HDh97e3n369JkxY8a1a9ekfun8AigiSO2nT58yahN+L1u2rDiz
lMfxlL5/QTxYBtRWMWS2FZ+V4YhDsVgjXcDT2lkmTpxIF45lz9evXydNUj4D
mhGQ+9esWWxk9BcOpAAi097eXpd2abx37x67Qrmjsm5JANq2gvl++QFChAch
ZqgJFG6FCxdmc5AMT63/gJdYroHsI5O5u7vrzKZ7ULRu3ryZu823UqysrLJ/
jrb3lOYWzNJULntlMm5xtIDjV2H8kmqd4lQJOOXpKV+5MjM0dNu2bb/++qtM
JgM11bJlSyjrpH5FzUG+U8XGxsIHGjduXK9evbiFxm/16y+1s/PAm6YxmCiL
TSTHu9sjHKSIe/AWf0Lv7t27fX19x4wZM2jQoNWrV4v3utKBoYqfhNtjzwD5
ZePGjXDq5F9/feCk7Se8cLVQoUKvX7+W2upcAxpEDRo0QMpmpoUrEiRriDwn
6IBTESI8CDFDTZ48eaJKBhgZGUVFRUltYK6Rnp7eqVNWVN1WeD3XVNwpoZTe
vXtLbSyJZOKAfs7OzjY2No0bNx42dOggvLHCacXeEAZ4mge3OHrOSdXGnK6e
24pZIkD//v0FfyguLo4usiOclJSU27dvHzp06MWLF+AYkZGRgr1IOuIeHq4z
JCu2Zw0QVVtMv1IxrIrv6+n9jcNtMQLLwsIC8uOWLVsiIiKkfmmyCA4OXrJk
yciRI0ElMiGkoDG72sxMkLYpCDng7RonT56sS6HbYmJiBvbuLShw5incD8Sz
1AZqGkKEByFmqAloaYTHKcRrKo2NjXVpe/elS5fqI3SZk1mi+X3vDObm5rSk
FQN1XJ8+3C2whOuzhuPOdkGV94CftlCjDShWrBEnzKCrqyudXqUbgGqdOnVq
vXr1rK2tO3TocPDgwf91794DTxa6iad71VZ8dPFs6pJ4gZhgz7JUPGeexczM
bNu2bVK/JdGEhobuUdbtdkmRhmXKlNGlrdzmzJnTRNGqSsebw7K1WLdu3e7f
v69L9dd/QojwIMSM/4QJntbSxuYKHoiPVux8xNKwYUOpbcxNqlSufEtUMmzh
v3K1atXu3r37n4/S9p5SNYHidO3atePHj1+/fv38+fMFQjFCWVfPH/yD4/i3
lCxZMioq6tatW+vWrfvrr790L5zUz6B7TvXlyxdnZ2dRCyMrjhPXSY7gg82V
VdyZeJsPFplMdvny5SNHjqxZs+bevXv5qnZTh6CgIFdlyfiNk4YODg6RkZFS
W5o7XLhwgXkppe13hGOkq7lbEx3/yi3+p0BqQ/4DT09PaIY/4eeUrhznOXPm
jNQ25hpJSUl9+FNTmJ+LnPedMmUKHXYBkpOTb9y40bdv3wIFsqK2lMRTwo7J
ZNPxvI7vNZGoq+cjPm6I0GyEYkqXlteo8Wbq1Lq12UY/at++Pe1Yy29AI+v4
8eNQ1LRq1Yo7766rvn6Qvv5TLJiZiAedlFXc8OOBz0JJNR5v3HbC1LS1Yks1
ExMTHx8fmmdZ4uPjDWSyq6I0DBIJg5EjR+pGv2vv3r2VCR8eur0c7H8cpLYl
C0LMyJ6bN29CY8pRlFN8mVrM0DCn88cIJ2vms7GxuHRdpMgj/fr1o6uqgXPn
znHj9hTmx96/pogHBezlp+RWxXGo5t69e8c+8MOHD1evXhXPYqXkN6Kionbu
3Dl58uR169aFhIT4+vpyK6miuAtanEOZ+N5/co5k4LlkLFpR3mqMIUOGQNtk
Myf+QDzePF2Mi4uLDiy1i4uLGzFihODVKuDw5iE4vKo9Xs+SH9bzEpIRCDEj
e2bOnImwbwhKm78Q6tix49OnT6U2MHdISkp68eIF4/w7qlUTvOxn3PY0Nzc/
cOBAjooCbe8pVQWoYn19/QKczuSxIg9hd1MogVCg4uAxxWxVgFmHwqADvcoa
I78lFOS4VatWMfu9MrQ3M3vJd7anCBVEyELkhAc5lR043qq5c11dXRs3bjx0
6ND8lowCvn37Vht3upZHyB3HrrdVJn4YdCYK98uXL/fu3Qs6B16qCI5ezrpK
FI5h++jRo+yfoAMlFSHCgxAzsofpNpTh+Bvc0faGOL6c1NblAs+fP2/VqpWB
QdZMWzMzM/goT4KCXnE29nqHc4pMJrt69arUxkoG1EH79+/v06dPjRo1+vbo
McrS8hZCaXhKoTt2jwUq2uMs5c3NSyvGI0qXLs3sik6hqElkZKSvr6+3t/fh
w4ejo6NdOneGinsunhTkrRDVtiInZKZ9FEXob8WRYIQGYrEE1KxZc/v27bo0
0TdHpKamLl++XLAcTykeHh5SG5ubMFuEDBR5y3CETp06JbV1eQ4hwoMQM7Ih
PT2djSNaBPcth+GhDWY3iNWrV0tt4M8Cat/ExESQ2atUqXLrzJlVpUptxhFI
9PFqiPyQL1QBbsCOnlvigISCcqM3jhXAPZKKUDl+qgYEBMBznjx58ubNGx3o
TqdIy8ePH9u1ayfIuTLRNMUp+PgOkcc+xd2SDPr6+rNmzcoPAx9KiYuLK1dO
kFmFiENPaDUNG0LzHY0UecUEhJo0aeLp6fn+/XupbcxDCBEehJihijt37jg4
OKjKEYaGhiEhIVLb+FMkJyeD1FH6dpAFmMr64MGDd+/e/eG9ArW6pxRUytu3
b+HdoZHIpsx2ZVMvmC0qZuMZF3K8addQA3bletZiLmizZ/+3dKBXWWPQhGIA
/wRRPX369GrVqrHO5sCRQNsUu6kqDbHIxtVkWLJkidQvJBmvX792dHREqlm2
bJnUNuYmmzZtQri3MJHjDykIVVK8b9GiRc+fP6/0Xh0oqQgRHoSYoZSwsLDs
ox8vXbpUaht/ClA19vb2qt4OdJHUBkpJYmKih4cHs/FZHQMDtwIF2uCgPcBL
ZVXJXkW6QZvaCSFzaHHv2PHgwYM9e/Zcu3ZNZ6KCU4jl4sWLkydP7tKlC8ih
E/7+DiYmRTnZOVyZ07JrnericbSpBgYL3dzatWvXsmXLqVOngvKX+p00CojJ
W7dumZubiwtDNtDZq1evdu7c6e3tffToUa0OkAgvy3Rod1Cs2niDkAv/ra2s
rLg7WesShAgPQsxQSufOnWV4YP0hXvpdm+MYIBuOHDkitYE/xYcPH7LZ1RTh
jb3y5yKvyMjImTNnFilShEmHmZz6IhAvLj6rrCppw0k6mUzm6elJR7goEgLy
m7vpw0RlTrsNnxrCWQD1BaHKilsKFy4cGBgo9XtompMnTwqavcbGxsyij4MD
B96Uyd4hdBShUlgeBAQESG3vjwNvtGXLlqZNm5qamFioCAq0fv16qc3MEwgR
HoSYIQZ8w8LCghsAGYqIpgqv2L17t1Z3ACYnJzdr1iwb8QNUrVo1V/6WdiUU
yFr47mwiVBTtzT0UoQZ4ewL2yEuE2O3bLS0tp02b9mNbKOpAr7LGoAmlDtev
X69evXrBggWhQm/WtKlXqVJPOf78AW+loY8j/nE9fB+nEChevLgubeuTPaxT
vXz5ctiwYVAAVq5ceeDAgcwK3+MeHtxUSsHlgJGRkQ4EJh01apSqWmD48OHi
63WgpCJEeBBihpj4+PiyouYSu/vXgwcPpDbwxwkNDa1WrVoBPGXXU0W8C2D6
9OlSW6ppwsPDC5mZ1cN7BdrgROgh8oE1+PivOM7hariyePGWLVva2Ni0adNm
w4YN+bPHjEIy4JPMxOYrV67IZLJaCHkhNFqxqVwpkYffU5QAdfHGf4sqVqxX
pUrRokXBz319ffNnr2ZaWtqeAgUECZWG20e2trbavjDEy8tLUPg3RugAQnsQ
mt+zp05+cUKEByFmiAFVP9jcXODwn7BvaPVWX5CR69atWxiP9rLvNVckfhwd
HZOSkqQ2VhMkJCQsXry4c+fOjRo1crWze6pIk2SEBiBUVVQ7jOEn1MWLF6V+
AwpFXfz8/NiBXQYZQpF8D9+Mj3ODWcUjtBRHFgKcnJwCAwOheSj1q2iUhw8f
+iobQNytSEaoyLRXJwQEBHBdwp0/6jHUzGz27NnaW+UphRDhQYgZXMCN4XPr
6+tbiMY+zmP3GDFihPZ2APr7+5sg9FWUke04/u/q6pqL5RvJCRUWFlap0vcV
DzNEaZKI28hrOEdu4d1zGIoXL567AXy016k0D00oNRE7VXR09KFDh9q1a8fO
DmrL2Z/lKe4RKoTHdwTZ4RHH+W1tbS9fvizVS+UR2TjVtWvXumQ7gRzYtGmT
Jq3NRaDK69ChA/siyfx3/IwPOjs7swJPB0oqQoQHIWZw2bqV3Z0gq2OElUBf
cWzMGjVqaPVeMHPnzt2mLCOzM/979uwptY0aIiMjo0mTJsxbWyrWrQt+WuIG
clu8sP13hKpWrHj69Om1a9eeOnVKq1d/UCg3b94cO3Zs06ZNe/fuPWv48L4I
/aYIilhDWV6Q4x5RFjMzs/DwcKlfQkNAexDk4mZRgqziJIihoeHUqVO1dKXn
58+f+/Tpg7ADCN4xQ/GC27Ztk9rMXIMQ4UGIGSwgcaFdz+0MrIJV0DCEipqb
z58//4fD4BCCj4/PW2UlWwX8sjVr1vz48aPUNuYtjx498vLy6tSpUx8XF0dF
1NzGKgr88vzy7ccmNlMohAPlXpcuXVhXN+WHhWF/puKzBgg541VjY52dz549
u3nz5mvXrun8cDloRYR3mE1VpEawYg4Vl19//TUmJkZqY3+Q+/fvT5o0KYn/
0aMVr9a1a1epDcw1CBEehJjBEhoaKvLo73Cn/WhvB+C5c+ceioo1ZsVHt27d
8mKQl6iEWrp0KcgYhGc4M8te0hGajncHEHf4s9HhoOkHzeT/3BbnJ9Fep9I8
NKHURH2n+vLlS79+/djibgjOGoIcURdLoxuK/6bhyxgqVKgAKiivXydPyT6h
4uPjW7dujXBfcS/cJ2yooqZQumZKW9iwYcNYzqhHBmdxq4ODA3ONDpRUhAgP
QsxgefLkiQqnzoqHk5ycLLWBPwI07sLDwwMCAkDdpaenr6xalVumBeMhnkqV
KiUkJEhtaR6yb98+GxtmUReyxvGZuYnQFoeCZwv89wj1UwTEAFmo831iFApD
cHDwxo0b16xZc+nSpXoWFnuxyGGkjgfODjP5GSdRMS8aMDExefHihdRvkIdA
Qbpr1y5ufAylmJqaau860PPns2a5gtDdidBWPPzB0qZNG20f/mAhRHgQYgbL
mTNnehoYXEDoLp7yYcT5+nXr1pXauh/h4cOHzB7HDJUrVw44eXJptWqXEbqP
0DQcAMTR0fHx48dSW5qHzJ8/n1tAiVe1L2MSB2//9xuIn169Zs2atWLFCjrg
Rcm37N2bFdS8GA6Rwe4UdlSUd5w4OatLly7fvn179OiRzlSUYk6ePJm9/gG0
dz/ZuLg4a2trVe9VoECBfv36RUdHS23mz0KI8CDEDDleGD548GAXftbexPn0
J06cYC/Wlg7A8PBwMzMzsQ/fu3cPlN68efOmTZt2+PDhPC2sJE8oUIAmBgbu
eJvslQiVQaiZqAz35KTPL7/8IskIvrY4FQnQhFKTn3Sqffv2CeZDLuJnnHS8
KsQCF5VRUO/LZO6449TQ0PD333/Xrt0T1E+oLVu2iMtVFn19fS2dBc0AAg9e
IRt1V6pUqf3790tt5k9BiPAgxAxg4cKF8GVPiXK3CUIGBgaLFy+W2sAfwdnZ
WakDO/2fvesAaypr2ieh97qKHUVQEV3LKsW+dlHXvvbury42sO2qa1t7d+26
9l521c/esTdUVOyIgGBDlN4h/2Su93pzb4IBktwb5H3y+MQkJHPanHfOzJnx
9BRaNK3jypUrAwcOrFWrVr9y5d4ohvOVJuQK65W3LPO2du3ahfsorAhFyBPA
OLp06VLVqlWpBeKoWEpsMr54QFFtAhFqha/b29vv2rVLry/MqsLbt29r1Kih
VLs2bNhQaOkKiqCgIB8fH0NWBeduuDmeJ2Qw8lt/f3+hZSwQREI8RCJGVlYW
VfPlCu9kwKNECX3M9pyZmclx+rAhkUj095KCOpg5cya0EVraVNk1lhkYxjmd
kBOY3qecoeH69euXLVt28eLFQpbmqwhF0Aiys7M3btzYvXt3b2/vkf36+Uml
M+h6QFa8PGnwSGWlFCuUyYIAoaGh/ALZJiYmlAH16O7djUuXzpo168SJE3oa
OPry5UuqUf15p+Wurq5CS1cgiIR4iEQMmLHUQAcoDvR5PMjl74nid1VMnjxZ
FfmhoLOyNbrvqDNnzjDNPKaM/6xT7AogijqWUCnEP6nEg6KOUhNamlTsilHW
KnJHBLCWmK2tbVRUlMbF0Czy0VGc6Mpq1arduXMnNS7uStWqVNz4HSyy5uHh
ERwcrA2ZtYrAwECqXQ8UR/YDIQZSKVVURU8hEuIhEjGeP39ODbQhIUvpq9Dn
CCmFlxr0bqBfvHiRuwPX1NQ0MzNTaDE1DKCpoHy2b99ev359JlHtdWWauRv9
rkQi8ff3LzrzKUIR8oTExEQvLy9GnxxWtsqoSjG2hLRHd9iowYOTk5MLX+GM
nJyc169fg80VHh5OZUg+5eXF7oc0QsrCVlKq1OfPn4UWNm/48OEDNb6R/MO9
8uX1rjlsiIR4iESM9+/fs+PZjFmXOhs0aCC0dHkDLEYwQ4D91MKLG2bK+M+g
QYOEFlPDuHHjRqVKlQhmq6BWawghPrzrujLkt9TF9jZt2uijZ7MIRRADwIBa
vnx569atK1eu3K1Zs72KXrDPmGWiJgbXUa+8kEicpVKwONzd3TVbOEZUABZ0
n6dzYlEPd+/eXe9M6UaNGoGqXKPYnP/ofaRbt24xMTFCy5gfiIR4iEGMXFI6
wGq9fPky/09E66pISUkBGlActA09V8MJqa7YKNA/uqzdoO2OApWyZs0aKlTv
R8WkbbF4greV/u9zuti9i4vL7t27xVavULSTSoQo6ig1oZtJBUvJ09PTnZCj
WE31FFbQIFgvj71v7mNpoZkzZ2pbqrxCIx21b9++2zz+I6MTRXp7e+vX1fjQ
0FA7OzsbvDwro90iToq7iT6m/hYD8ZCJQIzTp08rZT4EC9zoXcWTWbNmGeC+
z156t1mNAjWl13czOYiMjKxfvz7TumkqXF32hDgTYm5mBtZZIUheUYQiiA2P
Hz+2trZm609jXlz0a9a7BgYG+hgS801s2rSptzL+M5VuePXq1fUrOVJ0dHTX
rl1tbGzsWPdk2Zg+fbrQMuYZghMPCoKLUaVKFWMkt5/xqHYsPaYuLi6wtwor
Wz7QtGnTzcpWH3VLwdDQsDDpnKysrHr15Cc6JTAIk+DFBE7D27PW6d9//y20
yEUoQqFFREREp06djIyMmBUXrrgYA/FFG8wyCkv1j9atYesEGzMsLExo2TUG
ULDQxn95iqgJSxFNmjRJaDHzjKtXr6o4JyCghIWWLs8QnHhQEFaMT58+wfDd
413uI9+qdiFaV0VVd/dk3tJLxogXiUSyfPly3YukvY46dOhQBUKC6GZuwiu3
iayGvyKECuoyMTFZuHChyJPSi3ZS6RjqDFNRR6kJ3U+qjx8/ent7UztjVywg
xQTN1kPXCUOKcvAmpgUq21mzZgnuj9ZIR0ErWrWSZz9awTr+msvjDD169NCv
DCR79uxRxX9Kly4ttHR5RhH/kaHBYs9jC+/pYdWv5KUU+vbokclr0QpszqZN
m4SWTjOIjIwcPHhwtWrV+ltYZCi2dAohtTH8AJjPfkIqGRuvWLHi4MGDb968
EVrq7xTv3r27du3ayZMnjx49qmoU4uLiRo8e7erqamhoaIzw8vLatWsXf0PM
ysoCDt+wYUMrKys7Ozv4F3Svu7v7qFGj7t69q/TLExIS9C7oVN8BDHbr1q0D
Bw5s06bN8Lp156Bj2g210GqedgqlvSrt2rXTdolh3SAqKqpmzZoEgw9boudd
Kfr27Su0pHnAw4cP2cJLCRlOyHFCdsGTGjUE5655RRH/kSFX97a25qzHRBzf
8uXLCyhYvnHx4kVOxpsIPPzx9PQsHLtAYGAgFWbgTldmZD9uKWqYESNGCC3v
94tz5865ublxdD4QVwWz9+PHqJs3y5QubYhlpBphunUlw5eRAV+XuWdPBx8f
CdZkrE+7dI0xIzHBeJLFixczXwxb8LJly4BTUW8BpypWrBjIA9959uxZ3fbE
d40HDx6wc3FcVuadX0q/a2RktGjRIqFF1gAyMjJga1N1YMJAj6IRYPugSB2F
JazhyyakjZXV33//LfIDdjaK+M/79+87deok4ZUCP4vju3Llylz+VmyuCrCs
Dx8+fOrUqdjY2KXjxjFK5iIGxpQqVerJkydCyabBjoKts2zZstQCHK9MkbJj
2YHy6VeyEbFNKlW4cOFCQECAu7t7mTJlXFxcevXqxT17iY09tm6dBEutjcUS
Ce6scWnRooXcWkxMlHXuzMTnMwnWwgmpxvrw8ePHZXFxsjp1qHfjCblBf/Id
IdvpVF13sHatRCK5s2OHDMzqJk32u7tbEfILIaMJ+Qm/SsJKajFkyBCOrn70
6NHWrVt37tx56dIlXd6O1DbEMKmmTmWCf8lyZcv2DFEA6DFB5NRsR6Wnp1ev
zrl6y8WaNWs0+IvaBlBZW1tbgnf5sxRH8DA2Z8yYMULLqC6+c/6TmppapUoV
ahK2JCSFHseXGDHSr18/faGyQAkGDRrELChDQ8Np06adPn16iK9vzTJl6tSp
M27cOL1OVMUARmTbtm1MS4cpU6S++JapqemcOXMKX4JHwQGrpnfv3nw1bogF
ROSfSEmR9ehBjUUIIQn0uKTTQ0Nh//79soAA/vBRjxusT8LPycaNU/VJ9uMJ
Ia6EpBoaMq98Zr37H30p8hFNh+TB8Ldvy7Zv/3T5cteuXTktgin0008/zZ07
V08rF4gKQHe3bNlCVRV3xDQUnLFbjH1eipCehLQhpJGXl9AiawZAqqkTSFXQ
u8Ou6OjoPn36VC9WjDOC1+gW3bx5U2gZ1cJ3zn84tbEMCPEmpDxWu9izZ48g
IuUDoFjAmuYvq1GjRgktmiYRFhbWvn17Gyur8ejOg43sHxys94ox3h2w7eXL
lw8KChJaZL3Ex48fN27cOGHChMGDBy9ZsiQ0NPTrezk5sitXdvn6gjbvi1tY
PKZzKU5PORMTE3lFlUmTVPGTUNb89PPzk7m6qvpkDtAP+pM1atSQ1a+vDv+R
4axQ52Nv8SBot5kZ88pKrOAZgqmiSmM4ihd9WOTh4fHhwwdOR+UgdDo2hQKw
e75+/bplw4arWHHRzwhxIKQtIUn0KyESiY+bm4+Pz8SJE/XddktOTm7evLkq
/nPx4kWhBcwPwC7g5Hj8k26RvtyF/875T5MmTVTNycDAwG/+uRhOlWWYa0tV
K8TjWS5gR0FDzM3lUSGcA589eNtrLyEPCdkGNmPFigMHDly9enViYqKmJNcx
BJxUUVFRvr6+nClkamr6xQuclSX75ReGnLBH4SpGQlIYP368rFq1XIgHw2o6
deokU6wRwH68oxN0A36B3+3XT03+s0u9j8mU5YliHrH01pyMTA/QtWtXWXy8
7N492MzAvG3Tpo2Dg4O1tTUw7UGDBq1bt07MGaVEoqnYOHHihJxYEjKGkF4Y
8WWAJaXYo7CCngClSpXSWVC0ljoqMjKSkxmJQoMGDfTFy8ABGN3ueOLKrDsT
ulHyA1t9wHfOfypWrMifkBS2bt0qiEh5RWpq6o8//qiqFcuWLRNaQA1g7969
JiZf1hankle2YqysvoyaCBEXF1emTBmgHN3xes4ktMcZyIMxNm7MhUswIc5N
mzaVNW6s6mP3Wd85Y8YM2f797HfZ4QSDWZ9csWKF7MULmZ0d8y77xh+bjO3H
0idq8p+t6n0sA48Zx8FzdKtlmJj0kUhaYWWrnxSXW/Xq1YtOHdXHX3/9JZUy
xFl+Q4rT89dZfVuzZk19r9AHzIpTYsDDwyMsLCw7Kenhhg3bpk7dvGnTs2fP
hBZTXSxdKo9Yl6LHuZjiQpg3b57Q0qmF75z/dOzYsRQhfdBpYq44guI5OckF
YDhQlVlUYeLEiULLWFBwfJS58B/9taR0g6ysrMOHD8+ePXvKlCmgir/uJllZ
suXLX5QqdYyQE6y+jWIleq1Tp45s6FB1+E+vXr1kx46x34qnn3xC/zIFU1PT
L6r+yBFZu3YxNWsOwcIlS5B9/cwacU9Pzy9BXNHRsjlzYgcNam5sXAm4PUY+
98SccicwAdRfeLhkZ2ubMHq0TCqVoZPrMUsS9lXBe4QMUpsp/cWbdczzhZjU
dz0eYkjwltn169cFG2N9w82bNxs3bkwNtDHvEspWfF2ClUPNCFFahEi/EBUV
NX369Pbt2/fu3XvlypVpaWlvDxz4aGxMtfcidoKfn19ycrLQkn4boaGhsIr5
m46xsbGAF23yhO+Z/7x8+TLAw4NJlPeUVdCkdu3a6twTF/xUefXq1bmQH4B4
opjy11HUtdkGhKwi5G/YhQn5TVFDMp4/0Cf6mKmJD21MqsjIyDZt2lDF0RiA
Qf1FTY0fr2rfn0l/2MjIKBNsOhUfu87yf23YsEH+nadOyX755XPt2iMMDcHi
7YREhTESYUy/fIyFY8eOUcGxDCQSycCBA/n3sGDTrFy5stIJX7FixWvXrsk/
lJCQ9fhxo/r1jQj5lZAJmHbvJ0KO4Yn9RoxZgr3mk5ub0nMkzmObejRpLcpQ
pXLlnBcvZMCCkpNhj5g0aVKrVq26du06YcKEiIgIQUKGBNdUuQBsFugZGGui
6N3+SIgLJvJ6QXPXpZaW5Z2du3TpcuvWLe3Jo8uOSktKem9kxJ5CT3AKDQVb
Q/SAjho+fDh/DeqR00E8/IeCzn4RTAlLC4vXiuprAw6fg4PDw4cPdSZJvgGK
1MPDg+DWI+XPQkzIqdd3eKGBU6dOnalod7fFvSwc1eM/sKO5uh48eFAfa5To
DM+ePbOxsZHgnZpxhDRlxdVUqlQpJSFBZmqqakPfTn8SuFNqTIysShXmrUCM
f45DCsoYDl5eXhzD4fHjx7D7W1jI8/SAYWhvb9+5c+fbt28rFRX+Fpbe0aNH
L168eOXKlQSQTQUyMzNDQkK2bdu2bt26GTNmTJkyZebMmSdOnOAYzikpKf7+
/kqtVHhRngg9PV32zz9Jw4cPsbTsTUgMNu01Rh8xLb1MyEi1T4oqow+Oep5q
bd3K1LQaxlEzEkBXdO/e/caNGxoZ3EKD4ODgRYsWjRgxomeFCrDkA5CgQqdF
KnbvHbwgBvx57dq1QousAeycPJk/hah7cGD6CS2dWjh//ry3t7eJiQmsbk9P
z/OHDslgaP76SybiK2D/x4LQssihYzFASVaoUMGJN/HuwR7Rps27d+90KUz+
ANwA7CAzTB2fhNka19C54Bj1fu7cOaHFzCfev3/fp0+fH374YRZvjO4o7mLy
GJIi5ILQ0LkuLh0wNQfTh/+wKNDaRYty2c0Z66527dryb0tKkq1alTlmzLLG
jSWEC5iQ/EtSFMDGF/BIH2gVkKWrV6+uXr168uTJY8eO3bhx46tXr9ifOXLk
iKWlpQSjniR4QXs+FgScjJ4XW0KS7e3VPAJi/zedfvIKi6FXQUeh3GCRSvXl
joyOMX/+fGZG1VXWw1dxgKADhw0bphd+olwwsEMHfgOpQkWwQz19+lRoAdVF
OgIUt8zZ+UtDJBLZ6tVCy/UNfJ/8h6r2LlXMDSLDy0SDBg1S/3sEPFVev349
QRucLf8q1mb033//CSKYKqjfUZGRkcB8CMZD8l0SH1htrFatWuFLzJKPSQWd
sHTpUlhEPXr0WLhw4VcSsmNHDisTDvvRkO5D+U0NxXBlJkjmP0IYh9mJEyc4
PxoYGDh16tSePXsOHz583bp1L1++1Ejz8wTNrr7w8PARI0aULVuWXbsTYGVl
Bcst580b2ejRsXXrzsMtWGmvJmMSP1XUiAluuUK7AoF0aVD+XCBm/xcH7Jxs
bip6sgw9NK6urtHR0ZoVQJcd1bx586PKGmhBT7yIiAidCZNXKJlU/v4KDTE1
lYk79+z3yX8WLVpELZ++rFDGj7jc5HGe+gAfH5+uvFUTR9v1YDvoLzFo3bo1
NTqtlGmGA6zTBv0qHahxpKSkbNmyxc3NjYqdYADs8cyZM7CRyCwtVe3Ffqxu
hI1f5u1Nvb4d7zq1J6QWPZeADLArSnwniIqKunz58saNG0+dOvXp0yf2W/37
9zfEmp6TME6b8Xal4NU5NbMP7cC+HVKjhmzWLNmGDTkJCfv27Rs6dGj79u0n
Tpyoyj/4nQAsICqhmQRrS/F7z4k129u2bSu0vPnH77//bkB7XZkHu3yPPPOD
HqFlS+5g3b8vtEy54fvkPwcOMLuoXM//ienxqRxu8iwf+gAwDcJ4aiEBNQZs
WJcuXRJawHwiISGB2c1L8fKrR2NiOlLk9pLJYIsElkvtES3xgtIgVpCJvb19
zIULuey/zPnP15uqb99mxcYuW7asVq1aMIXs7OyAWU2bNk1frnLoDOnp6VOn
TmWqWUH/V8fYKupIp66VVQ4rp6KqxzvFmKI35ubVkPCXp8fFwsJi4MCBenEL
VRvIycl59OjRtm3bRg8Zsk+x605g/9RAve1PSAnoPb2taxwWFmZpaemICcmp
1r0kpCqL/8A0k9sy+oI//mCPVIaJyfzp048fPy53jYkS3yf/iY6OVhoSSZjb
K+pBwFPlKpUrZ/CUKlV+RZwH3d+U6tWrV8OGDWvg4vIv3ph+hnkJAlgusLtY
lKR8+fJ79+7VjcyCQJ1J9fHjx5LFi1fHaqF/sybAfVYM2MyJE2UmJko3Xyb+
p3jx4kqz9ulLGgEBp3pycvKJEyfGjBlTrVo1Kq8dcM5u3bpFRUXJnj2TjRgR
XLnyPGXFealHCCs0iHow83wujo4xPY6wKFJSUgoorR75vzgICQkBg6g3IcEY
l76eEDtMNcCc238Co9XDo3///ps3b9ZIcWcddxRoM9iMpFjwzpOVQpANef4r
8UHJpIqLk1Wv/oX84JVPCj/++KPO0lfmCd8h/3n8+HGdOnWUkp+GDRvqi+b3
8/N7qKg/M7DIacmSJfWxwjvYCGAHGWARTHajWmKG2OFoX5dyclIVXlvowTGg
Zo4efU3FxjqOnswtWrSQrVolj0LE11+hOhqLLhuG/KiT5LwI6iApKYlzsR2I
JfRwDSyrsQWTGrGHaWKup0MfcX+/REglHCl/f3+h2iUGQPPZWlqC/cPuLuY0
38fHJyYmRmh584xnz55xclNwYGJiojd5EdPTl//882DMXcCGs7OzCHPyf2/8
5/37946OjvwJBiYG2FkiHCBV+PTp068ODmks8kMFzRw7dkxo0fKMhw8fUvej
q/I2gm2sMcpTaHrhwLt37wYMGCBPyyyRODk5jW/XLq1xY5mt7Sc6YRr/sYHu
rnbt2sm/4uZN2V9/RU+d2tzTk3IsGhgYgC6aMWOGmOs1FA4EBQW5uTGJIeVl
6PcQshOoKSbtTMqVAlGP53gQBAMXHhYm+15rjWVkZMycOZPJFO3I66WHLC3x
66+/Ci1vfsCuXq0UCxcuFFpGtXD//n1VTZgzZ47Q0nHxvfGfwYPlafUHEBKG
dTN30ufMxYoVy8exie5PlUEV3LlzZ8+ePTDNQkND+3l7TyLkdyTbJUuWFDP5
UdVRIDNV2Ct3/gOtKxzpDb8JalJdvny5Xr16bO1hgwmZv7ljDqM/P2vWLM43
A71/+vTpl1zKhQLi9+mkpKQcPHjw559/5tR+gvn8YNw4mWLuO6WPRshpM8zM
ZA4OWePHL5wzp3HjxuXKlWvSpMn8+fPVHE399X8xAHVna2tL8PwnXLGLNivu
swW8iihIR8XFxbm7u+fCf/r37697qXKH0klFXUxWChHGcn9v/MfFxeX/FNdO
ED068rrV4saFCxfAcmemU+XKlW/evBkdHX38+PGHDx/qo9srKirKxsbGEAsf
/Ii+b47/qwWeV3To0EF/QxzzipycHObAvzZeQr9FyCKMefjmXnmCEOrmtr6n
viyUCAsL27p164wZM4ARfRmdFy+Sly/vJJUGqh7Tg4r/3Y0VN4ZhViKCaXDa
t2+vF/laCw5g715eXgRzeDJFVZ4BmSTEh5Dz6OQFk3Zs9+6wL+udIwyocsOG
zL0ELvQlW9SSJUtUNUFeGVBk+K74D+wsFhYWb3gahrq4cf78eR3IkG8EBQUx
V04YmJqa6lGOLD4mTZpUBiMbqYG4hxUKDuBFflBrvQkZPHiwvqc4yyvWrFlj
jYFPfQlJY83SR6q3yL8IGYiBPZSHAEj+nTt3hG5HEdTF1KlTjTEjwWZClive
ebzBK4nFPO7jdQDmUGnMmDH6m/JCfWRnZ4OhumvXLp8KFXphogYzzCrJXikf
MQs3qPrVq1cLUm0k3wB7VhV5+FLVRfQIDAxki90Ak9SFYSm3GX5+QkvHxXfF
fwD16tVL4GkSqohzPsIhdHmqXLduXaXromXLlroRoIDgd1RUVFSzqlXfKo7F
IcXWycuOf08Add3Y0vKtii2PHfaZbWi4z9AQdkxfuq8kEomrq+v69esLfl1I
X6DvPh0K6enpo0aNYuZ8c9jsCInALcMp1zAhatO/ThefHT9+vKqfKAT+Lw5G
jBjB9NhcXs8AaayIb23cuDGv3yxsR40cOZKv5H/77TcBRVIFpZMqKyvLx8eH
Erua4iXH+0ZGY0ePThJTRsTviv/A0PTr1+8CT4eA1dyxY0cdCJBvfPr0iZPj
joG5ubneeb4iIiKaNwc1L693zFFc8aymderUSb/Mt7wCKPeWLVv8/f0XLFhw
9+RJmZ9f2k8/xare7wZiLapUmLSVK8vOng0PD58+fXq7du369u07d+7c1NRU
oRtUhPwjODi4f//+TCwcg32Ojt/0ez7GTN3yMOnwcKHboSO8efPGzs6O6qKl
yvqEqQw9bdq0jIwMoeVVF6DMlyxZYmlpSQlvYWGxcOHCrIyM5GPHQiZNOrB4
8Z07d0QewhcaGkpl8OaPC9jwVatWFc+R/vfDf+Lj4yleaod5JKjhyMA8rm5u
bmKu+QWL19PTUyn5ocDJTytyfP78uXRpeRbDksq01hO6UZ07d86l/KW+AzTA
gAEDTEy+ZPswx5s+ue9x0fgxQIXy5fUlS0MR8oEbN26MHDmyZcuWvXv3XrNm
TUZ8vGzcuKySJcNzrVBfA5MbRNeuLRs+XBYWBhPs6tWr586dK8RhYNDA8uXl
CSPrKeuZwywNCQaC0MLmDcCCHj16FBISIrdtU1Pfgr2DjcoiZBSm0xF5Ykyw
xZYvX77NwoIzKFR4U0BAgNACfsH3w3/YFwwlGFnaDvPldu/ePd90VDenyjNn
zsyF/JQpU0bbAmgETEcxR/0/KFPjv+JbIj+OKwhAoU2aNMnYWH7vsCIhHQhx
JaSb6n2NyvP2AnOjEbTxL1y4IHQjxIJC5tPJHa6urgGsvH+cB7tORJqZmZux
sRU9YZo2bbps2bJC2VeJiYkHDx6cNm3aUGNjTs8EKOrJ06dPq/mdYuuo+716
sduVg1cC7e3t3759K6xguW9/QIGaGxiwJQ+nLbhSpUrpUs5c8J3wn8+fP6vi
Dz///LNWf7rgKFu2bC78R+8qQbi7u0vpuM0jiirrT3yxR48ehbWwV3Z2dqtW
rb4MHMtoVVrkSIYlpbzxoIzyfZYoUeLKlStCN6IIwuDcuXMUZ+6JnlD2dh/I
mzlUcvgrhFSgFYW3t/d9cRdjKgiA4zUnhPEd78fEJv3xUhh0zhBCxormzCFP
yMzMPMLL4p6A1zwHDhwotHS54eFDeVqmAVjqBRTdTQwHYiCSY8nvhP9QqkMp
7OzstPrTBcSJE/JyN42xMOV+PChghwF5eXnpkWv75s2bo0aNGieVUndX7+LB
9VpCIvEyC3Xb6+rVq0KLqUWsXLmyBDKfgyo2rC8mnkSyUyqdTce1gglfuXJl
fSoDVATt4MiRI1QOHEAz3NxDCFmC2dFVnR8+Rr7UGKMcDQwMli9fLnQjtIL/
/e9/BC/E1cdVI1EsrwaPmVZWAwYM2Lp1q35FSz548GCZsmHtQIiNjY2YU5gm
JiZSMasSVl1CCj/88INIAju/E/5z9+5dVfynfPny+f5abfu/Xr9+DZO8r+LM
H8sSXszzn4NevXpJpdJfFNvySnFpREdHCy2mdtGhVq2PKvaprYR8xifpRkb3
Ro9+9OjRsmXL/Pz8VqxYERoaKrTgIoXYXBU6QGpq6j///FOiRAm2ErMhJF7R
18B/XMC1BluS/hZHzh0TJ05k98kLxeZH0q/Xr18/99RAoppUYPUUU+b0HI5t
cXJyCgsLE0q2b25/jRs3VrrnAhHVmZC54zvhPxkZGQ7W1r/jWegBQrxYY9Gz
Z0+t/nRBMGTIEFPFkwEZ5sahjoBq164ttIDq4vDhL9GIW3gLmRkLeb2qwoXk
5ORr167t2bMn5OHD7DVrZJ6eMXQ1Lv6jE55puxDyLjJSaMGLoAcAhuzv79+s
WbNff/0VSHLm0aMyB4fcKdDvuNBatWoltOzawv79+6nIOsAHxbbHs07Ou3Xr
JrSk6gKoGgg8QbEtQIeYVNFNmjQRyVkKH8+fP6cKG7EB1F08Zvt3wn+uXr36
r6UlM3+yCKEKoFpaWr569UqrP10QVK1adQFPieWgHWdgYKAvOe6CgoKYW72r
eM3xwNfLlCkTWYj2/ezs7NmzZzNrf2Suu5IM4zSo8ofDhg0TWvYi6C1SU0/M
nt1B9TQ7iAnVd5magsKVFVJHM5gbVJ7YjYpt36G4C8PWLLSk6gLYGkGnOZUY
M42QoYptef36tdAyqgT0MzA0yhFmaGjYqVOndxERMtEkKPse+M+BAweK8+zu
nYRUqFDh8uXLBflmbfu/ypUrF8xTYlE45/WlHB6TpkOCjxqEZLLacpEQVxeX
MWPGiCQcTiO4cOFCyZIlqSZTBOixiv0oGUs7+WHhD0CbNm0SExMLX6o67aGo
oziIjY0tXrx4K/R2PeXdCj/J/q9EsqJly0qVKtnb2zdq1AiUpNCyawy3b99u
3rx5GSurw7TaP0qIAyFtCfkfIWewesiWTZtU/bnYJlVMTAwYwgSb4EmILc+d
9NNPPwmSv0V9TQVqLSQkJDU2VjZwoLzmnYGBrFMnmQjqORZ6/vPp0ycHB4dK
vK3nOCHiX/KdO3c+z5N8AM55fQmVGTJkiDkhf2Pu4g+ELMAyDaexmsMqXMsi
T2SRV8yZM4cydkYR8gnH6wam7uGTn3hUyBRgiq5du1a059hF0CMcP36c8QHN
ZM23CN48/IwVZ1bQW6q8JOuDB0KLrzFkZ2fXrl3bBhO+Abootn0LIWBdzpw5
Uy/uj6SlpQGt5RGfr2jRooUeaI+AAAUd2KOH0AIVfv5z6JC8ooIBLxxuhJii
sFThxo0bvRRProJxtvfu3Vto0dSFu7s755L7LNaytba2Fnku0zxh7969BK/2
D+FtNOz/3kUL3QF7wNHRceXKlfp1J6UIIsezZ89q1ar1ZWckZD4hY3C+ZSrO
Q+ZxDTUkBV9f30KTfYJdI+Mar9Xz8PVmzZrpRTZRpiayKpw8eVJoGb+FcuUU
hsDcXCa03iv0/GfePGqay8uLP6XjZ1bhevfy8irgl+vAVbFyxYrhBgaPCXlL
yHq01OrXr68XCZ9ByOXLlwcYGXHUzivWmt2wYYPQYmoSLs7OK1Qk6T2McexZ
8G7HjrLYWNhirl69GhERwbfaivxf6qOoo3JBcHCwp6cnu27OFWNjVaFB75Ah
tMSPVa5cuXCUkGPXyHiirNWV8a3Ro0ez/0qckwo0Ru6J4GbOnKljkfKsqapU
Ueh/e3uZ0GdWhZ7//Pfff8wMAUXgTIgV/d9+/fpp6UcLDpjtFy5cOHz4cGRk
5P3798ePH9+iRQsQePPmzXpxVnDp0qWSJUtK8bYaR+eE0f0/adIkPTizVRsx
z57NVLG5yLBEtQlwV/25sleEwoGQkJCVK1eCAtmxY8fnW7dklSqpmqIy5OdU
Meg//vhDaME1A6ZGxkJl7e1M6yI/Pz/x66KoqCgqsFApJk6cKLSA38LKlezO
P1ajxowZMwoYgltAFHr+ExMTw2QM4+Dff//V0o8WBEBvFi1axFSGAvz666+5
J6wQGz5+/Eh5q22U6Zzp2KhCcAk3MzMTTGzYVi6fP5+pmKOe87iA2ecA69at
E1rqInzfSE+/tWrVb6rn6gqcqB4eHkILqjFQNTL6dOoUpOL8h8L69euFlvTb
WLx4sSr+s2/fPqGl+xaAYW7YEFOx4j2pdDx945VgIuv09HRBJCr0/Of48eNK
jw27detWcMKvDVcFUGK+tHXq1NGjOJlZs77G+HDurwVhlpvq1au/f/9eaDEL
BLArK1as+MXyUr2bvCBkJR1fquaUK/J/qY+ijlIT7EkVFxdnbW09hpAkZTN2
B6bifCWRyBo2lJ0/L6zYGsT9+/eNCbnOaulcXJXOeORlSghsE9QnxTypwLR0
cnLibxDu7u6pqak6FiYfmiooKIjKTsDB1KlTtSRk7ijc/Gf58uX8rjYzM5s7
d6446UR4eLihoSFfZsDq1auFlk5dtG/f3oGQ9oT4EFKLkNe0wgHl4+XqumjR
IqHYvkaQnZ3t7+9PhVVYoFM1UAX52UyPnZGREXBC8R+wF+E7wcaNGwka4GUI
CeUxduZ5joHBZF9fDw+PBg0a/PHHH3qdpAIUfoUKFaDJHTGFfj0sELaPbmk0
KitBbpHnFYGBgcWKFWNvDeXLl9eXym5t27YlygC7XlJSku7lKcT8JzQ01MTE
BLanyRjat5sQ6gKhVCoVbebA7du3K50egC5duggt3beRkZGxYsWKHo6OzI2n
S4QUw/JDdVDfAvkRWsYC4cOHD9TNGg9CbmEDY/ESMYf5XMaUrUZYbqBRo0af
P38WWvAiFOErgIrv3LkTaDnByLTLmFL4DSGzeTP5LVYZ60pbjv/884/Qsucf
Fy9eZB8+cI5twUzzrlNn/Pjx4r9dEhMTM3v27I4dO/7666+LFy9OTEjI3rfv
4+DBt4cPv3P9upitS6WHVxQEqexciPnP33//TbDsLDPD0wkpjV09bdo0jfyE
Zl0V2dnZXl5eqqaHj4+Ppn5IS3j79m2NGjWA5LxXVCyzhZ7kmgIMkLe3N8FI
5peKbWTf+XrXocOUKVNANcE0CwoKyuuvFPm/1EdRR6kJpZMqPj6esceN8N9G
qj253eklDEsgMTFRkFYUHLAegcVRDTml7JICwN7ePiQkRGhJ1UZOzidfX6YJ
jwlxLlny+PHjOvjlfGiqIv6jFNoQw8/PryFvhp/Eroa9SeM/V3CsXr1a1dwg
eENBaAFzA1iU7dq1Azn5qSbP001o3769XvuAduzYYYd59fk1TI8RshfzOr4Y
MUImStdqEYqgFM+fP2/YsKGpqbwQcRlHx0/W1kr5z3v0FnXChVy8ePGXL18K
LXg+AdyAUkdbeW20pzVVrVq19CIvIuDdwYOcVhzEJgQGBgotmhKw/V8/IgWN
wlzE1aTSIv+XZrF06dJJyuJRAWCea/znCo7SpUurIj8GBga3b98WWsDcQOWZ
JBgSw0mzthFfb9269YcPH4QWs0AYOnTocRXWMcNci1xdRdBHZGZmvn//Xm6e
PHggq1tXaQ4r6kGlFGzUqJFepA1UijVr1pibm1fDWlpMu1Yqqtzr168LLaZa
WF23LmeAYOxKgR1aqZLQoinBrVu3KBekE50en3rEGhoeECIBfu7E49ixY2PH
jh01atTWrVv5AcNpaWkbNmyAd8eNG3f27Nnc/+rChQuTJk0aOXLk7Nmznz17
licx8ocnT57UMjTkzI29Gp3bGnRVvH37lqBjpSuWy6ymuBiFCo9XE48fP6Zi
CSiwHeswyWvb2p46derw4cNCi1kAwMLcs+de8eJKdwTge7Wx4d27dy/4TxX5
v9RHUUepibxOqo6tW/PdQ8xBEJVRUa+LZURERGzatKmho+MaQg4QMhivgP1J
yB0sStiNEOBIQsv4bQBhaGBryx+jmThAb9680eqv509TbdmyxcLCYhhP5n6E
dOjQQcf3knIhHjdu3Jg8eXJMTExCQsL8+fOPHj3K+QDQm1WrVqWmpkZGRgIF
oirqKv2rkJCQgIAAmHJgMly5cgWoEceDrA3+8++//9rZ2e1i9fBHPJ3w9/fX
+G8VHH5+ftasyxfZhPxG0wmJRCLyjPRgDBoTMgVUIpa76o9Z95fiKyXx8r7Q
AuYTQNQXLFjQr1+/E61bK90LktC71xiHqWzZsh8/fhRa5CIUQQOYN28erNxz
Kth+BUJ6E3Jm7FiZnjiJVKFly5aM1bZasZkT7ewGDRr06tUroWXMDbD5wu4Q
yhujpdiievXqJScnCy2jEkCvrqtalSPz/6HMc+bM0aUkuRCPZcuWnTlzhnr+
9OnTCRMmsN8FJjNixAhgPtR/gQdu3LhR1V8BKWIfEAEDociSOmLkD+yb782x
coQ/IVZmZuvXrxdhCMrFi2BzEE6drAy6cp/Ic5HBGjQ0NNyoKPwA1uHVmDFj
hJYxP/j999+ZXARRKmzhXnQb69evr/v8G0UogpaQkpLi5uZGUAVtVpzzYOOk
Mv+tVUsWF5eRkSFCpaoOZs/+cjnDBPUth+Z5E2JpaXn69GmhxcwN7u7urpi4
my18C1ovcUp7iAQwW+o6OqawBE7EVAxyv5iTky7nUi7EA/Q/EwYfHx8Pn2ST
yZiYGHiFCRK7desWVX8k978CvHz50s/Pj/OiZvlPeHg4Fc7Hx4kTJzT4Q5py
VcAsNVVWN8oTZWb4pDgBZP5nnuQ36Q53dHSkklfrkasiMzOzadOmcuGxRDuo
wRTF1uVgwpAx6AgwNjZeunSpBn+9yP+lPoo6Sk3kY1KBFq1SRX4jyp51EPQA
tyr2Wtjp6GhlYADLvGPHjnoXFM3QPGtl1k0QarDixYvHxsYKLalKLFmyBIRs
jYk4KNr2B2u/k0gkCQkJWvrpfGuqqCgwKOUkjarI+Yg+QqcQHR2tcVFVIRfi
wT6lAdsWPslOjABCDh06lPlvcHDw5MmTv/lXb968GT9+/KVLl/hisCFjabZ8
PNm8ebNS8kPwFlVBvllLT1q2bDmEt/py0Phq166dGCRU+gSIOgw36IfHPOEf
Ym8bGBgEBQWJQVT1n8B0rV69OsFakPF0cz4otu6aq2uNGjUqVao0atQomNKC
y1z0pOiJNp4cOnQI7FkJ5vqsQIg7IdWV8YQsDB42xPW+fPlykQiv5pOIiAjK
2DmtrF1UtiDQz8CUBBdV6ZOsrKy6desSzGAAA2TJ2/L27NkjElGZJ4mJiUxZ
XiNFaaVSKVPIQxu//n88yFRg4sSJjx49op6rOv9hopWY859c/gpeHzt27NWr
V/m/xYihkZYCE1PFf2Ami2ECcJ4AK/udt/rCUWDgcmKQUOmTuXPlKeRNlanE
6Sj8iBEjRCKqmk8OHz7cvn17grlhOZwnkn4SVamSTPFEq+iJRp58+PABlINS
7ff27dspU6ZUq1atdevWq1atOnDgAPszVMm8cePGDRs2DLQQpZQEb06heXLv
3j1nZ2dKf1ry/ETMYyytYz09PamrYWIQXp0nYMfBpPKtWfOTYosesDaOAQMG
iEFUpU9Aa6mqcQkwNzcPCQkRiajME6Z4EAc//fSTLsXIhf8sXbr03Llz1PNn
z56NHz+e/S4V//P69WvmCzds2JDLX12+fHnChAmhoaFKf0uz/i8mi7IZTeAZ
aDYW5X+Ign/P8ePH6/P0SXNMuArmScG/XxuAoWTufL3gMTdjzKHBJswa6Sht
IzAw0BBvT8TwhuM0lgoqQ8hjmt5rCZqaVCJEeHj4y5cv+f793bt329jYMIsU
dOPDhw+Zd0GxsG8XAooVK3b37l0Z9tWdO3c45QCMjY23bt3K/n4Y1oEDB9au
XbtVq1ZHjhwBvqSDxooKBZxUoO0fPHiwZcsW0FTJYOcq4z9xhPyPkJ9pCiTm
LMRKMXr06NqsI99kui0Mrl27JrSMKtGlSxdV/IciFdoIqinIpILOlEqlHDnh
FR2nHciFeIAtNnnyZDDKkpKSFi5cSFVLh4UACodyKW7evHnlypWpqanR0dFg
fFEqS+lfAf8cOXIk0KFPNDjZpTTLf968eVPR0vIY3qJKxjp3DAsSZ1YoQN++
fWexPF9/orR///230HKpxPr165l524qVSQNsqEb29jNmzNA7BSjDE60/VJi3
VGutra31N+2JUEhLS+vXrx/DYeAJmE7M9Fg9fXo/zPlQm6UJDQwM5AwnOzts
/PgwvGcXSUgAayHb29vHxcVF3rq1RSqNxs0XPraILjVL6GP/z58/t/n5ZzP6
yjaFEiVKPH36lCMkfJueBvEKgEuX1tvaqsoR1Bg7WZw51nIBlcGsFCY48kd/
X2XMJfiUkJ1o+IByEFpGlYD5rCrklQKYHkLLyMXhw4fZlgs8132OlFyIB2iD
Y8eOTZw4ccyYMUwmH1Bl8CdUAp+UlJRNmzb5+/uPHz+eud6l9K8WL17Mcbrd
u3dPTTHyATBVrlpYsJfkSOxhcQbDUwCbFOhiTRsbX0LKEeLs7Pzff/8JLVRu
gCGugZrhHFZYq4rb02+wuRDStm1boaXLF1JTD7doEatMpcOL5UXPSIVFfHz8
8uXLu3XrFhAQcOnSJYZLgKVTtVKlalgAzoylkH18fOAzH+fOZV9d2cYiKhUr
VsxZtIgzENNY3zBvypS3ZmacDzwnxBzftbCwSH3//kqpUtm0TRGDoaEUg7Kx
saEyVYJCAzLG7B3Azdq1a6e9kNFCg2bNmm1UwX/+w560BYKkV3wSpPX19WVm
V3HFNO8vCRnep4+YW3T8+HEmqIYPzV780RRAaZw+fXrlypVnTpxIWbNGBhv0
unUyHRrOhS//85UrV34wMuIsyetS6caNGzU+ezXiqggLC9u3b9+///4bGRkJ
EoaGhr59+1Yj4mkPQNTblS+fzurhA6ydC6gR/0/E7NP5+PHjk+DgnFq1+Mo8
k5AZmMWIYHpDHRz+6KP/a+3atRwXVYMGDeTpvnNyzjZrxuQDj1X0KeydOzdH
KuV0OPscP7NsWc6771nTbJa7u9L9tx/9geeNG/PfZRgUWEMZr17tt7MLxd0N
JnB9+i0rKytYlewG5iCE6t6CQ+OTCkxaY0ImYcJATg+fx1O4ioSEKiY5ET+A
91KxxARNZv7MLF26NOXRECeqVq2qiv+8ePFC4z+nsUkFSrVly69d7eOjs7xS
hYz/ZGZmgtlojp4v9tQ9QwgsWI38hAYRFxfXr18/9iz18/MTpAxKnkCFl6/j
6QdnbIJUKr1165bQMqqLS5cuUUpjgApjdh1ruxRaWOGRkZFx48YN0KVsMnD8
6FFvrHLrT4iLIgXKOXCA058fWKdAc6tV43f4QtY3pPNy2ybABKPfXVCunNIh
Y+7/Jpma8t99Q7/r6eaWYGXFeXcZ/W6NGjUornv79m15VV9DQzCuTUxMGjdu
LH7zRAeAmUBdkwQ6GqzYh1fpJ9nOzrK81/8VFhEREZaW8ktU/Asp/em5AWxf
aDGV448/2Hffv8LNzU3UXvsTJ7jrdPdu3fxyIeM/9+/fp0Z8i2J/diakYcOG
GvkJTQF2kNatW/Pnas+ePYUWLTdQqRoJ2sucSUvFb4i8VAcb7CSZf/GaE4e7
IXBpU1NTKrfn94zw8HAgiswBu5mZ2Vqs15MTH3+LddyajhmTGEQ3acJnID/R
73ZVVk9kGOvPU/r04by7ifXuoiFDMnl/LqOzZgE+Kyvl+Yk+QZrAIz8c8Z7c
u3e/Q4enGHp0Ac1/yndmYGBw7NgxoQdEeDCnJW40BcrB4hHszkwrUWLpwoWL
Fi1iu0RFjt27dwPR9VCsY5iAoUEULCwstF1aIn9ISUlxd3fnbChGRkZir2W2
ciV3Gc6apZtfLmT8Z//+/V/0MyFzMLHSNUJ64CtOTk4a+Qk2CnIAePjwYT75
oQAcQ7NyagqgwRo1akQJOUhxxr4mxN3FhbmYzIfYfDqgkwmeWe0lJBQTNios
QInkt0aNmjdvDiaVLvNxyUTp/3rx4oUxgBAbxYk6Y8aMhGHDZLyZwLiogmrX
5hOMMvS7rVq0SGnQgP1WCOt0SJ72PD7+tY8PFWebTch+zFNHAUjp69evVzdo
wE5NCZ8ZR3+gWrVqL4YM4f86E7W/zc1NKf8ZRH/gec2anLeCsIAO9evv3r2j
OicrK+vx48dHjhwRc5Y8LU2q7OzsCRMmEBzxkng7/iivP09hOS0JlmNg7guL
GdBRjx496tu3bz8Li7fYhJfot5UgBTLGCUBF14sQcXFxgwYNouLZwFrx8vIK
Dg7W0m9pbFLdusVdhrpK+VvI+A9z/sOH2M5//P39VYlKZVISIbZs2cIIKcXj
EWpvCifEi5Dly5cLLaC6WLdO7teyQsm/2qr0kxyJRLZggdAyCoP3799PnTp1
wIAB69evj4qKol4c7Oz8ih7rq3QoOEFf52dXVz6FYGjSoh495J3Jemsra55v
27ZNlp5+oWPHy4RcJ2Q8i/wA22KuaP0+apQ9ppliAOY58A0Zco/G9eqBqd6E
kGaYr5sCWOjPnj3LysiYV7z4W+RFOfjvLhaDurVqldIbTN74bnFlb8noi5kE
uV9OWtrx6dO9TUwMWYLNnj1bsMETCMeOHQPrkuqBLSr6jcoOZG1t/Vx/goLq
168voSezD14wlGHtjwBCZunqgCJ/yMjIAAonrxqZkJAVEJBYrdqrunVvb9wo
3sD+yZOZqXLS1XX48OE7d+7UQZ6KQsZ/MjMzXV1dlZIKscX/MIF2fFBpA8WG
xMREGxsbB6wH9IGQx4T0ReXgSodkiPzCGoOwsDDYp8wwSSNHS88hpBMhDUqX
FlpGAQCWY7Vq1djzEOgN6PnPR49yeMIN1mde/vgjpw8jWec/O3bsSDt9+qap
6UdMEjWWdYG9UaNGjEMEZo6DgwPzozVq1OBc171x40br1q3LlClTsWJF4Gbs
CBz4kvnz59va2lK+OSBOvr6+VMkVGWapor7ZmLbcKVB1CXfWr88pnLSZ/oC7
oaHSffwI/YE+Pj6fixVjzp0e4hZJ4ZdfftHVoIkFKSkply5dWrt27a3162W8
6ycy9CaXwYlhZGR0584doeVVC0OHDqUG1BoD79nNGV2yJBBgsZf8y85OYJ1h
ZhJSz9Z27969QoulHOdXrx5oYVGdtUiBfzKnrFpCIeM/MryYwE+sVK9ePSZV
tQaR7wPAM2fOqCI/gE2bNmlc1IIjMDCQ8Pz77WmZzczMco8LFY9PZ9q0aeUI
eaZsd5uEbYGtVkDxBPF/JSUl2dvbS/AIhXOH9q6ya1ZO9Lt/9+uXybrDBTqW
uUJcrFgxKgEmMKsOHTowqxIoyujRo/nGHZirz58/z1OgpjodBZvUqFGjgAXB
zgu898cff2QK6oE5XNLe3heDrhdhESWm7cuXLv3g6Mhv+FL6A8G8d3PwGIqC
2HYZnU6qoKD77u4pytbXIXQgwkA8efJER8LkHUxHnT9/nhrNFryGJOMJoYeH
B7u6k9gQfeQIR+xgbI6motc0OKnA3rGysuJvhWBKaDVsrDDxH+io4cOHczoQ
NN748ePFRtRr167NH2sKTk5O4gwk2LVrV2eeHjjI7Bf64/yCNbVfmXLOwAI6
ACqTeaEHW7EsbNv2AR3wGYOHYAyO8K6oy1hepG3btiXfurXPzu4K9Bvr/pe5
uTnnGmBGRkZwcDDnXrngiImJqVWrFnsBGhgYzJs3T57odefOUMVWv8H0VgRP
sbKVdctZ+kvAdIUvj3rypGu7dtbW1oaGhvBvx44dExMThW6xLgCEk38/lHrM
x/4Bg1RoGdUCFaXgqawhc7Eh/fr1E1pGlZjRqBFH5mysdF+2bFmxxaKDQaRq
Q9Re/JKscPEf2LYI+mJ6YAkDD7oDxearTUlJAR1L0IhuRkhpxeEGmiG0gErw
8ePHXr16veApgf+hzLCDiG1BqURS0pGaNdN4DYkipCO2pW7dunrTlrwDmjZ9
+nR7e3sDRMWKFeX5TObO5VPBSvSEHMjrq+30W2BcUId+mZmZs2fPhm+zsLAo
UaJEjx49qOyC+oL4+PjFixfDZge9wbY+Onfu7I4JoLah886ebnjp0qUTbWz4
e+Ij+gNuNjafvbxy8FDoAyFTcN8hePRx4cIF4RqqI2zZssWOVTWefwQBkKeH
Ej1gvezcubNm9eoPeQ3Zi62QSCSqijoJC5C8gqMj/4IkZbmIzQzx8WG8x1ys
X79ee79bmPiPm5ubOSFveYfVNjY2WtrR8ncA+OTJE4LJUrLoY/NprOF+9eqV
FiQtEB4/fuzk5KS0zmlXlJkKRs0dYvB/pSYny3g2kYwVsgJTSBt+0jxBe66K
uLg4ppAlg5JUvDevT8bQH5AneGnThlKkKYSsYYUiC54WQNuTKiMjo2fPnpwe
gz589OjR0/Hj+Z32N/2ZQEtLzlthhNjRpFH3W7+OnaqJiYlly5aVYHAgx9Y4
h3cl6hJyVayliPgdlZqaWlYiSVdsiB891j/88IMIvWAwdQ0NDTmncKdpmTVS
nUSDk6px48aq+A+nlp9mUWj4D1hwBG/IsocbqEVZ7ENtZL/MH7Kzs3/++Wf+
gWp9eimJ7fAhKyurTp06X7iZMmtXsyVltQFQBX/99Zerq6uXMgqXTUh3bEjN
mjUzdJV3VBCAknEiZAIhEwlhAp2bqfBTDGKpIFhcIXfverFKNhcrVkycGfW1
gZiYGH9//0aNGvXq1Wvv3r1U5bKUlJReVlahrFSr5+i7QmYqKOViuvf8/PyY
Lxd1YroC4ObNm8D0iGJmLVDIEfTzrCpVZGIt7swB6GQHB4dOWIeOEv4/QgxZ
C2To0KFCy6gEoNCM8JZuGvb8STqPPcFjqytXrggt4FdMnDiR6czWeBs0Eg9d
ixPCL9WnQRQa/gNKydjYOJKnc37DLn3//r1G5Cw4QC0QvEHDkXMKyrl69Wqh
BeTi3r17zMxsj54RSuA4Qpo6Oh46dEhoAb8B4G9UolqCqfk43X4HTVHA8OHD
xZ95uyB4evYsO08v7Nq9sOGlecnSZVj5iPH1dOrUifkSIEIwH6io5iJcunRJ
KpXCFlMDDzqY2OnSTk6Zyq6PXaA/IE9tFB5+dfz41mXLUo5I2F5Fm/Ui33j4
8CFQIAlmTj6EblOO3ktu0QJYdF6D3gVBt27d5PYp7s4/ojczAFnQcjSxy5Yt
K7SASsCUqDai81axAXxeaAG/4sOHD1QtVC9FdfTEyipBm570QsN/ZJiu4TpP
53hhIcWCf7lS5OMAcM2aNRJMk8uRcwKWpRahHti6VZ6ypSoh/4dr3wNFHYWp
wNzc3NT/HkH8X2C4UYdXLQjZg8nZkhW7/UxAwJ49e0TlDdfIqfKWLVsqVKhg
bm5uZ2fXqlWrp1eupJubc6bcZ/o2+hTF14Ox+PWXrbx0afHmDBGBUzUkJASW
LXtb8fT0jIyMfOrry+c/a+jPzClenDkgSsCdlOJOzs7OcXFx2pBTqKSab9++
tbf/QqUl6D9ld0ga5lOyR01y9epV3YunFEo7CsbUwsKCacghVis+wTKRSER4
dAzar3379kQFQDkUMMGOZifVzZs3XVxc1vJWTeuSJbV3VFWY+M/169d/lEjY
7PEBDvTx48cL/uWaAtCJYsrcDQ6wR7doIbR0SnD48OHRLE5+mRX+0aRJE6Gl
+wYGDx5MsHIBu6sT8d9M2Hr++ENoATWP5ORkfg788couK8lYKf1He3qmTZ++
o3ZtR7qMKVjusCpFSMhFiJSUlH///ReIdEREBOW/jnj5ciHsiayujqZ7uyKs
Jp53bD9NgRo0aCB0azQM4M/Dhg2ztbWF1j1X5hYMx3qpEolEcDabO4ChUUuj
Gq8JC42NZ8+eLUJLIZeEwKampmLjbElJSSdLluT0LZivDg4OWkoEVGj4T3h4
OKgOgleYz2FoynJCrC0txZZL5+nTp2B0xysO8WOckCKsnLV9+3Y3a2vOJYIA
egWJ7WIdB6dPfwn3C1KU/wMhlfFA+OzZs0LLqHk0btxYSkgtzNjPJNSYp4z8
xLJqiTKOV9i+o6KixKYY9RFjx46VYiaBBeiFt6O7uq+BgVIu6kV/4O7du0LL
rnlQ8ypr1y6ZMgo0HhsOFEjkS9LXV57dqjlP/o0ov7Ozc0hIiNAyKiAzM5M5
tuLA29tbaOm4CA0N5aRaekqnLQ0ICNDGLxYO/gOj/NNPP/GHuH79+lo1YPN3
AAjW0GDWEKegU6l06dJiuzIMJi1RFh9LXX+uXLlynrIq6d64q1q1ahlCjtGF
G5hHJjrEAS9fvtSxSOqgIKfKt2/d8mf5+GLouPqmvEHMpu/7A8qXL6+DVPPa
gJhPDEDzDBo0iKORjIyMTk+bppT/9KM/s2rVKvjzZ8+erV271t/f/+DBgwW/
kyieonLZgYHneMFRyZh5254QQ0PDGzduCCthLh0VHR1dsmRJe54By1wRrFGj
BhUeLx7Mnz9fKf85depUAb9Z45Nq9+7dBAMtqJo1l1hZOKiEWhpH4eA/O3bs
UDrEgKNHj2pKSE0hKSkJFKMPpgKbjOFzHh4eWs3ylA+A9qYC0srw+API3K5d
O3FWQGaQkJAglUi4VU3xcRInRoUKFcR21S5/+Pjx4/379+VaNyfnedWqfOcC
5ViZRLtdQLHcw4AuQvNYEZ7bFxpERUV16dLFxcUF2PjIkSPlkWY5OUHKMktT
MfpmhNyuXz/JxCQebytTF3akUukfhcVXGx8fX0ZZAKQMK6USjCVOSUkRWkyV
+PTp09ChQ381N/9Mi71CMWW62O5FgmkzZMgQDglftGiR0HIpARVr+kVIxX28
Tp062vjFwsF/fvvtN1X8Z/LkyZoSUrO4d+8eGHqzZ88+fvx4Wlqa0OJwAauY
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
QTJFgLdjiF7u3Ll5s/sE2C4658ghm/nfIsn8+fPzZqcHX19d+/dBzDoNIOTM
mTO82RmFTp060QnwO/MU4YRsUFO5ti9IH9i8eTPNQ1yrP98eCQexCDiRRQWu
WgQGBubG+pbPJc8SR0gp5K+SSjUi1q1bVwOrS1Ge27Da8ycLqE4d3uw+YcIE
XR0sNhNwOOZIquGG7ttvv1U8Rtu3b5/2D7de/bNs2TLFYXF2dlZDXBl11SrC
zs5OJXaWTvzb2W2TTPtTkkWqhpbEIm7evAl2SjlmnepcypMn82ZnFMQqu9uU
nuLekCFwAB04cOD169e8mX5BesC1a9dotYEJSvOtiWRH8vT0vHz5Mm++ySN6
3LhEQfMEY8rqLZRDRDVOdREvX75s06KF7Mpe7IajEpf1ixcvbG11QZS/6fOM
w1NADc00ExISMmbMaOigT3t4kvXqH5AQ1apVY4dlwYIF5mCoiCQcgO/fv09C
/6hEWoSF6bo72mAV3NmYTijtKWvahvVp95SCfsiQIQObtwJb4pbp003L1hyg
ybBEqSgifP1iayuOvJeXlzpLr6gNX+6/kgBtfK/BLmbsfHuyaNGaNWvmzJlz
+vRp9eSlGgIwfLVtm5R/AuZVUZQtW9aEFmXaJ1VwcLC3t3cxZsz/RbYVK1ZU
SVwxPCkdQFpZgpKMx556mTJlSjaDwAL3X0+ePKEMy2Fvvv5CVxqKe/fupfHz
rVf/aPH47tXrU3UQZ0KyuLvDilbPWqZFqik02Oda9Dl36dKFN7tPKFSokMiw
K/ZNPoMdBDzd3FSYKQwi54cffjiaPbtsY2mF3tpZs2ap5+0r4s6dOzRr+29m
b2ysL5JtbGzgYOLN9wusFZGRkdT548RUw9bdt2o0WrXWTpchKipq1KhRYBHM
Z57iO8yiGjhwYITKah7Wrl2b4EktI7wab21evXrFm+An/Pzzz+KG44bdZAYT
UhT/t2jRorzZ6QCy1tXV9TvJHH4mdFF0dHRMe46nVesfivcPH76sVSvRxkZr
Z6f99lv11P+kVZuodr0neCrmo78FrAOVnNSrVq2iJHvoL9XphNSrV+/ly5e8
CSph8WLZxlJMWMXJ1qzgjnfv3oG5CvJmnqT11VzUn3a4Bc3EYo8wSVxcXL4k
cX9B6nDz5k3xaDuqv1hg1vl7ePAmaBRg/pcoUcIWK4SzLqy7CxaoIUBFhpCQ
EHHkF0jYRhLS2teXN7vPeP/+fbZs2YgBqMdC79K27Uf9905bdbdo0SLtH54O
9I9O80jHZ8gQ0/FKBkk7AC9evEiw9r6sSc1QfH0qqXwOMmzwYFD95KI+yXd4
Ijdp0sRUOs2UntLo6FuwgQtUH2J5ebBkXNFtAvuPyX6R2RAXF3fjxo23t28f
mTQpH84H2OT/k4z/KzRzfv/9d95MVY0v918iQCrMmDGjZs2aflWqHK5SJaJ+
/R81GupwLkzIDWFe3UdHdBPV1zmkABOMYHkTVvxoq1fXmieKMo2TSpr2boNF
yDcS8ivm3GXIkMFUJNOOiRMnGhI/dnZ2xmS+Wyb/6+jq1bJXD3o+c+bMJtnn
rV7/JCRoYVJJxydXLpNSSz1o17ZS7M079tbhzU4PvXr1uqdPMlrommTJetpG
IiEhwcvdvSMaAlLf/k56z+jjoxLfmjEQXdBsPwJ4BcNateJN8AusAP/884+9
vW69tsaoYHEKXRIi+uwIKYlCyAZtBDVkiCSLBQsWUPvxX2ZpLAIhd+MGb4LK
uH37dlbMS72Efd6LSXRFCTU1/qtbt64h/aMSVQD44YcfHGxsZI3//vbxefr0
qUk+XyVPmnoacNJ5e+utjsKFTUotTWjevHkeZvHCBjVq5Eje1PQA9uAsfZJb
hbUwYMAA3uzkiIuLc3JyIkqJ5DmRsxW5TQ4cOEDHWTFJ54qPT2ho6N69ew8f
Pqy2IIcvUAnOnj1LQ31aKIX6dNI/2uBfqqE8SLK4f/++ra1tVixEw66L/ITs
3r2bN0cFnDlzpmLJkjckVN8TInZzGaam9mSVKlUypH+WLl3Km50OtOwbVfVi
eeqbhCz+8UdT/Qr16B+K1PzwxIl6q2PuXFOzM4hkHYDPnj3LkT27LP/itb29
ejp0UPj7+zsTsgozHxMxOtdbWAtubm4mycg2raeUdrTcxWyMa/AWTCXBe8YA
ZgLtR9lAaZ9/6fg5IQ9OrooVK36JCJLiy/1XYmJiliy0G4DOscxOofUlSzo7
w+ImICfKlCkDOxJvykahWbNmigaOFmOBAOZrJJTqSXXy5EkY5GEM4dFI2MfH
58OHD6almhaAYWtI/xhZCcrc918lS5YUKflghGoLTHTy8PBIY27OdxKYim1a
kCYa8fHaX37RliunrVhRu2SJVmVZSyAe1letquf/mT2bNyk5Jk+eTKeZEyEZ
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
t259kAkQM4s2NQ1ZvnzHjh3Dhw9HTW7cuDExMVH7UimHKopKTk7GIRjvyzBp
dneSBLHMA9gE0BPAu1mzpUuX6tZ5f9WRA6N68eKFhYUFcpg9Eo0pSSh9UPrf
z8RN4WC9njirc4sWickuampq6l9//dWlS5caNWp4e3v7+/sLcCDWQu9LSko6
c+bM33//PXv27MOHD3O597Bhw6gzcQdIVKR2e/urQUHMiDab9dI3snM9mpyR
GTxwoIZaoYv7X7NmzWI01oKj0i0shuDl5RUREaGu39WyopC2ofA0WhstTaZm
KP57hqwfChBso6pbty6QtTiZ2zTUxETICRnyJv/BWRW1rs3SN8sHQCAKUQVo
V/fu3Pn6/PnrkJCqVauye03p0qUFniNLCR4/frxu3brW1tZnSM7/pWTLIJp1
m1aRNlpbW2/fvp1vYYWCnTt3IgWiM+XaAM1ZNaNlHvcVUyNm+E7o1auahwe1
JXaQnEgkqlKlio6G2WcX7969a926NVNbiuKXwoWf+vqKx44VHzkizszMyMhg
wgg3KV12y4iNrV//vzJ37Ugeb6T0rswQ36JFfHw8340WCpAPODo4lJKkQi0C
kCatz+ESvS1evFjnjnpR3Lhxw9PT01okaovjjq3tkvHj09LS0OpwDliDAJ/g
v3yL+XP8+PGDOp8nHLPvDnD37l2+BVQIgQz3Whbj2bNn6NbMOX3qpo7stLKB
toedSHbNVPcXhJmIaEQAp1sVI9fxJi5YsEBHvZ/a8erVq379+tEkiohCxPm0
AVgvEjF6O8w5Va3oMZgcU3pFnr8mhKouOZFUmrCgQ4cOMb+bkpKC7GvkyJH4
6/j32LFjQUFBQlspksHnz58DAwNR7DVr1ly7dg3HHZk3fPjwwcHBgWqyCkmx
9ZhkGH7F1pKvb2hoKGOlyhRbubKYFDOtUKGCTD81NjZu3LjxwYMHDWaMQH12
797d1dW1uq3tU5bRIsX0Za1qniUpwmxsbNavX6+jekPzQ/flxkrtHg8wuWZN
XWwOzgLoslVfabNPILdJyJXXhMN/KLT2i35+flaSSC3mcY94pIEDB6ampqry
JUJYVT58+DCX/FAIqrR9dhUVHBxMq0Ig9nMGlLqsZjZr1kyfJs65NCr0n48f
P+7du3fdunU9PDwGDRqUlVv4n3/Ey5fv7NNHpCC8ivv4n3SMfTrrySK8I+bm
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
r3d1dd22bRtu9EYhz5494z43z+PNzksjRLwApXXlyiMJYafBg14q84gshAYo
ER6UmCEzoPkZGBg4dOhQa2vrgc2b5/EK/BOieWEc3t7eujYcKZmoqCh4Um5u
bsHBwVzHC4eHh4fah1uFkDBR7R/OjEhZs2YNGxfkk6Z630GteCha7Z/d+AMA
naYphXMaUpjOXOXWte7Ro4fa6MaMWFKTgmiJlQEDBqhNAe40URzdwUGcw2CM
pi1EWUwJ6dKlCzQ0yvO5IlqHc9fqoqUJTooeOmh7ePV27twZExODu6fpO5QI
D0rMKC161AG4Y8eOrkw7/QYhvoTU5L3RbxMSSwioowxmvejKlSsnJyenpaWV
7xROfckonVMuTgXPDp54s2bNXhfs1atzU5mMmJ3LfmVWKdlKyGimHu/cuTM3
/AYOmjdvrrbGbyz49lT0s5C5yq3zpmndP8KMHVKrf34CbWNsnJGRwaYwcuRI
TSnEiaPXry/u/1m9erWmFDoT8pgf/auvlBomkkNNxx+IDnn4+eef29jY1KlT
B3Js5cqVJS6BSAl6VFJpgWvXrkEDYfjw4fPnzz979iw3Tky8MFeKqufUqlXL
QOZ2SUEGTkWJ8KDEDBmTn58PRbe4LlBAo1v1lV9MSN26dQkzOHPo0KG41ZRe
8/Dhw8TERDiA5urs2bP79es3ZcqUJUuWtGnDTgEs/Ojp5OTECQ+WsLAwTbtv
2BFyV9VhdjLdSgMHDuSinzhxQpP26Kpu9b9ERpB36tSJS2HLli2aUvhCsH5O
pUrKkBDxjWdnZ1tZWWlKxJwZzvqFhcXd8+eLz8DMzMwjR44sXbp08+bNBjvS
Q054enryR2Tx/byZyDOv8X3G3Hzv3r26Nh8pTygRHpSYIW9SU1OhySOoCD4Q
vfKPVQNAU/fevXu6th0pf5KTk69fv66pB+P06dMtW7bk6ghWEnNUZoZGWIJU
Zv786KOPBCNbiunA6cIMw35IyDNCEgjZyHQrGRkZ8YcwgVy3s7PTlMK7hLgS
8rtCcfvHH5WaNUlSUlLPnj25WPAvbGxs2I1FatasCYJNrhsTIJr4888/2UJv
HDMlVjzC+QSvJAShvuSbb9q1a/fhhx86ODjcvHlT1+Yj5QwlwoMSM0qLPnYA
gpjZs2fPgQMH+vWDAqBwFljxXb5Ajx49/vv/1buM0hX0OFVBQQEohPPnz798
+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
3T///FMw+Bb4tFKl5LZtUxSK44RYqV6qWbNms2bNiGhKfhQh/BHRLKNE+mey
agB2RNBjUbBhohofuKwa5qVoEpylpaWxSIpkqUvKmBm5xA92RhSmsI8lK6tw
BWN+yPfee/jwoSBkM5H9J0Wpffvtt2qW2Zk6FZ6LYLkewkwt56bpbRCN2Gnf
vv3rvikWdR04Fy5cWLZsGcjgbdu2paWlac3HWLCkkg5mlERk4FSUCI+fi9C1
IQiiA1JSUvg7qMLx6tWr2S8jIEi++uqr69evw/mgoCDBLDMzM7Pg4OCAgAA4
bsX7aHWT6bEZPly4j3d9Zqo+X7E0Vw3QsmVL+H1VpB/UrtR3XTVMtugTWP36
9S1ESRWom/FdRSSTronCFC4MCLlUo4ZKgp98UlBQwC4mwKEQDayaJUrt9V4P
+/crq1V7Heyjj5TM2suQ25VFq3m/bWJye/XqlNOne/ZUGaJuY2Nzm5mchSCI
XvAzD13bUgglZiAIVaSnpwumpcfGxg4aNOgdhsGDB1+7dk3JjDvidlKoWzQ7
6ZdffsnNzRV3JXUkJKFJk2wjo4vq1qxevnw5YVZi5I8musxcYj+N8VmgqjF2
ilL7/PPPiag36TZzSSwwDqkG8xCl5uvrW5gF8+er6J+dO+Gcg4ODIHB7RgSy
YXaIhBncy7Nnz17n6cOHyl27lEeOKJkVflguXLjQunVrLrylpSU7movN7VOn
TkFGeXh4HD58WLxuAIIgegElwoMSM0qLDDoAtQZmlETK7FSRkZEzZszo27ev
s7PzyZMn2ZOCpa3NzMyWLVsGVXbi/fv8kbcsbm5uEIUN34mQSEJuMDudGTPf
noKDgwXhzZiRwLlmZjkKBWgMwfCgBg0anDlzplKlSp/w5u+nEfI+IR988IF4
66tGzCAoCJOvUGxkpvPzad68eToz1Lnw69KGDcovvlD26XNh9mzuNkEQChJs
2rjx09Onk69cEXzPatGiBX/mviYgl65fvx4SEgKaU99FDpZU0sGMkogMnIoS
4UGJGQgiSx49enTgwAEQRa8lBENGRsavv/7avXv3Nm3aDBky5NixY+z57Oxs
d3d3do1HwmzJsWDBAnb14+XLl/M/wIGa8vb2BqFw/vRpUDt8jVG7du2wsDCI
sn79ehMTE1BQ3ZluJWNGF12+fDkzM1M8zGbo0KH5T5/GX77M73shzJrYJSqW
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
    
    "], {{0, 558.}, {576., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{576., 558.},
  PlotRange->{{0, 576.}, {0, 558.}}]], "Output",
 CellLabel->"Out[67]=",ExpressionUUID->"a00d597d-90ef-44b6-aac5-5aeef37a6559"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Clean", " ", "*)"}], "\n", 
  RowBox[{
  "Run", "[", "\"\<rm -f *.f90 *.mod *.o *.so *.cc\>\"", "]"}]}]], "Code",
 CellLabel->"In[68]:=",ExpressionUUID->"75dc0fc0-a3b9-4fbc-ad63-909eb373ef24"],

Cell[BoxData["0"], "Output",
 CellLabel->"Out[68]=",ExpressionUUID->"0d2ad96f-23c5-4a24-a653-7ec92f4f06f1"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["(+) EXAMPLE-21:  (FORTRAN) FODO ring dynamic aperture", "Section",
 FontSize->16,
 Background->RGBColor[
  0.87, 0.94, 1],ExpressionUUID->"2a1ae4a6-964c-4e65-8ad2-8e914ff4c495"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Load", " ", "PROPAGANDA", " ", "code", " ", "generator", " ", 
    RowBox[{"(", "SRC_PROPAGANDA", ")"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"Environment", "[", "\"\<WM_PROPAGANDA\>\"", "]"}], "]"}], " ", 
   ";"}]}]], "Code",
 CellLabel->"In[1]:=",ExpressionUUID->"7ee79660-5658-4539-83af-e34b579a61ad"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "integrator"}], " ", "*)"}], "\n", 
  RowBox[{"I$INTEGRATOR", "[", 
   RowBox[{"\"\<PROJECT\>\"", ",", 
    RowBox[{"Plus", "[", 
     RowBox[{"1", ",", "1"}], "]"}], ",", "0", ",", "1", ",", "0", ",", 
    RowBox[{"List", "[", "]"}]}], "]"}]}]], "Code",
 CellLabel->"In[2]:=",ExpressionUUID->"fcd53689-2d83-433c-8c4c-728d8c48d74d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PROJECT\"\>", ",", "2", ",", "0", ",", "1", ",", "0", ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"4ba88844-2945-4672-885b-24a94e827372"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "global", " ", "parameters"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"RAD", " ", "=", " ", "22.918"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KBM", " ", "=", " ", "0.015"}], "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KQF", " ", "=", " ", "0.18"}], "   ", ";"}], "\n", 
   RowBox[{
    RowBox[{"KQD", " ", "=", " ", 
     RowBox[{"-", "0.21"}]}], "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GSF", " ", "=", "  ", "3.00"}], "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GSD", " ", "=", " ", 
     RowBox[{"-", "1.75"}]}], "  ", ";"}], "\n", 
   RowBox[{
    RowBox[{"GBM", " ", "=", "  ", "0.10"}], "  ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Define", " ", "Hamiltonian", " ", "functions"}], " ", "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"H$DRIF", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "2"}], "*", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"P1", "^", "2"}], "+", 
         RowBox[{"P2", "^", "2"}]}], ")"}], "/", 
       RowBox[{"(", 
        RowBox[{"1", "+", "K1"}], ")"}]}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"H$QUAD", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Q1", "^", "2"}], "-", 
        RowBox[{"Q2", "^", "2"}]}], ")"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"H$SEXT", " ", "=", " ", 
     RowBox[{
      RowBox[{"1", "/", "6"}], "*", "KS", "*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Q1", "^", "3"}], "-", 
        RowBox[{"3", "*", "Q1", "*", 
         RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"H$BEND", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", 
       RowBox[{
        RowBox[{"Q1", "^", "2"}], "/", 
        RowBox[{"R", "^", "2"}]}]}], "+", 
      RowBox[{
       RowBox[{"1", "/", "2"}], "*", "KQ", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Q1", "^", "2"}], "-", 
         RowBox[{"Q2", "^", "2"}]}], ")"}]}], "+", 
      RowBox[{
       RowBox[{"1", "/", "6"}], "*", "KS", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Q1", "^", "3"}], "-", 
         RowBox[{"3", "*", "Q1", "*", 
          RowBox[{"Q2", "^", "2"}]}]}], ")"}]}]}]}], " ", ";"}]}]}]], "Code",
 CellLabel->"In[3]:=",ExpressionUUID->"3cb04d6b-5b6c-4299-b182-5e0b9f2947f5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Generate", " ", "tables"}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<MAP\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "H$DRIF", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", "H$QUAD", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "H$SEXT", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$MAP", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", "H$BEND", "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<MAP\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<SEQUENCE\>\"", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", "0"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<QUAD\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<SEXT\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$SEQUENCE", "[", 
      RowBox[{"\"\<BEND\>\"", ",", "\"\<YOSHIDA\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<DRIF\>\"", ",", "\"\<BEND\>\""}], "}"}], ",", "1"}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<SEQUENCE\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$CLEAN", "[", "\"\<ELEMENT\>\"", "]"}], " ", ";"}], "\n", 
   
   RowBox[{
    RowBox[{"DRIF", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<DRIF\>\"", ",", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "\"\<DRIF\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"{", "}"}], "}"}], "}"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"QUAD", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<QUAD\>\"", ",", 
       RowBox[{"{", "KQ", "}"}], ",", 
       RowBox[{"{", "\"\<QUAD\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KQ", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"SEXT", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<SEXT\>\"", ",", 
       RowBox[{"{", "KS", "}"}], ",", 
       RowBox[{"{", "\"\<SEXT\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "KS", "}"}]}], "}"}], "}"}]}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"BEND", " ", "=", " ", 
     RowBox[{"I$MAKE$ELEMENT", "[", 
      RowBox[{"\"\<BEND\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}], ",", 
       RowBox[{"{", "\"\<BEND\>\"", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"R", ",", "KQ", ",", "KS"}], "}"}]}], "}"}], "}"}]}], 
      "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "DRIF"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "QUAD"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "SEXT"}], "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"I$TABLE$APPEND", "[", 
     RowBox[{"\"\<ELEMENT\>\"", ",", "BEND"}], "]"}], " ", ";"}], "\n", "\n", 
   
   RowBox[{"(*", " ", 
    RowBox[{"Generate", " ", "code"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"I$CODE", "[", 
     RowBox[{"Rule", "[", 
      RowBox[{"\"\<LEVEL\>\"", ",", 
       RowBox[{"Plus", "[", 
        RowBox[{"1", ",", "1"}], "]"}]}], "]"}], "]"}], " ", 
    ";"}]}]}]], "Code",
 CellLabel->"In[15]:=",ExpressionUUID->"ebe52b31-84e0-489f-9459-e1f97589bdd5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"FORTRAN", " ", 
    RowBox[{"(", "ADAPTIVE", ")"}]}], " ", "*)"}], "\n", "\n", 
  RowBox[{"(*", " ", "Maps", " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$MAP", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<MAP\>\"", "]"}], "]"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Sequencies", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"I$FORTRAN$SEQUENCE", ",", 
       RowBox[{"Keys", "[", 
        RowBox[{"I$TABLE", "[", "\"\<SEQUENCE\>\"", "]"}], "]"}]}], "]"}]}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", "Elements", " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"List", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"I$FORTRAN$ELEMENT", "[", 
        RowBox[{"\"\<DRIF\>\"", ",", 
         RowBox[{"\"\<MODE\>\"", "\[Rule]", "\"\<NORMAL\>\""}]}], "]"}], ",", 
       "\n", "\t", 
       RowBox[{"I$FORTRAN$ELEMENT", "[", 
        RowBox[{"\"\<QUAD\>\"", ",", 
         RowBox[{"\"\<MODE\>\"", "\[Rule]", "\"\<ADAPTIVE\>\""}], ",", 
         RowBox[{"\"\<TOLERANCE\>\"", "\[Rule]", 
          RowBox[{"10.0", "^", 
           RowBox[{"-", "12"}]}]}], ",", 
         RowBox[{"\"\<EXPRESSION\>\"", "\[Rule]", 
          RowBox[{"H$DRIF", "+", "H$QUAD"}]}]}], "]"}], ",", "\n", "\t", 
       RowBox[{"I$FORTRAN$ELEMENT", "[", 
        RowBox[{"\"\<SEXT\>\"", ",", 
         RowBox[{"\"\<MODE\>\"", "\[Rule]", "\"\<ADAPTIVE\>\""}], ",", 
         RowBox[{"\"\<TOLERANCE\>\"", "\[Rule]", 
          RowBox[{"10.0", "^", 
           RowBox[{"-", "12"}]}]}], ",", 
         RowBox[{"\"\<EXPRESSION\>\"", "\[Rule]", 
          RowBox[{"H$DRIF", "+", "H$SEXT"}]}]}], "]"}], ",", "\n", "\t", 
       RowBox[{"I$FORTRAN$ELEMENT", "[", 
        RowBox[{"\"\<BEND\>\"", ",", 
         RowBox[{"\"\<MODE\>\"", "\[Rule]", "\"\<ADAPTIVE\>\""}], ",", 
         RowBox[{"\"\<TOLERANCE\>\"", "\[Rule]", 
          RowBox[{"10.0", "^", 
           RowBox[{"-", "12"}]}]}], ",", 
         RowBox[{"\"\<EXPRESSION\>\"", "\[Rule]", 
          RowBox[{"H$DRIF", "+", "H$BEND"}]}]}], "]"}]}], "\n", "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"Through", "[", 
       RowBox[{"DATA", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Create", " ", "FORTRAN", " ", "lattice"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"LATTICE", " ", "=", " ", 
     RowBox[{"I$FORTRAN$LATTICE", "[", "\n", "\t", 
      RowBox[{"\"\<FODO\>\"", ",", "\n", "\t", 
       RowBox[{"{", "\n", "\t\t", 
        RowBox[{"(*", " ", "QF", " ", "*)"}], "   ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQF", "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSF", "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSD", "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQD", "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQD", "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SD", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSD", "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "BM", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<BEND\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", "3.0", "]"}], ",", 
           RowBox[{"List", "[", 
            RowBox[{"RAD", ",", "KBM", ",", "GBM"}], "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "SF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<SEXT\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "0.1", "]"}], ",", 
           RowBox[{"List", "[", "GSF", "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "DR", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<DRIF\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "0.45", "]"}], ",", 
           RowBox[{"List", "[", "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}], ",", "\n", "\t\t", 
         RowBox[{"(*", " ", "QF", " ", "*)"}], "   ", 
         RowBox[{"{", 
          RowBox[{"\"\<QUAD\>\"", ",", 
           RowBox[{"List", "[", "1", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "0.5", "]"}], ",", 
           RowBox[{"List", "[", "KQF", "]"}], ",", 
           RowBox[{"List", "[", "1.0", "]"}]}], "}"}]}], "\n", "\t", "}"}]}], 
      "\n", "]"}]}], " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compile", " ", "lattice"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{"Run", ",", 
      RowBox[{"List", "[", 
       RowBox[{"LATTICE", "[", "\"\<OBJ\>\"", "]"}], "]"}]}], "]"}], " ", 
    ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Create", " ", "library"}], " ", "*)"}], "\n", 
   RowBox[{"I$FORTRAN$LIBRARY", "[", "LATTICE", "]"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Load", " ", "library"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "LIBRARY", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"LIBRARY", " ", "=", " ", 
     RowBox[{"I$FORTRAN$LOAD", "[", 
      RowBox[{"\"\<fodo_lat\>\"", ",", "LIBRARY"}], "]"}]}], " ", ";"}], "\n",
    "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Compile", " ", "wrapper"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "FODO", "]"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"FODO", " ", "=", " ", 
     RowBox[{"With", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"FUNCTION", " ", "=", " ", "LIBRARY"}], "}"}], ",", "\n", 
       "\t", 
       RowBox[{"Compile", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"STATE", ",", "_Real", ",", "1"}], "}"}], "}"}], ",", "\n",
          "\t\t", 
         RowBox[{"FUNCTION", "[", "STATE", "]"}], ",", "\n", "\t\t", 
         RowBox[{"RuntimeAttributes", " ", "\[Rule]", " ", 
          RowBox[{"{", "Listable", "}"}]}], ",", "\n", "\t\t", 
         RowBox[{"Parallelization", " ", "\[Rule]", " ", "True"}]}], "\t\t", 
        "\n", "\t", "]"}]}], "\n", "]"}]}], " ", ";"}]}]}]], "Code",
 CellLabel->"In[43]:=",ExpressionUUID->"7b3a1df3-dba0-4b8d-b7e3-feeecbee93cc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Test", " ", "map"}], " ", "*)"}], "\n", 
  RowBox[{"FODO", "[", 
   RowBox[{"I$MAKE$INITIAL", "[", 
    RowBox[{
     RowBox[{"List", "[", "0.0", "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"0.0", ",", "0.0", ",", "0.0", ",", "0.0"}], "]"}]}], "]"}], 
   "]"}]}]], "Code",
 CellLabel->"In[56]:=",ExpressionUUID->"63fe7a5a-4064-42c2-9d4b-86d8ee35adc4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`"}],
   "}"}]], "Output",
 CellLabel->"Out[56]=",ExpressionUUID->"cadbffac-1d3c-46d8-a574-077f6f18d8f0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Rectangular", " ", "grid", " ", "search"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"DELTA", " ", "=", " ", "0.0"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"TURN", " ", "=", " ", "4096"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"STEP", " ", "=", " ", "0.0025"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"I$MAKE$INITIAL", "[", 
        RowBox[{
         RowBox[{"List", "[", "DELTA", "]"}], ",", 
         RowBox[{"List", "[", 
          RowBox[{"X", ",", 
           RowBox[{"10.0", "^", 
            RowBox[{"-", "10"}]}], ",", "Y", ",", 
           RowBox[{"10.0", "^", 
            RowBox[{"-", "10"}]}]}], "]"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"X", ",", 
         RowBox[{"-", "0.15"}], ",", 
         RowBox[{"+", "0.15"}], ",", "STEP"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"Y", ",", "0.0", ",", "0.15", ",", "STEP"}], "}"}]}], "]"}]}],
     " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"Flatten", "[", 
      RowBox[{"INITIAL", ",", "1"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"Developer`ToPackedArray", "[", "INITIAL", "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{"Length", "[", "INITIAL", "]"}], "\n", 
   RowBox[{
    RowBox[{"APERTURE", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"First", ",", 
       RowBox[{"Nest", "[", 
        RowBox[{"FODO", ",", "INITIAL", ",", "TURN"}], "]"}]}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"APERTURE", " ", "=", " ", 
     RowBox[{"Pick", "[", 
      RowBox[{"INITIAL", ",", "APERTURE", ",", "1.0"}], "]"}]}], " ", ";"}], 
   "\n", 
   RowBox[{"Length", "[", "APERTURE", "]"}], "\n", 
   RowBox[{
    RowBox[{"APERTURE", " ", "=", " ", 
     RowBox[{"Part", "[", 
      RowBox[{"APERTURE", ",", "All", ",", 
       RowBox[{"List", "[", 
        RowBox[{"3", ",", "5"}], "]"}]}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"RECTANGULAR", " ", "=", " ", "APERTURE"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"APERTURE", "=."}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", "=."}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"RECTANGULAR", " ", "=", " ", 
     RowBox[{"Show", "[", "\n", "\t", 
      RowBox[{"ListPlot", "[", "\n", "\t\t", 
       RowBox[{"RECTANGULAR", ",", "\n", "\t\t", 
        RowBox[{"PlotTheme", " ", "\[Rule]", " ", "\"\<Detailed\>\""}], ",", 
        "\n", "\t\t", 
        RowBox[{"AspectRatio", " ", "\[Rule]", " ", "1"}], ",", "\n", "\t\t", 
        
        RowBox[{"PlotStyle", " ", "\[Rule]", " ", "Red"}], ",", "\n", "\t\t", 
        
        RowBox[{"ImageSize", " ", "\[Rule]", " ", "500"}], ",", "\n", "\t\t", 
        
        RowBox[{"Joined", " ", "\[Rule]", " ", "False"}], ",", "\n", "\t\t", 
        RowBox[{"PlotMarkers", " ", "\[Rule]", " ", "Automatic"}], ",", "\n", 
        "\t\t", 
        RowBox[{"PlotRange", " ", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "0.15"}], ",", 
             RowBox[{"+", "0.15"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.0", ",", "0.15"}], "}"}]}], "}"}]}]}], "\n", "\t", 
       "]"}], "\n", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"RECTANGULAR", " ", "//", " ", "Rasterize"}]}]}]], "Code",
 CellLabel->"In[57]:=",ExpressionUUID->"902bedc0-df1c-4276-aff8-5f0835ab0551"],

Cell[BoxData["7381"], "Output",
 CellLabel->"Out[63]=",ExpressionUUID->"238f0818-649b-4da7-916c-3d2b48508dcd"],

Cell[BoxData["2900"], "Output",
 CellLabel->"Out[66]=",ExpressionUUID->"ab039598-7823-4663-a1d6-546b1e43d77f"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
ZOrz5KAB6Bc8RfPQT+vAeWN0or5JoKm//LJB2qpV8qoytuJlSN28eTOCuLaJ
kD3XbQTLrahxRwsWLNACOoL+YN1vcPr06bONg5c4oMvB/VG+4Z4FlIu/CoIF
ArclAwfGfPjHH6s74xnTtEy8ZVm71j9NYswYC+HaxEYTjx/TCEDTzoiw2s0M
Am6MmleuLKnqH38YbhfjoOCm0TQqL27hLndpvAypa9euHaVLszxr1qzp+htU
HfqAvn79+hEjRmhf4R5A/3pdObsJzY/8gT/47QOex20PfCFcot5BuFv+foYM
MR77BM/dUeDW36tzRd0A+KFJWKbUy5rVeucDByyVOdKokbLPjbx5vVL+/HkZ
Vbt3t8GnUZkN7P/l8oeYPrjHUOEFeEIPDw/XNhGX57mvbxWFPqBv3bp1yJAh
2le4B5gzZ45+Z+3swWAZ/hCyH1KksDnkhXaZP9/C8pGRkZYJ0NxLFPs6dPBq
5zJl/NMk8BDqLjxBgqVKnjrTzosWWSpz9p13lH0eWEpzL5s2yahar54NPu3Z
084fLH+Q/eD9O/TOnTvr36EjWFvuqQ/oJ06c0L95HzZs2GZlYMx/cJe7HJoH
Ga8oUcLOeBfy5c8/rc1uerlvWZImVXfeudOrc/nrilG2rIXwPHmsdz561FoZ
LZdRpUpeKX/9uoyqX39tg09nzpQ0rD/4vyhsVMC5eD/KvXv37itXroyIiNi9
e3dYWNj9qGwDhw8fvqjk2/wPfUBHKO/Ro8fy5ctx1J49e3DU3bt3Jc7OMLFi
7lybQ14Il6pVox0fPmlSzId366buHBlpHWT1JVEi6v32CwsXWsifMMF6Z1Tw
vffMO+OpXFvdb8WKmGuq5dv3lXPnzEsJB7pkzcrJZByKT/PQw8PDEZT79u17
5L/RIAMHDjTdSukDuoiah44HcxzVp0+fP93u5DmgM3HEkCGukUUJElA3pr6b
FFFJP4a5cGEagK1tZspE6eC0zeeeoxRq2hjmZ56htaj0Q8fxvJY7t2uzQAFR
rpxr89VXDZnqkyenXF7aGOb48SktXrp0rh0qVDCMisdj79tvuzbTp6fh2doY
ZjzwQhpkajvgXK+84tosX96Q9hZ66p8uX36Z6qINRH/2Waop6qvtADvox/9X
rOhp9BTiYO/erryjsD+k6WNT8+ZCP4/17FnDQqLZslHOOm3zhRcsUsnFhmHD
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
GvVNwuTEGJuEyYkwst6JSZIYnBhjkzA5EcfqR5BCspLwNrqz++RENAnTL9Fk
mSpVYhjM8P/snQm8VdP7/69UlG9KXxokSpkaiJKIkKFkqMxTMv5kSGXIVEJE
UoY0CBFpQuqfSqRBUhQJDdJEhhK+hoRS+//+3LWts/a+tzucbp17but5rdd9
nXXuWp/1rOfz7L3PXsOzchB+ELrHzmZlIXZd4678yvKSZ/EPdC8pEN7jYvec
bNPYsWF5XjxzLeyTT7GEj9lTYFq3Tr0+RSY9+GCSFz6v3vltiye+e0KNlxzF
P9C9pEDefDNP13KbNmH5Cy9M/U3Mp3RMJsLJH39ks3HMp6TT4YcneeGbM1/y
m955p2BuOzuA+Ad6OkraD7k/91yeLuQTTwzLH3dc6m9iPqVjwtOQZctSr0lR
SnvtlcxVv3lzfE96HtOQIQV25ynq4h/oXlIgc+fm6ULu1Cksf+ONqb+J+ZSO
6aOP5D+bNoXne/pUIOmUU5K88Bs1Sqa5+fML5razA4h/oHtJgfBbvUWLXK7i
MmW0+NYIb1jmoGqffMp7Ov10eZqRPn1Sr0+RSdOnJ3nhJ3EoXsuWCRK95Cb+
gZ6OkvZD7ikSb7fkxNstOfF2S058YJmkxT/QvXjx4sWLlyIg/oHuxYsXL168
FAHJ+yP1u+++69mz5w033NCtW7cvvvgia4FPPvmka9euFOjTp8+PP/5ovly5
cuVDDz3Uvn37u++++7333ku6dS+ubL/xqM2bFQoM4n75ZXs098cfioj15Zfh
rNmGDYokNn9+eMbWpk06rYMCFDPy7beKi/XTT2H255+l6jffhNUpNnu24miZ
2FYbN0578kkBmrAYlFm6VGh2l+t33wntX9dV9C3Qvv46RFu/XkHeFi+2aDoR
46OPFMXLoC1bFrz/vuKVGVm9Wmj2JKlff1VUN4xp0P78U9G6Fi5UGC6Ev59/
rrWCf/0Voq1YofJ2G/WaNUKzp0XwPf+ljEGjFnUXLEiggQw+rQT/kkh5dDCC
VqChoRF0RnP0N2j0iH599pk1+5QBA9R3LGDQsAmWwT5GsBhoWM8I9sSq2Nai
ffxxhEQYgRdDImXgCzR7SAdsggazrkvAe7YByqiOt+TgEobEVasiJDoukQuJ
338fcQmuAtBiJC5aFKJlIXHyM89ESDQu8cMPEZdYuTJB4pw5ERL5zDfWJSjp
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
BJbsiy8qPB1oN9+sQKlTpijiFmjXXKOzSxYvVgw00C6+WOe5/PhjcMcdisHV
qpUiZf35p6LktWih+F33369wo8OGyQiYokMHBU2dMUOHoIF21VXa4vfll8EN
Nyjo1kUX6RSV//0vuPtubSs466ygXz+hPfaYIrCdfLJCfv36q87FuOAClW/f
XmFOZ83S+Vmg8ZfPK1boe/5LGUr+8kvQtavqnnmm4sL99ZcChYEMPq3Q1uuv
q13Ko8PSpdIHrUBDQ/T8+mvpbEgcPlzLle+7T/06/XQF91u/Phg48PtGjdR3
LPDTT7IGNsEy2OeLL3RECBYDDetNnSpLYk+sim2x8Lp1Olvz1FNF4iOPCA0u
YAReYAeOYAq+QIM7GIRH2AQNZuF39WpxDRq8wz7VH3pIp4OR+ACJ+AneQgE8
B/+ZPDl0CVSaP1/BS9u1E/gll+hgkbVrg9tvV0dQ4JlnsiFx6NCQRLwa3542
TXH5QLv6aq0YWbJEIQRBw5hcgD//rLB7GLllS4XXy0riyJHfUhiz33STdnXN
nBmSeOWVOmdk+XLFsuO/F16oU04gsUsXrS6DxL59hfbkk/rMN3zPfylDScpT
i7oggGNcAmTwaYX/nn++gkHROjqgCfqgFWhoiJ5oi85oPnaseoF69Ih+0Tv6
CBr9nT49fl1jme7dIyQOGiQbYknsaQM1F5z4IfekxT/QvSQpPBdiq2W4Myf9
TOf2a2OrZrsQKJaNrdspXjy+xC5WIGe02JoioGKrs2ILrnJFc9dTFSuWy+qs
mBlja5ayroDKeXVWDC3WFnVdNPSM9T1ntJgd6Je7niqrJWNoOZOIzbeGxKwu
kTOJOZs91pFcSYwpk5XEmEvESMzZJXIlMbbELmezx9Dol4uWte85m71ixfCE
QS+FQPwD3UsysqVta7wwJifuAeI++eRTGiVe/L0UDkn5A91ICnVIR0n9eNSW
Asu0bZsM2nffpf6m5JNPPiWXfGCZVMv/OZJaNVLYupfkZUuhX884Ixm0zz5L
/U3JJ598Sjr50K+FQ/wD3UsysqXDWe69Nxm0jRuzOejNJ598SovkD2cpNOIf
6OkohWI8KuvxqXvvrQW0ycnjj6f+vuSTTz4lkfzxqYVG/APdS5Lyzz9B796J
N+vjjtMmpqRl0ybt1rELaI8+WrvD9t03zFavrp0yRx0VZsuW1faZc84JVw6X
KKFdNp06haua+bJ1a+1IsjEqjzxS1QExWWABb9w4zJYpoz1QF1wQrvUtXlzb
uzp3TgxBnHGGemoX4R9+uDY91awZZqtUCQYM0M4pk91tN+3xufTSBNo112iv
kF2H3Ly5NpftuWeYrVtXaAcfHGZ52XnqKW1WMtlSpbT/6IorwsXk/L38cm1S
s+uQKYndKlYMs4ccIjQwTZZWaIsWTRYd7rpL+pjF5GiInmhrl3/Ti/799cPM
ZA88UGj012SxAHbAGiaLfW6/XfueLBo2xJJ2iTUWHjgw2GefMLv//kKDC5OF
HTiCKUvizTeLR0si/MKyXe8N+7C2335hlg9k8ROTxXP4hXn++Qm09u21l80s
TefLli2lvA1WXL++NtDFSMSHTRavfvBBbeyyJLZrp85al2jRQtvB/vvfMHvY
YUI76KAEif36aVeXyZYurZGrtm1DNEi86qoIiaecIhIrVAiztWvLUHbRKd/z
X8pYl6AuCMYlwAQZfLvIn3ZpHR1MFq3QzZ6liM5ojv4uifTOkkiv6bt7XWMZ
S2KNGtIN65ks9gTcv54XGvEPdC9evHjx4qUIiH+gp6P48ajkxNstOfF2S068
3ZITP+SetPgHupeClO+/V1wyE1oN+fXX4O23FbrKLIL9+29FtXr5ZS1r37xZ
6ZNPFJ5r9uxgwwYVWLYsGDEieOcdBadC1qxRXDUu7R9+UJYvJ09WgeXLlaXK
rFmqPn9+iPbpp8q+/74aQlasUNMoYPbUAAIUgMAi69YpOhxoS5eGaB98oOqo
tGmT0D7/XKqi8F9/qQBdGDVK4cvoFEIH6SadpcvIH38osNjw4Yq7FWQu8/vw
Q6F9/HGItnCh0GbM0HpCZNUq7dl/801FckN++ikYP17RwL79Vtn16xWwa9gw
BawLMmc35s4VGn/5jPA9/6UMJYPMkH2vvqpgaGYNA5ggg08rQeYKRtqldXRA
E/RBK9DQED0RdEZz9KcXQeYuwtGjpQ9aGRLpNX03JGINQyL2MWiGRKxnSMSe
WBXbYmFk9WrZfNy4MKQYXBiXgB3jEvBFdbgzJMImWZg1aHANGrxblxg7VsmQ
yJd4CwXMgV9UwZcMiQYNTzMkGpdYuTJ0iWxJROGpU2UKEynFkjhvXkjiggVC
e++90CW+/lpGnjRJkdyykmhcAprMVBTEzZkjtI8+CklctEho776bcAlInDgx
dAn+8plvINeQSEnKU8uggQMamAaNVmjLkogOaGJJREP0RFtzfiL60wvQ6JEh
kT66LoEFsAPWyJZEe11jTy+FSfwD3UvBCLeFHj0SsblKl1YwTzvJuNNOCr9p
JxlJJ5+cmHcm1amjYKE2W7GipnrtlOWuuyoiqJ1kJF1wQSSyzYknKrqFzR5y
iOJk2uxee6m6ncUG9uqrdeyjLUDThx6ayB53XOQk2QMOkPI20lf58uqanbKk
y1ddlZhkJLVuHYmTc/TRiplpszVqKEqqjc1VrpxmMO2UZfHimjG3M8Wks85K
zDuTGjZMzGKbqeS2bRPh2sqUEZqdd6aVNm00eW3Lt2iRmHcmoSfa2iy9oHUb
rm233dRTu3jAkIg1bPlmzRQ+1GaxoUsiFsbONsBaqVJiAS5sATiCKZs96SSF
hLVZ+IVlm4V91yX4QNYuHiCdd15i8QCpSZPEUgQzlXzRRYksnhkj8corE4sH
SOecE9Srl8g2bqzOui5x6aUJl9hjD6HFSKxaNVG+VavEvDOpUaMIidWrR1wC
+iDRricxs+R2BUhG5qIOu54kI3M9QMuWiey++0ZIRCt0s4sH0BnN7eIBQ6Jd
T0Ki1/TdZqtUkXvHSLTXNaljx/Cnl5dCIP6Bno5SGMejhgxJXOM++eTTjpPu
v79g7yV+yD1p8Q90LwUjtWql/sbik08+bf/0n/+Ew/5eUi3+ge6lAGTDhsjZ
Ez755NMOlcwaBi+pFv9AT0cpjONRds+4Tz75tEOlEiXCVYIFJH7IPWnxD3Qv
BSNduqT+xuKTTz5t/9SmTarvPl5C8Q90LwUj/EQ//fTIZR47X7VmzcipzZUq
JaKlZWQuqK5WLZEtViw+KU/WHdXff//I+dcVKkTWwJcqpcXkNkvFmDKguWdA
07QbTB7FbKCtjMwF1e6q4IzMNflu9uCDI8eC77df5EDqPfaILJ8uWVIR2HJA
O+igyEHeVatGTsfmc5UqiSwl3b0DWdEOOCBykDea2AXPGZmr4t0V9fTCxqzL
Fg07uDH8K1eOLHjGhjES3UXsxiVcEuHIPXq7YsXIGnj4ddfn50pi9eqRE88h
0V0Dj++5LpGRxT9RNUai6xLly8ddwl3tn61LuGe777tv5BjxcuUi2yIgMWeX
4L+uS1DXRkE0LuGOj9FuziSiuUsi/XJdIkYiNslKops96qhwZ5yXQiD+gZ6O
UkjHozZv1kbvzp2Du+/WxmHkgw+C++5TUNYRI7RsZulSRfu88UZFBP31V90H
+vdXtk8fbWj9++/gpZeCDh2CBx7QHlvQJkwI7rhDcVMnTVJ27lzFKe3YURtm
N2zQRubevVV9wABt2iUBS5Yvly3Tdtphw9T0/fdrdy3VJ01acu65AgSW7Lx5
CnFJcy++qKa/+kohManer5+2J//2myKLku3VS3tyUZ4u3HyzujNrlrpGB+km
naXLZgt8jx7BTTcFL7yg3zbffKOYq1R/6intmF63ThEy27cPevbUFvJNm7Qj
+JZbFNb1vfeENm2a4nnedpv2RJv9zg8/LLTnntNO8++/D558Umj85fMff+h7
/ksZSoI2enRw661CmD5daGCCDD6t8F9apF1aRwc0QR+0Ag0N0fPPP6UzaOhv
NoOPHStNunTRXnJk1qzFF1+svo8cKTssWSKbUB37YCVshcXIYr2vv5YlsSdW
xbZYGLQ33lBw0bvu0mZ2BC5gBF5gB45gypAId7/8on30sGlIhF9YhmsYh3fY
B23iRPkDiQ9k8RO8hebwHArjRfgS1fErvAtA4xJ4Hb5Hc8OHq2lIxDNdEseN
C6MiGJcYMkQkrlqlIwaMS6xdqz3vgwbJjI88ok3fmGLUKJnl3nu1lR6ZOjUk
ccwYswV+4WWXybDPPy8jf/tt6BJ9+2pbtyHRuMTChaLp1VdF2T33aL85wl8+
881rr+m/lDEkUou6IIBjSPzuO+HTCm099FAY5AEd0AR90ApBQ/REW3RGc/Sn
F6DRI/pF7wyJ9Jde03csYEg0O/otiW+/HbmusafZt16g4ofckxb/QPfixYsX
L16KgOT9kfrdd9/17Nnzhhtu6Nat2xfZHcPxySefdO3alQJ9+vT50QQKU7ij
/z311FPt27fv3Lnz2+bXXVKte/HixYsXL15ykDw+Ujdt2tSlS5dJkyZt3Lhx
9uzZnTp1+iu6rHHt2rU8tRcuXPj333+PGDGCZ3qgIdjNDz744MiRI6n17bff
Uiv2S8A/0JOT7TQetWGDxtzq1tWEXZMmGvfOl/z6q8YADzhAE6NnnKEB2Ece
0alPoB17rAbxRo1S1LKyZXWe1xNPKGhns2aakz3oIA0gL16s0F5VqmgS+dJL
NdJ7882aTKRA8+aKePnYY6pI9WOO0Uj1mDEKeAV4vXoasP3oI8Vn23NPKdCx
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
5JNP6ZhGjAhvI7Epb5NOOCHr/S1Pt7iTTsoG7aijcq9YdMU/0IusbNqUjcMf
f/wWjzJcvDgeQor0/PPhf/l13aJF6u8MPvnkU3qlevW0Tt7I5MnZFJg+Pclb
3IwZ2Zzl+tZbSaIVCfEP9KIsa9dqS4519dattb0lB+Glfr/9wsKlS2svD89x
Kz//rD0+Fu2007Tvya7dPfRQ7TCyy5IrVtQuJxvvnZ8Kd9+tnxO2+lVXaU+N
zZ5yira62LW7hxyiqQE7pLbnntogc9BBYbZkSS2kado0Ub1tW22tsll+8995
Z2K17YEHCs2uzgX2wQeD2rXDLF249dagWbNEdbp5zTWJ7LHHSnn7a2f//dW1
SpXCLF2m44cdFmZ33jncsGarn3uuNhzZO0+jRtp0ZsceMThoe+8dZsuUCe67
L2jQIMwWK6a9P61aJdD4fMMNieXclKS8XTK9zz7al+SSSFu0aLLocN110sei
mc1rdjk3vejePbHIuXJl6UZ/XRKxhq2OlS66KJHFhljSugQWxs52LWWFCiIR
LkwWduAIpmx1GLzsskQWfmHZLsCGfUi06735AJqdRcVz8B93Hcgll2izm83i
e3fdlXAJPJOu4aUuiXbWiS7cfLM83FY//3ztCLMkHnOMto/ZVfTVq8vsLon3
3x8cfnjCJW66SbvALNo550RIbNhQOwftVoiqVYXGX5Ple/5rF4dTi7ogWDSQ
wbck0i6t23XvaAWanbxGZzRHf+sS9IveWTR6Td9j13WMRHtdY0+s6l7X2BzL
2+ypp8ZX4Y4cGSHxlVe26hY3enRiDT9KvvzyVqGlv/gHejqKj7qQnHi7JSfe
bsmJt1ty4gPLJC3+ge7FixcvXrwUAfEPdC8R+esvBXeaMkVxt5KQ337TjNj7
74dR5v7+W+G23nlHw/VB5rT+okValffNN8pu3qy4UhMnBl98Ec7s//ijQp/N
mxdGfPr9d02TzZwZovHlxx+rAMUMGhWp/vXXYeurVgl88eIQ7aefNGeHAmYK
DxCgADShJ0D75BOhrV0bKrNkidBQyUw0fPut0BYuDNHoAh2ZOzeBRjfpLF0O
MuNfzZ+v+bs1a0K0pUuFtmJFiPbddwrhtWBBuAQX82JkTI3BkfXrFRht2jQF
Twsy41999pnKr14doi1bJjT+GjS+57+UMWjUou4HHyjURlYSKUO7lDdhgkBA
K9DQ0KChM5qjvwnbZUicNSuM+EF/6bVLIjbBMtjHJRHrGTTsiVWxrSXx3XcT
JBqXgBfYMWjwBZodmIXNrC4B7wZt3TrFJSPxwZCIt2R1CUsingY4XueS6LpE
tiSamSkQvvxSaCtXJkgELUbinDnZkwjap5/K7NYlDInLl4do33+v/37+eYj2
yy+a87Ik8pfPfMP3hkRKUp5aBg0c1yVohf/SoiHRuAT6GBLRED1jLkFfrEvQ
R9Dor0HDAq5LZEuidYmY5Hpdb6XErmsvjvgHejrKthqPGj8+MTVcsqSmLLe0
gi5b6d8/MTW8xx6aId1nn8SkZPv2iuNkJ9fOOy8yq3jMMZrLs7OK1atr/tRO
DZctq6iSdmqYYu3aaTmrrd66tcJa2uyRRyo8qZ1V3HdfVbdhdoDt3DkxNWym
Ed2p4TPPVIRYmz3iCClvZxWrVFHX7KwiXb7ttsTUsJlGdGcVmzWLrD049FDF
vrBTwxUrCs3OKu66q+Ky1qqVKN+2bXDyyYksn9u0SWQp2alTYmp4r700p2mn
hmmFttwNiZdcEjRvnsiipzvRTC/oi50aLl9eaHZq2JCINWx5rHTGGYksNnQn
mmvUkJ3t1HC5cuqpnRqGHTiCKVv93HMjsQobNRLL1iVgHxLt1DAf8BA7NUyx
a68Njj46UR3vclcL4Hs33pggEc+kazES7dQwXbj66qBJk0T1Fi0UqtRm69XT
tLVd8lG5stBiJB58cKL8FVdElnycemqExDp1tJLBukSFCkKzU8OQC8WUseWp
664WANldQEK7tG6XfKAVaGiY8e9iAzRHf1uefrnrXek1fbckHnCALOOSCAvu
dX3vvZFtYjy73fl9rmt4ca9rfhjkJlsccqehrl0j1zU/Krw44h/oXkLh13jW
U5v79ctr9Vdfjdf1ySefdoTUu3d4E+Dd3P25mG3i5/SKFUneox5+OI7Gj88l
S5JEK4riH+heQnHXptrEu14eZUtxaXzyyaeinXhtN0N5c+bkqXzHjsncoHg9
j4WsN6ldu2TQiqik/IFuJIU6pKNskyH3unWzv/ryIhs2RM7F8Mknn3aotHy5
7gPPPZenwieemPPtJPsh9y++yB7t6KOTuNsVMfk/R1KrRgpb9xIRd9etTaVK
5bV6lSqpv6v45JNP2z8VLx4uvZs0KU/l27RJ5gb1++/ZvzWcd14yaEVU/APd
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
RNud41OnCu2FF8Kd47wXPPWUNh2bneNmV/ujj4bbhM2udrNN+K+/tIXZbIg2
O8fNrnaatjvHAQEKQPO6sWqV1LY7x+2udjqIYqhnNkSbneMUoAt9+qg7y5ap
Oh2km3TWbDo2u9rtzvHffgt3tZud43ZXu905PmuWNgU/80y4c3zx4nALs9l0
bHa1g2a2Cdtd7WbnuNkQbTYdm53jH36oDct25ziYIINvdo6bXe1m57jZwmx2
taMhetpd7Xbn+Ny50mTgwGDhQmXpL72m72bnuNnVbrb/GxKNS9id42ZXO7Y1
O8fnzdMCjP79w53jZlc7vJid42ZXu3EJGIRHsyHa7hyHaxi3O8f5VWn2ofMh
yNzVjrfQHJ7j7mrHr8w+dOMSZue42dVO03THbP+PkWh2tYNmdo7j4WZXu9k5
DokTJkR2jr//vszy7LPhzvEYiWZXO4Z9++2IS5id43ZXO9SYneOzZ4uyQYPC
neP85TPf8H2QuavdkGhcwu5qtyTSCm3ZnePoYPahm4gQaIieaIvOgbOrnR7R
r1yvay9pIv6B7sWLFy9evBQB8Q/0dJRtOx5lfrFb4b2G1wFXeEnkSysmUJUV
82ZkxYQmc9GongOaiYRmhbc2khUTNi1faCjwr7zBG+7WoJkAX1ZMsDsXLauh
XOG/MTRMbYXPvO26yuQLjboxtFxJjKG5ZjdjFP/KON7ot4ZEM35ixYwSJI1W
oC6RC4lZ0bKS6KJFSfx/vPZuJYkF6BJZr8T8Xtc5kFig4ofckxb/QPeSkJUr
dbRWqVKaij3iCA3HXXddOGe6//4asnv44XB2uGLF4K67NPRqpil3311nPE2e
HJ6PtssumrOeNi04+2zNwRUrppOkxo3TWlkToqpaNY3B9u4dTizutVdw220a
szWHYZUpE1x4oQb9jjtOc38lS2pOcOrU4PzzNclrjv3i0XzLLeEM7L77atS0
b98wGNeeewadOmkIsW5dFUaBc8/VOPCJJwoKQGABv/hiNUSBWrXU9O23h4Hs
UAnFBg4M55pR+MYbE4dhgda6tbpGB+mmObuNjl92WTjxfdBBMkvXruF8bpUq
QY8eMp2Za95jj+Daa2XY+vVlZEx9xhlCa9ZME/2gHXWUArRedVU4Z3rAARpE
vffecIqfv/fdp4FQs/yAMpScNEkTvgbttNOEBqYh0ZzdRotmzhQdBg/W0Vom
LB4aoqc95A796cXbb2tq25B4yikye6tWCRLfeEPWMCRin6ef1sCsIRHr3XGH
RryxpyERC2PnY48NSWzaVGhwARoFYIffCR07hisr4K5fP00cmAUDMAu/9pA7
eId9SDz+eEGR+EAWPzEk4jmvvSYvMi6BSn36CNDMNaMwvmcOuTMk4pkoc9JJ
ERIvvTQkEa8eOVIebtZp4PM9e2oA3Mw1c0Vcf71mHA4/XGilSwdnnZUNiVdc
EQaLO/BAjZZ36xaSuPfeQffumikw8dmg5pprNBvSoEFIYosWQuOvIZHv+S9l
DInUoi4IZoofTJCHDg2XH9Ai7dI6OqAJ+qAVPUVD9DRnt6G5e13Tr9h1PWJE
5LqGxMaNIyTa6xp74jBeCo34B7qXUH74IRKaNYmURsdVF2a0rUyFuWseLTm0
QqVMVjR+NHopHOIf6Oko22Q8qkOHrbrqffLJp//P3pnA21h9//9WlFQSUoZS
UfJt0qBBk6JUmsjQpAz1azBTRMZkKEMqRQppMCb8yRQhZA4ZE4lKpgYUGZ//
e539tJ/9POe555577uW4116v9Tqvs8/Ze+2112ftZ9jD2scmFy+euZciO+Se
MNkbuiWXzL0qli1bthw/20PZjg6yN3RLLpn7ai1btmw5flZHDFtKNtkbelak
wzIe1a5d8i8Lli1bznJ89dWZeymyQ+4Jk72hW3Jp927fic8pKb7oUilhi2HM
0FgpKb6QYtFJM/JVqDQzWlp6pUVzIENsaYGqo9VLl7SAWaKlBQxrBk+L/jda
WuCXQP6AMumVFige0O2wgphBaZkLYgalZRDEI+kSGTR77txuWB5LRwHZG7ol
S5YsWbKUDcje0LMi2fGoxMjaLTGydkuMrN0SIzvknjDFf0vdtGnTa6+9Vq9e
vXbt2n2vQkb7acmSJW3atCFDz549t2/fbv61Z8+eli1bzlVBiROq3ZIlS5Ys
WbIUg+K8pR48eLB169aTJk3av38/9+UmTZr8a8ZLdJxt27Y1aNBg5cqVe/fu
HTp0KPd089+BAwc+88wz9oaeBeiLLySmVp06Ej9q715n0SKnZUuJoPX663K8
xcaNzquvOo89JivoeKjbtUtCez3xhETomjlTokF+9JGEtHr+eTnl4dAhiVjV
pImErurbV0JHLl3qvPyySOvaVeLY/PqrRC1DWps2cg7I339LtLcnn5QQYdOn
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
J+3fLzuFv/hC9uE6ka1t69bJNmee6NQg22+/ySZctS3XkV0Nsl945kwnMoAj
e1TnzXMmTZINyxAdf/lyKf7TT660H3+U5MqVrrTNm0Wa2qkNcZ2ZPl22M+/c
KUkuNQsWyLZotSMSaStWSPH16x01GYRYkvyorjBbt0rV8+c7KmYCQhCFQHX5
UrtxqU5tukGBVaukOA1U0jZskOSyZa40nlEnT5bmqI23u3ZJM2ksTXZknkki
Wo8f754jibTvv5fia9e60n7+Wcy4dKmYFMK8GBlTY3AnMtQ5e7YzdapsMVbS
liwRab/+6hpqzRqRxqeSxu/8Sx61OPmPP2R/NxKQEwoi9VI7OihpaIU0NFRm
R2ekob+Shg5oMmuWD0Tarp7SsQY2oTj2MV0C65kgapfA2tOmOV9/7ajRObAA
EXABHRNE7RKgaYII1iAO7iaI2iXULnsTRHyJ4viV6RJ4nZKGH1J1aiBql8Cr
lTT83HQJegFmpEcoEJVL8J6ipEWDuHixD0TlEj/84Er75RefSwAikH3zjQsi
n3znF343QaSUkoYcBaLpEtRogqhdAg3RU4MY6NfRFOjXARAD/drSUUP2hm7J
kiVLlixlA7I39KxImTkepV4G9Rt3NPHkz7O9XvzAkz9vf/rJnJdBXrh4WVOv
Ceo9grck9UKkXt94ztdxBXnyR5p6vXIib/RI+y8GkTz58y6m37iRxsugfllT
b/Rk0MGpeC+juB4w5AvCdZgLKuX1Tb9eHTgw7Z13RKB6IeJHXt+Qpt6Rncgb
PdLU65UTeRlEmnrjVtJoiH7jRiWaqV+v+BEjYAr1QuREXt+Qpl6vnMjLIC81
6mXNibwM8kbMG7cyu3oZ1G/cSONtmvxaGu/aSNOnTvM7/5JHKaNA1G/cfCIZ
+er1SoFIfg0iWiFNz4shLRpE/cZ96NDUfv18IGITE0TlEuqNW7kEVsW2Whov
gyaIIAIuWhp4Ic0EEWkaROUS+o1bDfLoN271Rm+6BL5EcfXGrUFUb9waRMMl
wkHULoGfmy6BAZEWAFG/cUeB+OWAAT4QlUtoEP/+W/7ljVsVRxrv1yaIfOcX
BSJ5yEl+NWyiXcIEkX954zZdQvdr9UYfcIl09WsTxGgK9OsABfp1WhQccg/0
a0upk72hH9P04YfeNOI558gYmkncvG65xZvxrFfPtxL+vvtkTlNP/F15pYTZ
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
zZwpgfLwRhTAM5H20EM+EOvXFyOgPF795Zfi4fg5xfH5fv1k5FzNs2PMVq1k
8Pm228QsZ53lPPGETEyYIC5Y4DRpIpP4GPbaa2Wg+403XBDpj/TKMWNkIQfS
zjtPDjubN0/WrJ56qoD42GMi7dFH5Tu/8PvcuZKHnOSnFG+vZr9G8oQJUgt1
USP1Ujs6oAn6oBUgoiF6oi06o3nLlq5L0CLaFejXkyf7+rWKTKtp+3avX2PP
wOFrXCUC/Xr//sSvOdmYuBQH+nVm3NntDT0rUrzjUY0a+VazwFxjEybuCwFp
ATaXykQn0xuGLra0NDlQXRaSll5DZa60IwliNnaJ7AQiD0V797oXgV27fCGX
lXCeuzS1axcszhNFOumYGHKvVy9oKH7JMNkberalZcvCu6dacpNeWrMm3Vc8
y5YtZw/m/VFRmzYh//KCqeinn3y7GDRPnZo517RsQ0uWhNtZra7MACX9hq4o
iTpkW+rTJ9xnevVKRNrAgcm/qli2bDkpXLWqex249dbwDOrQwCFDwv9t3z7T
LmvZg95+O9xQvXsnJu//DMpcTdOrRhJrz7oU13jUe++F+8ybbyZS5aBByb+q
WLZsOSlcrZp7HbjttvAM6kzhYcPC/+3QIV0Xm+w/5P7OO+GG4veMkb2hZ1ta
uTJ8skyHhksXrV0bPphm2bLlbM/6RhN6AtSll7r/btzoi9ekWUV+sKQpdD6U
y7UKj5ABsjf07EzRy9h05PYEKHq5S4ADd3wzildKHIuOAo8fsaWlubAnkCFQ
PCA8TWkB5WNLS5MzV1oGzZ650rINiEeVSyQXxOuv91aq//OPzJib/3IHnz3b
u0p06RKUVqtWhi5i2ZW4FAcM9cILGZdqb+hZkbL5eNRhI2u3xMjaLTGydkuM
sv+Q+2Eje0O3ZMmSJUuWsgHZG7olS5YsWbKUDcje0LMiHbnxqLVr5UyHBg3k
DIi//5YgUX36SECtt96SYzX27pXjGBo1komzZcvc4ypatJBgYirWxMKFEu+r
SROJRnXggBww0aOHSHv/fQk/9eefcqYD0nr1kuU0+/bJURGNG0t0qSVLRNqk
SXLiQ6tWEn/MiRwc8+qrkmHIEJnU27BBYmRR/L335HSJHTsknBfJnj1lPywZ
hg2TqlFAbb2fMmVNtWoicOJEEf7dd3LYBNI+/VSq/uUXWf9PcVT64w8JoPHB
B6IqCq9bJ8rThKZN5SAPddoFDaSZNFaddrFihcRJwxQffSRnZ2zaJCZC2rvv
yqkc//wj4bOQ1q2b7Og/eFBOMGnWTLbzqFNsZs6UHb4vvihBwJC2apUcq9Gw
oURO27NHzsvo3Vuk8cl3fuF3/iXP6tWSf8wYmYBr29Y9xQaZSEY+tVAXNVIv
taMDmqAPWikQ0RNt0RnN0Z9WIG3cOKd5c9FHrWWaP3/1Y49J2xWIWEOBiH2w
ErZSIGI9bIglsSdWxbZYWB1Dg81fftk9AAUslEuADhiBFHhRHOxAEBxBkyTI
gi8ZwBpp4K4Wc06eLFHOYL4gHD/BW8iA51A1XoQvKRDxLnwMT1Mg4nsoP3y4
6xLqFJsAiPgwnowp8Gp8Gw9XIOLzv/8u/k8vQBo9gn6BYUeOFCN36OCeYvP1
1z4QV65c+eSTAtOgQWLk336TzUpIe+cdWRO+e7dsBUXa66/LAShIGzVKQGzX
zj0AZfZs+c4v/M6/5CEn+SlFWSQgB2nI3LxZ5FMLdQHiypVSOzqgCfqgFYSG
6Im26Iy0QL9OL+l+jT2xamaTHXJPmOwN3VKqxF3DPMezaFHfqaB58vhOBc2R
w3c8ZUrklEZzdc1FF/mOgCxUyHcE5Kmn+iJQHX+878TSlMjBneZinhIlfEdA
nn227wjI3Ll9B0qiRrQ0c+FQ8eK+czxRzDwVFCOYZ4yqppnJSy7xrTs67zzf
0a4YzTwo9qSTfMdTpqT4js6E//c/3zmexYr5zvHku3kqKDnNM0ajpZUq5TvH
85xzfCCip3kqKK0wj52NllaypM8laJd5tCsuYYKIhWO7BBiZR7viEmed5SXB
F5TjdwlANM/xBEQE6iS+Z4KIGgEQUdV0CRpiukSBAkGXiA2iCq5ruoR5tGu+
fL7TfgEosNIsGkTTJXAAJOgkknESnaTegEsEWormJojYLV0HnvJsZoJYtqw8
1Fk6Osje0C2FEy9r5jXEsmXL2ZWvvDLeiOtjxoQUr1nzMF+MLMVL9oaeFelI
jEe1b5/864xly5aPDC9dGtdloWrVkLI5c8qYf+aRHXJPmOwN3VI41aqV/IuM
ZcuWjwyPHh3XZeGaa8KLr1t3mK9HluIie0O3FE7duiX/ImPZsuUjw2vXxnVZ
ePLJkLKnnXY4lsZZSoDsDT0r0pEYj9q61bfeybJly9mVK1eWhfHx0OLFwbhz
KekO1Z4m2SH3hMne0C2lSt9841u0fMcdEgRSJy+/3Ln/fi9ZqJA8vevOfvLJ
Tt26vuXZNWr4Fi3fdptz001eslQpuaroZMGCMuav1wmfdJJTp46sNNYZqlb1
LTO+5RbfOVAlS8pxEjqZP78U14u9EYtwc0E1VZuru8uWdW6/3UsWLy7K6ySN
oml6xT5NfuIJ3xJozGKuUr72WjGdTp53nvPII9464Tx5RJpesX/CCc7jj/uW
QFeq5Fx1lZe8+mrn7ru9JDnJrxd7n3qq89RTIlMlqYW6zHXsFSuKPjqJniaI
tIK26MXeuXOLbubybOyANXSyfHnnhhu8JDZ88EEviYVNEHPlEmnmGnswMlee
lyvn3HyzzyXMGVvQr13bW6jJF5LmM2eVKr7V3TfeKAJ18sILnerVvWS+fEEQ
8V5zo8QDD/gW1V93nVOhgpc8/3zn4Yc9EE8/Xcxuglizpm9rw333yaniOlmm
jHPXXV6yWDHnscc8EHnhRZpeY8/v/GtubaCsOfSN5Hvv9ZJFi0rtGkS0Qpre
doHOaG72a3Tbvj0dl4URI3z9un592TBo6egge0O3FIt275Z9rJ9+6u4pPnBA
9hF/8okzd67bi7//XnYKT50qW5KhX3+Vvc9jx7qnL/31l+wlHzZMdgFDe/bI
RmmKq23mBw86334rSZ4c9u6VDGvWiLQpU2QHMfTbbzK1N2aMezjjjh3Ol186
Q4e6w4P//it7dSnOWwPS1K5kkvyoluisWydVT54sakAIQRQCEQtRBWpTHZVC
KDBnjhSngSiGtKVLJTlzpqgNrV8vu25pzp9/SpIG0kwaS5Mhmv/VV7IbevVq
SWKcefOk+MKFYjSkLV8uZpwxQ0zqRE6O5sI4YYK75WfbNueLL2SP8M8/S/Kf
f5zp00XaihWS3L9fNr8jjU+1Gpnf+Zc85HQih2J89plIUFdmZCIZ+dSiQKRe
akcHBSJaIQ0NFYjojDT0V1uSf/lFNBk3TrSCaC+tpu1YQIGITSiOfRSIyiWw
ngkitlUgbtokO6l54dqyxXUJEAEXNeuqQVQuAYOmCSJYgzi4g75yCUCENYh4
iwkivkRx/EqBqFwCr1PS8EOqpjnKJaJBVC6BVysQ8XPlEgpEegFmpEcoEJVL
TJwYDiLGnDZNDKs2hQGccokFC1xpgKhcQoG4YYNANn687HmH+OQ7v/C7cgkF
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
cTAAcfJkD8Q9eyRMxOefy4Y+JzIfsWSJSFu2zJ2O/OEHCeGFMZU0zIuRMTUG
dyKrKYAAIIDDiUTTmjNH8quzbpGwdKlI41NJ43f+JY8KtAX0lNUuEQoi+dFB
SUMrpKGh2gaLzmiO/rTCicRdpF24qFqxQ3tpNW3HAkoaNsEy2McEEespELEn
VsW2KvzItm0yrIrl//hDkmABIuACOsolwAtpYKekgWa0S4C7cglAnDhRWLsE
3hLtEhpEPA3heJ1yiV9+kYZolwiAiMIKxJ9+ckFcvFikLV/uzj3RC5AWAJHL
WiiIGPObb8TsP/7oSlMgfvedC+LatfLv3LkuiKH9ml/UciDykJP8ak8rEpCj
XEKBSC38S40KxOh+jZ7aJQKENNqINNqrpGEB5RKhICaXAv06NgX6dZqUwYtz
sinOW+rBgwdbt249adKk/fv3z507t0mTJv/6Q/Zt27aNu/bKlSv37t07dOjQ
npED+Hbt2tWwYUPyU3z9+vWNGzde7t92dyze0D/80JvbzZlTZgnjDyNDv2vb
1ptkzJtX5hz13G6OHDLxp1ezpEnUS+16WjBPHpGm53appXZtbyIPrl49Q2sy
uVboiTw1MX377V7yiisk6qZOFi4sc6B6WjB3bokIqifo4ccecy6/3EvecYcv
zN2ll3rzzimRXTb16nlzu4hFeJEiXn6q1nO7ak7znnu8ZKlS3pQlXKCAGErP
7Z54osy5n3uul79aNW9uF77pJm+mOCUyzV2njgciBkeantsFjqeflslrnb9K
FV/opBtukHieOknOp57yZopxhgYNfCBSFzXq/PffL/roJHqirU4WKyZz4tol
cFR00xP0avJXT9CnRCamy5XzktjQBBELP/usN91/yimCgt7XDDpgZIYnqljR
m+6HwReUdRL08QG9ZoMvJPUqC/jRR53Spb0k3qWn++H//U8i1mqXOPPMIIio
qldZwDVqeGs2UiJrFfQKkJTINHetWp5L5M8vZg+AqCfoUyJhMczl4jfe6AOx
RAmfS6h+rSfo+b1uXad4cS8/ZfWajZTIWgVzAyz1UrvZr9ENDTWILVv64pnw
kGPGoKDV5h4rbBIAsV+/xC8CGSSeypo08fVrHlpiEI9zJohcJdRDaWrUv7/v
4ty1a5aJOPofxXlLXbNmDTfxQ/+1jlf12f6wdePHj3/nnXfU93379vGevmXL
lo0bN3788cc6T58+fcb57X/M3dB5b9LepRkvipOi1/NH838opE0ffJC2tABz
uU6MeBIwb6CWLVtOIvfo4XZM7uxly6a7+MSJCV4H4qNUh9x5YQlowpNYarFZ
/vnH9yir+JZbUn3lmTw5pKVZIuKoQXHeUr/++mtu4jo5aNCg4cOHmxkGDBgw
cuRInWzTps23335rZti9e3ezZs1Se0PX8GXzL7yDRPnM34UKxVvcfEVNjYsW
jVcf85k/fo4MKae77b17J/8iZtmyZcUFCrjdc/r0RIqXK5eEi+f+/QdCY188
9VRoqUVNm4YrP2tWeBXm6JDmkiWPihtH3F/ivKFPmTKlV69eOjlkyJBPPvnE
zNC3b1/z7btjx45z587VyT179nTr1q1/1Kvo/0VR0g1yeL/o3R8Bjqf49u1x
drcJQ4emKfALnscSuxSMGZNI2wNn0Fi2bDmp7HbPxJ609fPAkbx4fv99uDLX
Xx9a6oeqVcPz9+0bXkUqr0tHxY0j9S/R91AnDuINnTuyTvKGPmLECDMDb+ij
Ro3SSd7QFy9erL5v27atffv2gwcPPhg11nHMDbnrja4m40jxENYLjYkX4DPO
iGvehzyBI+ri5O++S6ThoTHxLFu2nBQ++WS3Y44dm0jxa65J5CIQN/2/CAV/
/ecf36lwmh9+OFxKnz7hyqc2XxAaE69w4cxs2OGn+OfQmzVrZs6hz/Ifmzt+
/Pg+GDBCag59c2TR9fr161988cXo9e3pqj370LvvhvhM/FFqUzvMxeR69eKV
ltqQVAy+8soEjwfi6dqGirVs+SjhOnXcjrljRyKLW954I5GLQMapevUQZaJv
/Yp+/jnkDejcc1M9rTV0hVLz5oevNYeD4l/l3rJlywkTJuzfv3/BggUNGzb8
O7JlYNWqVZsi+yC2bNnSoEGDFStWkGH48OGdO3d2ZBvHX02bNp0yZcof/9Fu
/0G6x9wNnbfsJ57wOUz58umI3L5zpxd+SnHgqOJbbknH4cLUa64zj5Z2wQW+
oxmKFZOtHwnToEG+e3rBgl5orJTIK4O5xvi443wL7FNSgkmUMU+ULlDAW4yd
ElnHbq4xjm7aRRf5QlDSzc1jwVFMR0tLiYR10nHhUpNmnk9dtKgviO7pp/tG
83Lm9C1ij5ZWooTvkHHeEczjsPluTtyQUwcoU2yuQoeLF/cdC05Z87DsU0/1
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
48ZJaMr33pPltTVrSvwxpNHHcRgydO0qm/gWLJCCFG/VSo4R2bBBdscgvHFj
CT+1c6cEo6taVRQYPVqk9e8vohCIWJLjx8vhdEjr3FmiXX37rRzRizRUWrdO
zjdp00akNWwox2GgPE2gIU89JUHAUIYG0kwaS5Np+OTJYgRM0bGjzAl+953E
5UNaixYSf++33ySiGmbHmF9/LYZ94w0xMqYeOlSkYXwgAAjgAJSvvpLIdeTv
0EEicK5YIfApEFeulF/4nX/JQ07yAz1lcQOc4eBBkalApBbqokbqJT86bN4s
+qAV0tAQPdEWnRWItGLvXolNR7uefFKWQqEb7aXVGkSsgU2wDPb59Vc5JEWB
iPUWLxZLYk+sim2xMJbp21cCHGH5AQPE7GABIuACOmAEUuCFNLDbuFFwBE3l
EuALymCNNHAHfYq//74c7wXzhSR+greQAc/Bf/Ai5RKohHfhY3gawvE6fG/X
LllDQkNQAM+kaQMH+kDEhxWIeDW+jYfj50jD5/F8/J9egDSMOWuWRFXt0UOM
XLeuRHKLBpH+RS/D7PS47dul9ykQ6Y/0SvomPZR/6a302T17JIhfjRoC4uDB
AiKffOcXfuff2P0a+bH7NRqiJ9qiM5qnt1/36eMDUfdr7JlazJn4KdCvLWWA
7A09CxP91DzsMiXFd8ZiSiSQo7kQKGfO4D5QFcpSc+Aw4sACvFNP9S2nOeEE
30mFaUrLn9+3WuaUU3xLd5BmnkCakuI74TE6mS+fbzFP7ty+Uz75yzy8Mk1p
VG0uNEIx84BI1A5ICzQtIC1vXt8iJSAwzwyNNmxAWsCMQGYuUkJaAMQA6LFB
DLgEemYERNqVLhCjpQVANJdv8VcgdGF6QTRdIhrE2NIA0ZSG52cERIwcANE8
CzhNENPs1+kCMc1+bR4jm6ahihd3TwxMgHgf4THDlFasWPrOS7XkJ3tDz4rk
jkfxXmb2BcuWLVs+8sxrRWIUum/3jjvskHvClPQbuqIk6pCFyYaCsWzZctKZ
l/r4D380KbVQmZbSSf9nUHLVSGLtWZ7UYU+WLVu2nFxObJz85pvDpVlKlOwN
PSuSOx6V2vOtZcuWLR8xzpcvjUOfU6PQUPCnnmqH3BMme0PPwhR9FqFly5Yt
H2Hu3TvBK9hPPwUXB8Ldu2fqVfLYIntDz9o0YYJTqJDbEXLnlr0/+tC0446T
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
1fU=
    "], {{0, 483.75}, {500.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{500.25, 483.75},
  PlotRange->{{0, 500.25}, {0, 483.75}}]], "Output",
 CellLabel->"Out[72]=",ExpressionUUID->"515b4e42-e20b-4cae-b002-324b45a4772c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Line", " ", "search"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Set", " ", "line", " ", "parameters"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"LENGTH", " ", "=", " ", "80"}], " ", ";"}], 
   "                                                ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "number"}], " ", "of", " ", "lines", " ", "in", " ", 
     "full", " ", "space"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"RADIUS", " ", "=", " ", "0.5"}], " ", ";"}], 
   "                                               ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "maximum"}], " ", "radius"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"STEP", " ", "=", " ", "0.0025"}], " ", ";"}], 
   "                                               ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "distance"}], " ", "between", " ", "poins", " ", "on",
      " ", "a", " ", "line"}], " ", "*)"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Generate", " ", "lines"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$LINE", "[", 
      RowBox[{"LENGTH", ",", "RADIUS", ",", "STEP"}], "]"}]}], " ", ";"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Filter", " ", "lines"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"DeleteCases", "[", 
      RowBox[{"INITIAL", ",", 
       RowBox[{"List", "[", 
        RowBox[{"_", ",", 
         RowBox[{"_", "?", "Negative"}]}], "]"}], ",", "Infinity"}], "]"}]}], 
    " ", ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "delete"}], " ", "points", " ", "with", " ", 
     "negative", " ", "vertical", " ", "coordinates"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"DeleteCases", "[", 
      RowBox[{"INITIAL", ",", 
       RowBox[{"List", "[", "]"}], ",", "Infinity"}], "]"}]}], " ", ";"}], 
   "             ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "delete"}], " ", "empty", " ", "lines"}], " ", "*)"}],
    "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Set", " ", "state", " ", "signature"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"SIGNATURE", " ", "=", " ", 
     RowBox[{"List", "[", 
      RowBox[{"0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0"}], 
      "]"}]}], " ", ";"}], "                              ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "value"}], " ", "of", " ", "1", " ", "corresponds", 
     " ", "to", " ", "transverse", " ", "coordinates"}], " ", "*)"}], "\n", 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Set", " ", "initial", " ", "conditions", " ", "for", " ", "other", " ", 
     "state", " ", "variables"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DELTA", " ", "=", " ", "0.0"}], " ", ";"}], 
   "                                                ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "energy"}], " ", "deviation"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"FIX", " ", "=", " ", 
     RowBox[{"List", "[", 
      RowBox[{"1.0", ",", "DELTA", ",", 
       RowBox[{"10.", "^", 
        RowBox[{"-", "10"}]}], ",", 
       RowBox[{"10.", "^", 
        RowBox[{"-", "10"}]}]}], "]"}]}], " ", ";"}], 
   "                      ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "initial"}], " ", "condition", " ", "for", " ", 
     "flag", " ", "and", " ", "transverse", " ", "momenta"}], " ", "*)"}], 
   "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Generate", " ", "full", " ", "initial", " ", "conditions"}], " ",
     "*)"}], "\n", 
   RowBox[{
    RowBox[{"INITIAL", " ", "=", " ", 
     RowBox[{"I$INITIAL", "[", 
      RowBox[{"SIGNATURE", ",", "FIX", ",", "INITIAL"}], "]"}]}], "  ", ";"}],
    "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Set", " ", "aperture", " ", "search", " ", "parameters"}], " ", 
    "*)"}], "\n", 
   RowBox[{
    RowBox[{"TURN", " ", "=", " ", "4096"}], " ", ";"}], 
   "                                                ", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "number"}], " ", "of", " ", "turns"}], " ", "*)"}], 
   "\n", 
   RowBox[{
    RowBox[{"APERTURE", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"Sqrt", "[", 
        RowBox[{"Total", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Slot", "[", "1", "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"{", 
             RowBox[{"3", ",", "5"}], "}"}], "]"}], "]"}], "^", "2"}], "]"}], 
        "]"}], " ", "<", " ", "10.0"}], " ", "&"}]}], " ", ";"}], "        ", 
   
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"--", " ", "external"}], " ", "aperture", " ", "function", " ", 
     RowBox[{"(", 
      RowBox[{"not", " ", "used", " ", "here"}], ")"}]}], " ", "*)"}], "\n", 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Perform", " ", "DA", " ", "search"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"DATA", " ", "=", " ", 
     RowBox[{"I$APERTURE$SEARCH", "[", 
      RowBox[{"TURN", ",", "FODO", ",", "INITIAL", ",", "APERTURE"}], "]"}]}],
     " ", ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Plot", " ", "DA"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"LINE", " ", "=", " ", 
     RowBox[{"Show", "[", "\n", "\t", 
      RowBox[{"RECTANGULAR", ",", "\n", "\t", 
       RowBox[{"ListPlot", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"Part", "[", 
          RowBox[{"DATA", ",", "All", ",", 
           RowBox[{"List", "[", 
            RowBox[{"3", ",", "5"}], "]"}]}], "]"}], ",", "\n", "\t\t", 
         RowBox[{"PlotTheme", " ", "\[Rule]", " ", "\"\<Detailed\>\""}], ",", 
         "\n", "\t\t", 
         RowBox[{"AspectRatio", " ", "\[Rule]", " ", 
          RowBox[{"1", "/", "2"}]}], ",", "\n", "\t\t", 
         RowBox[{"PlotStyle", " ", "\[Rule]", " ", "Blue"}], ",", "\n", 
         "\t\t", 
         RowBox[{"ImageSize", " ", "\[Rule]", " ", "500"}], ",", "\n", "\t\t", 
         RowBox[{"Joined", " ", "\[Rule]", " ", "True"}], ",", "\n", "\t\t", 
         RowBox[{"PlotMarkers", " ", "\[Rule]", " ", "Automatic"}], ",", "\n",
          "\t\t", 
         RowBox[{"PlotRange", " ", "\[Rule]", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "0.15"}], ",", 
              RowBox[{"+", "0.15"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"0.0", ",", "0.15"}], "}"}]}], "}"}]}]}], "\n", "\t", 
        "]"}], ",", "\n", "\t", 
       RowBox[{"ListPlot", "[", "\n", "\t\t", 
        RowBox[{
         RowBox[{"Part", "[", 
          RowBox[{"INITIAL", ",", "All", ",", "All", ",", 
           RowBox[{"List", "[", 
            RowBox[{"3", ",", "5"}], "]"}]}], "]"}], ",", "\n", "\t\t", 
         RowBox[{"PlotStyle", " ", "\[Rule]", " ", "Blue"}]}], "\n", "\t", 
        "]"}]}], "\n", "]"}]}], " ", ";"}], "\n", 
   RowBox[{"LINE", " ", "//", " ", "Rasterize"}]}]}]], "Code",
 CellLabel->"In[73]:=",ExpressionUUID->"144d6cab-17ca-41cd-84dd-0e171ab83b3c"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
hRYsMPS67IHHHmi+U6b3oaVeTno23XwW6I1Q9sDTqlXYUrA9pDWcRI96w4Zp
cyHxZp3clKKzlnh8gxt0c+A6ZiNg0H07ryOqwbqzIfj72muCcNDvLEVFoXp1
iX5de85YUQRzFa/56vrVV6WsPfigkVTMJ6QXZrAXma+TTmfiRJ8X8Ui1ffsM
Sozpfobz5xuSgOxbOCbQZfXLUeTRKD1L+ZVVVvFZtqwUAzptT8FFEBo0EHkR
XSAsXBgrkcUcQTXKI+AGncONiLwT/VL6Gfjbv7+vPaD0jCGHd9+ViAdzOup0
MF9df/21lDVxSDRcKuYT0gspLL3YSe/ChitTMUMtc2ZpbzwKUenxJnReAnHs
mP7ZLprwzjuxUObg2LlTOuRN5/S6Dh2kSBMnWlhYJoNvH93589JdiJULHM6C
G3QvIv6XgP77Ly2lVVYp4dZTVSpK56JKlm3JEm183wooSW5XrgTz7q5vLwKT
i3IZm7XUKlf2u187fVp1lrqeoMKE0OupglCTO+lHWYGoqCkHc3/6Sfu65hYa
Aj0JhsBmmya5u+7yn/RqAJIyRILQ32lyMi3tB80HSl66mll9flChQsKpU1I8
FO7jj8egEIOGBx+kdaSCsG4d3eXIYfuuOr7K3TQ8bdBNfGIcngHqavTTb7yR
XKc2aEDbqd54g6wVujRPPEHOtwcPpo086NOVKydMny4OBvr9XaxdSzOkiHzb
bbTRTD4bXQQ6Gx070oLwbNloC9iKFWRK7r2XqJUtK0yaRFuoHnpIUjB0+9es
oRH7nDmppm3VinZjvfQSbQvKk4cOu9y8mc6XLFqUFmJVqkTLs0eOpK1SmTJR
y2HsWNRQtFQYfcY77xT69KH9UzVr0iajAgVo+hvUmjShvV25c9NGs40byQ14
sWIUv3x54ccfyX126dJEDf/jetEi+h1PEQcx5dX7Io4fJ5qgDPq1alFaSBHp
Ij7sx/z5xA+4AjVwCD7R+AHP4Bw9YuTizz+FZ54hTvLlo41mf/9N+UWukXdx
tyCkUaIECeqhh2hfGPqPZcumZM5aKssuyKpzw4MkT0gVsoWE//qLJjggJcjq
xRcppygLlAjKBaWzejWtVERbC9QeeEDlrVfE779TWSMyyr1dO6JWvz6tr0DA
heyrPxhmzSJjBOJg+N13iVrVqmSQwEDr1v5l5MZgeW0DQTKfU7h//hFIvZ96
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
HXpWpKpSUtO+fdySo029SRNubwlAeKk/91wVOS2Ne3nQj2v680/u8dHcbruN
+57y588Qec4Q+3Bj3pMfeZclly7NXU6VKqnLQoWcTdOTT3JPjb5s0IBbjfTa
3Ysv5tSAHlI74wxukLnwQnVZsCAX0tSr503erBm3VulLPPOnp3sXYF9wAbnp
1blg+9ZbVtWq6jJ/fu7ZueUWb3IU8+mnvZfXX88NX/pp57zzWLQyZdQlivzm
m9all6rLfPmolttv9ya/915uONItT61a3HSmxx6hcHArV05dFi1qvfaadeWV
6jJvXu79adzYyw2/W7b0LudGTMTXS6bLl+e+JBNE5FWrlrqEDM8+S3k0N7l5
TS/nRineeMO7yLlsWcqG8maCSD2YvsCgpQcf9F5Ch9CkXpMPDUPPei3lmWcS
RGAhL4EOMAJSOjkQfOwx7yXwBcp6ATbQB4h6vTd+gJueRYXlwH7MdSAPP8zN
bvoSj7KdOnlNApaJosFKTRA9s07KJJ5/nhauk993H3eEaRCvvZbbx/Qq+ooV
qXYTxNdfty67zGsSbdpwF5jmds89NhCvvpo7B/VWiLPPJjd8ykvcx796cThS
IS04aG7gDP4aROSL3D3r3uUNctOT15AZkkN+bRIoF0qnuaHUKLsGETqBZhwg
6noNfUKr0K3n8mdxrrz9j8g075tvdq7CnTjRBuLkyRE1cVOmeHcEQMhx4yLi
FgQJd3cKqQ49GclVDlKszKGvfv0CxRGJe0DSWQejt+jKmS23BKoleHKbvflS
nPUcJDett4Rbfnxo/nxmh6ekCCnlyz1sSnXoSUfxrKRBZiQ3ozRvHmNpwqWQ
NJYzOnTXPickqrwJ6dDN+DmAsi31Bx8wQlQmsXOGxuJPqQ49SHJPCxlbSY4e
pXOnr7+m362gq9WHHzLm5ZdbdBu1YAHdf0kvc//9R3dbc+dyuN7yTOv/8ANX
5f36Ky8zMugvbtYs68cf1cz+/v10fbZ6tfL4dOgQp8kWL1bccPO77xgB0SQ3
JETyHTuUHDt3kvmmTYrbH39wzg4CyCk8MAErMJSuJ8BtzRpy27dPCbN5M7lB
JDnRsGsXuW3cqLihCCjIypVebigmCosiWx7/V2vXcv5u717F7aefyG37dsVt
92668NqwQS3BhXqhZKgaCgcdOULHaHjD+ftvXiLOunWMv2ePgnvrVnLDp+S2
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
W6lSUFmvWeM3+f+J9/HdWgxISLMjvxPf+iVtCFWBKW1HrvCEyxBUaNzYfzvQ
rp2M8IFohu9aYomKP3Vq+M1airImqd0AlOrQY03ZQhAGqfGop5/2U/V4Krk/
OnLE5owiq/DYY0FJcOyY9zRSoyMYJJ7DjxvFgkiauLBbuUjSxi24QciYyuCG
AlpJ0ldGImQUC5g9q7ff9t8OTJwoI3QTXfH9gPiYl/nycdFpBBT1IXdZiBxA
2RbEzR16zqAY2hJqjem9SnjWtwQ4bnjgwGyqLfroX34JNvcRI5zJ8+T5RlyH
7+LiQIbI42exTUjBkdzN3EJsPJ3tp8HNz78xkC2EXEIvqY15zNSebRGyL6Br
TMLt3CpX9j/oZ3nW0nhOjX9cjEbEl0UPxn/11ZCbshiTspZcQKkOPblpyxbu
XilYkCPteDcP0JvLEY+PPuJuFOE5lfjRR62ZM7kjCWnBoX59a9Om0HLH8zkq
u/A4xnzwQeuLL/6+oq6sO+9WGvjrhEXcJ1W4MNuTatWszz7jViPpFrJ8ee6l
wmO/dKl62mncIfXxx9ykIzyOMZs25TTctddyLTHCDTdwUf0996hBhosusiZN
stq2Vc8zZ53F3Vv9+in/mbjZujU9PFepwksI0KQJk4OJ5Aa2X37JjU7S4+UF
FzDrF15Q3jjLluVWHTz8SP+ZELhFCwqPIqAghQpxuxa41anD1cJ4Gbn6am7d
evhh6QRVNR3p6cqlapky3G81dKhyv4lHpqeewhsIN4WB2ymncIPVnDlUvgTx
iisISrNmyglqxYrcvdWli/LGiU/8HjmS94XHuylizphB6CWIDRpwnRJ4gjP4
IxfkhRzlcApkGD6c8kiXqpAQcsIkKlVSJoFSzJrFtRnghtLVq0fZUF6UWoMI
bUgQoZ/Bg7nVSy62hPagQ2gS+pQmAQ0DxFq1qCVwQ8sPvQEL6ckW6AAjICVB
BHb9+3PLlXQ4iJvAFyhfdJEyCaAP1K67ToGIH+AGO5EmAcuBNcKKYEvC46K2
d28ylCYBgWF7U6Zw0yIKUriwgskBImxYmgSsetw4bhyTLlVRwLfesoYMUQtB
ixfnNrfPP+eWN2kSt99OtWsQUacAIuqX9It7/vncT/fKK8okSpfm3j0NIqBp
3px7CWvUYFoAd8stVDs+8Rt3LrvMmj6dcSSISIW04CBdqoInOlDwRy5Z1Wtw
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
kN/3ZrIX0w1FcJcCP/88JIW8J1rhu7aYr+5s2xbFFklTwlvapPsR/Bx6hw4d
zDn0b775xowwc+bMIUOGyN9yDn3Pnj14T2/VqlVbD7Vo0QK/x40bZ6Zy/5C7
g5TN50h6+OEg6/Iacanff+qIeQlvl0JqlFIhurpKKT+Byo80bN8uv7N32eQJ
T4oR+G4n3uVliRK2k9NzBCltJBsFv8o9PT191qxZx48fX7FiRZs2bQ4fPoz7
P/zww26PW/69e/e2bt16w4YNiDBp0qTu3bvj5l9//bU/k9C5z5kz59ChQ2Hk
7h5KFpTDEXLNGqcLqSwC3tDziRO+/zwjhubMts7FQX67RM+uEiYHhwj17Cc8
8oi3HejYMZgkl4tV+P5ANOPlO++E2joJ17eiSSGkL4W0D713797oyrt167Zp
0yZ586233tLv+2vXru3atSu69T59+uz32QqRpIvi3Ela51lRmKYItplHorNz
b9nSuuQSby2+7z7r5pvl76fFMEcVz5/nxKqH+3jXYxcvzh005cqpy3z5uNWo
Rg1vgrvvtho29F7WrMk9NZkLgyl/hw7e9dhFi3IblF67mzcvtxqZx8M1amTd
dZf38vLLuT1NLwwuX57J9QpqsH3+eatCBXWJTJ94wtZI3nYb1/lobhAbwuuF
wWXLsmh6UT2K3L69VamSN/5jj9lOuqlf37r/fu9l1apUrH52gsJffJGLz+Xl
Kadwx9mFF9oa2zp1vJf4LXf+m227XqJ/+umUTS9clyAiR50ckjRo4L2EnM2a
eS9RinbtvOuxS5YkN73UHO9uzz5rXXqpNz60BF3py2uuMUGkhqHnzPXY3ImA
kurl3EAHGAEpoyzEUXO76iqirEEE+gBRL6rHD1iIXoCNTJ980rr6am/y22+3
mjTJEkRYpi+I553njd+8uXXttd7LW26xmjb1XqJePPecfJlVEICbXgYPENu2
tSpXtpmEudisXj3rwQe9l1WqcIeaNokzziA3vXAd4LZqZV18sRN0nRycH33U
e3nBBcxdO4+FaYGb3n0AmR31Gmn//tvbCBw9ajtJGTrxAfFY2XMKiv9wtTZv
De46PHEipGZGZNdXmuPtKQqJUp7iUmSjI0e4j/Wrr9TxScePc6fwjBnch2t5
trZt3WpNn35w1ebGd2XoSp9W6ORHoz3bUQ8c4H7hRYsszwAOd/4uW2bNnq28
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
G8NZROwTGZV6RYDCGCQyeJLCXa8w4e+d9wfmGud9A0Zndwz164u3mE0UdjsD
iw9vDxc3iupIOHLE7GaWub6sbB7j/esvi46vWjVbeeMFoj6gczA8VW6Z1wM+
xVM5JCVZaLtbY7+V6x51KiBDJ9YxfP1MOAILT9+VGoj0RJK/pMraqY9Dwp+U
xbfYCWHi236Wj//k+2beoHp1CwyYFN+8SW8XLbIuwoN3d1EdCT/8YJ19+XJb
PSS+KyyznztnK3tKhv9TILpkWDxVlxDVkMrh1Ck7bXMbe9zyTQ32R9S7oxgP
LPz9Of8bLdrsI1FjltFw1zd4JCEpOkZKiUB4Lv95/O3b11cvpO49qYEbvQwd
av22RQueW7DLE3z5pXX2kSNt9ZDly1tn58YbqQNicUCvXdtCKJkzR5y6GAPM
0NUtQg/h77vLWb6pzsam6J5HdAVhLiJma+GeKxwMkTi9I7eTJoT8CaygcJAX
+VIiUwuEHs3IKvXFF331Qh99ZJH99tvJhlBzmVNa0j9smK0uDhN5S/JWr7aV
vWFDi7xp0hi2+OMdYnFAX7PG4rrAZs0iTl3sQdeuPhtmQreeqlGJDD+yBpHp
GcIURM8QbTJ8EplCa6rGwpfFYXWMUlip0q6dSfznoUNeuyDLfeqWLcXbhASD
waek/+xZW/3bmTOa+34hPjL414JP2LLFYDfLg7wYLnVALA7omuteUdXQ98MP
6TyLA2gv6j5RpkzaO+8YdPizz5BmzBizUj/LNt5gGclkVLETpob25pt6ogwZ
CJtq6PvaawZr7eefN1hEP/II2eLK6J13apUr6yb36dNrVaoYhPjKK9w0V4Si
RblFtAgPPaSVKaNHs2XT3npL7zrwgQdsimmuuaN79lmDWXuePFrFinr0jjvo
Fkj5lQi0QK5eI1W2rMG++qmnDDbM991n8G+ZJQsxShr6osr//S+31hYklS5t
sK8uXNiwiwSWgrEyCoabhAihqEsxpUoZjOQLFTKcJkDKN94w8MRNiAZevfCC
wWypQAEuRJHmrruoLiaVUK21K1UymNwXL25ADh6qQgSHXSoh0nAhKtbaZiE+
9xxZqqsqUaGCHoX0IUSpEviBqGpyX64cZVGFqJq1P/CAQYjQzCpVdAIgRJCq
2qi8/LLh3AQ0Xx2qMO68+qoeve02YpRqwA8hqh/WUAnV9tskxNy5tddfNwtR
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
    
    "], {{0, 483.75}, {500.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{500.25, 483.75},
  PlotRange->{{0, 500.25}, {0, 483.75}}]], "Output",
 CellLabel->"Out[87]=",ExpressionUUID->"9fe848c4-2346-49fa-9df4-5007519c87d2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Returned", " ", "points", " ", "are", " ", "all", " ", "stable"}],
    " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"I$TRACK", "[", 
       RowBox[{"TURN", ",", 
        RowBox[{"Slot", "[", "1", "]"}], ",", "FODO"}], "]"}], "]"}], ",", 
     "DATA"}], "]"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Next", " ", "points", " ", "on", " ", "lines", " ", "are", " ", 
     "unstable"}], " ", "*)"}], "\n", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"I$TRACK", "[", 
       RowBox[{"TURN", ",", 
        RowBox[{"Part", "[", 
         RowBox[{"INITIAL", ",", 
          RowBox[{"Apply", "[", 
           RowBox[{"Sequence", ",", 
            RowBox[{"Plus", "[", 
             RowBox[{
              RowBox[{"Slot", "[", "1", "]"}], ",", 
              RowBox[{"List", "[", 
               RowBox[{"0", ",", "1"}], "]"}]}], "]"}]}], "]"}]}], "]"}], ",",
         "FODO"}], "]"}], "]"}], ",", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{"Position", "[", 
           RowBox[{"INITIAL", ",", 
            RowBox[{"Slot", "[", "1", "]"}]}], "]"}], "]"}], ",", "DATA"}], 
        "]"}], ",", "1"}], "]"}]}], "]"}]}]}]], "Code",
 CellLabel->"In[88]:=",ExpressionUUID->"2e69f907-63ed-48ec-92d6-2059d525f82b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "4096", ",", "4096", ",", "4096", ",", "4096", ",", "4096", ",", "4096", 
   ",", "4096", ",", "4096", ",", "4096", ",", "4096", ",", "4096", ",", 
   "4096", ",", "4096", ",", "4096", ",", "4096", ",", "4096", ",", "4096", 
   ",", "4096", ",", "4096", ",", "4096", ",", "4096", ",", "4096", ",", 
   "4096", ",", "4096", ",", "4096", ",", "4096", ",", "4096", ",", "4096", 
   ",", "4096", ",", "4096", ",", "4096", ",", "4096", ",", "4096", ",", 
   "4096", ",", "4096", ",", "4096", ",", "4096", ",", "4096", ",", "4096", 
   ",", "4096", ",", "4096"}], "}"}]], "Output",
 CellLabel->"Out[88]=",ExpressionUUID->"869058d7-2bf8-41bf-a22b-b11f72edde42"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3008", ",", "2838", ",", "1705", ",", "1080", ",", "3967", ",", "2308", 
   ",", "848", ",", "1655", ",", "3558", ",", "1572", ",", "1114", ",", 
   "1383", ",", "1302", ",", "2946", ",", "4077", ",", "3932", ",", "3034", 
   ",", "3463", ",", "2301", ",", "3842", ",", "985", ",", "3181", ",", "372",
    ",", "292", ",", "1113", ",", "1014", ",", "987", ",", "598", ",", "361", 
   ",", "666", ",", "585", ",", "1650", ",", "416", ",", "2779", ",", "2834", 
   ",", "2896", ",", "1789", ",", "2637", ",", "2054", ",", "3636", ",", 
   "2729"}], "}"}]], "Output",
 CellLabel->"Out[89]=",ExpressionUUID->"c0a58d6d-8440-42d5-8d3d-3c62599fa1cd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"I$PAIRWISE$DISTANCE", "[", "]"}], " ", "functions", " ", "can", 
    " ", "be", " ", "used", " ", "to", " ", "measure", " ", "distance", " ", 
    "between", " ", "computed", " ", "DA", " ", "points"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Return", " ", "maximum", " ", "distance"}], " ", "*)"}], "\n", 
  RowBox[{"Max", "[", 
   RowBox[{"I$PAIRWISE$DISTANCE", "[", 
    RowBox[{"SIGNATURE", ",", "DATA"}], "]"}], "]"}]}]], "Code",
 CellLabel->"In[90]:=",ExpressionUUID->"48a62aef-bd9f-46f5-9dad-2b34d62795d5"],

Cell[BoxData["0.03192887905707448`"], "Output",
 CellLabel->"Out[90]=",ExpressionUUID->"33182b02-927c-46a1-b0cf-cfcfd100ea6b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Add", " ", "lines", " ", "to", " ", "DA"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Returns", " ", "new", " ", "DA", " ", 
    RowBox[{"(", 
     RowBox[{"with", " ", "added", " ", "new", " ", "points"}], ")"}], " ", 
    "and", " ", "new", " ", "lines"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"List", "[", 
      RowBox[{"NEW", ",", "ADD"}], "]"}], " ", "=", " ", 
     RowBox[{"I$APERTURE$FRINGE", "[", 
      RowBox[{
      "SIGNATURE", ",", "0.25", ",", "RADIUS", ",", "STEP", ",", "TURN", ",", 
       "DATA", ",", "FODO"}], "]"}]}], " ", ";"}], "\n", 
   RowBox[{"DATA", " ", "//", " ", "Length"}], "\n", 
   RowBox[{"NEW", " ", "//", " ", "Length"}], "\n", 
   RowBox[{
    RowBox[{"Show", "[", "\n", "\t", 
     RowBox[{"LINE", ",", "\n", "\t", 
      RowBox[{"ListPlot", "[", "\n", "\t\t", 
       RowBox[{"ADD", ",", "\n", "\t\t", 
        RowBox[{"PlotStyle", " ", "\[Rule]", " ", "Red"}]}], "\n", "\t", 
       "]"}], ",", "\n", "\t", 
      RowBox[{"ListPlot", "[", "\n", "\t\t", 
       RowBox[{
        RowBox[{"Part", "[", 
         RowBox[{"NEW", ",", "All", ",", 
          RowBox[{"List", "[", 
           RowBox[{"3", ",", "5"}], "]"}]}], "]"}], ",", "\n", "\t\t", 
        RowBox[{"PlotTheme", " ", "\[Rule]", " ", "\"\<Detailed\>\""}], ",", 
        "\n", "\t\t", 
        RowBox[{"AspectRatio", " ", "\[Rule]", " ", 
         RowBox[{"1", "/", "2"}]}], ",", "\n", "\t\t", 
        RowBox[{"PlotStyle", " ", "\[Rule]", " ", "Green"}], ",", "\n", 
        "\t\t", 
        RowBox[{"ImageSize", " ", "\[Rule]", " ", "500"}], ",", "\n", "\t\t", 
        
        RowBox[{"Joined", " ", "\[Rule]", " ", "True"}], ",", "\n", "\t\t", 
        RowBox[{"PlotMarkers", " ", "\[Rule]", " ", "Automatic"}]}], "\n", 
       "\t", "]"}]}], "\t", "\n", "]"}], " ", "//", " ", 
    "Rasterize"}]}]}]], "Code",
 CellLabel->"In[91]:=",ExpressionUUID->"e5b24831-1ed0-4197-8b7d-b71bc6fa8c00"],

Cell[BoxData["41"], "Output",
 CellLabel->"Out[92]=",ExpressionUUID->"2697558e-1898-4274-8937-545eabd13a1b"],

Cell[BoxData["72"], "Output",
 CellLabel->"Out[93]=",ExpressionUUID->"26089288-82ed-46bd-8c95-372bd3bc81cd"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
jyjGj5/5lXiYTybkT0rekBRR6cd1DgpPwz6PCCOpXu0gdRz8tmghiY3QqXDu
mYipHnHpcGU/7ZdfxJPr1UvEMww/pcONlLqynybROquUpPngG+fnXGKXEs+p
cX4LrOa+v7iH632Orly25bUEj5JfLPpcdKQ8axbn63QZ9ur4u1ITWo171EiB
qw4PPyYbhT5dH9Pjpgz1h77EKZG67gqdgczwhhYOpaFqTs3Fyf79xRscm5Gx
phF14Wb0EJeNklQjM/NcrDTj7XeLDwoq+1MNfrDUf71zI53TONTZtW8vHvmn
nx6oJh4mSVPc/VufbGOmN1+kISkjba8+3JmVPHhA7GfToGV7KThyRJy2xo0F
HsWlA/gjGvzbb8WTq1pV3L8iGDRIPPJFi5SJn0/ngwfiaZUuzXpo2lTcw8GD
ktLiJtuluSckY8YK2xxEJTzVkXatxSNnjkW3uY9xwxlaZZee1lcz8afjQva2
JVkJv0PIaKFPeVZtAxw+VIcveVCWKG/J8Cm8gg2C5vCF8EBfAjp2rHiD88cf
8PLD2A/gZnoPd+2SJCMzm12cB819BSakTwuRVWqFFlZzFy3jBg4Uj7xHj/hg
UuNPYYDgU6VJspja5I9IkpJ73GYZ/oSt+Ah+6pLf40niZ9DKlV1xzqHGXL0q
TlvnzoJQ4vLmyiBqokk9oYR//LGI56AgV6R6B1cGUbdu9RzWW8DIl1sRwXcf
fsh66NpVnJgrVyTFX02C/CS6BBL0CdnAfNKuvS3pxSLsi7vftBOPPPGwlb/K
sz5PlZWaFrgStjWACzuyt2XIafhdTloLfYrasZEMX1a5O0h44MHcCt3MCGSp
8xXnzomYmM6aldnTXYlWgvsl7dy1S5cLEdbIjKvJxgwZXNrHGD6c85Z1i1j4
KAkfQBOXrgnbn5074X7Ydw6+Q/a+R3LfrE72vSah/Ej+sB1rmTwyOEnaJ3A1
kSROXIwZ44pzDsklJIgcIgZuyxZJpQD8cT4aBjRd4rI6oYQvXCiSVq1aktLy
BDZfgsgzZnReD+AyrFdw+uyCjrPIJ3psTfHiUlcAujq2RswtIh1I0QskAfed
Hbb1Lov/gy9mnP9KPPJEg70Nt+BPk1+80OZPM7BXVwvgbxwJSUGi4P4UcVzQ
kj27issRPUFOafoRLIVuQQZ0qDKCiipo9FKm5N4Xo8XgcmOnDEIFzb9Nn77x
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
xZmwQ4a4R/fMwqJFC/lC3OFvhqBC+G6M7aNErCC1zT74nwHsLeUHbo+Ve79+
/datWxcVFXXgwIGuXbs+fUqH5J4+ffqmuaWmekDHUN6/f/81a9ag1MGDB1Hq
8ePHDtTuBz9YB2HUs2MH3V/j10Sv9IwbbbDFHmnnjYAJLIzsp5Pabpa1IphH
4/LHh4zO1zb+Y/9i5zxrZZ4mTbPpnaqDqkyoWixcODxl7HK/vpn2NVBn69VC
fzovzoVJF5XKORqzfLlOLbNm6ebVVwDMysXBcIC1a61zOJIFl053kRm8skRG
avHjn2c5Xg752vP2OtVfu6Y9StjV4a23+NOn4j/GW/wtQUW+fPRk6VIdAq2B
5J0f3AR27UMfO3YsBuXvvvvujNEaZMSIEZq/UuoBnRv2oWNijlKDBw8+Zfwn
70DtvgLu1F/7KvLcm+Xqml+8kFUIz2H3+X3RMYXzcFOm0aNNhuiJEtEypnqZ
FKOS2oYZ3W758kpU258nT04u1BQb5sBAOsRTbTqO+VqBAqZo0aK8UiVTNFs2
M0/1SZOSLy/FhjkggNziZVI5UK1WzcwqvkgR8rGmRDNnJvNsxYY5cWLCBpxK
BtSVNaspWrmymdtb0FmjRmQwq77JrE8vfNzg3T00lFqK9ipPGjQQ9v8fL6b4
twvfJK/pRjhy5yaLDNEODxFhyfYUZi9CzRKjgpLtLVRybtOUhytp8z9Lsjm3
4Uj3XLnkzmdDOF4uBS6hPNRpejNunJkQMXPW7Ak3glQA9TQcTBB/HxX44Qet
EDOajqoZlP93IRwLVxwEW/gWZErEE/3LY/Fku3kzz5LFVDsUQG3HXrAgf+89
UxT1onZFJUBV8+ZmCtywodkmjgoVaNOHGtvRo6jzH07H86TgKbjhFRNucCy6
cCeD23qpeFXkxf9SvMtTnJcwKh5kuKcFyjdEF4FzW+Fqnly4IDtRMfd5wV+I
vukyNz9D4urVf3r35osX8yuGVc3792n79pw55J6UG7xrbttGc7Rdu8iQF337
vn0U3bSJGxajyKR5/nzadBRu+J9w/Trtu160SP6NePiQpmmzZ/MjR6gsekB0
+Ci+cycZgSPln3/IFnrDBuk//OxZ2hW+YoUcEG/epF1MCxfSnnHAo0e0dQjY
Dh6ksi9f0iZuYMMv7pGCdDxFnkePJHsXLCAMYhMxcAIz8J87R1HUiHpRO2hA
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
pSQ0iG7tWhLj7Nl8iQ7ECyFD1BC46tizDBVAEWxHMz5VZs0iamjfQA2sLF5M
1PA/UyIrP+Kwbx+oHgYACjAGSYksJvJF7uCBKRFcgRo4vHnT2fyCf7bHZ98+
4uTXX/m29FOntuATDGVnO5ohDcgEyVetImqQlWNbCtFhJgF5MpOAhFWHQ4mx
Y51VA7qARqAX5qkAmmJKZCYBPbKFVbh57RpF2LLFORLrUCLZg2YSsBNYC7KD
5TAlwpZADXYlmgSsjpkEGhNkrSnxyBGdErVlKrBqUENxYOfMJJgSV6/mjDCn
yTt3klgmT6bl2UZK3NSpEykRX7WgBsUxk1iyhFaD4w6Uy0yCKXH3bqjM2YRA
lajjUCLuq46PXKZEZhKgADpMicwkkIujXpPxuNZrcAg+wS14dq3XDlRZ0ROZ
P7CzonkT5L5x5vyL9dpbXLu2oWvXP/Hlwuq1t5DqdRpD5HboUYDQ9O8e8XmX
43TaiqqMU00WloSa2XBLJgxwEXEgZe6Oluc8tE/CQOTvKS/f2DPP0iOlCKiA
qQhzD+8leSXHbE84ZT2VLeCIgt2hhw4emhd85rDPGYvA6zo+HyyAfIb1bY+M
894pcEu9ZZ5AdXjrunjRySxekvFprL3rMl9hogsmcC5uFMXLP/u2YsDng+jb
AR9NjBqjzqiJc2T4ShK9zON7UBw0wyOJmsONG+eWOaMTqSGySA2kRA9FYFv0
ZIVCMadwWklBTfxGwLePMLpIxRSPtwE1QYlOljRq+JwUqYlCVh2ft+L+GpgE
G6YQeXOInafCU7ZXSJdfClyVyLznacycPs27YAZXJYrfVig1++5TU6gZmkTK
oDFJVaQGmV+75mRGVCK760JNV1FclchMgkXCI4cSOf0Uk3BSE0yCx7GsREsm
Ic4GuirRM7UzZ3R6k+o1fouzz0ZKlGuiaBLgRKQGPs2UeN/hJ8BOpRXdTly9
IptECozbMK1ei7x5mPvWlGgjoLA79LCB1WSYfa1afL7skUdolMzzMNGiRXz6
LF06mvxig3vugLauQ4cXcy1ULj6IzOLnVNI1Za44cIBmkx1zzbyd+fRTPvuW
Ozc5ouzShbv2yppVbd6cxtzy56dgxow0Pfr773xaPCaG5mrnzKFZSzbXXLQo
jf7Vr88nZHPlIu+d3btzb2/alBzzHZchA00CzprFp8VBrXRpGm+sUYNPUxYu
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
ulIlZ/L33qNJeS2IC8xrM/L58xM1ze0Yitypk/rEE1rPSNmJM/JvvaWbzC1Z
kuaOtRl5CBxi1yZzocT27dWnn3bG/+IL9fXXncHXXtNN5j79tCJOv8IYJCUi
L+SoMfbZZ7oZeZFPXCgFlKhNv+bKRdS0GXmmxDJlnPE/+cTpa5e9FUCSmklA
wp07O3l78EGipp2eCe1AR44Zec4bNFirlpM49AstayYB7UPs2mQufsBCYCea
STRpotsG9f77ukUasL2WLZ1KLFiQchSViILDhjWT+OorsnAtOSxfXKSBevH1
184Z+Xz5yNo1JWbOTOtPnnySB1HjGjTQqemNN3RKfPZZmt/XZuTz5iVq2ow8
7uMp4mjxkRYUtGC1auSIVZtDR77IXfOSB65ATZuRB8/gXKzXKJdUr1H2FCXm
m/US/pQdUMWpxClTPLVceBMQa+LLL9N7speQhtyV6Fq3FlREf4eON1jXhZS9
ewc934BCsmEexCu36znL48e7pYIGTR/5/QyTlatZ8Wv5K4pMJ0ovRWxXI+/y
gT3XJGEpo/UcA8JwWMoYJIFE8vVxw4r4k2l7cedNvDngS98Q+JoQXxfZhRcM
NkrgU1unRvusd2AR/R06vilcDRXfQRH/ke4B3OZTPmd4kP159FHjNJcu6bxw
O65lShVlUXX8emBXgeodK28o8IiBrKLr0skq8rIzjW+FoMVMvZVDAPP1n5S3
gvWhvH5eIc4uSNfyIgXZr30PCZ7wq1UzbmS2bjWm89tv5q2Zm6ANrxD9HXrK
Thb52rs36FkHDXw8yp2nuCtXFNdX3FWrXGN2ebusQqPtPBxz9f6eb7jf4hSN
F289Ui1962x4dd/wkWlBPOQSyUIIFPFIKGMwrvRHCuBPkzrCDFfu3MYN0+jR
noQjNEeKxy479fpyDzuiv0OXJkO1K1JXx3kBcdpXu7Jmdd0WStVHW42WUr92
5Xko5qLs+DX2XI6DOXMYSywNXLypSbX0PeRreictlDoKChXi61b69Fk2laBf
yTFxu4rWr/dSUkwMeT8wxIIFhpLnsrIRfER/hz5zpoGhVq0a9HxDgP/+16Bo
n39uHDk5WXNXwiL+p+6LhnW4Va3yYW9GwnXxlidi6PvAj/UknqMFVQ4+0PdN
FEHlP9giioSr8G8VpFsv96hMnmoEcFGojk0EDj9XOsnExdHXhI2QIPo7dKBF
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
    
    "], {{0, 483.75}, {500.25, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->500,
  ImageSizeRaw->{500.25, 483.75},
  PlotRange->{{0, 500.25}, {0, 483.75}}]], "Output",
 CellLabel->"Out[94]=",ExpressionUUID->"c2966222-03f1-4c49-a03a-ea125a3198fc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "The", " ", "above", " ", "DA", " ", "is", " ", "accurate", " ", "up", " ",
     "to", " ", "selected", " ", "distance", " ", "between", " ", "poins"}], 
   " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "It", " ", "can", " ", "be", " ", "refined", " ", "further", " ", "with", 
    " ", 
    RowBox[{"I$APERTURE$REFINE", "[", "]"}], " ", "function"}], " ", "*)"}], 
  "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"ERROR", " ", "=", " ", "0.000001"}], " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"LIMIT", " ", "=", " ", "20"}], " ", ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Use", " ", "smaller", " ", "search", " ", "distance", " ", "then", " ", 
     "distance", " ", "between", " ", "points", " ", "on", " ", "a", " ", 
     "line", " ", "to", " ", "about", " ", "jumping", " ", "throught", " ", 
     "gaps"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"LENGTH", " ", "=", " ", 
     RowBox[{"0.25", "*", "STEP"}]}], " ", ";"}], " ", "\n", 
   RowBox[{
    RowBox[{"REFINE", " ", "=", " ", 
     RowBox[{"I$PARALLEL$MAP", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"I$APERTURE$REFINE", "[", 
         RowBox[{"SIGNATURE", ",", "TURN", ",", 
          RowBox[{"Slot", "[", "1", "]"}], ",", "FODO", ",", "LENGTH", ",", 
          "ERROR", ",", "LIMIT"}], "]"}], "]"}], ",", "NEW"}], "]"}]}], " ", 
    ";"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Show", " ", "plots"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"Show", "[", "\n", "\t", 
     RowBox[{"LINE", ",", "\n", "\t", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"Part", "[", 
         RowBox[{"REFINE", ",", "All", ",", 
          RowBox[{"List", "[", 
           RowBox[{"3", ",", "5"}], "]"}]}], "]"}], ",", 
        RowBox[{"PlotTheme", " ", "\[Rule]", " ", "\"\<Detailed\>\""}], ",", 
        RowBox[{"AspectRatio", " ", "\[Rule]", " ", 
         RowBox[{"1", "/", "2"}]}], ",", 
        RowBox[{"PlotStyle", " ", "\[Rule]", " ", "Green"}], ",", 
        RowBox[{"ImageSize", " ", "\[Rule]", " ", "500"}], ",", 
        RowBox[{"Joined", " ", "\[Rule]", " ", "True"}], ",", 
        RowBox[{"PlotMarkers", " ", "\[Rule]", " ", "Automatic"}]}], "]"}]}], 
     "\n", "]"}], " ", "//", " ", "Rasterize"}]}]}]], "Code",
 CellLabel->"In[95]:=",ExpressionUUID->"666c9cf2-552d-4b83-b876-375680395163"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
YIEFFlhggQUWWGCBBRZYYIEFFlhggRP4f36/AN4=
    "], {{0, 483.75}, {500.25, 0}}, {
    0, 255},
    ColorFunction->RGBColor,
    ImageResolution->96.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{500.25, 483.75},
  PlotRange->{{0, 500.25}, {0, 483.75}}]], "Output",
 CellLabel->"Out[99]=",ExpressionUUID->"07e4b995-0f26-4e22-90a4-a6ed31a411e0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "Clean", " ", "*)"}], "\n", 
  RowBox[{
  "Run", "[", "\"\<rm -f *.f90 *.mod *.o *.so *.cc\>\"", "]"}]}]], "Code",
 CellLabel->
  "In[100]:=",ExpressionUUID->"f64b37aa-d476-467a-8cc1-63f490a0eea0"],

Cell[BoxData["0"], "Output",
 CellLabel->
  "Out[100]=",ExpressionUUID->"dd01d6cc-490c-4ee0-ad2e-c25e9637bace"]
}, Open  ]]
}, Closed]]
},
WindowSize->{1869.75, 1062.},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Magnification:>1.5 Inherited,
FrontEndVersion->"12.1 for Linux x86 (64-bit) (June 19, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"6bddae9d-1bf5-49be-baf3-635a4e55ab57"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 8731, 220, 1066, "Code",ExpressionUUID->"ec363e5e-298f-4d6b-bc64-cc6a8c1844a5"],
Cell[CellGroupData[{
Cell[9314, 244, 207, 5, 83, "Section",ExpressionUUID->"7682ddf9-3b64-4069-9afc-86e9d0568e70"],
Cell[9524, 251, 395, 9, 107, "Code",ExpressionUUID->"806f6468-5a8d-4f7c-ac92-e5f3911fc2a2"],
Cell[CellGroupData[{
Cell[9944, 264, 3002, 74, 368, "Code",ExpressionUUID->"7a2f0248-1696-4a14-a53c-768747096ffe"],
Cell[12949, 340, 254, 5, 51, "Output",ExpressionUUID->"e81652bc-50c1-438b-bc26-ee5052c856b4"]
}, Open  ]],
Cell[13218, 348, 3407, 98, 194, "Code",ExpressionUUID->"ac05aed7-4a07-4215-b4ba-87dbb3fc237d"],
Cell[CellGroupData[{
Cell[16650, 450, 359, 9, 107, "Code",ExpressionUUID->"e7550752-bcb3-4af3-b664-5c765d5e4eca"],
Cell[17012, 461, 1237, 38, 305, "Output",ExpressionUUID->"63baa35a-f3ff-4799-a43c-4e4c46261c12"]
}, Open  ]],
Cell[18264, 502, 2089, 54, 252, "Code",ExpressionUUID->"f33cde8e-f0a7-4b17-bed4-2f540efc8bb4"],
Cell[20356, 558, 374, 9, 77, "Code",ExpressionUUID->"95390b7c-d590-4090-a2f4-8e0855d66394"],
Cell[CellGroupData[{
Cell[20755, 571, 580, 13, 77, "Code",ExpressionUUID->"7a3d21f8-d0dd-4186-a542-8634c3d9296b"],
Cell[21338, 586, 254, 5, 51, "Output",ExpressionUUID->"12030f60-e686-4e55-9221-866115f8299a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21629, 596, 295, 6, 77, "Code",ExpressionUUID->"aa8b6bae-fb8d-4ace-9ccf-dbf706919153"],
Cell[21927, 604, 106, 1, 51, "Output",ExpressionUUID->"53d252a9-8eb1-4901-8055-c6732283ad56"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22070, 610, 308, 7, 77, "Code",ExpressionUUID->"59c17f66-3826-4cb8-84af-675d6ab0110e"],
Cell[22381, 619, 111, 2, 51, "Output",ExpressionUUID->"3e1b6402-d6b8-441f-a3bb-384ba17527de"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22529, 626, 330, 8, 77, "Code",ExpressionUUID->"e8ff35aa-1adb-4d22-885e-80e1887eb5f4"],
Cell[22862, 636, 123, 2, 51, "Output",ExpressionUUID->"39f88df8-70cc-4f49-b5a0-0904d3e04e4b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23022, 643, 379, 10, 77, "Code",ExpressionUUID->"3151588a-0439-4275-abc2-2ab931caed71"],
Cell[23404, 655, 119, 2, 51, "Output",ExpressionUUID->"52ab56f3-9ee7-49c0-9914-de4adeb3bc1f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23560, 662, 379, 10, 77, "Code",ExpressionUUID->"8bf30429-ca35-4afd-88ad-825c374d6340"],
Cell[23942, 674, 119, 2, 51, "Output",ExpressionUUID->"6e0273ed-da3e-4c60-8eeb-5d07dc43ed5a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24098, 681, 313, 7, 77, "Code",ExpressionUUID->"bee7f8eb-d554-4ad5-98ee-be06079c2daa"],
Cell[24414, 690, 119, 2, 51, "Output",ExpressionUUID->"859ac813-5d13-4f5c-a355-10286fd96215"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24570, 697, 336, 8, 77, "Code",ExpressionUUID->"ef1b25cc-c67a-4f13-9ffd-2e14c629546f"],
Cell[24909, 707, 119, 2, 51, "Output",ExpressionUUID->"f8076d9f-4b76-435f-8288-a9fd1a6886b3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25065, 714, 542, 14, 77, "Code",ExpressionUUID->"96426616-4817-4105-902f-9b42d36605d1"],
Cell[25610, 730, 119, 2, 51, "Output",ExpressionUUID->"8d75bf10-47b7-41a4-8c29-44b187025b74"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25766, 737, 325, 7, 77, "Code",ExpressionUUID->"14b1c00f-d886-4690-ad19-85011e6a14d4"],
Cell[26094, 746, 111, 2, 51, "Output",ExpressionUUID->"91e34779-88d5-446c-909c-1bcacc8102ed"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26242, 753, 321, 7, 77, "Code",ExpressionUUID->"1ec30025-16a1-42ca-9ed8-e36697aa376d"],
Cell[26566, 762, 111, 2, 51, "Output",ExpressionUUID->"292803b5-0eb1-4aec-b107-f40caaa0c6a4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26714, 769, 380, 10, 77, "Code",ExpressionUUID->"8af52f23-947a-45b2-b789-962ba76fbdae"],
Cell[27097, 781, 180, 4, 51, "Output",ExpressionUUID->"9537f0d8-5784-49c5-94b6-cc9ac7214599"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27314, 790, 396, 11, 77, "Code",ExpressionUUID->"5952704c-c50d-484f-a060-dc1b5b222009"],
Cell[27713, 803, 158, 4, 51, "Output",ExpressionUUID->"b9c09bbf-36d2-4781-90de-dfdc79f3c944"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27908, 812, 396, 11, 77, "Code",ExpressionUUID->"0520b80b-d280-46bb-8f79-f9e3b123b443"],
Cell[28307, 825, 158, 4, 51, "Output",ExpressionUUID->"f9c1b769-5182-482e-8028-8ff0c26127b9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[28502, 834, 390, 8, 77, "Code",ExpressionUUID->"aba54116-e1fa-488a-ab91-12f5f4a75695"],
Cell[28895, 844, 494, 14, 51, "Output",ExpressionUUID->"b5a9c02f-2aea-43f7-8cc4-7da74ed1c317"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29426, 863, 308, 7, 77, "Code",ExpressionUUID->"135528dd-52fa-4f59-8c72-7e0795192b62"],
Cell[29737, 872, 111, 2, 51, "Output",ExpressionUUID->"b164258c-bc4b-41c8-8b93-9a556f88a752"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29885, 879, 352, 9, 77, "Code",ExpressionUUID->"dba47ce5-9ca8-468f-9f26-eb97372fae6b"],
Cell[30240, 890, 158, 4, 51, "Output",ExpressionUUID->"773c20da-31ca-4d36-ab20-52ef05172e25"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30435, 899, 348, 9, 77, "Code",ExpressionUUID->"ffcdeb88-3ad5-4206-93fe-f258aacc2bbe"],
Cell[30786, 910, 158, 4, 51, "Output",ExpressionUUID->"ffa9adf1-9976-41af-81fe-4bc02dbe3f45"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30981, 919, 405, 10, 77, "Code",ExpressionUUID->"e9de8679-0983-4285-93ca-2a5c49d25e10"],
Cell[31389, 931, 272, 8, 51, "Output",ExpressionUUID->"82feba51-d0d6-4f71-a1b2-1651ccc4f728"]
}, Open  ]],
Cell[CellGroupData[{
Cell[31698, 944, 470, 11, 77, "Code",ExpressionUUID->"b176ce20-7218-445b-99ef-1dc740a36a58"],
Cell[32171, 957, 199, 5, 51, "Output",ExpressionUUID->"910e4142-85ee-446b-862e-327b25632608"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32407, 967, 321, 7, 77, "Code",ExpressionUUID->"43fabd02-513b-4640-ac58-bcab7791e5b2"],
Cell[32731, 976, 111, 2, 51, "Output",ExpressionUUID->"3c92bc92-db9a-4f81-bb26-81c36f49159f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32879, 983, 418, 9, 77, "Code",ExpressionUUID->"2e7dc2d8-dbee-439a-845b-cae715903b50"],
Cell[33300, 994, 111, 2, 51, "Output",ExpressionUUID->"813b1860-d71e-4e58-a53c-6af8ad899391"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33448, 1001, 433, 11, 77, "Code",ExpressionUUID->"e96bd4a3-b8bb-4567-9475-29069da6dd5b"],
Cell[33884, 1014, 205, 5, 51, "Output",ExpressionUUID->"7c83a58c-3e27-4ee4-8599-5da334b89797"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34126, 1024, 2913, 90, 223, "Code",ExpressionUUID->"f153b791-6020-450b-82e7-3ae7425c077a"],
Cell[37042, 1116, 840, 27, 51, "Output",ExpressionUUID->"51a863e4-9dff-44d2-831f-1001b7c3a2ba"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37919, 1148, 1938, 55, 165, "Code",ExpressionUUID->"f113c635-1f6a-4d1a-9191-1cd0944a281f"],
Cell[39860, 1205, 169, 4, 51, "Output",ExpressionUUID->"7b45e491-672a-475a-a5bf-bff05bb29008"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40066, 1214, 959, 25, 107, "Code",ExpressionUUID->"5c76c07d-0556-49e8-a81e-c07bf6f084bc"],
Cell[41028, 1241, 358, 9, 51, "Output",ExpressionUUID->"8f4d8db0-ccab-4d35-b307-af09b7b9b66f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41423, 1255, 320, 7, 77, "Code",ExpressionUUID->"674f3851-9554-40fb-b5b6-dcc4bfa7de27"],
Cell[41746, 1264, 112, 2, 51, "Output",ExpressionUUID->"a1ce36b5-9a39-41e1-b6ea-8758167fa7a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41895, 1271, 644, 19, 136, "Code",ExpressionUUID->"1eb3d878-bc8e-4784-8253-69324ddee0d7"],
Cell[42542, 1292, 695, 19, 51, "Output",ExpressionUUID->"f3adc5d9-b781-4979-94ab-fd52c4ed7db5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43274, 1316, 364, 9, 77, "Code",ExpressionUUID->"fa166182-dbc5-42b3-a3c7-20f331d1b819"],
Cell[43641, 1327, 909, 26, 54, "Output",ExpressionUUID->"fefb5998-e22a-4af8-864b-d2388c772d96"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44587, 1358, 421, 10, 77, "Code",ExpressionUUID->"8db51cf9-6ff0-412d-8b30-c331d43cc47a"],
Cell[45011, 1370, 389, 9, 51, "Output",ExpressionUUID->"d0d4099d-cd19-4b0d-b96b-1712a31f4c9a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45437, 1384, 348, 8, 77, "Code",ExpressionUUID->"5ac6424a-1609-432c-83ab-2778aa43d521"],
Cell[45788, 1394, 112, 2, 51, "Output",ExpressionUUID->"4a645a29-7ce1-4242-a4df-09888a9d9686"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45937, 1401, 293, 8, 77, "Code",ExpressionUUID->"ebbd0254-533f-4352-8151-33eee2c24c72"],
Cell[46233, 1411, 180, 4, 51, "Output",ExpressionUUID->"77e9c20b-ea73-4e54-9927-39d8031a0aa7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46450, 1420, 294, 8, 77, "Code",ExpressionUUID->"9f3c76c7-aebd-4d1d-8bc5-222ee02ed046"],
Cell[46747, 1430, 184, 4, 51, "Output",ExpressionUUID->"d6036317-4f79-4a06-bedb-676bbca1981b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46968, 1439, 290, 8, 77, "Code",ExpressionUUID->"4d0d7e48-1380-4a95-9a38-23bdaac27be5"],
Cell[47261, 1449, 432, 12, 51, "Output",ExpressionUUID->"8ef02c34-b7eb-435b-8f17-190885154186"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47730, 1466, 293, 7, 77, "Code",ExpressionUUID->"8d1c850e-16f1-4042-ac4c-b586905d293a"],
Cell[48026, 1475, 308, 8, 51, "Output",ExpressionUUID->"e46c0db0-f167-47f0-abf0-f857fe00477c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48371, 1488, 302, 8, 77, "Code",ExpressionUUID->"e3dde00e-1e7f-4708-a5ea-7129f326138e"],
Cell[48676, 1498, 379, 9, 51, "Output",ExpressionUUID->"97e4f4ff-ffc7-4410-8fff-b9880f26d577"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49092, 1512, 303, 8, 77, "Code",ExpressionUUID->"a70d004c-2b28-4609-8399-1efe459885ad"],
Cell[49398, 1522, 397, 9, 51, "Output",ExpressionUUID->"c60d2701-d427-472d-adb4-17ea16ac0f40"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49832, 1536, 301, 8, 77, "Code",ExpressionUUID->"c487c10f-50d0-492f-9900-19b132a40b88"],
Cell[50136, 1546, 489, 14, 51, "Output",ExpressionUUID->"ce255b93-d176-4ac2-a8db-2b7db53bd65d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50662, 1565, 395, 10, 77, "Code",ExpressionUUID->"c60bff53-5e62-4e8d-9664-0d59302fae2e"],
Cell[51060, 1577, 572, 15, 51, "Output",ExpressionUUID->"054d4b2c-cf7e-4ea6-9a46-55dd698f4c64"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51669, 1597, 3131, 73, 281, "Code",ExpressionUUID->"b2f3157b-5e28-4986-b13e-2985f8dcf852"],
Cell[54803, 1672, 1778, 42, 103, "Output",ExpressionUUID->"6248cc37-f42d-4aa7-891d-4f494b7a252e"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[56630, 1720, 204, 5, 60, "Section",ExpressionUUID->"c4a0d185-f66d-4b0b-8cd8-2ba7c6f9ed7f"],
Cell[56837, 1727, 372, 8, 107, "Code",ExpressionUUID->"298dc53c-80e9-4c2d-be13-4c133d6e7e1c"],
Cell[CellGroupData[{
Cell[57234, 1739, 2341, 56, 310, "Code",ExpressionUUID->"321fb970-c13d-4d26-8280-f9caece065b0"],
Cell[59578, 1797, 229, 5, 51, "Output",ExpressionUUID->"0cca7974-df9f-4b7d-b547-0eee6b28adea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[59844, 1807, 1130, 25, 194, "Code",ExpressionUUID->"99ab1653-ed3f-4d88-9799-4b64343ea93b"],
Cell[60977, 1834, 714, 23, 99, "Output",ExpressionUUID->"5780d09b-194d-4eb2-a2f1-80bf4bb41cc2"]
}, Open  ]],
Cell[61706, 1860, 860, 22, 136, "Code",ExpressionUUID->"6ad99175-aac8-4774-9951-ac662b0142ff"],
Cell[CellGroupData[{
Cell[62591, 1886, 553, 13, 136, "Code",ExpressionUUID->"a4151ed8-d200-417d-b421-109ceb8e5cef"],
Cell[63147, 1901, 382, 10, 51, "Output",ExpressionUUID->"77b00113-201c-4ac1-870a-364f97a04ab0"],
Cell[63532, 1913, 382, 10, 51, "Output",ExpressionUUID->"579c9dc6-cfef-4cf8-9322-ef4478292be7"]
}, Open  ]],
Cell[63929, 1926, 1764, 48, 281, "Code",ExpressionUUID->"88299850-d96a-42e4-9345-28f8f9ac8bdb"],
Cell[CellGroupData[{
Cell[65718, 1978, 404, 10, 107, "Code",ExpressionUUID->"dcb0d4cb-22d1-4f79-8e88-4c42ea362c27"],
Cell[66125, 1990, 379, 11, 54, "Output",ExpressionUUID->"b6055521-a9d6-410e-8ba6-a0bc51cb45a2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[66541, 2006, 409, 10, 107, "Code",ExpressionUUID->"613d28c5-ea4d-4e18-a7ce-7083c08f1fbc"],
Cell[66953, 2018, 1727, 48, 147, "Output",ExpressionUUID->"d199bfd4-df1d-4f4f-af81-8e5dacb58aa4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[68717, 2071, 831, 21, 252, "Code",ExpressionUUID->"f9ba95e4-e230-4623-89d2-c0bb2f6c5446"],
Cell[69551, 2094, 3248, 64, 464, "Output",ExpressionUUID->"373f167e-8593-431b-9d3b-a619b6dbeb01"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72836, 2163, 2026, 54, 281, "Code",ExpressionUUID->"89bbbc89-6695-45f9-acbe-bf1655fe9a40"],
Cell[74865, 2219, 710, 22, 54, "Output",ExpressionUUID->"06b89a35-e350-4310-9d26-c34c089f5da5"]
}, Open  ]],
Cell[75590, 2244, 656, 18, 136, "Code",ExpressionUUID->"4d06a455-ceb0-476f-8b79-8bf5dbac2e08"],
Cell[CellGroupData[{
Cell[76271, 2266, 542, 14, 136, "Code",ExpressionUUID->"9dc9c3f9-6b80-4ad2-8da9-fc13e75c4ab6"],
Cell[76816, 2282, 3878, 117, 600, "Output",ExpressionUUID->"ed6701ad-899a-47d6-be38-f2f9caa6149a"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[80743, 2405, 208, 5, 60, "Section",ExpressionUUID->"5ce14a55-168a-4833-99bd-0aa162bda330"],
Cell[80954, 2412, 372, 8, 107, "Code",ExpressionUUID->"cb11732a-d717-434a-bf20-355a991eaced"],
Cell[CellGroupData[{
Cell[81351, 2424, 2461, 59, 310, "Code",ExpressionUUID->"d19886a9-08e1-47d9-86d5-cbbb91e56a3e"],
Cell[83815, 2485, 259, 6, 51, "Output",ExpressionUUID->"d5af3fbe-7a7e-4d46-aef8-b9619acc6bf3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[84111, 2496, 526, 12, 107, "Code",ExpressionUUID->"9bee2e96-6fcd-4a60-9e6d-662baf1d242a"],
Cell[84640, 2510, 389, 9, 51, "Output",ExpressionUUID->"3603352e-4776-4400-b6c6-7deb80706477"]
}, Open  ]],
Cell[CellGroupData[{
Cell[85066, 2524, 2915, 69, 456, "Code",ExpressionUUID->"0a301ec7-1a81-4d65-88e5-a4f2f5aabc92"],
Cell[87984, 2595, 389, 9, 51, "Output",ExpressionUUID->"09afcc86-f080-4cde-b6c3-72866746d068"],
Cell[88376, 2606, 493, 11, 51, "Output",ExpressionUUID->"1b8d832f-5bdc-44d4-a48a-1f5bda3bd37e"],
Cell[88872, 2619, 514, 11, 51, "Output",ExpressionUUID->"d3387e53-380e-4756-9fff-ffb9af91901b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[89423, 2635, 1150, 32, 194, "Code",ExpressionUUID->"630513f3-9da9-47ec-ad27-9e4122ea2e87"],
Cell[90576, 2669, 474, 12, 51, "Output",ExpressionUUID->"de61aa32-b53e-440a-baa8-c0e04652b8b7"],
Cell[91053, 2683, 5964, 110, 122, "Output",ExpressionUUID->"0fb0bc47-1f3d-4257-8207-9b664eb950b4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[97054, 2798, 1428, 38, 252, "Code",ExpressionUUID->"ccc4f5fa-2741-4ae2-8ca3-45678fbaa835"],
Cell[98485, 2838, 1192, 18, 115, "Output",ExpressionUUID->"bee868e8-f096-4d13-9239-1c7b7758e4e7"],
Cell[99680, 2858, 1193, 18, 115, "Output",ExpressionUUID->"d881bd75-cf26-46e3-bbf6-ea5517b16429"]
}, Open  ]],
Cell[CellGroupData[{
Cell[100910, 2881, 6183, 140, 339, "Code",ExpressionUUID->"6a7f4a4d-db09-440e-9ea3-58a3071a36ad"],
Cell[107096, 3023, 1641, 25, 211, "Output",ExpressionUUID->"ed2a5094-7466-4df1-a5a5-fb7cd42e46f3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[108774, 3053, 1676, 40, 310, "Code",ExpressionUUID->"35d97557-bfad-4d74-a504-bf7bc69980d5"],
Cell[110453, 3095, 229, 5, 51, "Output",ExpressionUUID->"a1cf3ece-b0e5-4d0d-ab3f-e3caa06d43b8"],
Cell[110685, 3102, 349, 7, 51, "Output",ExpressionUUID->"89bac10d-5c97-4a52-8b41-75badce2857a"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[111083, 3115, 172, 3, 60, "Section",ExpressionUUID->"25913ce2-e942-42f2-b84a-b262f646b993"],
Cell[111258, 3120, 396, 9, 107, "Code",ExpressionUUID->"9cbc0254-94e1-4e57-a326-b39ba4a41c13"],
Cell[CellGroupData[{
Cell[111679, 3133, 2457, 58, 310, "Code",ExpressionUUID->"b55cbec0-b179-40d8-a2a9-cb6c60ddcfb0"],
Cell[114139, 3193, 255, 5, 51, "Output",ExpressionUUID->"97c3dac8-6f05-4d47-8887-837c082fd5c7"]
}, Open  ]],
Cell[114409, 3201, 1186, 30, 136, "Code",ExpressionUUID->"e52b8f51-2d25-444b-97fa-dfcc3d9d4441"],
Cell[115598, 3233, 538, 14, 107, "Code",ExpressionUUID->"6a0bf811-4ffc-44f5-bace-aaf93a91f65e"],
Cell[CellGroupData[{
Cell[116161, 3251, 2546, 67, 368, "Code",ExpressionUUID->"0e47d33d-e711-4d89-beb6-9664a9dd9724"],
Cell[118710, 3320, 386, 9, 51, "Output",ExpressionUUID->"1e9ea67b-d459-4d9b-8aff-50bc7696b472"]
}, Open  ]],
Cell[CellGroupData[{
Cell[119133, 3334, 2391, 65, 368, "Code",ExpressionUUID->"020e17cd-9634-4ebe-9a2d-dc8160150ce5"],
Cell[121527, 3401, 386, 9, 51, "Output",ExpressionUUID->"01a61152-9fc2-47ca-945b-c70141180880"]
}, Open  ]],
Cell[CellGroupData[{
Cell[121950, 3415, 2540, 69, 397, "Code",ExpressionUUID->"f125162b-67a5-4a19-a335-a4490e643b9d"],
Cell[124493, 3486, 386, 9, 51, "Output",ExpressionUUID->"e3a2ae80-32df-4bec-95f0-4ec632230fbc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124916, 3500, 967, 29, 194, "Code",ExpressionUUID->"7cfde12d-fc8b-489b-aaa7-489e28af9334"],
Cell[125886, 3531, 111, 1, 51, "Output",ExpressionUUID->"eaff07f3-7719-4eb2-8a2e-eaae62599ac1"],
Cell[126000, 3534, 110, 1, 51, "Output",ExpressionUUID->"a287faf0-5b79-4233-8027-312b05037c2f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[126147, 3540, 2090, 55, 368, "Code",ExpressionUUID->"c8c2229e-c2d5-4615-9c73-8bf4872369bc"],
Cell[128240, 3597, 224, 5, 51, "Output",ExpressionUUID->"64f3a6cd-02e5-4b4e-a5ff-9432e274319f"],
Cell[128467, 3604, 355, 6, 51, "Output",ExpressionUUID->"a98e2ac2-517c-4705-9508-93b4a6d24824"]
}, Open  ]],
Cell[CellGroupData[{
Cell[128859, 3615, 4261, 105, 688, "Code",ExpressionUUID->"6e58fbbb-61fd-4482-8d57-3a69c5fb55c6"],
Cell[133123, 3722, 410, 8, 51, "Output",ExpressionUUID->"588f6c01-5bd1-49ff-bbfa-b2e95fd7a6d4"],
Cell[133536, 3732, 562, 15, 51, "Output",ExpressionUUID->"4e59cecf-deed-4f3f-9d1a-58d715502cd2"],
Cell[134101, 3749, 30109, 498, 568, "Output",ExpressionUUID->"543c596f-5676-424c-b66d-ff18e001fb9a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[164247, 4252, 1457, 37, 310, "Code",ExpressionUUID->"e883c33c-cdae-4d3b-8ba5-a3ffee26cde3"],
Cell[165707, 4291, 225, 6, 54, "Output",ExpressionUUID->"91280883-aff3-4f38-94f1-82728b62dc06"],
Cell[165935, 4299, 461, 12, 54, "Output",ExpressionUUID->"fc84e5d1-afd3-4a07-8e17-f45a91abea03"]
}, Open  ]],
Cell[CellGroupData[{
Cell[166433, 4316, 382, 10, 107, "Code",ExpressionUUID->"7488ada1-1edd-40c8-9110-6dedded02b50"],
Cell[166818, 4328, 2136, 67, 185, "Output",ExpressionUUID->"64a51f2c-5647-4020-ba3d-e3005c156114"]
}, Open  ]],
Cell[CellGroupData[{
Cell[168991, 4400, 327, 8, 107, "Code",ExpressionUUID->"d06b840c-17f9-4b9f-bc3d-d6279a3068bd"],
Cell[169321, 4410, 2668, 85, 352, "Output",ExpressionUUID->"1af3b0d6-2d7b-4b23-b2c2-68c8b747ed47"]
}, Open  ]],
Cell[CellGroupData[{
Cell[172026, 4500, 671, 17, 165, "Code",ExpressionUUID->"89409caa-875c-4552-a644-d25d51535462"],
Cell[172700, 4519, 356, 6, 51, "Output",ExpressionUUID->"e19bdec8-9bb0-40fe-83ff-eca887bc2029"]
}, Open  ]],
Cell[CellGroupData[{
Cell[173093, 4530, 320, 7, 77, "Code",ExpressionUUID->"668fab9d-09c4-4a67-b125-0456d3f0dabf"],
Cell[173416, 4539, 356, 6, 51, "Output",ExpressionUUID->"0c5f9074-b2d4-424e-b7ba-24c06b79a513"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[173821, 4551, 178, 3, 60, "Section",ExpressionUUID->"95ac934a-a59f-400c-9e63-59973c2bebb0"],
Cell[174002, 4556, 396, 9, 107, "Code",ExpressionUUID->"611bf549-b91e-4ea9-b29a-9a77240e810b"],
Cell[CellGroupData[{
Cell[174423, 4569, 12012, 287, 1473, "Code",ExpressionUUID->"b3899be7-1dac-4f53-9a46-300017fe01b1"],
Cell[CellGroupData[{
Cell[186460, 4860, 3647, 88, 131, "Print",ExpressionUUID->"bcef0744-c7ad-4c7e-8b1a-6732edbd1547"],
Cell[190110, 4950, 3649, 88, 131, "Print",ExpressionUUID->"ea003ff6-1988-45eb-8936-911c2e520d0f"]
}, Open  ]],
Cell[193774, 5041, 176, 4, 51, "Output",ExpressionUUID->"ea7b88cf-25df-47ae-abf6-95a06bd3fa33"]
}, Open  ]],
Cell[CellGroupData[{
Cell[193987, 5050, 11585, 290, 1444, "Code",ExpressionUUID->"b737ce43-e107-4d68-846b-3ef8da9bd35b"],
Cell[205575, 5342, 156, 4, 51, "Output",ExpressionUUID->"980fa46a-bc30-4e53-9997-65d1b4cba03f"],
Cell[205734, 5348, 212, 5, 51, "Output",ExpressionUUID->"bfdf76c0-319a-468c-987c-1542ebcce5ea"],
Cell[205949, 5355, 212, 5, 51, "Output",ExpressionUUID->"a734f630-5c22-43e0-9d0c-5e7859e3e7ee"],
Cell[206164, 5362, 237, 6, 54, "Output",ExpressionUUID->"1bae0722-825d-48bf-8db4-f8e92e42e0e4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[206438, 5373, 5944, 146, 688, "Code",ExpressionUUID->"e6ccfd57-17b0-46dd-91b7-97e920ed8918"],
Cell[212385, 5521, 120097, 1975, 764, "Output",ExpressionUUID->"dd5385c5-a330-47c8-aa18-98ce2d865cfb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[332519, 7501, 14361, 373, 2112, "Code",ExpressionUUID->"5c445b08-a1a7-4ebd-b9f2-ee4336b3cb0a"],
Cell[346883, 7876, 184, 4, 51, "Output",ExpressionUUID->"ccb8d7a3-7e33-4553-8508-56eeeee8bded"],
Cell[347070, 7882, 813, 22, 122, "Output",ExpressionUUID->"66d29cbb-7418-42ba-ac4a-d4d6d5ce4a7f"],
Cell[347886, 7906, 113, 2, 51, "Output",ExpressionUUID->"a1337f2b-89fd-45b9-bf29-faf9ac62845e"],
Cell[348002, 7910, 197, 5, 51, "Output",ExpressionUUID->"37ed74fb-27f3-4f4e-83b1-9ac48a6ce312"],
Cell[348202, 7917, 928, 20, 54, "Output",ExpressionUUID->"2c0a6faa-e60e-40ff-a825-738130c61e19"],
Cell[349133, 7939, 10920, 184, 540, "Output",ExpressionUUID->"c5413fa4-2530-4c2c-a293-3c6c76e5107a"],
Cell[360056, 8125, 587, 13, 51, "Output",ExpressionUUID->"51d7711b-cd59-4b66-a57b-8e2f367850f1"],
Cell[360646, 8140, 441, 10, 51, "Output",ExpressionUUID->"6503cd08-1d5a-4ac5-811f-23ebfcd58e40"]
}, Open  ]],
Cell[CellGroupData[{
Cell[361124, 8155, 12999, 340, 1822, "Code",ExpressionUUID->"b183068e-ac5d-45f7-9aed-4ac8febeed3d"],
Cell[374126, 8497, 185, 4, 51, "Output",ExpressionUUID->"f6f405a6-9039-4561-9aef-5ccec1087dea"],
Cell[374314, 8503, 857, 20, 54, "Output",ExpressionUUID->"9edc5071-dd8a-4ea4-b9c6-b6f3500902ee"],
Cell[375174, 8525, 22399, 373, 556, "Output",ExpressionUUID->"e297b696-753d-4f72-870f-851586237e40"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[397622, 8904, 167, 3, 60, "Section",ExpressionUUID->"55055d8a-a175-43d3-9eb9-125f18e7fa77"],
Cell[397792, 8909, 400, 10, 107, "Code",ExpressionUUID->"594d74bb-9add-4fc1-b932-319e65b7bdfb"],
Cell[398195, 8921, 6481, 175, 427, "Code",ExpressionUUID->"82d6c537-9879-42df-9169-a6073f5b9dab"],
Cell[404679, 9098, 169, 3, 77, "Code",ExpressionUUID->"48f6c254-42d2-4499-bddc-5ec73270c630"],
Cell[CellGroupData[{
Cell[404873, 9105, 1259, 35, 223, "Code",ExpressionUUID->"2bf75bac-36b4-46ea-b7b4-7e139f57f9e2"],
Cell[406135, 9142, 279, 6, 51, "Output",ExpressionUUID->"f23bd20e-ed3f-4ce1-9ded-88a43c6bd5a7"]
}, Open  ]],
Cell[406429, 9151, 6793, 195, 572, "Code",ExpressionUUID->"d7e421ef-2206-4727-8eec-27c169ab5419"],
Cell[CellGroupData[{
Cell[413247, 9350, 581, 17, 136, "Code",ExpressionUUID->"e7079a0d-f457-4f5d-9b5e-e2195d8743ec"],
Cell[413831, 9369, 169, 4, 51, "Output",ExpressionUUID->"4b6ccce4-2f17-43eb-ae52-bddf21843259"],
Cell[414003, 9375, 558, 14, 54, "Output",ExpressionUUID->"044853f2-02cb-485d-86c1-fa739f824577"]
}, Open  ]],
Cell[CellGroupData[{
Cell[414598, 9394, 492, 14, 107, "Code",ExpressionUUID->"796479a5-7677-40bd-af0b-f8a2d773b3f0"],
Cell[415093, 9410, 557, 14, 54, "Output",ExpressionUUID->"51b9545e-5b04-4592-9492-f1b6b8a53123"]
}, Open  ]],
Cell[CellGroupData[{
Cell[415687, 9429, 695, 20, 136, "Code",ExpressionUUID->"5351247a-2fe8-4601-bf4e-0e89cff210b0"],
Cell[416385, 9451, 854, 24, 122, "Output",ExpressionUUID->"224ef08c-ac83-453a-87db-25037cc5ccf1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[417276, 9480, 1682, 48, 194, "Code",ExpressionUUID->"fd65728a-38b6-46e3-8829-647f761084b5"],
Cell[418961, 9530, 1464, 39, 77, "Output",ExpressionUUID->"7e674fff-118a-41c9-8369-4b05d54e23d0"]
}, Open  ]],
Cell[420440, 9572, 174, 4, 77, "Code",ExpressionUUID->"31a00a96-8154-462e-86af-100eb656c827"],
Cell[420617, 9578, 858, 20, 136, "Code",ExpressionUUID->"1b6288f8-286e-410a-bcbb-c186993fced2"],
Cell[CellGroupData[{
Cell[421500, 9602, 1123, 30, 194, "Code",ExpressionUUID->"9d53fae5-a639-459c-8341-b39b0f4bb38f"],
Cell[422626, 9634, 269, 6, 51, "Output",ExpressionUUID->"8bcd9804-529a-444f-82fd-72726ae3eda1"]
}, Open  ]],
Cell[422910, 9643, 7055, 203, 572, "Code",ExpressionUUID->"531b2ce8-b029-4da9-b79a-65df7b37596f"],
Cell[CellGroupData[{
Cell[429990, 9850, 1017, 26, 165, "Code",ExpressionUUID->"f0b8bf7d-8301-49b2-a8e6-68b83dd4b666"],
Cell[431010, 9878, 169, 4, 51, "Output",ExpressionUUID->"91b81004-ae85-422f-9b67-0c30cfb538af"],
Cell[431182, 9884, 581, 14, 54, "Output",ExpressionUUID->"ec9bcc90-9e58-44c9-99e6-d11e5757a428"]
}, Open  ]],
Cell[CellGroupData[{
Cell[431800, 9903, 492, 14, 107, "Code",ExpressionUUID->"bb1c6aed-d6da-461c-a638-a8f69a62b0af"],
Cell[432295, 9919, 1023, 23, 54, "Output",ExpressionUUID->"83b5be75-3430-47a9-bbc4-848fe8ad7657"]
}, Open  ]],
Cell[CellGroupData[{
Cell[433355, 9947, 736, 21, 136, "Code",ExpressionUUID->"c6a434c0-bef2-4f6a-8987-8f7989058675"],
Cell[434094, 9970, 1090, 29, 174, "Output",ExpressionUUID->"fee1203f-d9ba-4cb1-8d15-b6fd0e9254a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[435221, 10004, 1915, 54, 223, "Code",ExpressionUUID->"77fdd613-d045-4d16-b66a-c522e6b7d1ac"],
Cell[437139, 10060, 1287, 35, 71, "Output",ExpressionUUID->"2ce9cf34-6375-442a-b4c0-19c29e59733f"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[438475, 10101, 175, 3, 60, "Section",ExpressionUUID->"c04f6c95-e550-4858-8c29-40f1f9caa4ef"],
Cell[438653, 10106, 395, 9, 107, "Code",ExpressionUUID->"2f9cb5cf-7208-412a-9cbf-d295914917cd"],
Cell[CellGroupData[{
Cell[439073, 10119, 491, 12, 107, "Code",ExpressionUUID->"7285ef1b-1c88-4327-9b6c-6ad0ebfa5b81"],
Cell[439567, 10133, 254, 5, 51, "Output",ExpressionUUID->"523dfd4b-6ef7-4e73-b892-7d4253c28124"]
}, Open  ]],
Cell[439836, 10141, 364, 7, 77, "Code",ExpressionUUID->"4b0ad9ee-892b-48f1-98b8-4f41435e023c"],
Cell[440203, 10150, 1014, 24, 136, "Code",ExpressionUUID->"90dfdade-34f4-46c8-bf3a-06bb69c890c4"],
Cell[441220, 10176, 280, 6, 107, "Code",ExpressionUUID->"2a123cfe-950f-4b0c-ac56-db389518364c"],
Cell[CellGroupData[{
Cell[441525, 10186, 2815, 71, 368, "Code",ExpressionUUID->"4e707491-9f6e-4bac-86b2-3d951eb3e963"],
Cell[444343, 10259, 710, 17, 51, "Output",ExpressionUUID->"75ee2f77-8346-40f4-86b0-f4bc2a07ee98"]
}, Open  ]],
Cell[CellGroupData[{
Cell[445090, 10281, 3134, 84, 339, "Code",ExpressionUUID->"059e7601-6ecf-4072-a9fa-abbf6493c4fe"],
Cell[448227, 10367, 329, 5, 51, "Output",ExpressionUUID->"5909708e-602f-4223-b261-b1c03c7d0970"],
Cell[448559, 10374, 255, 5, 51, "Output",ExpressionUUID->"ce11f8db-ff8d-4bf7-a3ca-27cbbe6f633a"],
Cell[448817, 10381, 117, 1, 51, "Output",ExpressionUUID->"0b577a60-07b9-4871-b282-5fa89c852ced"],
Cell[448937, 10384, 120, 1, 51, "Output",ExpressionUUID->"ecae9530-b544-431f-be8b-5173287dd14c"],
Cell[449060, 10387, 130, 2, 51, "Output",ExpressionUUID->"3c14c8d1-d445-4aa7-ab17-81b866d13f54"],
Cell[449193, 10391, 107, 1, 51, "Output",ExpressionUUID->"866c15c1-8874-4828-8367-e8d00dff022e"],
Cell[449303, 10394, 782, 23, 51, "Output",ExpressionUUID->"2ab5427b-65d6-461b-ad42-735fca888a3f"],
Cell[450088, 10419, 107, 1, 51, "Output",ExpressionUUID->"662d87de-3e43-45d1-9cd3-08881f0416e3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[450232, 10425, 1898, 41, 310, "Code",ExpressionUUID->"70a23a34-300e-4335-bdf7-ecb926ca9a03"],
Cell[452133, 10468, 710, 17, 51, "Output",ExpressionUUID->"6ff5dd23-7f5d-431f-9bcc-3a42ad950e39"],
Cell[452846, 10487, 120, 1, 51, "Output",ExpressionUUID->"d629b8ec-1b1d-48ab-b69d-3a28246283cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[453003, 10493, 934, 27, 136, "Code",ExpressionUUID->"1341062f-2cc1-4489-9c06-675827956289"],
Cell[453940, 10522, 367, 9, 54, "Output",ExpressionUUID->"db1b8600-e3ab-4ffc-a864-4a644d39b893"],
Cell[454310, 10533, 188, 4, 51, "Output",ExpressionUUID->"ca7c6d40-2cb7-4bf1-abf0-40b53633106d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[454535, 10542, 1623, 38, 281, "Code",ExpressionUUID->"7f93908e-fd05-45f5-b90c-f1dace1897e7"],
Cell[456161, 10582, 710, 17, 51, "Output",ExpressionUUID->"450e84a5-4cd4-4ba4-b3d4-8e5b52daabb9"],
Cell[456874, 10601, 120, 1, 51, "Output",ExpressionUUID->"f0b95434-d5a7-47af-967a-c92e643d562b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[457031, 10607, 1818, 43, 339, "Code",ExpressionUUID->"ebd6a1d8-1548-4313-a874-38dc8064434d"],
Cell[458852, 10652, 710, 17, 51, "Output",ExpressionUUID->"ba78b169-b323-4c7d-8ea9-cda359cfb523"],
Cell[459565, 10671, 120, 1, 51, "Output",ExpressionUUID->"813216d2-4b61-4f6c-a974-206fdfde1fd1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[459722, 10677, 897, 23, 252, "Code",ExpressionUUID->"67b67dfc-00f4-4c2a-9803-7acec4058e2d"],
Cell[460622, 10702, 212, 4, 51, "Output",ExpressionUUID->"a141835b-4372-448a-8e6e-88a6aea21f97"]
}, Open  ]],
Cell[460849, 10709, 1286, 33, 252, "Code",ExpressionUUID->"5247ba99-26c5-4688-99d5-1a2e653cbf20"],
Cell[CellGroupData[{
Cell[462160, 10746, 2448, 59, 397, "Code",ExpressionUUID->"1ba99c1d-d37c-413c-9de1-a15972fc558f"],
Cell[464611, 10807, 536, 10, 51, "Output",ExpressionUUID->"daf95630-4ed0-4076-a7ff-55288480b8f8"],
Cell[465150, 10819, 536, 10, 51, "Output",ExpressionUUID->"2e5332ba-21dc-463d-b620-49d7d6ae3da6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[465723, 10834, 340, 8, 136, "Code",ExpressionUUID->"e54deb7c-fb94-4843-9b4d-59c1e73a789c"],
Cell[466066, 10844, 159, 2, 51, "Output",ExpressionUUID->"8b090833-d813-4650-bf96-6222d2c7498d"]
}, Open  ]],
Cell[466240, 10849, 825, 19, 136, "Code",ExpressionUUID->"7da80bf3-b198-4614-b6f5-37f7ad76992e"],
Cell[CellGroupData[{
Cell[467090, 10872, 1412, 40, 252, "Code",ExpressionUUID->"0ec52517-a6d3-4650-8632-d6cd2933482c"],
Cell[468505, 10914, 174, 3, 51, "Output",ExpressionUUID->"3a42503b-166d-4b30-8219-799c73871113"]
}, Open  ]],
Cell[CellGroupData[{
Cell[468716, 10922, 1748, 43, 339, "Code",ExpressionUUID->"65d3bb9d-a926-4e77-9530-d3eaf4ba7815"],
Cell[470467, 10967, 711, 17, 51, "Output",ExpressionUUID->"31f4feb3-e879-46c6-b5ef-40bb585f10ec"],
Cell[471181, 10986, 350, 9, 51, "Output",ExpressionUUID->"3f9e3d69-0de7-4877-86c0-0d064eee5410"]
}, Open  ]],
Cell[CellGroupData[{
Cell[471568, 11000, 3559, 99, 427, "Code",ExpressionUUID->"3e32e6bd-616d-46b4-9060-dae02f3c2055"],
Cell[475130, 11101, 417, 7, 51, "Output",ExpressionUUID->"202c9bf8-15c4-4481-8819-ff9cc694fd7f"],
Cell[475550, 11110, 255, 5, 51, "Output",ExpressionUUID->"cb8ba062-59f3-4805-9610-cce2bb13c876"],
Cell[475808, 11117, 122, 1, 51, "Output",ExpressionUUID->"95920011-58c6-4662-929d-7ac88dc6755a"],
Cell[475933, 11120, 120, 1, 51, "Output",ExpressionUUID->"8b2a55d9-fcb2-43b6-b983-8edebfaf3391"],
Cell[476056, 11123, 174, 3, 51, "Output",ExpressionUUID->"f30bd50f-6f5f-4c57-8293-e024a3ecc9ef"],
Cell[476233, 11128, 107, 1, 51, "Output",ExpressionUUID->"5f84a36c-4139-46c0-b24e-6a19bc32b31c"],
Cell[476343, 11131, 196, 5, 51, "Output",ExpressionUUID->"66d576be-db5a-493c-99ad-60f1c8071209"],
Cell[476542, 11138, 152, 3, 51, "Output",ExpressionUUID->"892cbe0d-1936-4141-b375-1b099287ed3b"],
Cell[476697, 11143, 280, 7, 51, "Output",ExpressionUUID->"68fb8377-2ab0-4ea0-aa0f-c4b4020e581b"],
Cell[476980, 11152, 350, 9, 51, "Output",ExpressionUUID->"9c8b0f0e-c6d8-4a9c-9a4d-c08b0aa766ce"],
Cell[477333, 11163, 107, 1, 51, "Output",ExpressionUUID->"9b2c25bb-bed8-4d23-a349-9cb9cb67741f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[477477, 11169, 2168, 53, 368, "Code",ExpressionUUID->"78539c5b-ce35-40b1-8013-0f76a4c53bcd"],
Cell[479648, 11224, 711, 17, 51, "Output",ExpressionUUID->"7c78d5ab-57ca-489b-9d6d-8d6e20ca2431"],
Cell[480362, 11243, 816, 21, 51, "Output",ExpressionUUID->"a1c7d8ff-aaae-4cec-8a10-fa857d190647"]
}, Open  ]],
Cell[CellGroupData[{
Cell[481215, 11269, 524, 13, 165, "Code",ExpressionUUID->"432bba0d-d01f-4bb7-b7f8-19f2025d84d4"],
Cell[481742, 11284, 170, 3, 51, "Output",ExpressionUUID->"46081547-719b-4f1c-aca8-5e7a1d8f9f83"]
}, Open  ]],
Cell[CellGroupData[{
Cell[481949, 11292, 3109, 76, 456, "Code",ExpressionUUID->"3c8ada59-afcc-4106-8d79-9899523be890"],
Cell[485061, 11370, 1177, 21, 120, "Output",ExpressionUUID->"201cf104-7b03-4f8f-a786-bd3c8399fe86"],
Cell[486241, 11393, 1184, 22, 120, "Output",ExpressionUUID->"636d9db1-7d18-4e76-ae2c-a1f136d939f2"],
Cell[487428, 11417, 1181, 22, 120, "Output",ExpressionUUID->"cb92bb7f-9c43-4af9-becf-db614bbdf358"]
}, Open  ]],
Cell[488624, 11442, 381, 10, 136, "Code",ExpressionUUID->"64deb05c-8483-464e-b12a-e2a97113c787"],
Cell[489008, 11454, 518, 12, 107, "Code",ExpressionUUID->"49ce4599-b323-4d4e-8b67-ffda7f84509b"],
Cell[CellGroupData[{
Cell[489551, 11470, 1415, 41, 252, "Code",ExpressionUUID->"b3f5d6f3-7f9e-476c-b9a1-7d29ccea431f"],
Cell[490969, 11513, 178, 4, 51, "Output",ExpressionUUID->"38957059-67c7-4754-80df-e041f6202722"]
}, Open  ]],
Cell[CellGroupData[{
Cell[491184, 11522, 905, 23, 194, "Code",ExpressionUUID->"20f55381-bab6-4329-b98c-91f9be22075f"],
Cell[492092, 11547, 148, 3, 51, "Output",ExpressionUUID->"24be9650-3457-4599-9bc3-603c4aca974c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[492277, 11555, 1821, 48, 281, "Code",ExpressionUUID->"4594c6f5-9d73-4f25-8ac0-79c2fc3a1cb3"],
Cell[494101, 11605, 964, 25, 51, "Output",ExpressionUUID->"09a6848f-5c0b-4434-a334-48422a0ab346"]
}, Open  ]],
Cell[CellGroupData[{
Cell[495102, 11635, 2789, 75, 339, "Code",ExpressionUUID->"a1159331-d584-407e-b99c-93e3f426b3ca"],
Cell[497894, 11712, 345, 7, 51, "Output",ExpressionUUID->"b48ba21c-d620-47f5-ac62-ad945e2f6d2e"],
Cell[498242, 11721, 259, 6, 51, "Output",ExpressionUUID->"887bc686-44a2-47a8-a2b4-4de916061b5e"],
Cell[498504, 11729, 125, 2, 51, "Output",ExpressionUUID->"06fc1ee3-82f1-4eab-a2a6-87a7cbbb0339"],
Cell[498632, 11733, 160, 4, 51, "Output",ExpressionUUID->"c503605e-3745-4397-a085-b4bbe2d2ec44"],
Cell[498795, 11739, 186, 4, 51, "Output",ExpressionUUID->"dd3a14a6-a8ac-4df2-a612-aa72628e7fd2"],
Cell[498984, 11745, 111, 2, 51, "Output",ExpressionUUID->"1e3d4058-4269-4665-8b65-3549b9e89145"],
Cell[499098, 11749, 352, 12, 51, "Output",ExpressionUUID->"1811571c-e01f-4512-ad6a-e7d27a5ff128"],
Cell[499453, 11763, 254, 8, 51, "Output",ExpressionUUID->"da6d93b5-33fd-4da2-9b89-41678a0b3bf0"],
Cell[499710, 11773, 526, 16, 51, "Output",ExpressionUUID->"ebd9e7b9-cac6-485e-ad57-f340fda582ba"]
}, Open  ]],
Cell[500251, 11792, 284, 7, 107, "Code",ExpressionUUID->"a4637a12-689f-4712-aa2e-75883025d02e"],
Cell[CellGroupData[{
Cell[500560, 11803, 2884, 70, 427, "Code",ExpressionUUID->"bd8dc65a-13df-4e36-831d-4e7b4eab4bb0"],
Cell[503447, 11875, 1181, 22, 120, "Output",ExpressionUUID->"3b98d10e-97b9-4843-9d34-a33c49b894a1"],
Cell[504631, 11899, 1185, 23, 120, "Output",ExpressionUUID->"0d1b51f4-b96c-4284-b92d-7ba6d29b9713"]
}, Open  ]],
Cell[505831, 11925, 476, 13, 165, "Code",ExpressionUUID->"41694aa1-6b11-4a0e-b64f-06ed9a72cbf9"]
}, Closed]],
Cell[CellGroupData[{
Cell[506344, 11943, 162, 3, 60, "Section",ExpressionUUID->"a8016beb-e69f-4bb0-8e35-3f91709a131e"],
Cell[506509, 11948, 396, 9, 107, "Code",ExpressionUUID->"39192d6c-c938-45d0-ab3a-aa13688670ed"],
Cell[CellGroupData[{
Cell[506930, 11961, 406, 10, 107, "Code",ExpressionUUID->"47f81a39-e877-4a61-8ba2-e9b3d3477d91"],
Cell[507339, 11973, 229, 5, 51, "Output",ExpressionUUID->"5e940846-cfd8-40ec-ba88-87dab0ed5a44"]
}, Open  ]],
Cell[CellGroupData[{
Cell[507605, 11983, 573, 15, 107, "Code",ExpressionUUID->"6d39401c-733e-4af3-b3d4-e7fcabae4ac3"],
Cell[508181, 12000, 641, 21, 71, "Output",ExpressionUUID->"f1b640e7-1485-4260-bc6c-76ec495f2622"]
}, Open  ]],
Cell[508837, 12024, 546, 14, 107, "Code",ExpressionUUID->"897140fd-e8f5-4913-814e-f4beb4163897"],
Cell[CellGroupData[{
Cell[509408, 12042, 1416, 41, 252, "Code",ExpressionUUID->"689de939-c169-4762-a4ec-93288ec1b23b"],
Cell[510827, 12085, 178, 4, 51, "Output",ExpressionUUID->"e0cb68a7-64bd-4b3a-aee6-3bb51075409a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[511042, 12094, 912, 24, 194, "Code",ExpressionUUID->"5598bf13-122c-40a1-9f71-92e5a3c5981c"],
Cell[511957, 12120, 149, 3, 51, "Output",ExpressionUUID->"6b672149-4120-4d08-9b73-8d25de9f5e25"]
}, Open  ]],
Cell[CellGroupData[{
Cell[512143, 12128, 912, 26, 194, "Code",ExpressionUUID->"ed375a02-b41a-4d43-88bf-2b1c9c3df7d3"],
Cell[513058, 12156, 149, 3, 51, "Output",ExpressionUUID->"1597c363-6b28-48fc-92a1-b8ed26a08b14"]
}, Open  ]],
Cell[513222, 12162, 443, 13, 107, "Code",ExpressionUUID->"cd435612-6e37-4a1f-bfe3-24bca65b0c62"],
Cell[513668, 12177, 324, 7, 77, "Code",ExpressionUUID->"c6546278-d54a-4cb9-ba67-3a9d3b9dc4a0"],
Cell[CellGroupData[{
Cell[514017, 12188, 1185, 32, 223, "Code",ExpressionUUID->"53c5aae0-9de4-4d5f-9199-e77f05d0cbcb"],
Cell[515205, 12222, 203, 5, 51, "Output",ExpressionUUID->"9a972277-2e5c-439f-a782-1b4235af8abc"],
Cell[515411, 12229, 580, 17, 51, "Output",ExpressionUUID->"17622408-d3fb-45cb-99f3-3040f29605a0"],
Cell[515994, 12248, 111, 2, 51, "Output",ExpressionUUID->"03771619-59e4-4c69-b9e2-1d7d4b91a637"],
Cell[516108, 12252, 176, 4, 51, "Output",ExpressionUUID->"cf4aa514-07a1-45b6-a27e-2628a6236681"]
}, Open  ]],
Cell[CellGroupData[{
Cell[516321, 12261, 1163, 31, 223, "Code",ExpressionUUID->"5e7af343-267d-4997-af52-bba07a0c0849"],
Cell[517487, 12294, 203, 5, 51, "Output",ExpressionUUID->"13c32c93-4beb-4e21-b186-5bb7cdabb36e"],
Cell[517693, 12301, 709, 20, 51, "Output",ExpressionUUID->"823a0a5b-6d9c-4273-b389-8dc3aab693a8"],
Cell[518405, 12323, 111, 2, 51, "Output",ExpressionUUID->"ff461036-bfa8-40d5-96ac-c83da5dd1aee"],
Cell[518519, 12327, 184, 4, 51, "Output",ExpressionUUID->"a3144488-e201-44f4-b079-33ed00fec73c"]
}, Open  ]],
Cell[518718, 12334, 448, 12, 165, "Code",ExpressionUUID->"665aa3e3-5378-4c8e-9cd8-37483fb059b6"]
}, Closed]],
Cell[CellGroupData[{
Cell[519203, 12351, 165, 3, 60, "Section",ExpressionUUID->"a127ff7f-ff28-4db5-bb0b-9aab5af4a2a6"],
Cell[519371, 12356, 395, 9, 107, "Code",ExpressionUUID->"5b42fad9-73c7-40a4-a4ca-5db44574d2b5"],
Cell[CellGroupData[{
Cell[519791, 12369, 401, 9, 107, "Code",ExpressionUUID->"5a2d6d7e-a437-46a2-a8a3-5c52be552612"],
Cell[520195, 12380, 224, 4, 51, "Output",ExpressionUUID->"988a73dc-7988-46f6-bd6a-b289ba1dfce1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[520456, 12389, 1379, 39, 194, "Code",ExpressionUUID->"53e3abb0-125c-44ba-8b97-b092be5eb8fb"],
Cell[521838, 12430, 250, 4, 51, "Output",ExpressionUUID->"d7aa3d38-502f-4a9b-90f6-191430e7070b"]
}, Open  ]],
Cell[522103, 12437, 2566, 71, 514, "Code",ExpressionUUID->"c2fd7c12-f5bb-4c66-adf5-30a720195b90"],
Cell[524672, 12510, 360, 9, 107, "Code",ExpressionUUID->"b345ed63-4d9e-4df2-a2d3-8865df888573"],
Cell[CellGroupData[{
Cell[525057, 12523, 739, 17, 136, "Code",ExpressionUUID->"40d96f94-bd7c-4fe9-993c-9be00dd9664c"],
Cell[525799, 12542, 1122, 35, 153, "Output",ExpressionUUID->"167276d3-ffd0-4f43-b770-95f9946313e3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[526958, 12582, 1806, 42, 310, "Code",ExpressionUUID->"0d45e8ac-f64c-428b-af4b-a9eac2c8c6e7"],
Cell[528767, 12626, 746, 21, 51, "Output",ExpressionUUID->"b678fde0-47ba-49a5-be41-2db31ca50d5a"]
}, Open  ]],
Cell[529528, 12650, 271, 6, 107, "Code",ExpressionUUID->"77da4ae8-296d-4570-be23-3effd2e16192"],
Cell[CellGroupData[{
Cell[529824, 12660, 393, 8, 107, "Code",ExpressionUUID->"6c41654f-3f22-4773-b8c2-122c1080f901"],
Cell[530220, 12670, 34884, 659, 91, "Output",ExpressionUUID->"31f28cb7-781c-4bcb-b50e-48a79141ab1b"]
}, Open  ]],
Cell[565119, 13332, 288, 7, 107, "Code",ExpressionUUID->"54897269-b7be-4169-8c79-1080fe55a666"],
Cell[CellGroupData[{
Cell[565432, 13343, 686, 16, 223, "Code",ExpressionUUID->"96b3989b-349d-4de4-acbc-717b91b97170"],
Cell[566121, 13361, 251, 4, 51, "Output",ExpressionUUID->"8c82652b-aa9d-40da-bc52-3172b4182c77"],
Cell[566375, 13367, 252, 4, 51, "Output",ExpressionUUID->"4d84e34f-106d-4753-a21c-9c5f9cbe3926"]
}, Open  ]],
Cell[566642, 13374, 499, 13, 136, "Code",ExpressionUUID->"9d7b0f6c-52c2-4c8f-9ab5-a0cbee6e19f7"],
Cell[CellGroupData[{
Cell[567166, 13391, 427, 12, 136, "Code",ExpressionUUID->"4df2c0cc-d789-4018-bf8b-7e8dca79d0e1"],
Cell[567596, 13405, 252, 4, 51, "Output",ExpressionUUID->"0183656a-5e20-4283-9d9c-e1ff85ec613f"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[567897, 13415, 187, 3, 60, "Section",ExpressionUUID->"77649bf8-4a1e-48d1-a542-843b4e90e502"],
Cell[568087, 13420, 395, 9, 107, "Code",ExpressionUUID->"d968bd81-7e93-49a7-908a-28903864880e"],
Cell[CellGroupData[{
Cell[568507, 13433, 1312, 34, 252, "Code",ExpressionUUID->"c66484ae-8ab5-444c-908f-922f98df0cd4"],
Cell[569822, 13469, 224, 4, 51, "Output",ExpressionUUID->"0423408b-5f7c-4190-bbc3-a8a0e391d658"]
}, Open  ]],
Cell[570061, 13476, 1528, 40, 252, "Code",ExpressionUUID->"a74a33c4-ff6c-499f-80b7-5988b4b66105"],
Cell[571592, 13518, 7487, 209, 950, "Code",ExpressionUUID->"ffc62a23-9f4a-4136-bc10-85fe7b0a53c6"],
Cell[579082, 13729, 366, 9, 136, "Code",ExpressionUUID->"b6763448-2550-494d-90ee-c4a04675fca5"],
Cell[579451, 13740, 2379, 64, 281, "Code",ExpressionUUID->"c601e9a0-0499-47b6-b9de-c2dc636e2fc8"],
Cell[581833, 13806, 4302, 114, 717, "Code",ExpressionUUID->"f7a5c6ee-08d6-4a17-a8f6-8009ed2144ca"],
Cell[CellGroupData[{
Cell[586160, 13924, 2289, 58, 717, "Code",ExpressionUUID->"e16b5073-73b4-4681-bbe0-2cde67f2a927"],
Cell[588452, 13984, 43269, 714, 870, "Output",ExpressionUUID->"7e0b6384-7b4b-4235-8a9a-01b156b8b99a"]
}, Open  ]],
Cell[631736, 14701, 6248, 149, 1066, "Code",ExpressionUUID->"91be5f12-d4e8-444c-b1f3-5c1064f8a5ae"],
Cell[637987, 14852, 2657, 66, 368, "Code",ExpressionUUID->"942871a1-1e43-4d3b-b88b-1d4f761eca70"],
Cell[CellGroupData[{
Cell[640669, 14922, 2522, 66, 717, "Code",ExpressionUUID->"2f61e151-453c-490c-a616-4a144061c3a9"],
Cell[643194, 14990, 45148, 746, 870, "Output",ExpressionUUID->"7a9fbe29-148a-4fee-8f1b-0b5f3e3bef21"]
}, Open  ]],
Cell[688357, 15739, 4349, 115, 892, "Code",ExpressionUUID->"5bfc8f8b-6f3c-458d-98c6-4233d85772dc"],
Cell[CellGroupData[{
Cell[692731, 15858, 3538, 81, 862, "Code",ExpressionUUID->"d595c33f-09e2-46d0-8861-279f6756dcd9"],
Cell[696272, 15941, 83747, 1377, 791, "Output",ExpressionUUID->"2a867ad3-fbc9-4741-bad1-0f8cf00abac7"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[780068, 17324, 189, 3, 60, "Section",ExpressionUUID->"0c77fcd1-528c-4cff-a287-ece0a9bb2192"],
Cell[780260, 17329, 395, 9, 107, "Code",ExpressionUUID->"2f0dd1a4-f3c8-4b40-8550-ca6f45b7f3da"],
Cell[CellGroupData[{
Cell[780680, 17342, 1422, 37, 252, "Code",ExpressionUUID->"fdb1126d-3e29-4093-ba4a-a5c1ff4ae0b9"],
Cell[782105, 17381, 274, 5, 51, "Output",ExpressionUUID->"e6dd5287-3c2f-446a-920b-b60cff96105a"]
}, Open  ]],
Cell[782394, 17389, 1504, 39, 252, "Code",ExpressionUUID->"d6341097-2cab-4f5c-9c7e-f229dfd99b84"],
Cell[783901, 17430, 7487, 209, 950, "Code",ExpressionUUID->"b8424ff6-4cd6-4cbb-a1d5-052a27cc13f4"],
Cell[791391, 17641, 366, 9, 136, "Code",ExpressionUUID->"df1726f5-4735-47af-bdb9-baedd4262e1e"],
Cell[791760, 17652, 2379, 64, 281, "Code",ExpressionUUID->"f3a85c3e-7b8f-4e0c-ba81-a8891256706a"],
Cell[794142, 17718, 5622, 132, 1037, "Code",ExpressionUUID->"88a46116-de08-4177-9ba2-0059b2c46fbb"],
Cell[CellGroupData[{
Cell[799789, 17854, 519, 14, 136, "Code",ExpressionUUID->"5704faf1-c865-4348-8e28-b370c2e95a74"],
Cell[800311, 17870, 225, 5, 51, "Output",ExpressionUUID->"4c8dc177-656b-4972-be9a-e915e4af679e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[800573, 17880, 413, 10, 107, "Code",ExpressionUUID->"aede3b35-d6c7-4657-991f-5a3067c2e2da"],
Cell[800989, 17892, 225, 5, 51, "Output",ExpressionUUID->"1bcb046c-8f8c-47a6-a26c-05d36d7d0d2d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[801251, 17902, 1051, 29, 165, "Code",ExpressionUUID->"63d011f4-6fe2-458c-a66b-db5b9b0aa1e9"],
Cell[802305, 17933, 1964, 50, 71, "Output",ExpressionUUID->"92957089-2ca5-442b-a205-3b77382189c9"],
Cell[804272, 17985, 1945, 47, 71, "Output",ExpressionUUID->"abe48ed0-88b3-492d-a885-9df9716f9f3b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[806254, 18037, 1583, 44, 136, "Code",ExpressionUUID->"95443915-03cd-4ead-8c22-0836e0855042"],
Cell[807840, 18083, 435, 9, 51, "Output",ExpressionUUID->"e306e369-63ea-46e4-9fa9-c9047b061c14"],
Cell[808278, 18094, 434, 9, 51, "Output",ExpressionUUID->"4c8b172b-d394-47bb-b1d7-fe11ffb6b752"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[808761, 18109, 187, 3, 60, "Section",ExpressionUUID->"9f175500-f3cd-40ba-9ce8-43ac19e12270"],
Cell[808951, 18114, 395, 9, 107, "Code",ExpressionUUID->"727f0df2-adb8-499a-8413-8f5d87b62b63"],
Cell[CellGroupData[{
Cell[809371, 18127, 1416, 37, 252, "Code",ExpressionUUID->"339dbe0f-9a41-47f2-9785-177fa5d98126"],
Cell[810790, 18166, 224, 4, 51, "Output",ExpressionUUID->"20c9abfc-bf49-4717-bebd-fa31eae9138a"]
}, Open  ]],
Cell[811029, 18173, 1504, 39, 252, "Code",ExpressionUUID->"b1d11d25-99b3-4938-bdad-cd16f222c16f"],
Cell[812536, 18214, 7487, 209, 950, "Code",ExpressionUUID->"1999fcdf-3d47-4352-891b-4c40dcebaf87"],
Cell[820026, 18425, 366, 9, 136, "Code",ExpressionUUID->"46945c0c-d836-4a97-86ad-27a33f9aa497"],
Cell[820395, 18436, 2379, 64, 281, "Code",ExpressionUUID->"c1776128-c894-4e38-a6e3-0ab324a8b97b"],
Cell[822777, 18502, 5622, 132, 1037, "Code",ExpressionUUID->"34d8ddcc-7974-4e5c-8ecc-4e9ce5e4808f"],
Cell[CellGroupData[{
Cell[828424, 18638, 519, 14, 136, "Code",ExpressionUUID->"0ae289dd-e7f2-44fa-86e2-5abb3d914341"],
Cell[828946, 18654, 180, 3, 51, "Output",ExpressionUUID->"ce2938e9-0f82-4bd8-8e7f-180038a6aadb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[829163, 18662, 413, 10, 107, "Code",ExpressionUUID->"08ac2811-0e20-4a36-8008-753cc7529bf7"],
Cell[829579, 18674, 180, 3, 51, "Output",ExpressionUUID->"bc9c59f9-447f-4f35-a3a1-43cf5b9bf905"]
}, Open  ]],
Cell[CellGroupData[{
Cell[829796, 18682, 474, 12, 136, "Code",ExpressionUUID->"41b15a3c-db7a-4819-a5d5-5ae3f35b1776"],
Cell[830273, 18696, 853, 24, 122, "Output",ExpressionUUID->"fd95725b-7247-4c0e-b73a-94d863db263d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[831163, 18725, 1347, 36, 281, "Code",ExpressionUUID->"bc33bd0b-6063-4b4a-8f1e-71ba70633577"],
Cell[832513, 18763, 47912, 1011, 134, "Output",ExpressionUUID->"e36abd0c-1b29-4197-9271-7cde12c64bd9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[880462, 19779, 3777, 100, 572, "Code",ExpressionUUID->"19a45676-c22a-409d-9b82-54d6c937af9b"],
Cell[884242, 19881, 252219, 4141, 861, "Output",ExpressionUUID->"4138f2fd-e7c8-40fc-b887-43833f4cfd1f"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1136510, 24028, 165, 3, 60, "Section",ExpressionUUID->"65445080-193f-4b0c-b9e3-c3cfd3c50e04"],
Cell[1136678, 24033, 395, 9, 107, "Code",ExpressionUUID->"eea1acde-d3c5-41b2-9cc3-03b35a9f5bd8"],
Cell[CellGroupData[{
Cell[1137098, 24046, 342, 7, 107, "Code",ExpressionUUID->"f9cec06d-0d5f-49d3-a1d8-9256e6c4702e"],
Cell[1137443, 24055, 224, 4, 51, "Output",ExpressionUUID->"8e44f461-14b9-41eb-ac43-061e2eac90e1"]
}, Open  ]],
Cell[1137682, 24062, 2697, 76, 485, "Code",ExpressionUUID->"e2bfd763-4b3b-4c58-a901-3ebb1467f23f"],
Cell[1140382, 24140, 360, 9, 107, "Code",ExpressionUUID->"bb1b856a-ed07-4b9c-b5fb-db6dce38b98b"],
Cell[1140745, 24151, 3258, 91, 310, "Code",ExpressionUUID->"220b1284-11c9-47b4-a19a-ecd0e1386036"],
Cell[CellGroupData[{
Cell[1144028, 24246, 401, 9, 107, "Code",ExpressionUUID->"8643dbd0-4b8a-4fec-bb62-a3a5f5b41ff0"],
Cell[1144432, 24257, 1345, 44, 277, "Output",ExpressionUUID->"7faf3fa4-1ca5-404e-8df4-d6463adcd1e6"]
}, Open  ]],
Cell[1145792, 24304, 2637, 70, 339, "Code",ExpressionUUID->"14002319-ac6c-4994-947e-8660b47da812"],
Cell[CellGroupData[{
Cell[1148454, 24378, 1391, 32, 368, "Code",ExpressionUUID->"8000cf45-64fa-4118-be5d-d848b39ea6af"],
Cell[1149848, 24412, 532, 10, 51, "Output",ExpressionUUID->"0cd6e191-1d81-4cfd-a0f9-7e31e4a5307a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1150417, 24427, 267, 5, 107, "Code",ExpressionUUID->"6d4cda5c-50df-4890-8070-398e6562ba85"],
Cell[1150687, 24434, 861, 29, 622, "Print",ExpressionUUID->"53a67c11-5c55-46a6-aa1c-ecfdd35be501"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1151585, 24468, 321, 7, 107, "Code",ExpressionUUID->"31d85d5a-7272-47fd-a728-2d44fe93cfb5"],
Cell[1151909, 24477, 161, 2, 51, "Output",ExpressionUUID->"96ef66b4-1410-445b-8f0f-bb99c76a1c95"]
}, Open  ]],
Cell[1152085, 24482, 650, 17, 136, "Code",ExpressionUUID->"5e1a6a04-75fd-4e8a-8d41-d2872d26736c"],
Cell[CellGroupData[{
Cell[1152760, 24503, 772, 21, 107, "Code",ExpressionUUID->"2f7e7877-2c55-441f-a730-53edaf134889"],
Cell[CellGroupData[{
Cell[1153557, 24528, 140, 1, 38, "Echo",ExpressionUUID->"0c5db54c-aeec-456b-ab3a-036397b2eb1d"],
Cell[1153700, 24531, 140, 1, 38, "Echo",ExpressionUUID->"292e301d-5165-4e35-870d-92f0a34024a9"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1153889, 24538, 420, 10, 107, "Code",ExpressionUUID->"88d20ac6-34b8-43dd-b6aa-8315a53ab2d5"],
Cell[1154312, 24550, 1345, 44, 277, "Output",ExpressionUUID->"a5baca94-a6dd-4bfd-8ca6-9a21942f4d44"]
}, Open  ]],
Cell[1155672, 24597, 2637, 70, 339, "Code",ExpressionUUID->"da847d38-c419-4670-8674-1b95fd8176dd"],
Cell[CellGroupData[{
Cell[1158334, 24671, 739, 18, 165, "Code",ExpressionUUID->"ae907521-a4a8-4f9e-9565-0a0d5c74b893"],
Cell[1159076, 24691, 639, 14, 51, "Output",ExpressionUUID->"6cbb2768-a2c0-497a-8ff1-62ccaa31e42a"],
Cell[1159718, 24707, 972, 44, 1030, "Print",ExpressionUUID->"2653518d-cf06-4494-b61d-5339eee4fb68"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1160727, 24756, 772, 21, 107, "Code",ExpressionUUID->"adcd096a-3311-48ee-afe7-a602954f1e6c"],
Cell[1161502, 24779, 140, 1, 38, "Echo",ExpressionUUID->"17575ad7-914e-4120-a7e4-fba01dd80961"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1161679, 24785, 416, 10, 107, "Code",ExpressionUUID->"15ad29cd-22f8-4b03-942b-077626880127"],
Cell[1162098, 24797, 1610, 52, 385, "Output",ExpressionUUID->"62303194-5ad9-495b-970d-fd001c88d082"]
}, Open  ]],
Cell[1163723, 24852, 3666, 98, 456, "Code",ExpressionUUID->"b338d504-ef29-49a6-84d8-e570b99a29a4"],
Cell[CellGroupData[{
Cell[1167414, 24954, 978, 23, 223, "Code",ExpressionUUID->"be66d76f-c4fc-4202-b230-3eb35357ecdb"],
Cell[1168395, 24979, 631, 13, 51, "Output",ExpressionUUID->"dd5d3386-4fca-47d2-b6bf-21444e53c76c"],
Cell[1169029, 24994, 1687, 58, 1387, "Print",ExpressionUUID->"2921aebe-07ab-4e03-b60b-8c0b0e2c52a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1170753, 25057, 772, 21, 107, "Code",ExpressionUUID->"7c34a048-b265-489e-84ab-0a8ae37eb208"],
Cell[1171528, 25080, 140, 1, 38, "Echo",ExpressionUUID->"37193075-03fb-481d-a860-a40f5b327844"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1171705, 25086, 803, 19, 252, "Code",ExpressionUUID->"cd620fa6-05d9-4842-ba5c-736f59619fc5"],
Cell[1172511, 25107, 631, 13, 51, "Output",ExpressionUUID->"bd0dc2c7-a4f4-446b-af16-63a61ab98b1e"],
Cell[1173145, 25122, 2405, 91, 2229, "Print",ExpressionUUID->"93e3652b-ec46-4ae6-aaa5-175bd34eeacd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1175587, 25218, 647, 17, 107, "Code",ExpressionUUID->"017a2d52-e648-469e-a43a-3f583d3edfdf"],
Cell[1176237, 25237, 140, 1, 38, "Echo",ExpressionUUID->"be3ffa3a-ffdb-440f-aeed-24b81365515c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1176414, 25243, 1562, 39, 281, "Code",ExpressionUUID->"fa11f161-a0ff-4740-b38b-ee2b0e37d1e1"],
Cell[1177979, 25284, 631, 13, 51, "Output",ExpressionUUID->"0ffb0ba2-a43f-4dd3-9904-e2634aedf574"],
Cell[1178613, 25299, 2651, 95, 2280, "Print",ExpressionUUID->"28234444-4e06-49bf-a047-ae1835018798"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1181301, 25399, 647, 17, 107, "Code",ExpressionUUID->"66a8b93b-d3bf-4859-8e2f-c00fbd3cec1b"],
Cell[1181951, 25418, 140, 1, 38, "Echo",ExpressionUUID->"71d88fa1-5502-4cc0-a4eb-2e7cb2bbd004"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1182128, 25424, 225, 4, 107, "Code",ExpressionUUID->"c10a24da-20bd-4f8c-b774-0e0fdf2b7132"],
Cell[1182356, 25430, 107, 1, 51, "Output",ExpressionUUID->"d6b2a571-7b4b-475c-bba9-0fcb78aeb58b"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1182512, 25437, 176, 3, 60, "Section",ExpressionUUID->"2f4fbd75-74f8-46f4-bded-d3f5e498d5b4"],
Cell[1182691, 25442, 395, 9, 107, "Code",ExpressionUUID->"9dc2ef6f-ee04-46f2-9aa3-7bd068073ff2"],
Cell[CellGroupData[{
Cell[1183111, 25455, 342, 7, 107, "Code",ExpressionUUID->"be82783e-972e-461d-926a-89607d032697"],
Cell[1183456, 25464, 224, 4, 51, "Output",ExpressionUUID->"cc61c94c-aa62-42ad-af81-45d4f2ccb2ca"]
}, Open  ]],
Cell[1183695, 25471, 2856, 79, 572, "Code",ExpressionUUID->"f0b78cdb-2f40-4e95-a9da-49926e327138"],
Cell[1186554, 25552, 360, 9, 107, "Code",ExpressionUUID->"8b849f48-9b5f-4f6c-969c-bf2e10104f51"],
Cell[CellGroupData[{
Cell[1186939, 25565, 2653, 72, 427, "Code",ExpressionUUID->"e7c90de2-e34e-4f2a-a1c6-96f6ab9eef8e"],
Cell[CellGroupData[{
Cell[1189617, 25641, 290, 4, 65, "Echo",ExpressionUUID->"b45bb406-99bf-4c3a-8e85-c4d02f649614"],
Cell[1189910, 25647, 290, 4, 65, "Echo",ExpressionUUID->"3b19e178-1e43-44c5-a604-702eed558ea8"],
Cell[1190203, 25653, 290, 4, 65, "Echo",ExpressionUUID->"e7ec6515-9203-405c-a588-d5aedd5bcd6a"],
Cell[1190496, 25659, 290, 4, 65, "Echo",ExpressionUUID->"55403d0f-95a0-4793-bced-50e6b5585ae4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1190835, 25669, 416, 10, 107, "Code",ExpressionUUID->"56d89eec-a8cd-46a0-816f-3c63ab36544d"],
Cell[1191254, 25681, 785, 25, 125, "Output",ExpressionUUID->"64db66bc-bc01-44b1-a8d2-c7850baa0fbd"]
}, Open  ]],
Cell[1192054, 25709, 1155, 30, 165, "Code",ExpressionUUID->"b43c536f-5b1d-49ea-8f1a-63669fd24f79"],
Cell[CellGroupData[{
Cell[1193234, 25743, 3882, 84, 543, "Code",ExpressionUUID->"e6a1b08f-3434-4045-a8a1-3f5318b6afa3"],
Cell[1197119, 25829, 1258, 36, 177, "Output",ExpressionUUID->"d45f8243-7d4a-42ff-b652-62242ed75d68"]
}, Open  ]],
Cell[1198392, 25868, 260, 5, 77, "Code",ExpressionUUID->"1c46c8a9-365b-47c8-8baf-391ab987166a"],
Cell[1198655, 25875, 922, 21, 165, "Code",ExpressionUUID->"7696732c-b5bb-44ff-9032-ac4f9a161498"],
Cell[CellGroupData[{
Cell[1199602, 25900, 265, 5, 107, "Code",ExpressionUUID->"3c77fa22-4201-4462-b4d0-97f8f1159af1"],
Cell[1199870, 25907, 817, 34, 775, "Print",ExpressionUUID->"85152c4c-8044-4049-bc1d-b1e75e0527bc"]
}, Open  ]],
Cell[1200702, 25944, 461, 11, 107, "Code",ExpressionUUID->"d0b9a332-363c-4685-aded-7de4faf08953"],
Cell[CellGroupData[{
Cell[1201188, 25959, 677, 18, 107, "Code",ExpressionUUID->"5f9afbc0-d981-4fda-821a-45b061e8c199"],
Cell[1201868, 25979, 290, 4, 65, "Echo",ExpressionUUID->"b71f30eb-5723-459b-ab40-9c8efefb534e"]
}, Open  ]],
Cell[1202173, 25986, 840, 17, 136, "Code",ExpressionUUID->"8b16f74f-7c21-429f-a7f6-c27ede06949f"],
Cell[CellGroupData[{
Cell[1203038, 26007, 326, 7, 136, "Code",ExpressionUUID->"bc4f136b-91e5-4a8c-a301-3d6d8810e6c0"],
Cell[1203367, 26016, 147, 2, 51, "Output",ExpressionUUID->"423ca2fc-2348-4969-b1fe-9a34244b6915"]
}, Open  ]],
Cell[1203529, 26021, 252, 4, 77, "Code",ExpressionUUID->"556d14d5-f540-429f-8e89-24dd5b20d7d3"],
Cell[CellGroupData[{
Cell[1203806, 26029, 928, 23, 223, "Code",ExpressionUUID->"da35b4fb-649e-4665-9684-81b0bab0d2e1"],
Cell[1204737, 26054, 12650, 241, 91, "Output",ExpressionUUID->"ba6e256b-771a-4478-b9d4-886d2aabb4f9"]
}, Open  ]],
Cell[1217402, 26298, 1263, 30, 194, "Code",ExpressionUUID->"2ea9a447-8d97-4480-9378-371761da2c06"],
Cell[CellGroupData[{
Cell[1218690, 26332, 981, 23, 368, "Code",ExpressionUUID->"5076a675-18a8-4acb-baa8-2a4d871c0141"],
Cell[1219674, 26357, 26971, 495, 91, "Output",ExpressionUUID->"e59bfd4f-da16-4639-852d-00b17b4887af"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1246682, 26857, 1776, 48, 339, "Code",ExpressionUUID->"4535299b-ecff-42f0-a34f-d82d8f2ccc25"],
Cell[1248461, 26907, 317, 5, 51, "Output",ExpressionUUID->"131390c8-8b25-4c00-9292-600903985521"],
Cell[1248781, 26914, 316, 5, 51, "Output",ExpressionUUID->"b425cd7c-6e39-41d9-8083-6118630680d8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1249134, 26924, 303, 7, 107, "Code",ExpressionUUID->"cbb73834-fae5-49c2-83a0-0e58d0379e0d"],
Cell[1249440, 26933, 2462, 53, 179, "Output",ExpressionUUID->"0a5e3cc6-a536-4123-8432-ff1434286600"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1251939, 26991, 319, 7, 136, "Code",ExpressionUUID->"396c4391-1789-41ab-8d0a-ee7171f31e66"],
Cell[1252261, 27000, 107, 1, 51, "Output",ExpressionUUID->"af1fc740-8429-4a70-ab50-f9149ee54881"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1252417, 27007, 175, 3, 60, "Section",ExpressionUUID->"899c736d-916a-4082-82ae-3a57680dc7f4"],
Cell[1252595, 27012, 395, 9, 107, "Code",ExpressionUUID->"d31f6947-b360-4af5-acf8-a541ebf8ee2d"],
Cell[CellGroupData[{
Cell[1253015, 27025, 401, 9, 107, "Code",ExpressionUUID->"a0fa093c-e1bb-4c3a-853f-968c8b4c5c15"],
Cell[1253419, 27036, 224, 4, 51, "Output",ExpressionUUID->"1f8625c6-506f-4b5a-a7cd-ead7b5c8059a"]
}, Open  ]],
Cell[1253658, 27043, 7520, 208, 1124, "Code",ExpressionUUID->"83b9fee9-32c5-4175-bd7b-f2d40f9bae06"],
Cell[CellGroupData[{
Cell[1261203, 27255, 2653, 72, 427, "Code",ExpressionUUID->"7691b8d7-e36d-4ef9-b9e9-ab8e7ad8fc33"],
Cell[CellGroupData[{
Cell[1263881, 27331, 290, 4, 65, "Echo",ExpressionUUID->"e389110e-c5d0-45e7-a307-e02d938683c9"],
Cell[1264174, 27337, 290, 4, 65, "Echo",ExpressionUUID->"3bfa1d9a-a7a7-484d-a2f3-76873341bca7"],
Cell[1264467, 27343, 290, 4, 65, "Echo",ExpressionUUID->"5f73a5eb-27ee-4a77-a66b-14e4d5082e99"],
Cell[1264760, 27349, 290, 4, 65, "Echo",ExpressionUUID->"2d7a3c76-badd-4436-baae-67606c2a6328"],
Cell[1265053, 27355, 290, 4, 65, "Echo",ExpressionUUID->"e6f8ba50-cfc7-4efd-abaa-da0b9dfdf717"],
Cell[1265346, 27361, 290, 4, 65, "Echo",ExpressionUUID->"53c8f8e5-3f25-408c-a917-f57c7bad6be2"],
Cell[1265639, 27367, 290, 4, 65, "Echo",ExpressionUUID->"1751a3df-7787-4466-b27d-41beb20fd03e"],
Cell[1265932, 27373, 290, 4, 65, "Echo",ExpressionUUID->"7b74a311-dd33-4f65-b283-7467e7296d50"],
Cell[1266225, 27379, 290, 4, 65, "Echo",ExpressionUUID->"81029128-7c21-4b92-8636-fe9d7477db8a"],
Cell[1266518, 27385, 290, 4, 65, "Echo",ExpressionUUID->"e2529f53-a689-4238-9958-3b6c5ac76731"],
Cell[1266811, 27391, 290, 4, 65, "Echo",ExpressionUUID->"c86c9b26-9278-4540-be5e-5d2a33128b85"],
Cell[1267104, 27397, 290, 4, 65, "Echo",ExpressionUUID->"e27e42f7-03c9-49aa-8aef-60cd89c03984"]
}, Open  ]]
}, Closed]],
Cell[1267421, 27405, 10092, 212, 1287, "Code",ExpressionUUID->"86f139d4-7181-4bb8-9761-7a43ba7e7be4"],
Cell[CellGroupData[{
Cell[1277538, 27621, 423, 10, 107, "Code",ExpressionUUID->"bebdee65-8216-41e4-b4cb-d03735e946ab"],
Cell[1277964, 27633, 726, 23, 97, "Output",ExpressionUUID->"118fe450-fde4-4c4e-83c3-519dc5240d2b"]
}, Open  ]],
Cell[1278705, 27659, 750, 18, 136, "Code",ExpressionUUID->"6ea56666-3816-4bbf-b377-79a4cd56cbde"],
Cell[CellGroupData[{
Cell[1279480, 27681, 1187, 28, 223, "Code",ExpressionUUID->"1da988ac-236a-4972-bfb9-de1b2c17f189"],
Cell[1280670, 27711, 638, 8, 147, "Output",ExpressionUUID->"0c6f3b51-342a-4667-8e2e-d38a9ff0f57d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1281345, 27724, 297, 7, 107, "Code",ExpressionUUID->"8d22089f-1ba1-4d2e-98c1-61e123d16c81"],
Cell[1281645, 27733, 107, 1, 51, "Output",ExpressionUUID->"d594f0bd-5590-4d83-93a7-bf83c15e22c0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1281789, 27739, 526, 13, 107, "Code",ExpressionUUID->"92085ced-c029-4c35-a9ba-c3fd1063f354"],
Cell[1282318, 27754, 780, 30, 673, "Print",ExpressionUUID->"6dfe1f9b-5cf6-453e-a2c9-471152afc3d8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1283135, 27789, 205, 4, 107, "Code",ExpressionUUID->"451472dd-16b4-4aa2-a429-f776d9f7a4bd"],
Cell[1283343, 27795, 107, 1, 51, "Output",ExpressionUUID->"8f5fad19-d195-4581-9b10-ef0b81d793d8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1283487, 27801, 753, 19, 194, "Code",ExpressionUUID->"5608c9c0-9087-4be2-8efa-f74dd7a9b14a"],
Cell[1284243, 27822, 215, 4, 51, "Output",ExpressionUUID->"a1e9e7b3-7aff-4a32-8c9e-ae546da84cf2"],
Cell[1284461, 27828, 360, 7, 51, "Output",ExpressionUUID->"9ca0c064-4f6a-41cf-839e-24b2ba78c15e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1284858, 27840, 2386, 56, 746, "Code",ExpressionUUID->"f160b97f-d0cd-4cc6-8979-d066b7b5200f"],
Cell[1287247, 27898, 33204, 549, 568, "Output",ExpressionUUID->"94f47606-a96e-4bc5-9afd-87cea9514467"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1320488, 28452, 240, 5, 107, "Code",ExpressionUUID->"87e5b9d5-60b0-48ba-a9a9-c40364ca2c8a"],
Cell[1320731, 28459, 107, 1, 51, "Output",ExpressionUUID->"f7f1b0b1-3c2a-4e61-8233-00a2642828c4"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1320887, 28466, 172, 3, 60, "Section",ExpressionUUID->"3dc03641-feb6-4e72-9e38-f2760ed63500"],
Cell[1321062, 28471, 563, 13, 107, "Code",ExpressionUUID->"50db9177-b50b-45c7-9138-e010a54d7bab"],
Cell[1321628, 28486, 395, 9, 107, "Code",ExpressionUUID->"18494557-d865-4e52-9130-e33803dcc570"],
Cell[CellGroupData[{
Cell[1322048, 28499, 401, 9, 107, "Code",ExpressionUUID->"72b050aa-0cc9-4098-a635-e7e99f316eb3"],
Cell[1322452, 28510, 224, 4, 51, "Output",ExpressionUUID->"c9c9afb8-42bf-482a-8f4c-969b595df6b0"]
}, Open  ]],
Cell[1322691, 28517, 7520, 208, 1124, "Code",ExpressionUUID->"ac091aca-a6cf-4e2c-bf5c-81c8c1e55726"],
Cell[CellGroupData[{
Cell[1330236, 28729, 3456, 95, 601, "Code",ExpressionUUID->"53c91f25-489b-47ba-938f-e0cf122cc84f"],
Cell[CellGroupData[{
Cell[1333717, 28828, 290, 4, 65, "Echo",ExpressionUUID->"33e2e65a-72d3-47f8-ae4a-aceabc8e5a04"],
Cell[1334010, 28834, 290, 4, 65, "Echo",ExpressionUUID->"bc47d612-fa30-4c8e-a4ce-c5516c4041ac"],
Cell[1334303, 28840, 290, 4, 65, "Echo",ExpressionUUID->"496805fc-9748-4d04-96b2-032e39dc288b"],
Cell[1334596, 28846, 290, 4, 65, "Echo",ExpressionUUID->"ce0ac77f-62d8-4de2-98db-ef89b71b7cb4"],
Cell[1334889, 28852, 290, 4, 65, "Echo",ExpressionUUID->"b2bef10a-c445-4c85-b6c5-efe08bb4fb86"],
Cell[1335182, 28858, 290, 4, 65, "Echo",ExpressionUUID->"aef5d51b-431b-4d63-83d6-6bbe60858649"],
Cell[1335475, 28864, 290, 4, 65, "Echo",ExpressionUUID->"529e1efc-4037-42fb-b287-67644d792059"],
Cell[1335768, 28870, 290, 4, 65, "Echo",ExpressionUUID->"2e7e420c-c65d-4633-a678-4fde983ca433"],
Cell[1336061, 28876, 290, 4, 65, "Echo",ExpressionUUID->"ef03201e-64a5-4ab8-98c6-893d74f97203"],
Cell[1336354, 28882, 290, 4, 65, "Echo",ExpressionUUID->"28de747b-8116-45d8-863a-b2ba1301712c"],
Cell[1336647, 28888, 290, 4, 65, "Echo",ExpressionUUID->"2a6ba204-e4cb-4980-8508-fb410715fbfc"],
Cell[1336940, 28894, 290, 4, 65, "Echo",ExpressionUUID->"080d601f-3e6c-4479-8927-5c69b546a331"]
}, Open  ]]
}, Closed]],
Cell[1337257, 28902, 11284, 242, 1433, "Code",ExpressionUUID->"e47fac54-4c39-4f99-8e3a-51b28bf87acc"],
Cell[CellGroupData[{
Cell[1348566, 29148, 677, 18, 107, "Code",ExpressionUUID->"80e2b9ab-ee0f-4295-a9b7-c41ed06ca8d5"],
Cell[1349246, 29168, 290, 4, 65, "Echo",ExpressionUUID->"de8b1f25-1be8-40a2-b42f-d5df8b7b280e"]
}, Closed]],
Cell[CellGroupData[{
Cell[1349573, 29177, 326, 7, 125, "Code",ExpressionUUID->"7797c19a-16a6-4a8c-8548-7db2cd144edb"],
Cell[1349902, 29186, 147, 2, 51, "Output",ExpressionUUID->"76160801-53fc-425e-be82-8b83bc3db191"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1350086, 29193, 928, 23, 223, "Code",ExpressionUUID->"e0952044-7981-4209-a7c4-cbdadf9efe3d"],
Cell[1351017, 29218, 12650, 241, 91, "Output",ExpressionUUID->"f57b24b7-7d49-48d2-8312-9a725bc9d3cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1363704, 29464, 981, 23, 368, "Code",ExpressionUUID->"46b93c4d-6373-4def-80e9-52e83a9db4b0"],
Cell[1364688, 29489, 26971, 495, 91, "Output",ExpressionUUID->"3b65c071-3f02-4c90-9037-178c3fd78a7f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1391696, 29989, 859, 21, 165, "Code",ExpressionUUID->"7de678b2-48eb-4e96-b65b-521580b2a5e8"],
Cell[1392558, 30012, 327, 6, 51, "Output",ExpressionUUID->"6fd509d2-6ff1-46ac-bb1e-48ab59e6fcfa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1392922, 30023, 228, 5, 107, "Code",ExpressionUUID->"9e790923-b712-4c6e-af8b-10d884209c4b"],
Cell[1393153, 30030, 693, 12, 83, "Output",ExpressionUUID->"2fb607a8-1cf9-4fba-aa80-ffe940a49610"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1393883, 30047, 2030, 53, 252, "Code",ExpressionUUID->"5df476e6-f896-4e9e-9be1-4c6c81234016"],
Cell[1395916, 30102, 34118, 564, 326, "Output",ExpressionUUID->"853d325d-120b-49e8-b0ef-7577f9bd7327"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1430071, 30671, 238, 5, 107, "Code",ExpressionUUID->"42df45a3-9de2-41f7-bbcd-a63c5aa671f8"],
Cell[1430312, 30678, 107, 1, 51, "Output",ExpressionUUID->"3ffb5402-e47f-425c-b255-4eda55a40ee5"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1430468, 30685, 182, 3, 60, "Section",ExpressionUUID->"937683f3-963d-4303-b6ef-cf1f99316889"],
Cell[1430653, 30690, 227, 5, 77, "Code",ExpressionUUID->"12b27ee8-573f-4e94-85fc-13290f57cf25"],
Cell[1430883, 30697, 395, 9, 107, "Code",ExpressionUUID->"b5b92941-87e0-4469-9157-d8e9fdf86b6f"],
Cell[CellGroupData[{
Cell[1431303, 30710, 401, 9, 107, "Code",ExpressionUUID->"8788e035-402a-4168-a137-79e611d4c0d5"],
Cell[1431707, 30721, 224, 4, 51, "Output",ExpressionUUID->"759d3acb-697b-44ab-a438-698a40553408"]
}, Open  ]],
Cell[1431946, 30728, 3027, 84, 659, "Code",ExpressionUUID->"8aa8c52d-b731-4505-aa93-90be5356fdf9"],
Cell[CellGroupData[{
Cell[1434998, 30816, 5223, 139, 804, "Code",ExpressionUUID->"e2f32c1b-4a75-4632-acd2-1de411ed27a6"],
Cell[CellGroupData[{
Cell[1440246, 30959, 290, 4, 65, "Echo",ExpressionUUID->"8eabc0cc-ef78-4a83-9a0c-f149d53336ec"],
Cell[1440539, 30965, 290, 4, 65, "Echo",ExpressionUUID->"98400168-87fe-4591-bb21-39656ca1c4ad"],
Cell[1440832, 30971, 290, 4, 65, "Echo",ExpressionUUID->"37f5cf8d-b77d-46ee-840a-920abca1e478"],
Cell[1441125, 30977, 290, 4, 65, "Echo",ExpressionUUID->"b198b474-53b7-4cf3-a0be-23c19d47b5be"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1441464, 30987, 3255, 80, 572, "Code",ExpressionUUID->"1d4c2c1f-e962-4dd2-8919-5876d7380fb8"],
Cell[1444722, 31069, 860, 17, 115, "Output",ExpressionUUID->"19c93b17-0520-4f3b-9476-8afcf4e88eff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1445619, 31091, 677, 18, 107, "Code",ExpressionUUID->"789ffc25-5ffc-4f23-be39-d920a425f479"],
Cell[1446299, 31111, 290, 4, 65, "Echo",ExpressionUUID->"d5d8ab6a-661e-438f-a540-98003ad57a39"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1446626, 31120, 326, 7, 136, "Code",ExpressionUUID->"84f52d49-de48-435a-9572-072a3ecda406"],
Cell[1446955, 31129, 147, 2, 51, "Output",ExpressionUUID->"0e9d4cf6-605c-4f95-aa42-000e7f99933c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1447139, 31136, 928, 23, 223, "Code",ExpressionUUID->"0ddd939f-d927-4665-ae90-f9e61c8c9851"],
Cell[1448070, 31161, 12650, 241, 91, "Output",ExpressionUUID->"36a6c01d-3a2b-4fa6-9f4c-e9dd407beced"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1460757, 31407, 981, 23, 368, "Code",ExpressionUUID->"7d6e65da-cd8d-4946-a471-e28e4a4744e9"],
Cell[1461741, 31432, 26971, 495, 91, "Output",ExpressionUUID->"05b12570-2f8a-4852-add5-39623960b202"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1488749, 31932, 865, 21, 165, "Code",ExpressionUUID->"a48aa5bf-80a5-4433-8af2-23c80ce59ca1"],
Cell[1489617, 31955, 233, 5, 51, "Output",ExpressionUUID->"dcb5875a-688d-4526-a4db-d7625d1385ae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1489887, 31965, 483, 13, 136, "Code",ExpressionUUID->"ca8f98b3-4b83-4dee-aeff-45825e765a99"],
Cell[1490373, 31980, 197, 4, 54, "Output",ExpressionUUID->"9b151621-9b7d-4d43-ab07-3c58c72126a7"],
Cell[1490573, 31986, 130, 1, 51, "Output",ExpressionUUID->"cf0eef17-dde6-4150-86f2-2b9f7be99764"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1490740, 31992, 238, 5, 107, "Code",ExpressionUUID->"59a19b31-44f1-4951-a8c4-e0a27a2f7c9b"],
Cell[1490981, 31999, 107, 1, 51, "Output",ExpressionUUID->"02f2f3b9-b2ed-4624-8f6d-ba2e3d5d0501"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1491137, 32006, 166, 3, 60, "Section",ExpressionUUID->"56b64f2d-e23e-498f-94a2-250c30683fc8"],
Cell[1491306, 32011, 563, 14, 107, "Code",ExpressionUUID->"b801b95c-6c8a-45d2-ae6b-fc1ce8b405e1"],
Cell[1491872, 32027, 395, 9, 107, "Code",ExpressionUUID->"48335d91-d9da-4016-a322-6ab141f66b38"],
Cell[CellGroupData[{
Cell[1492292, 32040, 401, 9, 107, "Code",ExpressionUUID->"cf601838-b851-41ba-9359-611f2af49296"],
Cell[1492696, 32051, 224, 4, 51, "Output",ExpressionUUID->"e4404e61-2ddb-4611-888c-86e6cac1ac6f"]
}, Open  ]],
Cell[1492935, 32058, 2365, 70, 456, "Code",ExpressionUUID->"a151469c-c2b2-4295-a023-818a46fb9170"],
Cell[CellGroupData[{
Cell[1495325, 32132, 3833, 107, 659, "Code",ExpressionUUID->"0c94734f-7afc-403c-98d6-eb53e8a02f4d"],
Cell[1499161, 32241, 320, 6, 51, "Output",ExpressionUUID->"d2ea85a0-526a-491a-9873-3f0d0a28c748"]
}, Open  ]],
Cell[1499496, 32250, 6252, 166, 1124, "Code",ExpressionUUID->"31bdcf7a-d762-4f52-b027-4879193e0305"],
Cell[CellGroupData[{
Cell[1505773, 32420, 8409, 202, 1473, "Code",ExpressionUUID->"5a1de97d-39af-4191-ae6e-997e09b487cd"],
Cell[1514185, 32624, 320, 6, 51, "Output",ExpressionUUID->"4ae02920-9b73-411f-b3ce-264d30095ac9"],
Cell[1514508, 32632, 326, 7, 51, "Output",ExpressionUUID->"4fa466a3-4cf4-426f-abb8-9594d602853a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1514871, 32644, 12553, 280, 2083, "Code",ExpressionUUID->"c903d3ac-2727-45a2-9069-0307183d508c"],
Cell[1527427, 32926, 320, 6, 51, "Output",ExpressionUUID->"8ee18e36-3809-477e-be97-f720f304a0e3"],
Cell[1527750, 32934, 326, 7, 51, "Output",ExpressionUUID->"2dc5dcd6-d614-436f-8595-948835072c59"],
Cell[1528079, 32943, 321, 6, 51, "Output",ExpressionUUID->"4c2071d6-55c1-423a-9aa9-018a2b076bc5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1528437, 32954, 12002, 267, 2112, "Code",ExpressionUUID->"ddc38487-7bf7-48d1-aeba-f91add4b9d23"],
Cell[1540442, 33223, 324, 7, 51, "Output",ExpressionUUID->"78a34710-9e56-4455-82c0-678e2eaf60cb"],
Cell[1540769, 33232, 330, 8, 51, "Output",ExpressionUUID->"80e33954-1de5-4a12-aa65-3fd966c7715f"],
Cell[1541102, 33242, 325, 7, 51, "Output",ExpressionUUID->"dac51e21-b499-4650-a776-a613ee582f57"],
Cell[1541430, 33251, 330, 8, 51, "Output",ExpressionUUID->"4575c1cd-5112-45bb-a327-f88b9a770141"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1541797, 33264, 522, 12, 194, "Code",ExpressionUUID->"f48abd25-b8e4-46e1-8315-7ba59d503173"],
Cell[1542322, 33278, 324, 7, 51, "Output",ExpressionUUID->"6558c12b-2477-4097-b9f2-ff0de5b35c71"],
Cell[1542649, 33287, 330, 8, 51, "Output",ExpressionUUID->"5d621dcd-7ef4-4e2d-8009-7d3601be969d"],
Cell[1542982, 33297, 325, 7, 51, "Output",ExpressionUUID->"46c3bc8e-bb57-4af0-b4d1-426e015c3e08"],
Cell[1543310, 33306, 330, 8, 51, "Output",ExpressionUUID->"12110b91-53c3-48f6-87d7-3caeeafab80c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1543677, 33319, 1200, 28, 281, "Code",ExpressionUUID->"e02d8af9-fd41-411f-ae2e-7027af1c947b"],
Cell[1544880, 33349, 22752, 378, 271, "Output",ExpressionUUID->"95db4c64-2cc7-4b99-88c1-01b3ca7d52f8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1567669, 33732, 1010, 30, 194, "Code",ExpressionUUID->"36df1f02-b9a2-40c8-8ccf-d01cd695fb8d"],
Cell[1568682, 33764, 181, 4, 51, "Output",ExpressionUUID->"bfaef45f-6b87-406e-bc00-e4945b009208"],
Cell[1568866, 33770, 182, 4, 51, "Output",ExpressionUUID->"60b84afd-dcff-41a9-8225-1a9452e3372d"],
Cell[1569051, 33776, 181, 4, 51, "Output",ExpressionUUID->"603da4d1-1972-4987-9e3d-94023274f994"],
Cell[1569235, 33782, 181, 4, 51, "Output",ExpressionUUID->"c93ca92c-d4a7-4125-9f89-6edb5e91fb6b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1569453, 33791, 928, 27, 223, "Code",ExpressionUUID->"2dc99e48-b474-454b-87cc-6c1c07faad58"],
Cell[1570384, 33820, 182, 4, 51, "Output",ExpressionUUID->"d4c69f0a-0d40-42fe-9d93-b56b1eca040d"],
Cell[1570569, 33826, 181, 4, 51, "Output",ExpressionUUID->"c313f79c-7c8c-45c8-bcd9-3f554512301d"],
Cell[1570753, 33832, 182, 4, 51, "Output",ExpressionUUID->"2da0a607-ce8c-46b4-a963-6a3d2c382ac5"],
Cell[1570938, 33838, 182, 4, 51, "Output",ExpressionUUID->"62801899-0202-4ac3-8561-a477eb619f66"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1571157, 33847, 242, 6, 107, "Code",ExpressionUUID->"856438f8-552a-4cd4-8907-4f0c83b95a27"],
Cell[1571402, 33855, 111, 2, 51, "Output",ExpressionUUID->"be4be298-1ec9-4b73-9076-a2278600ac2f"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1571562, 33863, 184, 3, 60, "Section",ExpressionUUID->"2c2e247e-0940-4d02-a120-047a3faa6b45"],
Cell[1571749, 33868, 395, 9, 107, "Code",ExpressionUUID->"d14046aa-c524-4d67-a83c-cd27973b7e17"],
Cell[CellGroupData[{
Cell[1572169, 33881, 406, 9, 107, "Code",ExpressionUUID->"0e9397ab-f578-450a-92ac-8c9f6dcca00b"],
Cell[1572578, 33892, 229, 4, 51, "Output",ExpressionUUID->"3a85fb01-3ea1-406d-b527-aef863390218"]
}, Open  ]],
Cell[1572822, 33899, 2511, 74, 456, "Code",ExpressionUUID->"e835b9a3-78d9-4f9b-a750-b8bf95b0b72a"],
Cell[1575336, 33975, 6252, 166, 1124, "Code",ExpressionUUID->"9233cd3a-450f-4deb-b196-ce6162c1e46d"],
Cell[1581591, 34143, 11739, 258, 1967, "Code",ExpressionUUID->"33717e0a-3866-4ffe-8012-25a7556348d3"],
Cell[CellGroupData[{
Cell[1593355, 34405, 518, 14, 136, "Code",ExpressionUUID->"4f0ccb28-3b33-4a07-b470-743842d8116c"],
Cell[1593876, 34421, 225, 5, 51, "Output",ExpressionUUID->"a404f549-f509-46b9-8fd4-7ba38291437a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1594138, 34431, 412, 10, 107, "Code",ExpressionUUID->"03eade4a-51df-4b6a-b7fc-1d893a77fd11"],
Cell[1594553, 34443, 225, 5, 51, "Output",ExpressionUUID->"6a17b574-10be-427f-b38b-794aca50ce09"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1594815, 34453, 1050, 29, 165, "Code",ExpressionUUID->"33422b2e-06f5-4df7-b3a0-ed8a39d437ba"],
Cell[1595868, 34484, 979, 28, 71, "Output",ExpressionUUID->"709647c0-4663-4867-b10b-65ee05297bc5"],
Cell[1596850, 34514, 971, 26, 71, "Output",ExpressionUUID->"438f089d-cf7f-48c1-9d6b-b878673e7073"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1597858, 34545, 1801, 48, 136, "Code",ExpressionUUID->"7352b41d-0cc3-4261-aa67-665832482ea6"],
Cell[1599662, 34595, 211, 3, 51, "Output",ExpressionUUID->"bfff9601-40a2-49b8-a593-11a24d5b869b"],
Cell[1599876, 34600, 210, 3, 51, "Output",ExpressionUUID->"3757d61b-5b8b-4115-a4d3-2d1281b61de7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1600123, 34608, 331, 8, 107, "Code",ExpressionUUID->"71190b83-d869-4c38-8cd6-ce4b28ff1b85"],
Cell[1600457, 34618, 107, 1, 51, "Output",ExpressionUUID->"ffb19594-d050-458b-8ae7-20e383de8ead"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1600601, 34624, 369, 10, 107, "Code",ExpressionUUID->"e317fefb-35a8-434a-a0e3-8a7e8db3b897"],
Cell[1600973, 34636, 172, 3, 51, "Output",ExpressionUUID->"bc9f41c0-6afe-4233-a386-e7c3eee20199"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1601182, 34644, 1631, 38, 310, "Code",ExpressionUUID->"862f7b88-b769-45c1-909f-e01776c7f550"],
Cell[1602816, 34684, 683, 11, 83, "Output",ExpressionUUID->"0fa5bb3a-c2d5-4be8-be8f-31abafb3cce1"],
Cell[1603502, 34697, 644, 8, 147, "Output",ExpressionUUID->"ae4944da-9ea5-42c4-aa1d-8946a5efdc38"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1604183, 34710, 205, 4, 107, "Code",ExpressionUUID->"3f7540e3-549a-4f03-9ec4-a197d94810dc"],
Cell[1604391, 34716, 107, 1, 51, "Output",ExpressionUUID->"664badc1-d0e3-4b9f-acd0-7464264e1a3d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1604535, 34722, 223, 4, 107, "Code",ExpressionUUID->"a3ced474-26a9-4421-9461-77e3da00976c"],
Cell[1604761, 34728, 107, 1, 51, "Output",ExpressionUUID->"07c2aed7-26fa-4714-8c1b-65a72e64020e"]
}, Open  ]],
Cell[1604883, 34732, 358, 9, 107, "Code",ExpressionUUID->"766aab75-816a-473a-bc59-2ba0a552acab"],
Cell[CellGroupData[{
Cell[1605266, 34745, 6738, 182, 1124, "Code",ExpressionUUID->"580e7ef7-bbce-4898-862b-41c216b06763"],
Cell[1612007, 34929, 27556, 457, 487, "Output",ExpressionUUID->"5ba85579-4397-41f3-90ac-e86de30cf237"],
Cell[1639566, 35388, 278, 5, 51, "Output",ExpressionUUID->"e8387dcd-ffee-4931-8337-5d01bdb21c5b"],
Cell[1639847, 35395, 278, 5, 51, "Output",ExpressionUUID->"d0843a29-1ce8-4372-83b8-4e2d3a8d34c7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1640162, 35405, 2225, 55, 601, "Code",ExpressionUUID->"e8ed3448-81e1-4685-bba0-c47470f51301"],
Cell[1642390, 35462, 24189, 401, 487, "Output",ExpressionUUID->"44fa371f-da25-4beb-938e-1882b8e06d15"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1666616, 35868, 8239, 223, 1211, "Code",ExpressionUUID->"bbd31d8f-4422-44fc-ae3b-e39dcea8f13b"],
Cell[1674858, 36093, 26454, 439, 487, "Output",ExpressionUUID->"c9da8eb7-fe89-4d2c-81c4-77a256255397"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1701349, 36537, 260, 7, 107, "Code",ExpressionUUID->"36d4fd5a-6598-4e80-b24f-07c87ff3084e"],
Cell[1701612, 36546, 111, 2, 51, "Output",ExpressionUUID->"ed4d9f61-f05d-4b03-8f71-a8fa34e87977"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1701772, 36554, 207, 5, 60, "Section",ExpressionUUID->"870ac6b5-31c7-4a93-b027-95ed2b3d8ef1"],
Cell[1701982, 36561, 395, 9, 107, "Code",ExpressionUUID->"631764f4-94be-4149-8a80-6afef3467228"],
Cell[CellGroupData[{
Cell[1702402, 36574, 2105, 54, 456, "Code",ExpressionUUID->"bcdf311c-9978-4a7c-a3e7-7662b72324ff"],
Cell[1704510, 36630, 287, 6, 51, "Output",ExpressionUUID->"8810c322-3d43-4268-9071-f8a56859e4c4"]
}, Open  ]],
Cell[1704812, 36639, 2645, 78, 456, "Code",ExpressionUUID->"a328feb4-89d5-4a33-8beb-6e98a90d0e56"],
Cell[1707460, 36719, 6252, 166, 1124, "Code",ExpressionUUID->"3f200751-1fd5-4a03-986d-bec1e2d3f1b3"],
Cell[1713715, 36887, 13675, 311, 1967, "Code",ExpressionUUID->"99037c03-9502-451f-b478-6900ff14b6c2"],
Cell[CellGroupData[{
Cell[1727415, 37202, 583, 16, 136, "Code",ExpressionUUID->"c5bdbdcf-3d7d-4d8e-8910-454f029a65c6"],
Cell[1728001, 37220, 397, 9, 51, "Output",ExpressionUUID->"df93da44-a068-4d94-ade7-9c904f945dcc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1728435, 37234, 487, 13, 107, "Code",ExpressionUUID->"d3e52513-817c-40f6-9d7f-a92cedb17a83"],
Cell[1728925, 37249, 397, 9, 51, "Output",ExpressionUUID->"f1225507-18b7-4e70-975e-7e6bac58f24c"]
}, Open  ]],
Cell[1729337, 37261, 403, 10, 107, "Code",ExpressionUUID->"0d854808-cf5b-4c8a-8dd2-76ea9b64bf35"],
Cell[1729743, 37273, 1779, 48, 136, "Code",ExpressionUUID->"fd73dd21-4c7f-478d-b3cf-327f55e27b6b"],
Cell[CellGroupData[{
Cell[1731547, 37325, 1595, 44, 339, "Code",ExpressionUUID->"9f078bb0-8d20-4ff8-98c2-6271fd03bcee"],
Cell[1733145, 37371, 263, 4, 51, "Output",ExpressionUUID->"d44e9ff5-fea3-4083-a31c-affa8646f58e"],
Cell[1733411, 37377, 258, 4, 51, "Output",ExpressionUUID->"987d8e6b-658d-468c-a7c3-7ce315796d70"],
Cell[1733672, 37383, 217, 5, 51, "Output",ExpressionUUID->"83f32bb5-27fb-40c1-bef6-e1d541d2b00f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1733926, 37393, 2628, 70, 427, "Code",ExpressionUUID->"d6da3a28-dfe5-486c-924a-83cd40e91257"],
Cell[1736557, 37465, 583, 12, 51, "Output",ExpressionUUID->"bd0b5d1f-8bb7-40f9-bd92-bb66bf31e00a"],
Cell[1737143, 37479, 583, 12, 51, "Output",ExpressionUUID->"1cf664cf-36f1-4311-bcfb-3111db6c960e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1737763, 37496, 1358, 38, 281, "Code",ExpressionUUID->"9d4a7d92-94f5-40ac-aa4d-cc1119635e1d"],
Cell[1739124, 37536, 260, 5, 51, "Output",ExpressionUUID->"fb4ad1ed-29fd-4cf5-88b9-623a102ef2f8"],
Cell[1739387, 37543, 259, 5, 51, "Output",ExpressionUUID->"4df9849e-8e83-405c-b0cd-4532c6b867c8"],
Cell[1739649, 37550, 207, 4, 51, "Output",ExpressionUUID->"40c6b92c-d0f0-44a6-9507-77b175c60db0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1739893, 37559, 2849, 78, 543, "Code",ExpressionUUID->"76637d58-4b04-4043-8d05-7ce9de328ba9"],
Cell[1742745, 37639, 208, 3, 51, "Output",ExpressionUUID->"6277f98e-1647-4831-8eae-b8de940bf6c5"],
Cell[1742956, 37644, 213, 3, 51, "Output",ExpressionUUID->"696644b9-708b-41c6-8b2f-31ace5f9662c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1743206, 37652, 238, 5, 107, "Code",ExpressionUUID->"7afb1760-6b42-47b4-832a-cbc923d68fd9"],
Cell[1743447, 37659, 107, 1, 51, "Output",ExpressionUUID->"4892bc48-c037-46d7-a35f-e86f8023936a"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1743603, 37666, 187, 3, 60, "Section",ExpressionUUID->"c477077d-3a08-430f-9a76-d97212815a35"],
Cell[1743793, 37671, 395, 9, 107, "Code",ExpressionUUID->"16e152b3-6093-4539-98b5-3bdf0f9253d0"],
Cell[CellGroupData[{
Cell[1744213, 37684, 401, 9, 107, "Code",ExpressionUUID->"0036e304-5017-43f7-a49c-bf3a00e23525"],
Cell[1744617, 37695, 224, 4, 51, "Output",ExpressionUUID->"3e54f917-24da-41c3-8eda-a7639ff1b0dd"]
}, Open  ]],
Cell[1744856, 37702, 2365, 70, 456, "Code",ExpressionUUID->"da7d1be5-ab14-4968-9984-0cdfbd52f208"],
Cell[1747224, 37774, 6281, 167, 1124, "Code",ExpressionUUID->"d50edb86-1069-4fd6-8edb-10eda3e68183"],
Cell[1753508, 37943, 12085, 271, 1938, "Code",ExpressionUUID->"8275f512-b316-4411-a0dc-e17e2cdd1ce4"],
Cell[1765596, 38216, 1063, 28, 252, "Code",ExpressionUUID->"05006c31-1dc9-44d7-b7f1-64de8fb50c25"],
Cell[CellGroupData[{
Cell[1766684, 38248, 3636, 96, 572, "Code",ExpressionUUID->"d9f249c5-2306-46ef-a87b-b00f58a18fbb"],
Cell[1770323, 38346, 190465, 3127, 862, "Output",ExpressionUUID->"a00d597d-90ef-44b6-aac5-5aeef37a6559"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1960825, 41478, 238, 5, 107, "Code",ExpressionUUID->"75dc0fc0-a3b9-4fbc-ad63-909eb373ef24"],
Cell[1961066, 41485, 107, 1, 51, "Output",ExpressionUUID->"0d2ad96f-23c5-4a24-a653-7ec92f4f06f1"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1961222, 41492, 183, 3, 60, "Section",ExpressionUUID->"2a1ae4a6-964c-4e65-8ad2-8e914ff4c495"],
Cell[1961408, 41497, 395, 9, 107, "Code",ExpressionUUID->"7ee79660-5658-4539-83af-e34b579a61ad"],
Cell[CellGroupData[{
Cell[1961828, 41510, 401, 9, 107, "Code",ExpressionUUID->"fcd53689-2d83-433c-8c4c-728d8c48d74d"],
Cell[1962232, 41521, 224, 4, 51, "Output",ExpressionUUID->"4ba88844-2945-4672-885b-24a94e827372"]
}, Open  ]],
Cell[1962471, 41528, 2454, 73, 456, "Code",ExpressionUUID->"3cb04d6b-5b6c-4299-b182-5e0b9f2947f5"],
Cell[1964928, 41603, 6281, 167, 1124, "Code",ExpressionUUID->"ebe52b31-84e0-489f-9459-e1f97589bdd5"],
Cell[1971212, 41772, 12211, 271, 1938, "Code",ExpressionUUID->"7b3a1df3-dba0-4b8d-b7e3-feeecbee93cc"],
Cell[CellGroupData[{
Cell[1983448, 42047, 419, 11, 107, "Code",ExpressionUUID->"63fe7a5a-4064-42c2-9d4b-86d8ee35adc4"],
Cell[1983870, 42060, 207, 4, 51, "Output",ExpressionUUID->"cadbffac-1d3c-46d8-a574-077f6f18d8f0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1984114, 42069, 3550, 92, 862, "Code",ExpressionUUID->"902bedc0-df1c-4276-aff8-5f0835ab0551"],
Cell[1987667, 42163, 110, 1, 51, "Output",ExpressionUUID->"238f0818-649b-4da7-916c-3d2b48508dcd"],
Cell[1987780, 42166, 110, 1, 51, "Output",ExpressionUUID->"ab039598-7823-4663-a1d6-546b1e43d77f"],
Cell[1987893, 42169, 118871, 1953, 751, "Output",ExpressionUUID->"515b4e42-e20b-4cae-b002-324b45a4772c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2106801, 44127, 7118, 180, 1473, "Code",ExpressionUUID->"144d6cab-17ca-41cd-84dd-0e171ab83b3c"],
Cell[2113922, 44309, 149782, 2460, 751, "Output",ExpressionUUID->"9fe848c4-2346-49fa-9df4-5007519c87d2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2263741, 46774, 1477, 41, 194, "Code",ExpressionUUID->"2e69f907-63ed-48ec-92d6-2059d525f82b"],
Cell[2265221, 46817, 696, 11, 83, "Output",ExpressionUUID->"869058d7-2bf8-41bf-a22b-b11f72edde42"],
Cell[2265920, 46830, 686, 11, 83, "Output",ExpressionUUID->"c0a58d6d-8440-42d5-8d3d-3c62599fa1cd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2266643, 46846, 598, 12, 136, "Code",ExpressionUUID->"48a62aef-bd9f-46f5-9dad-2b34d62795d5"],
Cell[2267244, 46860, 126, 1, 51, "Output",ExpressionUUID->"33182b02-927c-46a1-b0cf-cfcfd100ea6b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2267407, 46866, 1999, 45, 659, "Code",ExpressionUUID->"e5b24831-1ed0-4197-8b7d-b71bc6fa8c00"],
Cell[2269409, 46913, 108, 1, 51, "Output",ExpressionUUID->"2697558e-1898-4274-8937-545eabd13a1b"],
Cell[2269520, 46916, 108, 1, 51, "Output",ExpressionUUID->"26089288-82ed-46bd-8c95-372bd3bc81cd"],
Cell[2269631, 46919, 166831, 2740, 750, "Output",ExpressionUUID->"c2966222-03f1-4c49-a03a-ea125a3198fc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2436499, 49664, 2395, 56, 397, "Code",ExpressionUUID->"666c9cf2-552d-4b83-b876-375680395163"],
Cell[2438897, 49722, 164174, 2696, 751, "Output",ExpressionUUID->"07e4b995-0f26-4e22-90a4-a6ed31a411e0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2603108, 52423, 242, 6, 107, "Code",ExpressionUUID->"f64b37aa-d476-467a-8cc1-63f490a0eea0"],
Cell[2603353, 52431, 111, 2, 51, "Output",ExpressionUUID->"dd01d6cc-490c-4ee0-ad2e-c25e9637bace"]
}, Open  ]]
}, Closed]]
}
]
*)

